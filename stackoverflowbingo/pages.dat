[Thanks to Brian Pelton for the transcript!]
[Joel Spolsky and Jeff Atwood chat about stackoverflow.com.]

Spolsky:??? We are on the air and you’re listening to the very first episode of what we hope will become a weekly podcast.
Do we have a name for this podcast yet?
Atwood:??? We do not.
Spolsky:??? We do not have a name.? Okay.? We'll get you a name next week.
Coming to you from the bright lights of New York, New York, I'm Joel Spolsky.
Atwood:??? And from sunny El Cerrito, I'm Jeff Atwood.
Spolsky:??? Jeff Atwood, how are you doing today?
Atwood:??? Good.
Spolsky:??? Okay.
Spolsky:??? This is our first podcast.
Atwood:??? Yeah. It’s exciting.
Kind of weird to have an audience now.
Spolsky:??? Yeah, we have an audience of zero. 
No, my dad will listen to this.
Atwood:??? Yeah.
Spolsky:??? Do we want to tell the people what we're doing here?
Atwood:??? Sure.? So, we're building a website.? One of the reasons I want to do this is because I kept getting a lot of pressure on my site.? I know on Joel's blog, he doesn't really have comments - but you have a separate discussion area, right?
Spolsky:??? Yeah.
Atwood:??? I've never really had that; I just have your traditional blog comments.? Those work well, but they don't really scale to the level that I'm seeing now.? And I also want to go in a slightly different direction.
Spolsky:??? They work good for like 20 people.
Atwood:??? Yeah, people ask me, “Who reads 250 comments?”? The answer is, well I have to read them all.
Spolsky:??? Um, hmm.
Atwood:??? Because it's my site and I feel like it’s kind of rude if I don't read all the comments.? I'm not really sure anyone else does.? So I wanted to harness some of that energy and maybe create some type of developer community site where rather than just randomly commenting on things, we could actually build things that are actually useful to people, right?? Not that blog comments aren't useful, but...
Spolsky:??? No, I would pretty much go so far as to say blog comments are not useful.
Atwood:??? I don't entirely agree with that, but it’s a question of signal-to-noise.
Spolsky:??? Yeah, that's true.
Atwood:??? I certainly think a lot of them are pretty useful, in particular when you throw in a rating-type system like Digg.? I think then the cream rises to the top pretty rapidly.
Spolsky:??? So, what we're trying to get here, we could say, a place where you can ask questions, technical questions since we're programmers, and get answers and then get those answers rated and try to have the signal rise to the top and the noise just disappear forever.
Atwood:??? And also, I liked one of your observations early on, Joel.? This is not a another place to discuss tabs vs. spaces.
Spolsky:??? Right.
Atwood:??? There is a lot of that, and I'm sure I'm guilty of that as well as there are a lot of religious issues in programming.? One thing I always liked; not to get into platform issues, but one thing I actually like about the Windows ecosystem of developers is that there is a nice focus, and --?this is a generality, to be clear --?on just getting stuff done.? Versus just the elegance of a solution, or how politically correct or how religiously correct is this particular solution.? Just, ‘hey this is a job, we get things done’ right?? We all hopefully want to make money.
Spolsky:??? The Windows programmers I've met, the reason they are Windows programmers is that they are being super pragmatic and they just have to get their code to run on computers that people actually have.? And as a result, they are very much just gonna do what it takes to get the job done and then they kind of lose interest in it.? Some other platforms not so much, they tend to be a little more idealistic, I guess.
Atwood:??? Right, I mean there's pros and cons, and again this is a broad generality.
Spolsky:??? We should just make a rule that you don't have to say "this is a generalization", it should be understood that these are generalizations.
Atwood:??? Okay.??I think for particular phrases you have to be careful.? I get a lot of email -- I'm sure you get tons and tons of email -- but I've started to get quite a bit of email.
Spolsky:????The thing that bothers me is that?people are not subtle at all.? They are assuming that if I'm writing a blog that I'm either pro-Microsoft or anti-Microsoft and if I say something that in any way implies that Windows programmers are pragmatic that I must be pro-Microsoft and how can I possibly be pro-Microsoft after what they did to Netscape, or after what they did to open source, or that memo... In other words, they don't understand how you could have a nuanced approach that includes some positive and some negative things about a company as large and as diverse as Microsoft, that has as many different products as they have.
Atwood:??? Right.
Spolsky:??? I think the last thing I wrote was something about how IE8 was, in my opinion, making what will become a controversial decision about how to treat old web pages. Whether to run them under the IE7 emulation or whether to run them under the new thing unless you specify otherwise.? And, I really don't want to take a side on the issue because both sides result in a lot of breakage for a lot of people.? A lot of people said "Well, this is insufficiently angry".? In other words, it's Microsoft's fault that they got into this mess with browser compatibility standards blah blah blah and the only possible article -- and to some people the only article I could have written was “Microsoft is bad and evil and cruel for having gotten us into this mess” and nothing else matters, nothing else you want to say about this matters, you just have to be angry at Microsoft.? And any other kind of article that tries to go into what should Microsoft do now given that they have done something bad and gotten themselves into a mess, that article is going to make people upset unless it says what they wanted to write, which is “Microsoft is evil.”
Atwood:??? Right.
Spolsky:??? Okay, fine Microsoft is evil.? Next.? It’s not what I want to write about.? Enough people are writing that -- I don't care.? Let's move on.? I want to talk about the issue with compatibility and backwards compatibility and what you have to do to maintain it and whether or not you should, because you may have your own engineering problems in the future that are based around compatibility issues like that and if you plan for them, you won't get into the kind of mess that Microsoft did.
Atwood:??? Right.
Spolsky:??? And that's what I wanted to write about.? But some people -- Gruber or Mark Pilgrim -- I think they read that and they were like, "This article is not angry enough at Microsoft and so it must be pro Microsoft and therefore I must take a contrary stance".
Atwood:??? Right.? Yeah, I actually like that article.? I thought it was too long.
Spolsky:??? Yeah, it was too long.
Atwood:??? I wasn't a huge fan of the first half of it, but I definitely thought the last half was very strong.
Spolsky:??? At the time, I thought I had to say all this stuff. But later, I realized if I had taken another week I probably could have trimmed it about 30%.
Atwood:??? Yeah.? It wasn't bad, you know.? Not to get into butt kissing, but I don’t think anything you've ever written has been bad.
Spolsky:??? Oh wait, I'll find something.
I take that as a personal challenge.? Are you kidding?
Atwood:??? The stuff that you publicize, you take a lot of care in terms of the way you write it.? The way I write is very ‘from the hip’.? I don't vet my writing like you do.? If you look on Paul Graham’s site, you'll see that?each article is proof read by the following ten people.
Spolsky:??? And then some name dropping.
Atwood:??? Yeah the name dropping.
[On my site] there's no proofreading.? It just comes out.? I get the impression that you put more thought into your writing in terms of editing and so forth.
Spolsky:??? I think I go over the article 30 or 40 times before it gets out.
Atwood:??? For me, it would be like twice -- while I'm editing it.? So it's a little bit looser.? So I appreciate it.
Spolsky:??? That's also why I don't write very much.
Atwood:??? Yeah, there's certainly an issue of scale there.
One issue that's interesting with regards to Microsoft, is I think Microsoft has a lot of problems now.? Serious, deep, deep problems.? I don't perceive Microsoft as being in a strong position anymore.? I totally respect Microsoft -- there's a lot of people that work there -- but in terms of the whole Microsoft monopoly, I think it is the weakest is has ever been.? Not in terms of absolute numbers now, but in terms of the underpinning of where their money comes from and how their business runs -- they are really, really vulnerable.? I don’t view it as you need to attack them very much anymore, I think it is self evident to decent analyst that Microsoft has huge problems and it is not at all clear that they are going to overcome these problems.
Spolsky:??? I don't know if it’s clear.? There was a big hullabaloo about Gartner making some statement about how Vista was -- what was the word they used, that was provocative? Disaster?
Atwood:?? Yeah. Something like that.
Spolsky:?? Catastrophe. Of Katrina scale.
The weird thing is that that was newsworthy and this is something that for three or four years that geeks -- even before Vista came out -- geeks have been saying there is something that is seriously wrong here because developers?-- going back to the API war, the geeks have known that it just doesn't matter anymore what is on the desktop anymore because all of the interesting development is happening on the web.
Atwood:??? Since you yourself brought it up.? At your FogBugz world tour one of my favorite things you said was "Remember that blog entry I did about how 'there are five things you can’t do in a web browser...'"
Spolsky: ???Yeah.
Atwood:??? Now you can do all those things. Underline, spellcheck...
Spolsky:??? Our intern Jacob did them all. In one summer.
Atwood:??? I give you tremendous credit because you're right.? It is so hard to see the future.? Nobody really saw the browser as being this strong of a platform but, clearly, it really is.
Spolsky:??? Sometimes it's kind of weird, you extrapolate the wrong way.? Like, for example, when the browsers first came out, I kept thinking "gosh with the HTML protocol, there is something wrong with this".? I was working at MSN at Microsoft and we had a different protocol for hypertext multimedia that was based on help files.? Basically, so you'd write an Microsoft help file instead of an HTML page.? This is funny, but HTML was just not known then.? At Microsoft, if you wanted to see the web you went to the library where there was one computer that was connected to the web, in those days.? This is like 1993 or 1994 so it was before anybody had the web.? So, not to blame them too much.? But, they had this idea that they wanted this multimedia thing with hyperlinks, and stuff like that, for creating content for MSN.? 
The first idea was to use help files since they already had this multimedia format with hyperlinks.? In the protocol they built, instead of using something simple like HTTP, where you just get the file, they had a slightly more sophisticated protocol where you got the text first, and you got the dimensions for the pictures so that space could be left for the pictures, and then you got a blurry picture and then sharper and then sharper.? So, the text would appear right away.? In those dates 9600 baud modems were the fastest you could get, most people had 2400 or 9600.? I think 19.2 might have been on the horizon.? I'm not really sure. But they were going to build MSN on this crazy frame relay dial-up system which would have been lucky to see 4800 baud.? Anyway, it seemed like you needed a protocol that showed you the text first and the pictures later.? HTML in those days did not do that.? As soon as the web browser saw a picture, it would start trying to download that as well, even thought there was maybe some text that should have been downloaded first.? The story I'm trying to tell is, the web did not look very good -- kind of clunky.? It did not look as good as what you could do with a specialized protocol.? But then, of course, the speed of all these things improved and it just didn't matter what order you did things in.? The limitations of HTTP turned out to be its strengths and the web really did sort of take over the world.
I sort of looked at early versions of the web and said that’s kinda clunky and dumb and we could build something a lot slicker and more professional looking.? I was kinda wrong about that.? And then, years later I was looking at the early WAP websites and everyone was saying that "WAP is crap" and "WAP is slow" and "these web browsers phone things are just awful and any kind of web experience you have on a phone is going to be ghastly".? And I thought, "but that's what I thought about the web so maybe the phone experience will get better".? And it didn't.? It really never did.
Atwood:??? Well, I would say there is the iPhone.
Spolsky:??? Well, the iPhone is not the web experience.? That's just a shrunk desktop browser, basically.
Atwood:??? That's what I'm saying.? That's what turns out to be the future.? The handheld devices get so powerful they become mini desktops.? The phone becomes a mini-desktop.
Spolsky:??? They are doing the same thing the desktops are doing and that’s the only way to make it work. And indeed like WAP just never did evolve into something fast enough and nice enough that it could become better.
The point of the story is sometimes you are looking at something and you can't see the future because you don't extrapolate it enough, and?so you say "Eh, this sucks" but you're not extrapolating to when it is going to be really good.? And sometimes the opposite problem happens and you extrapolate too much and you say "This is crap but it is going to get much better!" and it never does.
Atwood:??? Right.? That's the bubble 1.0 right?
Spolsky:??? Yeah.
Atwood:??? Everybody is going to shop online even though they don't have broadband.
Spolsky:??? [laughs] Right.
Atwood:??? They're all behind modems.
These rich web experiences that were just way, way ahead of their time.
Spolsky:??? At MSN in 1993 we were all thinking around 1996 the whole country is going to be wired up for broadband.? They'll basically be able to have; I think at that time, people were actually predicting that by 1996 people would have enough bandwidth into their homes for 4 television channels at once.
Atwood:??? Wow.
Spolsky:??? And that was MPEG-1. Is that possible?
Atwood:??? I think they were only ten years off with their prediction.
Spolsky:??? MPEG-1 was 150.? Yeah, it would have worked at DSL speeds.
Atwood:??? Getting back to what we're doing, and I think the reason this ties in is one of the reasons we think the site will hopefully matter is that we believe that programmers are going to learn online.
Spolsky:??? That's right.
One thing we are noticing is that the book market, the programming book market has just completely vanished.? It is falling apart, catastrophically.? The programmers I know don't really learn new technologies from a book any more.? What they do is they find a tutorial on the web -- maybe -- and they try to do something and then they page fault in knowledge.? Basically, they get stuck on something and they either post to a discussion group, or they type their question into Google.
Atwood:??? Right.
Spolsky:??? And those are the two things we want to serve basically is the posting to the discussion group and typing things into Google.? Our longer term goal, if we’re successful, is that you're trying to figure out how to do something in Python like how to merge two arrays in Python and you go to Google and you type "merge two arrays python" and submit that, and our goal is to be the number one hit that comes up with a really good edited answer to that question that some individual has contributed and maybe other individuals have edited.
Atwood:??? Right. And also to reduce of the friction, kind of like Twitter and Tumbler did for blogging.? Yeah, we could have a blog where some guy loves Python write a whole blog entry about how to merge arrays in Python.? First, it seems like kind of a weird topic for an entire blog entry.? I mean I guess you could.? But, a lot of that stuff ends up being buried on forums or documentation that nobody clicks through to.
The classic example -- not to pick on Microsoft, I feel bad actually -- the MSDN documentation site, although it is actually pretty good – it’s just that the way they set it up is so painful.? It is almost a formatting problem more than a content problem.
Spolsky:??? It’s not true HTML, things move around too much.? Things are never there.
Atwood:??? The tree on the left just kills me.
Spolsky:??? Yeah what's that?? That's never worked on the Internet!
Atwood:??? Again, they can't let go of the whole desktop metaphor.? This drives me crazy.? Websites that "Oh, I need to look like Windows applications" or even OS X applications.? This is really wrong.? If I see an app that looks like a desktop app I'm like "you failed -- immediately you failed."? You don't get the fact that this is a different medium; it should look different.? It should not look like the old way.? We’re trying to get away from the old way.? There were problems with that.
Spolsky:??? They put everything between a live.com firewall, which is new name for passport.? 
Atwood:??? Right
Spolsky:??? So, you can't even get MSDN anymore and it’s not being searched properly by Google and their own search sucks.? So, basically they're constitutionally incapable... a lot of people that have the documentation are constitutionally incapable of putting it up on the 'net in a format that is actually searchable and findable.? That's not true of everybody.
Another thing I noticed happen -- let's say I've got a Mac at home and in order to connect to my desktop at work I use CoPilot.? But I don't always use CoPilot because it’s kind of slow.? So, a thing called Remote Desktop Connection because I have a VPN all set up and there is a Mac client for Remote Desktop Connection and there is a new version of the Mac client for Remote Desktop Client -- which is really good -- out only it is in beta.? And it took them much longer than they expected to actually ship the damn thing, so the beta expired. 
Atwood:??? Nice.
Spolsky:??? And so you couldn't run it.? So then you go search on the Internet for "Mac remote desktop connection beta expired" and you get all kinds of discussions; people discussing what to do and how to work around this problem, and "how stupid is Microsoft that they can't solve this problem."? What's interesting is that within five days Microsoft had indeed released a new version of it with the expiration removed.? So, it is still the beta because they’re still late but it’s not actually telling you that it’s expired anymore.
So that's fine, but here's the point: in the mean time, all those previous blog articles about this thing being removed are still the results you're getting from Google.? And so the number one result from Google doesn’t know about the new thing – the fix.? In other words, there is something that happens when something is broken and then gets fixed.? The brokenness gets into Google and gets page ranked and that tends to sort of dominate the results for a long time because it’s got the earliest dates on it and a lot of the times you're trying to solve something and you find a discussion on the Internet that says "the solution to this problem is there is no solution and you are borked" and you can't do anything about it.? And that's wrong, that's no longer correct, you're not looking at the correct information anymore.
One of our goals is to have a place where if somebody posts a wrong answer or they post an answer that used to be right but it becomes wrong that there is a way to remove that and to get that out of the site and to get the new right answer at the top of the page.
Atwood:??? So, it’s very Wikipedia-like in that sense.? There is a flavor of wiki to what we’re doing.? I do agree with that because that is a problem with blog entries because when you write about something it is a point in time and that's why dates are so important.? When you go to content and there is no date and you're like "I’m hosed because I don't know when this was written."
Spolsky:??? I still get angry email where I said it was a mistake for the Netscape guys to rewrite the whole browser from scratch and they should have started with their existing code base.? I believe it took, correct me if I’m wrong, I think it took six years.? No.? How long did it take between the last version of Netscape and the first version of Firefox shipping?
Atwood:?? Oh, it was a long time. [In March 1998, Netscape released most of the code base for Communicator under an open source license.? Mozilla 1.0 was released on 5 June2002.? Firefox 1.0 was released on 9 November 2004 ]
Spolsky:??? I think it was three or four years at least.? Anyway, they definitely lost a couple of years by starting from scratch and I think that article is still correct and I think that those few years that they lost while they rewrote basic things that had already been working in the original version of Netscape.? When they rewrote those from a green field, from a clean slate instead of just trying to even use the old code as a blueprint at the very least.? Those few years they lost probably correspond to the same period in which IE went from 0% market share to 90% market share.? And so now Firefox has to claw its way up from the bottom.? But anyway, I still get email from people says "it looks like you were wrong!? Firefox is now shipping!!"? As if that proves me wrong that later -- and I'm like look at the date on the article dude!
Atwood:??? Right.
I remember reading that and saying "oh he's right."? Netscape is so dead.? But then it’s like Firefox and phoenix -- such [a] great name -- really did come back from the dead.
Spolsky:??? They came back from the dead, but there are still not at 50% market share.
Atwood:??? No, of course not.
Spolsky:??? I don’t know where they are -- that's probably debatable.
Atwood:??? I think it is really high in Europe, gosh I don't want to say because I'll probably wrong but I would say 10% to 20% to guess. [Firefox had 19.03% of the recorded usage share of web browsers as of June 2008]
Spolsky:??? It depends; it is probably much higher among tech savvy people.
Atwood:??? Oh, way, way, way higher, yeah absolutely.
Spolsky:??? The good news is that it is high enough that everybody knows they have to test with Firefox.
Atwood:??? Yeah, and that is the important thing where we've gone to an ecosystem where there is Coke and Pepsi, finally.? If you look at commercial markets there is a strong argument to make that there needs to be one strong competitor for things to move forward.? Like the whole Microsoft problem, people say this about Microsoft - and it really is true - unless someone is really pushing them, they just kinda just stop.? IE is the classic example.
It is absolutely important that there be other contenders for the market to work.
Spolsky:??? Maybe you could argue that's why Vista was such a dud because they didn't notice anybody pushing but now that there's Leopard and pretty much a lot of the Windows users... well not a lot, but there are enough people switching to Mac now that they may feel threatened by that that they might have to do something.
Atwood:??? Innovate.
Spolsky:??? Yeah, actually add some features that people want in a desktop Operating System.
Atwood:??? Yeah, there is definitely a lot of truth there.
Spolsky:??? I was just thinking how pissed I am that you won't be able to get XP anymore.? I just know I can't give my parents Vista.? I always tell people if you have to get a Windows PC, at least get XP on it.
Atwood:??? What's with the Vista hate?? I actually like Vista.? I think the Start Menu is way better.? What specifically would you point to that you don't like about Vista?
Spolsky:??? What I don't like about Vista, for me personally, is that a lot of the stuff is moved.? For example, if I go into Network Connections, stuff is just not in the same place as it used to be.? And it’s still there but it is in a different place or a different way of getting it and I don't know those new places and eventually I guess I would learn them but I don't know where they are. So for me, you've moved a bunch of stuff around so everything that I try do is not where I expect it -- it’s a little frustrating when I'm trying to get stuff done -- and what I get for this is nothing.? In other words, there are no other benefits to me that I can perceive for switching to Vista.
Atwood:??? That's fair.? It’s true that Vista doesn't add much. Right?
Spolsky:??? Yeah.? I mean if you had just added one or two things that I wanted.? I mean I know it added things, but nothing I want.? Then it might be worth it.? For example, when I upgraded Mac to Leopard on my Mac, it had Spaces which I love.? And I use that all the time and that's awesome and that's like just a small thing.? They could put that in Windows in ten minutes and that's enough for me to switch to Leopard.
Atwood:??? Right.
Spolsky:??? Then I would undergo some pain if I have to get used to the command key or option key being in different places or whatever it takes getting used to; I can deal with that.? But, if I'm going to get nothing and all you've done is rearrange things so I don't know how to do things.? There’s a lot of stuff that I've memorized ways of doing things like I know directly what Control Panel to go to.? It is bad enough in XP you go into the Control Panel you have to click on that 'switch to classic mode' so you can find anything.? Because otherwise it’s going to just put different names of stuff and it’s jumbled it around in places where you don't recognize it.
Atwood:??? I think that that's fair.? Just in interest of equal time I would point to two features that I really like in Vista.? One, the Start Menu is huge that I can hit the Windows Key and type and get what I want.
Spolsky:??? Yeah, I've got this thing -- what's it called, Launchy?
Atwood:??? Yeah, but you have to install that.
Spolsky:??? Oh, It's worth it.
Atwood:??? I think stuff should be built in. 
Spolsky:??? Yeah, it should.
Atwood:??? And the fact that everything is indexed.? Any keyword, if it’s in My Documents folder, the indexing actually works.? It is very Google like.? Also the way every Explorer window has if you hit Ctrl+E it goes to the search box, just like it does in your browser.? So it really unifies the browser world and the Explorer world.
Spolsky:??? Ctrl+E is search?? Oh yeah, look at that, Ctrl+E is search.
Atwood:??? Yeah, it is just like in your browser.? It works the same way in Explorer now, in Vista.? So there is the grand unification of the way things work.? But I definitely hear you in terms of they didn't change a lot of things. 
Spolsky:??? It may even be the problem with Vista is that I put it on this cheap-o Dell Latitude 620.?? The cheapest laptop you've ever seen.? It's their high-end laptop too, but the keyboard is crap and it’s got all these plastic parts all over the place and it's clunky and ugly and heavy and it's just a yucky laptop.
Atwood:??? Yeah, you should get what I have.
Spolsky: ???I just have a bad experience whenever I run Vista.
Atwood:??? Yeah, that's fair.? I think Vista has much higher hardware requirements.? It is doing a lot more stuff in the background.
Atwood:??? I don't want to harp on this, because I always talk about this on my blog.? But I'm a very outspoken critic of the whole Windows security model.? The fact that everybody runs as an Administrator so they had to put in all these weird hacks that impact performance.? You have to have Defender running, you have to have Anti-Virus.? All of that stuff costs performance, big time.? People say "oh I just need this stuff".? But this stuff destroys essentially your disk IO performance.
Spolsky:??? Maybe it is because I'm kind of an expert but I've never had any kind of anti-virus or protective...
Atwood:??? Yeah I don't want to open that whole can of worms.? But I will say that Vista may be perceived as being slower because it has a lot more security stuff.? It has Defender and it has the indexing...
Spolsky:??? I'll tell you what is slower.? Yesterday I opened my Vista laptop which I haven't used for two weeks to watch a video.? Now why was I watching a video on my Vista laptop?? Because the stupid iMac MacBook Air just doesn't have sufficient cooling so if you try to watch an hour TV show or something, unless you literally hold it up in the air, it doesn't cool enough to be able to.? So what happens is it has two CPU cores in there and it gets hot enough that it shuts down one of them and then you do not have enough CPU power to watch video.
Atwood:??? Oh, I had not heard that about the Air.
Spolsky:??? Oh yeah, there's a whole bunch of people carping about it on the 'net.? And they have a hot fix that made the fan go on a little sooner and that sort of solves it, but the problem is -- like many laptops -- the fan is on the bottom surface and the only thing that keeps the fan from being blocked by whatever the laptop is sitting on is those little rubber feet.? But if you put the laptop on your lap or on a pillow on your lap or just lie back on the couch and hold it on your knees or something, it blocks that fan and so the laptop can't cool itself.
So they say "the only way you can use a laptop --" and it says this in the manual -- "is if you actually put it on a desk."? But sometimes if you put it on a desk it still doesn’t cool enough to watch more than an hour of video.? It seems kind of flaky; which is really upsetting.
So I pop out the Dell 620 which is twice as heavy and clunky and ugly and yucky and stuff like that and I try to watch video and in the background without telling me it has decided to reinstall something... I don't know what.? There is some process running that is just slamming the hard drive and driving the CPU up to 100% and all I can tell is that it is the Windows installation service.? The WMI installation service.? And I never asked for this and I never approved it and I never clicked okay and it just runs for the first 20 minutes while the video stutters and it just sort of parks on my hard drive.? So I think there is sort of a lot of... I don't remember giving permission just to install stuff.
Atwood:??? There's a ton of stuff that goes on in the background in Vista, it's hugely increased.
Spolsky:??? All that indexing which I always turn off just because when you have a laptop sometimes you're on the plane and you don't want it just waste battery power...
Atwood:??? It does actually disable it when it goes on battery power -- the indexing is smart.? But not everything in Vista is smart.? You know it is sort of designed by committee.? That’s the other problem with Vista.
Remember your start menu article.? I think that is an example of design by committee where you don't have a Jobs-like figure to dictate "oh no, it's going to be this way."? You have to satisfy everybody so you have some parts of Vista that are very good and some parts are just like "Eh, turn that off immediately." 
Spolsky:??? There is something interesting about if you study architecture or design there is this concept of the minimalist design and minimalism in architecture.? It takes ten times as much work to make something truly minimalist than to makes something decorated.? The classic example is look up at your ceiling and look to where the wall hits the ceiling in whatever room you're in.? Do you have any kind of molding up there?
Atwood:??? No, we don't.
Spolsky:??? You don't have molding.? So the wall just hits the ceiling it just a nice clean curve?? It is just a square 45 [90] degree angle where the wall hits the ceiling.? So that's really hard to achieve that look.? If you have that, the builder had to work really hard to make that nice and clean.? And the reason is it just hard to get these things to line up and not look stupid, and to not crack and all that kind of stuff.? The molding is usually there because it hides all kinds of sins basically.? You probably have molding between the floor and wall because it is impossible to make the floor really flat.? The minimalist look is that look of "let’s just have a 45 [90] degree angle with no molding and it looks cleaner and sharper and more modern."
But that takes much more work, it costs more in labor and it is just sort of more effort to get that right than if you could just slap a piece of molding on there and cover up whatever mess you make when you tried to get the floor really flat or when you tried to get the wall to line up with the floor or whatever the case may be.
Atwood:??? Yeah.? I think that's an excellent point.? Microsoft is their own biggest enemy right now.? I don't think they really need anyone like [John] Gruber to attack them I think they're doing a fine job of attacking themselves at the moment.
Spolsky:??? Don't worry.? They'll screw themselves, seriously.
When you look at a MacBook air, and you look at -- Let's just take a MacBook, which is just the equivalent laptop.? It not just uniquely thin, it's just a laptop.? Enormous amounts of effort have gone into removing seams, removing lines, removing all kinds of things that would make it non-minimalist.? Even just looking at the bottom of a ThinkPad versus the bottom of a MacBook.? The number of vents and ribs and buttons.? Most ThinkPads have a little modem operating thing taped on at the bottom.? Literally with cellophane tape.? They've got bar codes, they've got FCC stickers.? They've got something here in Chinese... I don't know what it says.
Atwood:??? Oh right!? All the stickers on the bottom.? I had totally forgotten about that.
Spolsky:??? Yeah.? And there's like 18 little holes and vents and clips and I don't know what... and buttons and screws.? When you look at the bottom, if you just count the number of features of a laptop and compare Mac versus an Intel laptop or a Wintel laptop, the Mac has far fewer.? And every one of those screws, holes, rivets, seams, stickers that they have removed was done at enormous effort.? Like, a lot of effort went into figuring how to not have that thing be there.
Atwood:??? Absolutely.? That's ironic that it seems the best way to judge a laptop is to turn it over.? The part you don't see is more indicative of the design effort than the part on top -- the obvious part.? You're right, I didn't even think about that but if you flip any laptop -- even the nicer Windows laptops -- I have a Dell XPS 1330 which is pretty sexy for a Dell.? It is very thin and very clean lines but if you turn it over it is mishmash of labels and FCC tags and vents.
Spolsky:??? That's where all the garbage went.
If you look on a MacBook, those labels – they won’t do that -- they'll do it in a silver colored paint that's carefully chosen to disappear as much as possible and the smallest legal font that they can put it on if there is something that legally has to be there.
Atwood:??? I've got another neat one.? Actually, my wife pointed this out of all people.? I feel like an idiot for saying this but -- camera phones have a mirror on the back, so you can see yourself.? I guess this is a big thing for camera phones taking a picture of yourself.? It never occurred to me, I don’t know why.? What is this shiny thing?? I thought it was a piece of equipment.? She said, "if you look at the iPhone -- the Apple logo is the mirror."? The Apple logo is very, very shiny, and that’s what it’s for.? Isn't that cool?? It serves a double use - they don't have to have this stupid bumpy truck driver mirror hanging off the back of their phone; they have this shiny Apple logo so you look at yourself when you take a picture.? I thought that was very, very clever.
Spolsky:??? Also something I talk about in my speeches a lot is how I think one of the reasons people like the iPod and the iPhone is that seamlessness.? Part of the reason the seamlessness is there, or one way they achieve that seamlessness is that they don't let you change the battery.? Because they don't want to have a battery cap -- they don't want there to be a panel that your remove that has to have a seam all around it.? That has to have little nubbins that you push to provide friction to remove it.? That’s just a feature they didn't want to have and it wasn't worth it to them to let you change the battery.? They're just like: don’t change the battery, it's something that you do once a year.
Atwood:??? And I think people don't like the honesty.? Most people who buy cell phones are really just going to throw them away at the end -- or recycle them hopefully.? They're not really going to buy five batteries and use that phone for the next ten years, right?
Spolsky:??? There is some usefulness.? Sometimes I forget to charge my phone and luckily I've always got a battery that's charged so I can just swap them.
Atwood:??? That's fair.? I'm probably the worst example but the way I use my phone the embedded battery is just a better solution for me.
Spolsky:??? Yeah -- it's just a trade off, but in order to get that minimalism, in order to get the clean perfection -- you have to expend physically effort.? You have to have people that are fighting for minimalism.? You have to have people that are saying: let's just have one way of turning it off that you don't have to think about, and one way to turn it on and we just figure it out.
I know there are good reasons to have nine different ways to turn off a computer but let's just fight to get it down to one.? And that takes a lot of fighting and actually I have heard from sources that that is going on at Microsoft now, with regards to the shutdown menu at least.? We'll see if there is a version that comes out with fewer ways of turning it off.
Atwood:??? So bringing this back to what we're doing, and I think the reason this discussion is important is I truly believe in this minimalism.? And certainly, if you look at my blog I get very excited when I can remove something from my blog.? I remember removing the "remember my settings" checkbox.? I'm like, "I'm just going to remember your settings, I'm going to assume that you want that, I don't want a checkbox that says 'remember my settings'."? 
I don't want to think about that.? So, I think the same rules are going to apply to StackOverflow.? 
Spolsky:??? Oh yeah, we have a name -- StackOverflow -- did you get that domain name?
Atwood:??? Yeah.? We do have it and I want talk a little…
Spolsky:??? In your possession?
Atwood:??? It is.? It is in my possession.? I actually put up a tiny landing page with a funny little cartoon.? If you're curious you can go there and see it. I don't want to spoil the surprise.
Spolsky:??? Oh, it’s got a cartoon.? I know the book that that's from actually; I have that book.
Atwood:??? I just like that.? I like the 'magic.'? We're going to make the magic happen -- we're going to invoke the miracle at this point.? You know what we're doing now -- I talked about this on my blog -- we're going through, essentially, paper prototypes.? I'm actually using a graphics editor -- because I actually suck at writing with a pen.? But that's what we're doing.
The names that we came up with -- and I only want to cover the top four -- the winner was StackOverflow, in terms of voting.? There are 6,790 votes. 
Spolsky:??? Holy... How many??
Atwood:??? Six thousand, seven hundred and ninety.
Spolsky:??? That's the population of Wyoming!
Atwood:??? Yeah right.? [laughs]
I think even Wyoming does a little better than that.
Spolsky:??? That’s a lot of people.
Atwood:??? StackOverflow won with 25% of the vote.? Privatevoid.? Now, Joel and I talked about this and we decided we liked StackOverflow -- there's a lot of names we liked.? Naming is really hard.? 
Spolsky:??? I'm Joel, Joel is me.? Oh, you're talking to our audience.
Atwood:??? I'm talking to the audience -- I'm not talking to you Joel -- you're not even -- you're just accidental at this point.
Spolsky:??? The audience is totally imaginary.? If they haven't shut this off by now.? We’re thirty-seven minutes into this thing.
Atwood:??? Now privatevoid had weird connotations -- like using the bathroom.
Spolsky:??? Oh yeah, using the bathroom.? Or, it’s also like a Beetle Bailey character in the army sort. And he's got no brains. So we call him Private Void.
Atwood:??? So, under that: Dereferenced.? I kind of like Dereference, but it seemed a little snarky like defamer.? It seemed a little negative and I want a positive.
Spolsky:??? A stack overflow is positive.? It’s an awesome...
Atwood:??? It's overflowing with awesomeness!? You stack it all up and you don't have enough room for all the awesome so we're going to put some on our website.
Spolsky:??? I should mention to the listeners -- since you're addressing our listeners -- we're going to setup an email address somewhere.? Do we have that yet?
Atwood:??? I can. But what'd you have in mind?
Spolsky:??? People will call in -- no wait, how do people call in to an email -- they will record an mp3 file and email it to that address.
Atwood:??? Or they can just email a question -- we can read their questions, right?
Spolsky:??? No, we've got to get them talking.? Definitely.? Totally.
Atwood:??? So it has to be an audio attachment.
Spolsky:??? Yup you've got to record yourself asking a question -- or a comment or an idea or something you thought of and it’s got to be like 90 seconds.? Anything more than that and you're just cut off dude because I'm not sitting here editing these things in Audacity.? Record a little mp3 with a question a comment and suggestion an idea or just love and affection and email it to: an email address to be determined.
Atwood:??? We'll put that up -- when and if we put these podcasts up.? 
Spolsky:??? Wherever you see these podcasts look around there for an email address. We'll mention it in the next show.
It works much better when you're able to say "hey we got this message from Floyd in Tempe, Arizona, who has a suggestion."? And then we can play it and talk about it -- ridicule it.
Atwood:??? But the reason I wanted to cover the vote is because I do value -- the whole reason I have my blog -- the reason it has become this big thing is the community around and I wanted tap into that.? Naming is hard and they should have a hand in that too, right?
Spolsky:??? Didn’t -- StackOverflow won by a lot, right?
Atwood:??? A lot.? Yeah, not quite double, but close.
Spolsky:??? That's enough to make you feel like this is the better name.
Atwood:??? In the interest of fairness, ‘other’ got 6%.? So, that other means to me "all your names suck."
It beat ‘other’ by a lot which is important because if you’re not beating ‘other’ then it’s just noise.
Spolsky:??? Then you have a bunch of bad names.
Atwood:??? I do want to talk the other one that beat ‘other’ that was still a contender was humbledeveloper.? Now humbledeveloper is good because -- for the famous essay by Edsger Dijkstra.? I don't want to try to say it.
Spolsky: ???Is it “dEX-trah”?
Atwood:??? Is that right?? I'm horrible with pronunciations.
The humble programmer is a really, really famous essay, right?? And I totally believe in that.? The first thing you want to do as a developer is say, "I suck."? You've got to acknowledge your own suckiness. [ http://www.google.com/search?q=Dijkstra+humble+programmer ]
Spolsky:??? But you see StackOverflow is not for the humble developer. It is for the arrogant developer who hasn't bothered to RTFM and is now looking things up because he thinks he is so hot shit that he doesn't have to learn the programming language before he starts banging away code and now he's run into a problem and he's asking people how to append to lists ...
Atwood:??? I think that's fair and I think people saw that and said "Okay Jeff, what you do on your blog -- this is doing."? And they're right about that, but this site, StackOverflow, is going to be doing is a little bit different than what I do.
I do think it was an appropriate name for me because people were asking, "why don’t you just make it ‘forums.codinghorror.com’" and I was like "well I'm trying to build something a little bit different than that."
Some of the ‘other’ names that were suggested were quite funny as well.? One that I liked and I didn't get any feedback from you on this was duh-velopment.? That was very funny.
Spolsky:??? The trouble is you don't want something that can't be read out loud.? That needs to be explained.? You want something that when you say it the first time.? People that who are literate in English will be able to type it the first type.
Atwood:??? Well you know, coding horror gets misheard as coding whore a lot; you know that, right?
Spolsky:??? I haven't even thought of that one yet.
Did you register coding ho?
Atwood:??? Coding whore.
It is registered to a friend of mine.? Actually Scott C. of the company I used to work for –Vertigo – registered it just for me as a gift.
Spolsky:??? Coding ho!
Atwood:??? Coding ho, exactly.
Spolsky:??? Okay that's okay coding slut dot com is pretty good too.
Atwood:??? Did you ever read [...] coding slave?
Spolsky:??? Who's that, that sounds familiar?
Atwood:??? I can't remember his name -- he’s a character.
So, what I have today is I have comps.? I don't know how this is going to work on a podcast format.
Did you want to do that now?
Spolsky:??? What is a comp?
Atwood:??? A design comp?
Spolsky:??? Just the like the paper prototypes.
Yeah, well, why don't you email those to me?
Atwood:??? It’s in the wiki.
Spolsky:??? Oh it’s in the wiki.
Atwood:??? We're using FogBugz.? And I must say FogBugz is truly an excellent product.? I have enjoyed using FogBugz.? I would buy it again and again.? 
Spolsky:??? Good.
It's broken [...] Here we go.? Okay, Paper prototypes.
Alright I’ll have to go over this...
The question is: do we want to put these up on the web somewhere where people can look at them?
Atwood:??? I don't think -- based on the early feedback I've gotten from just trying to explain what we're doing: it was bad.
Spolsky:??? Ok, never mind then.? Forget it.
Atwood:??? You need something more for people to look at for them to understand what it is.? We need to go through at least one cycle on the paper prototypes before we show anybody anything.
Spolsky:??? Fair enough. The first thing people see will be like a really really rough beta that just has some basic functionality.? They can start giving us feedback based on that.
Atwood:??? You've been through this a million times.? People don't really understand what it is until you put it in front of them – that they can actually touch it in some way.? That's why paper prototypes can kind of work but I think it is better to have something a little more fleshed out.
Spolsky:??? Okay.? We should talk about -- you just sent me a random email talking about some of the horrible Q & A sites that are out there like askville.? 
Atwood:??? I wouldn't say horrible.? I think the problem these sites have -- and actually Jarrod the other......
Spolsky:??? [Reading from askville] "How do I beat a big daddy in BioShock?"
Atwood:??? [laughs] that's a great question!
Spolsky:??? But that's easy!
Atwood:??? Just shoot it a lot.
The problem these sites have is they're everything.? It is sort of like walking into Blockbuster -- back when we rented movies physically -- and like what do I want to watch.? It’s like: who knows there's like drama, there's action, there's comedy.? Who knows what you want?
Spolsky:??? Yeah but when you're on the plane and there's only six choices -- it’s easy.
Atwood:??? Yeah so I think having a developer community that's targeted around programmers and programming topics and again not religious stuff but specific things you're trying to do in a programming language or environment I think that narrows it down substantially.
Spolsky:??? I did actually try asking some programming questions on askville and got absolutely nowhere.
Atwood:??? Oh yeah search for C# or something, and you'll get this garbage, it's like the worst stuff you've ever seen. It's horrible.
Spolsky:??? It is at a much lower level than our audience will be at.
Atwood:??? The other thing I've got to say, is I'm glad we have a technical audience.? Because a lot of the users of these systems are very unsophisticated -- as in the all caps answer type unsophisticated.
Spolsky:??? [Reading from askville] "Will C# completely replace C++.? If so, by what date?"
Atwood:??? You should answer that one!? I think you're uniquely, you know, skilled to answer that question.
Spolsky:??? That's such a... that's like a question that reveals a level of…
Atwood:??? It’s a stupid question!
Spolsky:??? Well yeah, exactly.
It's a question that reveals a lack of sophistication.
I remember once I was sitting in the computer lab at school and I guess I must have been a sophomore and the freshman class had just come into the computer lab for the first time and they were just hanging out with the computers and there was this one kid there who was trying to impress a girl and she was like asking him all these questions -- in a flirty way -- and he was just being the man who knows everything about computers and telling her all the answers.? And she said, "what exactly is C++".? And he's like, "Well the history of programming languages is that they started out with a language called C and they improved that and made a language called C+ and now we’re on this thing called C++ which is the most improved language."
And he was saying that like he absolutely knew what he was talking about, just to sort of impress her.
Atwood:??? I love that story because the idea that the guy is totally oblivious to the fact the girl is flirting with him is just too perfect.
Spolsky:??? That's always true! Maybe he wasn't oblivious.
Atwood:??? I'm pretty sure.? Oh man.? Yeah.? [clearly experiencing flashbacks]
Spolsky:??? It's not that he was a geek -- he was kind of more of a show off.
Atwood:??? I see.? That's more important to us guys, right.
Before we let this go too long, we might want to actually end the podcast part.
Spolsky:??? Let us end the podcast.? I think we want a maximum podcast length of an hour.
Atwood:??? Even an hour is a little long.
We're going to have to be a little careful.? We might want to even edit this a little.
Spolsky:??? What?
Atwood:??? I know.
Spolsky:??? [laughs] No.? I like your original idea.
The podcast has to be a side effect of the conversations we're having anyway.
Atwood:??? True.? I think we just have to stay focused.
Spolsky:??? So we're going to end the podcast for this week.? Tune in next week for another exciting episode of: something that will have a name.
Atwood:??? And it can only get better from here.
Spolsky:??? Stack overflow pod cast.? Podcast overflow?? It's the stack overflow pod cast!
Atwood:??? Could be.
Spolsky:??? That’s terrible.
Atwood:??? We'll see.
[46:13 ends]
[Joel Spolsky and Jeff Atwood chat about stackoverflow.com in their second podcast.]
Spolsky:??? We are on the air and welcome to episode number two of the StackOverflow podcast - we have a name. Coming to you from the bright lights of New York, New York, I'm Joel Spolsky.
Atwood:??? And I'm Jeff Atwood, from sunny El Cerrito, California.
Spolsky:??? Alright, how are you doing Jeff?
Atwood:??? Doing great, doing great, I'm excited, the first podcast I thought went over very well.
Spolsky:??? Cool.? And did anybody listen to it?? I know my dad said that he did, so that's one.
Atwood:?? Well, I did actually read all the comments.? There were comments on my blog, there were comments on Reddit, and there were also comments on the Reddit from your post, and I just got through reading all those comments.
Spolsky:??? But most of them were like, [Napoleon Dynamite voice] "Why is this a podcast?? I don't want to listen to you guys talk."
Atwood:?? Well, I thought that issue did come up and I want to talk about that up front like I promised because I thought you had a really good theory because I actually don't listen to podcasts, so I'm actually with these guys.? I'm like, "Well, wouldn't it be more convenient if it was written down?" And to me the answer is yes.? But you actually convinced me that this is a good idea and I kind of believe it's a good idea based on the feedback we're getting.? So, maybe if you could open by talking about that.
Spolsky:?? Well, here's the thing, I mean a podcast is not, this isn't like we sat around saying, "We want to get out all this information about StackOverflow, what's the best way to do it?  I know, let's make a podcast."? A podcast is a different kind of thing, it's like a radio show.? And some people have radios, and they listen to them.? Some people don't, and they don't listen to them.? And that's okay.? It's just like if you are listening to the radio, we're now one of the channels on the dial.? People who listen to podcasts, it's not like they've carved out an hour from their life so that they can sit in their armchair and listen to it. You know, they're working out, they're taking a walk, they're driving to work or driving back from work, they're in the gym, any kind of situation where you kind of can listen to something in the background but not really give it your whole attention.? You can't be watching it.? That's pretty much the entire market that podcasts are ever going to have, the same as the radio market.? And we've got something there and it allows you to follow along with something that you and I were going to do anyway which is have these weekly phone conversations just to keep up to date on the status and to chat about the product and it also gives a select part of our audience the opportunity - if they want to - to listen in, to follow along, to call in with suggestions.? But it is by no means the only way in which people are going to interact with us.? And in fact there's nothing really about StackOverflow that depends on the podcast.? This is just sort of like the behind the scenes.? There were a few people who were confused and sort of thought that in some ways StackOverflow would itself be a podcast, which I guess I can see why they thought that, but that is not the case.
Atwood: Joel, one point that you brought up, that I thought was very interesting was that - particularly on my blog - I think the word you used was I was kind of didactic and you felt that hearing the audio gives you another dimension to sort of the person you are sort of interacting with from this great distance.
Spolsky: Ah, yeah...
Atwood: Do you believe that to be true?
Spolsky: Oh, yeah, absolutely. I mean I've always kind of wanted to do a podcast, because I think that people don't write the same way as they talk.? And when you hear somebody? in two different forms like, maybe, or two or three forms, maybe like you read what they've wrote but you've also heard them speak, that sort of makes them into more of a whole person, into more of a real person.? You know, one thing that I have noticed - I noticed that myself - I listen to podcasts walking to work pretty frequently.? There are a few people who come across really badly on the written page and really well in a podcast.? Some people for whom the opposite is true.? I think of John C. Dvorak is a great example, he's got his own podcasts, he's got 2 or 3 of his own, he's always on TWiT with Leo Laporte.? He's just a funny old coot, an old curmudgeon.? You get the feeling he'd be a great guy to spend time with.? And yet, when you're reading the so called "blog" or reading his writing about tech you may think he's a little disconnected or he's a little bit out of it, or flat out wrong - whatever you may think.? You realize he's just a funny old coot that does know what's going on.? He is a sort of grumpy.? One of his podcasts is called uhh, what's it called, not angry, not hard...?grouchy geeks?? No.? I can't remember, John C Dvorak podcast-angry grumpy old coots.?  Anyways...
Atwood: That sounds about right for Dvorak.
Spolsky: Yeah.? Uhm, but he's a funny guy, he's smart, it's fun to listen to him.? Similarly you've got folks like Adam Curry who just comes across as a bit of an airhead in every other form. But he's a really good DJ, his podcast is DJing, it's talking on the radio, making a connection with the listener, finding music that they might like.? Making boring things interesting, he's really good at that, and he puts on a great show.? So, there's a few cases I've noticed with podcasts where it just allows you get another dimension of a person and think about them in kind of another way.
Atwood: And I'm starting to agree with that.? I was very skeptical when we started this, I wanted to do it because, it's a call we have anyways so we might as well extract the value from the call and share it with people.
Spolsky: Yeah.
Atwood: But seeing the response, I don't want to say overwhelmingly, but it's been very very positive.? I was very pleased that people liked it and seemed to get stuff out of it that we put into it. I found that very satisfying. So I've become sort of a believer now.
Spolsky: Yes.? I think the important thing to know is that there are some people who don't read the web they just sit and listen to the radio all day long.? They're probably saying, "Why are you putting it on the web, get a radio show like everybody else!"? This is a different format, not everyone listens to this format it is not appropriate for sitting at your computing and playing the MP3s.? It really has to be in podcast format, something that is taken with you, subscribing to iTunes, putting it on your iPod and listen to it on your way to work.? That's really what we're trying to do here, and it's not going to be the be-all end-all, as I said.? There were a bunch of people who complained about the lack of a transcript.? I thought what we could do is just open up a wiki and let people post transcripts if we could get enough volunteers to do that.? We already have one volunteer, Brian Pelton, who was kind enough to, actually, transcribe the entire first podcast.? It's already up on the wiki, so if you're listening to this and have extra time and you feel like contributing to this for people who don't have time to listen to the whole thing, or for the hearing impaired, and you want to contribute by helping with the transcript, just head on over to our wiki at stackoverflow.fogbugz.com [...] and you can contribute as much or as little as you want.? If you want to, just transcribe the first five minutes, or the second five minutes, or stop, or just put down some show notes where you talk about what you saw.? There's also a discussion group on that same site, stackoverflow.fogbugz.com, where you can chat with the other two listeners.? How many listeners did we get to the first one, by the way?
Atwood: I have no idea.? I can just look at the comment length.? I haven't hooked up metrics to the site yet.?  But I will.? One point of business though, I did setup an RSS feed, essentially by setting up WordPress there's a plugin for WordPress that unlocks all the podcasting potential.? There's an RSS feed for blog.stackoverflow.com and also for the podcast section, there's a podcast feed, I submitted that the iTunes, Podcast Alley, Yahoo, one or two other places.? Hopefully everybody that wanted to get this, in sort of an automatic way can.? I know there where some snarky comments about, "well, it's not really a podcast without RSS, now is it?"
Spolsky: Yeah. Well, I think it's fair to now have RSS until you have two. It seems weird to enclose something when there's only one of them.
Atwood: This is my theory of sucking less every episode. And I promised that at the end of our first episode that it could only get better, right?? Can't get worse.
Spolsky: And we've definitely got some things in the works to try to make the sound quality a little bit better.
Atwood: That's next week's job, is to improve the sound quality. We realize there's definitely issues with the sound quality due to the way we're recording it and we're gonna work on that as well. 
Spolsky: I've got two mixers, I've got about 40 miles of cables that it's gonna take to get this working the way we need it to work. I've actually looked into this, but the people that are podcasting with Skype, to get the really high quality podcasts, you need mixers, you need real mikes, you need... stuff, you just need... gear. 
Atwood: I was kinda fine with AM radio quality - I feel like the content should be the driving factor - but to the point that it's a distraction. Honestly, i didn't see it come up that much, but it came up a few times. So if there is an easy way for us to improve it, then I'm for it.
Spolsky: Yeah, well there is a couple of reasons. One is that some of our listeners are from other countries - people who are not native speakers of English - are going to have more trouble as the sound degrades.? In other words it's going to be harder for them to understand it more quickly as the sound degrades.? But the second reason is we're on their iPod with a bunch of other podcasts and so we just sound kinda crappy compared to Adam Curry and Leo Laporte. And most podcasts are not done remotely, like this. They're usually just done by one person in a room so they can record at much higher quality, it doesn't have to be a phone conversation.
Atwood: I know what some people do is they record all the audio locally.? Like even though we're on the phone right now I would be recording on my PC and you would be recording on your PC - I mean just literally recording...
Spolsky: That's called "double-heading" sometimes. [Editors Note: I should have said "double ending" which is what the real podcasters call it. -- Joel]
Atwood: ...Yeah, and then you just splice the audio together which seems like it would work because you could line up the waveforms and they'd fit sorta like LEGO blocks, like when I'm talking you're not talking.? So visually it would kinda work.? That's a possibility too. We're looking at it for sure.
Spolsky: What I'd heard about that is that if we both did that first of all there's some post-production there to get them merged - but not much.? The problem is that CPU clocks have a little bit of variation, just because they're not really very accurate.? So over the course of, say, a half hour podcast your speech may drift a couple of seconds out of sync with my speech.? Just 'cause our clocks are running at a slightly different speeds...
Atwood: I see.
Spolsky: ...and you usually have to do a some work to re-align it.? That's what I've heard when you record it completely separately.? So I think what I'm going to try to get going is we have a Skype conversation and I got a mic on my desk, feeding into a mixer.? The mixer feeds into my computer to go over Skype and into another mixer where it's also receiving the sound from my computer - which is you talking - on another channel.? So I've got the secondary mixer where I can mix your voice and my voice and then the output from that mixer goes into another computer - digitally - where we actually record it live in.? And the advantage of that kind of system is, once again, if you don't have to do post-production that can save, that can save us, you know, an hour.
Atwood: Oh, post-production is huge.? Anything we can do to avoid that is a big, big deal.? Just speaking to the audience; I was also surprised, Joel is very, very into this - as you can see.? I was actually surprised because when I first hooked up with you Joel, I wasn't sure how hands-on you'd want to be and I was very pleasantly surprised you've been very, very hands on... in a great way for me.
Spolsky: I just like playing with audio gear.? I've got all these cool mixers in my office.
Atwood: In other ways as well - it's been a good partnership.? I've enjoyed it so far... 
Spolsky: Thanks.
Atwood: ...tremendously. So did we want to do... I know we have some questions from listeners. Also I have just a few topics that I can cover.
Spolsky: Alright, let's start with the questions, let's see how this comes out. Where's my list of questions...
Atwood: And thanks everybody who submitted questions, I know we can't get to all questions.Oh, and I do want you to talk about... before we get into this, you were very adamant that everybody had to submit audio questions. Did you want to explain that?
Spolsky: We may be able to set up that, there probably are already phone numbers that you can call in and it'll make you an MP3 of what you called in, I believe that somebody has something like that set up, that makes just a blog out of the calls you put in. If you can't figure out how to record things with your computer maybe somebody in the show notes can suggest a way that you can call in and get an MP3 from your voice. But the truth is, it just sounds weird. If I take a question that someone e-mailed me, and I read it, it's going to sound different because they wrote it in e-mail and it's not the way they would speak and this is really a radio show, this is really radio, and this is voice, that's the format we're in. And so I want the questions in that format and not the questions in a written format. They're going to sound better, they're going to flow better. It just works better. And we really did get an awful lot of questions. You know, if somebody has a great question and you just cannot figure out how to get it into MP3 format, or Ogg Vorbis format, for those of you that refuse to use MP3s, then you can still email it to us, and if we have time we'll read it. But the truth is the priority is going to be to take the audio ones because I can just play it, as I will do now. So let's go to the first question:
[13:55]Nathan Stohlmann: Hello my name is Nathan Stohlmann from Minneapolis and I had two questions after listening to your podcast.? First of all: how are you going to keep the religious discussions from happening and second: one of the things that I do actually like-really like- about MSDN and the MSDN documentation is that it shows you implementations of particular topics in multiple languages.? Is that something that you guys are looking at implementing in your system?? I hope so because seeing how to implement something, you know, in Java or C# or Python or whatever it is... Just being able to look through all of the examples like that, sounds like it would be a really great and valuable resource.? Thanks much and good luck.Spolsky: Yeah, you wanna take a stab at that? Atwood: Let's see, so his question is basically how are we going to prevent religious discussions.? So I think we talked about this at the top when we set up the project, that we don't want... I think the quote--the soundbite is, "another place to discuss tabs versus spaces".? Spolsky: [grunts agreement]Atwood: So I think having a very tight question and answer focus, like those kind of questions really can't be answered.Spolsky: "Why does Windows suck so bad?"Atwood: Yeah [laughs]Spolsky: "My question is, why does Vista suck!?" [laughs]Atwood: Yeah, exactly.? That's not really a question, is it?? So, I would expect people to downmod that question to the point that it eventually disappears, 'cause it's not really a question.? We'll have guidance that says, "ask questions that can really have a legitimate answer, please."? And I know there's some interpretation around this, but, I think that's what saves it from being yet another forum, right?Spolsky: Yeah.Atwood: You could post anything or talk about anything.Spolsky: Or that ABC debate in Pennsylvania, where the questions were, "Does Reverend Wright love America more than you do?"Atwood: Well, that whole debate was just a nightmare.Spolsky: Please ask questions that have an answer.? And actually the answer to that sort of related to the second part of his question, which is multiple languages.? For those of you that aren't familiar with MSDN, because .NET has multiple first class languages, although it's mostly C# and VB.NET, you know the whole C++.NET is also sort of a first class language and they have a thing called JavaScript.NET which you hardly ever encounter in the real world.? But, a lot of times when they give you a little piece of sample code, they'll show it to you in all four languages.? And then there's a little way to set up filters so you can only see the sample code in one particular language.Atwood: I'm less optimistic about that, because I feel like if a programmer is asking... I know I was a long time BASIC and VB programmer and I basically had to switch, because you really can't find enough VB code samples for what you want.? I mean that's what it comes down to in the end.? It's like, "can I find code samples that I want, can I find things in my language."? And I found that I really couldn't ultimately.? Unless I wanted to convert everything.? So I'm a little less optimistic that there's gonna be this emergence of people saying, "oh, here's how you do it in Perl", or you know, "here's how you do it in Python."? Because it might be a little off topic for the question.? Because if I'm asking, you know, "I want VB code that does X". I'm like, "well that's great but I really don't want to learn Python today.? I want to solve the problem that I have with this that I asked a question about."  Plus the whole issue with tagging, of keeping things in separate sections.? We're not going to have a rigid hierarchy, per se, but if you're tagging something as every language under the sun, it kind of devolves.? It's about everything and therefore it's about nothing at that point.? So I'm a little less optimistic about that.? But if you posted a question that was like, "I'm curious about how you would write this small thing in any... I don't think you can do this in your pet language.? You know, you'll immediately get programmers rushing in to say, "oh, I can do it." Spolsky: [grunts agreement]Atwood: So if you want that, you want code snippets in different languages, you could say, as sort of a little mini challenge, how would you write this, in, you know, Java, right?Spolsky: Aren't the .NET languages close enough that the translation from C# to VB - for somebody who knows both - is almost mechanical. It's not like you have to figure out a new way of doing it.Atwood: Well that's really the problem with the whole concept of .NET language independence.? It ends up not meaning much, because it's like a Coke versus Pepsi thing.? They've become increasingly different over time, but still not very different.? What do you get for that?? It's like, the mental overhead of translation is what it is, okay.? It's still there no matter how simple the languages are, and it bites me all the time.? Those little subtle differences, like zero-based versus one-based, is horrible.? You always forget.? And what you get for that is two languages that essentially are the same.? Right?? It's not like Python, which really is kind of a... the whole duck typing... it's pretty different.? It's worth the mental gymnastics translating in your head, because it's a significantly different language.? I think because C# and VB.NET are really so closely related, it ends up not bringing a lot of value to the table.? So that's why I'm really excited about what they call the dynamic language runtime, which is basically the platform to put Python and Ruby and things like that on the CLR.? I think that's great, because those are truly different languages that will make it worthwhile to me.[ 19:05 ]
Spolsky: Yeah, but then again, if you're -- just 'cause you're on the CLR doesn't mean that there's a nice class library like, like the class library for... I don't know... sending emails or whatever the case may be in .NET in the framework basically -- the framework classes.? 
Atwood: Oh yeah, yeah that's...
Spolsky: I mean they were really designed for C# and VB.NET.? And, and so if you start using those from Python, although you can, you may find that they're not really using a Python idiom, and that they feel kind of unnatural in the Python world.
Atwood: Yeah, I've read things like that before where they'll port a language like JRuby, uh, which is, you know, Ruby running on sort of the Java runtime, and then you realize that it wasn't really the language you wanted.? It was all the... 
Spolsky: [grunts agreement]
Atwood: ...cool libraries that people had created...
Spolsky: yeah
Atwood: ...Those don't automagically get ported over when you do that.? So it can be a little tricky to manage that.? So I'll try to be optimistic about that, but I think if you want that you'll have to?phrase the question in a certain way to get, you know, five different language implementations of 'x'.
Spolsky: But yeah, there maybe some type of questions -- and maybe if we had a facility for that... you know, uh, there's a class of questions that's like, "How do I 'x' in my language?? How do I... well, you know, can I just please see some sample code for just sending an email?"
Atwood: Right
Spolsky: "I know the subject, the from, the to, the SMTP server.? Show me this code in every possible programming environment."
Atwood: And the other thing I want to, I think,?answer was, I think some people were thinking of this as like, "I'm going to ask these really large, grandiose programming problems."? And I think you can do that, but I think you can also be very tightly focused, like when I was setting up, uh,?blog.stackoverflow.com the other night I needed to remember how to do a dotted underline for links and I couldn't really remember exactly how to do it...
Spolsky: Oh yeah
Atwood: ...so I basically did a web search for that.? So I could have asked a question which was... I mean it's a really simple question.? This is fine this is actually what the site is designed to do, it's like, "How do I create that dotted?underline effect on links?"? And then I could actually -- I'm wondering if I could actually answer my own question.? Then I started thinking that through.? It's like, then I would like to post it as like, so other people could find it even though I sorta knew the answer, or found the answer.
Spolsky: Yeah, or so you could find it next year.
Atwood: Uh, well,?exactly.
Spolsky: When you forget it...
Atwood: Yeah
Spolsky: ...I guess you're not... [chuckles]
Atwood: Blogs... 
Spolsky: ...you're not old like me so you don't...
Atwood: Bogging to me is sort of like an institutional memory.? I wanna remember the things I've done...
Spolsky: Hey! Hey Jeff, have you ever had a question that you typed into Google and got an answer that you wrote?
Atwood: Oh, yeah.? It's actually annoying.?[Spolsky laughs] Because I don't... I don't actually want... typically when I'm really searching for something I know what I've written for the most part.
Spolsky: Yeah
Atwood: Um, but if I get hits on my own site it's kinda annoying 'cause...
Spolsky: Oh
Atwood:?... I know what I wrote and I don't really need to read it again.
Spolsky: Oh I get that and I'm like, "Yeah that's how you do it." [chuckling] and I do it and?I'm happy.
Atwood: Oh, you had actually forgotten...
Spolsky: Yeah
Atwood: ...that you had written that.
Spolsky: Uh huh.? That's happened to me at least, at least once or twice.
Atwood: Well, in a few years I'm sure that'll start happening to me.
Spolsky: Um... okay... let's uh, let's try another question.? What do I got?? What was that?? That was 85 hundred.??We're doing this with extensions on Asterisk.? It's kind of complicated.? I'm now actually dialing an extension that is programmed to play an mp3.? And that's how I'm getting these mp3s onto the podcast.? So uh let's see.. 8501.
Youell: High guys, my name is Matt Youell and I'm from Portland, Oregon.? 
Spolsky: [Interrupting the recording] Hi Matt.
Youell: I guess I'd like to know how you will handle the problem of content theft.? For example there are websites that will blatantly copy, like entire forums, right?? They'll throw them on their own website, they'll slap some advertising on top of that and then I guess they run off to the bank or something.? I assume they're making some money, anyway. After that the content --?it?just sits?there and rots.? But what's amazing to me is that somehow it still ranks high on Google sometimes.? And another problem I've seen is what they're calling "re-blogging" which is smoother, but basically it results in the same problem which is outdated content.? So, assuming StackOverflow gets big and has a lot of content, how will you handle competing against your own regurgitated, outdated, spamified content? 
Thanks.
Spolsky: Is this a real problem?
Atwood: This is a real problem.? I mean this happens to me and it's probably happened to you and you probably don't realize it.? But...
Spolsky: I do get people regurgitating it but I don't think they get anywhere in terms of like PageRank, or readership or... I mean it just seems to me like a waste of time for them.? 
Atwood: Yeah, I would say maybe that's true as well, but I think on a personal level it's kind of annoying that somebody's like, taking your stuff and using it.
Spolsky: Yeah
Atwood: Essentially to?make money off you in sort of a really kind of grimy, unsavory way.? Um, but I, I don't know?that there's a good solution.? I mean that's really the problem.? It's like, do you really wanna be the cop running around putting down the ban-hammer on these people.? First of all how do you even do it?? It would take so much time to track down -- okay, the ISP, or the web host, and on some level...
Spolsky: Wouldn't we always have a higher PageRank ourselves then, then these guys for the article? 
Atwood: I would think so.? I mean, I know when I'm searching for my stuff I almost never encounter...?what happens is people will mail me and say, "Oh look, somebody?stole your stuff." and I appreciate that because I do like to at least know that it's happening?-- right? -- on some level.? Uh, but, what can I really do about it?? I mean, I know one thing I have done in the past --?and you might find this kind of amusing -- is when somebody steals your post and you have pictures in it [Spolsky laughs], you control the content on their site so you can put pictures up there.? So I did that once, I put pictures of the treeman, which is like that skin condition where the skin grows uncontrollably, it's actually very very disgusting.? Uh... well.. you.. very..?uh, you know?I feel sorry for the man and all that, but it's, it's something you don't really wanna see in a blog article.? But beyond that, that was just a lark.? That was just me sort of having fun.? I wasn't really... you know, there's nothing I could really do to get these people to stop.
Spolsky: I feel... I used to... I used to care about this, and I used to send them little notes saying, "I wish you would take this down because, you know, otherwise people blame me and accuse me of..."?you know the worst thing?is when?somebody says, [dumb voice] "Hey did you just steal your article from that guy?" [Jeff laughs] I'm like, "Yeah, uh huh, the latest post of Joel on Software..."
Atwood: The can't figure out who the real source is?? That's funny.
Spolsky: Yeah, uh, you know they read it and then they read it on my site and they're like, [dumb voice] "Hey, I saw that some where!" and they Google it and they find it and send me it...? You know for a long time... what was that program called?? Manila was the source of a lot of these problems because it was a blog tool that -- the default behavior -- it like added something to your browser that's like "Blog this" and you clicked it and the first thing it did is?copy the entire thing you were blogging about and I think the idea was you could then cut out everything you didn't want.? So it sort of quoted... it did a hundred percent quote for you by default, and then it was your job to trim away the parts that you didn't want to quote.? And this was sort of one of the early blogging tools and it wasn't very popular, but it did have this nasty side-effect that people that didn't know much about blogging who sat down and started using it... was it Radio Userland or Manila? Maybe Radio Userland.
Atwood: But this is like, accidental?? I mean these people are... 
Spolsky: Yeah, and this is just people who don't know what they're doing.
Atwood: Yeah, thats different and we're,?we're definitely talking about people doing it very much?intentionally with...
Spolsky: Right
Atwood:?...the idea of, "Hey, I want content that I can put advertisements on...
Spolsky: Right
Atwood:?...but I don't want all the burden of creating any content myself."
Spolsky: These are small people with small ambitions. They, they don't get anywhere in life. I don't, I've lost interest in caring about them though, y'know?
Atwood: Yeah, and actually...
Spolsky: They're not?getting very?far.
Atwood:?I've actually tried submitted Takedown Notices and, like, you have to like do a fax, and, like it's way too much work to take these things down.
Spolsky: Right
Atwood:?Now, one thing I was thinking about, and we'll probably do, is embed a GUID, I, I?love GUIDs, actually, they're fun to create because there are so many of them.? We can...
Spolsky: [chuckles]
Atwood: I know, it's great. You can always make up a new batch of 20 every day.
[26:19]
Spolsky: Hey Jeff, let's sell GUIDs on the site: two cents a-piece.
Atwood: [laughing] I know, GUIDs are, there's something about GUIDs that...
Spolsky: A hundred for a dollar-fifty.
Atwood: I don't know why, but they are really amusing.? Like, at my previous job I proposed --?we had too many name conflicts with people starting, "Oh another Scott", it's like, we should just assign GUIDs when people arrive, like, "This is your new name -- it's your GUID.? Right, so just please learn to refer to yourself by this 20-character hexadecimal string and no more problems."? 
But, if we embed a GUID at least we can know when it's happening.? Because, well, part of the challenge of figuring that out is doing a search that picks everything up.
Spolsky: Oh! I see.? I get it... 
Atwood: At least then you know.
Spolsky: ...then you just Google search for that thing.
Atwood:?Then you say, "Oh look.? There's no way you could have this GUID."? 'Cause like, it's the only GUID like that in the world, right?? It's a fingerprint.? So we might do that...
Spolsky: Or it's a coincidence.
Atwood: Yeah, a coincidence.? At least we can track it; I don't know about enforcement but I think embedding a GUID is a good way to start and then we'll just...
Spolsky: Do we want people to maybe reproduce the content elsewhere?? I mean maybe we want some of this material to be sort of uh, uh... I don't want to say 'Public Domain' but a liberally licensed body of code that other people might distributed in, in better fashion then we can.
Atwood: That's funny that you bring that up because I've often thought that piracy is an intractable problem.? The only way to really solve piracy is to give everything away.? And then, in which case piracy no longer has any meaning 'cause you can't really steal stuff that, you know, has no owner.? Um...
Spolsky: That's the principle of shareware.
Atwood: Yeah, and this content -- this topic did come up in an email.? Somebody was asking about the licensing of the content that we're gonna put on the site.
Spolsky: Right.
Atwood: And since it's content that's created by a bunch of different people... I don't know, I mean I'm open to the idea of having it be something you could reprint like Wikipedia perhaps.? I know our goal is not like, to own the things that you write.? My goal, at least -- and I think you share these goals --?is just to create something that's actually helpful and useful, right...
Spolsky: [grunts agreement]
Atwood: ...where everybody collaborates.? I'm not really looking to, um...
Spolsky: To some extent they may be more willing to collaborate if the material is more freely available.
Atwood: Yeah, exactly.? And since y'know, there's... say on a?given question there might be, y'know,?four or five people that participate, so I think you gotta have some kind of broad umbrella that all these people can be under and feel like, y'know,?"Hey!?I'm getting value out of this, and you guys aren't just using me as a conduit to make money."
Spolsky: Right
Atwood: Which certainly is not my goal.? I just want better information in the world.? I don't really?have any other goals other than that.? So, it's something we're thinking about, for sure.? And that might also mitigrate [sic] the whole piracy factor as well, which would be nice.
Spolsky: Uh, yup.? 'Cause we won't care.
Atwood: Yeah, exactly.
Spolsky: Alright, let's take another question.
Davis: Hi guys, this is Andrew from compupage.com... coming to you from Fremantle prison in Western Australia.? I have a long term challenge for you.? Just to a break the life-cycle of a tech resource:? typically you'll start out fairly obscure.? The only people who can find you are those who are quite good at Google,?who also tend to be quite good programmers, and you get reasonable questions and reasonable replies.? Over time you, your Google rankings improve and you start to place well with the kind of search terms that less sophisticated users will use.? And around then you're gonna get an avalanche of people posting questions like how to write a for loop and, "Can someone please do my college assignment for me?"? And that's usually followed pretty closely by your original basis -- sophisticated users -- abandoning you for some other site.
So the challenge for you guys isn't to become popular, but, "How can you place well in Google while still retaining your original user-base?"? If you can keep your value as a tech resource despite placing well on Google you'll be invaluable to me and a lot of other people; so, for the both of our sakes: best of luck.
[30:23]
Spolsky: Best of luck! [laughs]
Atwood:? That one was really hard to hear on my end. I mean, I think I got most of it but did you want to paraphrase what he said there Joel?
Spolsky: Okay, and I'll try to clean it up in post-production. One of the reasons why I set up a mixer is so that I can adjust these volumes on the fly. Basically his question is: you start one of these things, it's great because you have a very narrow audience of highly technical people who find it - the early adopters - and the quality of the content is great [...] these things start out great with all kinds of smart users asking smart questions because they're the early adopters who find it, but as you start to get a larger audience the quality diminishes. I don't think that's true. I think it's true for a general discussion forum, I saw that happen to Reddit, it happened to -- I hate to say it -- my discussion forum where when they were a little bit more elite early on the quality of the discussion were higher. The reason I don't think this is going to happen is that we're not really creating a single discussion point. We're creating half a million articles on a very very narrow topics, and every one of them is narrow enough that it has its own demographics.
Atwood: That's perfect, that's exactly what I would have said because, all these microclimates. I find that what's interesting on the Web is that the more general you are, the more hosed you are, because you just can't sustain, you have the Youtube problem where you have 50 thousand comments and all of them are completely inane. But the more targeted you get and the more you can be within a certain community and even within sub-sub-subareas of that community, you start to get some real value because there's only a tiny percent of people in the world interested in that question, and they really care. I mean I have seen this on my blog when I'll post things that help people about a very specific niche I get the most helpful kind of feedback, I mean really helpful feedback, details about what they did and how they did it, there's this really nice reciprocity that goes on there. And I think the secret is to stay very very narrow. As I mentioned at the top of the call, I expect the questions to be very very narrow. And I would hope there are millions of these very very narrow questions that only five people in the world care about, cause those people are not gonna game you, they care about this information.
Spolsky: Right. What you will see if that if the question turns out to be is the canonical source for talking about some common problem that everybody is having with the latest service pack of Windows or something, that particular question will start to have a very high PageRank and that PageRank will start to attract the spam engines that try to add to the spam at the bottom of the discussion, just to get PageRank, and it will start to attract, basically, the idiots. And so, we'll need kind of more -- we'll need to be more aware, of the possibility of spam, on some of those higher distribution, higher PageRank, more common questions.
Atwood:? Right. And one thing we talked about, again looking at Wikipedia, is having a lock-down mode, where if an article starts to become really popular, lock it down so that only people with a certain amount of reputation can even edit it at all. Normally, we will allow people who don't have an account to go in and not necessarily edit, but add responses. But for really popular things, there might even be an automatic sort of lock-down where it goes into...
Spolsky:? Yeah. It could even be based on the PageRank, or just the number of hits. If some particular topic just becomes too noisy, you need a higher karma to post to it. Just to get rid of the drive-by-shooting spam.
Atwood:? Yeah. I've actually seen that on my blog. Some of the stuff that ranks really high, for really common problems that I had like two years ago, that does happen, and it's actually annoying, cause like every week I have to go in and like clean in it out. So I think there's an argument you can make for some kind of automatic lock-down mode.
Spolsky:? Yeah, we just made the Joel on Software discussion forum which is based on FogBugz if something scrolls off the home page you can't post to it. Period. It's just closed; it's archived. Part of the reason is that nobody will find it at the discussion group, it's a very very old topic.? To reply to a very very old topic is sort of inappropriate. You're in the spirit of the staircase as they say, you're at a party and you've been insulted and everybody left the party, you're the only person in the room, and you think of the perfect retort and you shout it up, and there's nobody to listen to you anymore. And so once a discussion topic is scrolled off the home page, in the FogBugz discussion groups, it's shutdown, you can't post to it. And indeed 99% of additional posts that would have been there would have been spam. That eliminates a lot of automatic spam, and it also means that the only place where people can spam is on the home page so they still being seen by moderators, they're not buried somewhere.
[35:18]
Atwood: A lot of this community stuff is very near and dear to my heart because I spent a lot of time, as I'm sure a lot of hard core geeks have, online on these kind of discussion forums or boards and it really is a fascinating problem because when it works it is like the most beautiful thing the signal to noise gets really high and you get this amazing information that you wouldn't get anywhere else, and then it's so sad when it breaks down too.? You've seen the potential that could've been there. You've seen it work really well.
Spolsky:? You get a large enough audience that you attract the people that just want to take advantage of your large audience.
Atwood: One good example of a site that just produces amazing content, over and over again, MetaFilter does this thing where you have to pay to sign up, like $5 to create an account there, but the signal to noise there is just off the charts, it's really really strong.
Spolsky: Right
Atwood: My hope is that we'll retain some of that.
Spolsky: Well, if you take a five dollar bill, drop it in the mail, and send it to me I will make sure that you have a lot of karma on StackOverflow.com.? Not the official policy, but like a say, a clean five dollar bill -- or a hundred.? I'm not picky but...
Atwood: How 'bout if they could just open a FogBugz account, would that work for you?
Spolsky: Umm, er yes, well yes.? Actually, uh, yeah, FogBugz customers also have a special... Another question?
Spolsky: I don't know, I think a lot of times you'll see people writing code in a high level language where they're doing what I would call "consing up a string" which is using a lisp term, but basically you're, you're, you've got some string and you're building it up one character at a time.? Let's say, for example, that you need to write some code that replaces all the exclamation points with question marks in a...
Atwood: Yeah
Spolsky: ...in a blob of text.? And the algorithm that you choose to write -- although everybody today would just use regexes or something and think they were pleased with themselves.? But let's say that you were doing something a little too complicated for regex -- the algorithm you would write would go over the characters of that string, or over the bytes of that string, and if the character is a exclamation point then it would append a question mark to the end of this new string that you're building up and otherwise it would just append the actual character to this new string that you're building up.? So basically you have a loop and in the center of the loop you're appending bytes to the end of a -- to the end of a string.? And I see that code all over the place.? And if you've learned anything about memory management you realize that that is horribly inefficient, that that is just a terrible way to do things.? And even when you're using a higher level language like C#, when you write that algorithm in C#, you're not -- it's going to perform badly.? And if you understand about allocating memory and reallocating memory and reallocating memory and how much time that's going to take, because you've learned about that in C programming, then you'll know not to write code that does stuff like that even in higher level languages.? And in your higher level language you'll say, "Alright, I've got to pre-allocate a buffer that's big enough and then just copy things over, and that's going to save me a lot of time."? And indeed it will even in your higher level language.
Atwood: But wouldn't it be more useful to speak in terms of O notation like algorithmically how long thing are going to take. I mean I think that...
Spolsky: I don't even know how you could specify when you see something in a programming language at a high level of abstraction, you don't know how long the thing's gonna take you just like "Okay, it's a string append operation. How long does a string append operation?take?"
[46:45]
Spolsky: I'll use another metaphor. I got this mixer, this gigantic mixer sitting on my desk, which I'm hoping to get working with the podcast next week, so we can mix it on the fly. But, there's all kinds of buttons on here, and a lot of them I know what they do, like I know the trim, I know the?main volume button. But there's other buttons - like there's something here that says "level depth" and it has min, max, parameter 2 - I dunno what that does - I guess that's one of the ... oh, that's why this wasn't working! [Laughing] Uhm, sorry. 
So the exact point here is there's a bunch of buttons on here, and sometimes you just can't get the mixer to work, and you're just sitting there, trying to get what you want to happen, and the way you get this working is to flip the switch that you didn't understand back into the position it should've always been in. And then it will start working again. Now, you can use this mixer, just by learning, it's all set up for you to turn these two things - this is the volume of me, and this is the volume of Jeff, and just adjust these two knobs and my volume will change, and Jeff's volume will change [demonstrating].? And you can learn that, and you can operate this mixer, as long as everything goes well.? The minute something breaks, you don't even know where to start looking.? And so this is sort of like the novice using a computer, right?? You can setup somebody who doesn't know anything about computers, you can set them up to say "to send email, click here" and then type who you want to send it to, and it'll send them your email. And then they're going to make a mistake, and they won't know anything - they'll have to come get you.? But they'll be able to send emails all day long - until they make a mistake and then they'll have to come get you. Same thing with this mixer, you know, I can turn these two little sliders all day long, and adjust the volumes, but as soon as I need to change something or something gets broken or something gets unplugged, I have no clue, because I haven't really learned the mixer. I haven't really learned the tool.
And that's what I feel like, C is - that's the tool. That's the CPU. That's your tool. And that's what you have to really learn, otherwise, you're gonna be sitting there one day, and you're gonna be spending 8 hours trying to debug something, and none of it's going to make any sense. Because what's going on under the covers has not been explained to you. You've just been told how to adjust the two volume controls.
Atwood: Right.
Spolsky: And that's just a good point to quit, a good point to get a lot of feedback from our listeners, because I think we're sort of probably set of a huge holy war here. Maybe I'm overestimating the value of C.
Atwood: Well you're the one who said we shouldn't be putting those disclaimers in when we talk, just say whatever we thought ...
Spolsky: Yeah, because everything has to be disclaimered so much anyway. This is obviously just my opinion, but some people are going to find this interesting.? If you do find this interesting, please, figure out how to record MP3's on your computer, it's very simple, you could get a program called Audacity, which is free, or you could just use the sound recorder that's built into Windows and record it and then use this GNU program called LAME, which will convert it into MP3. And then email them to:
Atwood: Podcast@stackoverflow.com. 
Spolsky: Podcast@stackoverflow.com.? Uh, we'll get those throughout the week.? We listen to most of them.? We read, um, you're text if you write text.? Uh... keep it under 90 seconds 'cause uh, we're trying to keep this whole thing -- and as you can tell um... uh, y'know, the shorter you make it, the, the, the better it fits into our program so the more likely we are to use it.? So, um, keep it quick, uh, record it as loudly and as clearly as you can, send it to uh, um,?podcast@stackoverflow.com, and you might get on next week's show.
Anything else?
Atwood: Uh, no, I think we can talk about some other stuff next week: we'll have lots.
Spolsky: Alright, we will talk to you again next week.? Thank you very much from, coming to you from... I don't know what to -- we need a sign-off thing;?"Keep your, your?feet in the ground and your head reaching to the sky."? Or...
Atwood: "Keep your feet on the ground, and keep reaching for the stars."
Spolsky: Thank you!
Atwood: That's Casey Kasem.
Spolsky: Casey Kasem.? That's right, I knew it was something like that.
Atwood: Yeah
Spolsky: Alright, seeya next week.
Atwood: Alright, bye.
[46:14 ends]
Joel Spolsky and Jeff Atwood chat about StackOverflow.com in their third podcast.
Spolsky:??? Hello!
Spolsky: Oh wait, I just got a picture of... who's that?
Atwood: It's Ogre from the movie Revenge of the Nerds.
Spolsky: Is that that guy who was in A Weekend at Bernie's?
Atwood: He's possible, he's a character actor.? But that specific movie is Revenge of the Nerds, where he screams "Nerds!"
Spolsky: Got it.? Everybody's favorite movie.? Alright, so we're coming to you today on the StackOverflow Podcast #3.? Hopefully better sound.? We're recording this using Skype and Pamela for Skype, which is a little $20 program that you buy and you add it into Skype and it lets you record those conversations and should allow us to play sounds and you know what? I got rid of all that audio equipment that I had here on my desk.? All those mixers and stuff that Leo Laporte and Adam Curry convinced me were necessary.? I don't think they're really necessary.? I think we're just going to record this using software and then I'll use a program called Levelator, which will basically adjust the levels on the file that we generate so that we all come out at the same volume.
Atwood: Yes, there was growing amount of unrest about the difference in volume levels.? I think people were perceiving it as a slight, which ended up having difficulty in hearing me.
Spolsky: And I don't quite know how much Levelator will really work, because sometimes one person has a lower voice or a more bass-y voice, it might sound like they're at different levels even though they're not technically at different levels.
Atwood: Right.? And Joel, what kind of headset are you using?? Anything fancy?
Spolsky: No, I just have a plain old Plantronics headset - not the USB thing.? The advantage of that is that then I can plug them into this little switch to switch between the speaker and the headset.? Basically, when I'm not talking on the headset, you want the sound to go out the speaker, otherwise, you don't hear it when your computer rings.
Atwood: Yeah, I'm using Plantronics, but I'm using their USB model, so it shows up as another sound card.? But what I like about that is that you can configure applications so that they specifically talk to the headset, like Skype for example.? So you get this nice segregations of sounds between outputs.? It's pretty cool.
Spolsky: That makes sense.
Atwood: It's also very very clean, cause Windows detects it and it automatically works and it's really pretty nice.? So I do recommend USB headsets as a general rule.? Easier to deal with.
Spolsky: That'll be the next iteration of this.? We should probably not make this a podcast about podcasting I think.? Probably the first three episodes of every podcast in the world are about podcasts.
Atwood: Yeah, well I think we're just trying to iteratively improve what we're doing.? We just want to make sure people know that A) we're listening to their feedback and B) acting on it.? That's all.
Spolsky: That's right.? So what's new?
Atwood: So let's see.? Some new things.? I had a few things left over from last week that I wanted to talk about, we didn't get to.? One of them, and these are largely based on the feedback that we got off the initial post that you and I both did on StackOverflow.? One of them, I kinda covered on my blog, was the "Are books dead?" theme.? A lot of people got that out of your post, your initial post.? Cause you started very provocatively with saying software developers don't read books any more, which is largely true, but there are some caveats around that.? And when we talked about doing StackOverflow, we believe it's going to be complimentary to what I call classic programming books, books that teach you how you should program and why you should program.? The theory of programming rather than "Here's how you do this in Ruby." or "Here's how you do this in Java."? Now those kind of books I love, and we feel that StackOverflow fills a niche that those books don't fill, which is namely the immediate gratification that we expect of programming:? You have a problem and you want an answer to that problem.? And that's what StackOverflow is really about.? And actually, you know Joel, it's funny, when I started my blog, I literally founded it on the idea of these classic programming books that I wanted to read and share with people cause I didn't have an outlet for that in my current place of employment at the time.? And I never found your - you had a recommended reading list and yours and mine are really similar.? There's a lot of overlap.
Spolsky: There were two reading lists.? One was a really really long time ago.
Atwood: 2002.
Spolsky: Yeah, God, I think the original version of that might have been 2000.? That might have been something that I did really early on.? Just because I was getting so many questions saying "Well, what should I read next?"? I don't even know what to say any more.
Atwood: You just point to your blog post.? I had an e-mail conversation with, and I'm probably going to mispronounce his name, is it Steve Yeikky?
Spolsky: Yeggy.? His friends call him Stevey.
Atwood: But I had an e-mail conversation with him cause, do you remember, Joel?? I remember.? It's weird how you'll write stuff and I'll focus on little phrases that you've written.? And one of those phrases that I've always focused on, you were sort of a relatively early adopter of the Mac and one of the observations you made is that you found the font rendering really screwy.? And I thought that was interesting and I never really understood what it was about, until I downloaded Safari.? And Safari, on Windows, is unique in that it thrusts you into the world of Apple's font rendering.? Like they literally ported over Apple's font rendering lock, stock, and barrel.? So I was looking at the font rendering going "What happened here?" You know?? And I went back to your post and then I wrote a post about it and I wasn't necessarily saying it sucked or anything, but I wanted to understand why they made that choice.? And it was good because I learned so much from that and you actually had a follow-up post about explaining "Do you favor the font designer like Apple does or do you favor the pixel grid like Microsoft does?"? Not that one is more right than the other, it's just understanding the choices you make, which is true in so many things in programming, right?? It's not like there's the One Right Choice.? It's understanding all the trade-offs involved in your choice and making the appropriate one.? And Steve Yeggy just discovered that.? I don't know if you saw his post, but he's like "I was in an Apple store and I saw how great the font rendering was and I can actually can read it from a distance and I decided that Apple just renders fonts better." And so I e-mailed him, basically, links to my blog post and I felt kind of guilty saying "hey Steve, I don't really want to talk to you I just want you to read my blog."? But I felt that it was really helpful so that he could get a sense of why he had that perception and what's going on there.
Spolsky: Yeah eventually people figure it out.? I honestly don't even think that the people working on typography at Microsoft or Apple are even completely necessarily aware of what they are favoring and why their font rendering is so different.? And for any listeners who are listening who didn't follow the whole discussion, Microsoft had this ClearType group that actually specifically designed some fonts that were designed for screen legibility.? And that meant that the font itself was designed to fit in the pixel grid and Apple has never done that.? They've always taken print fonts and they've used anti aliasing to just kind of approximate and it just doesn't quite fit in the pixel grid so well.? And so it does come out blurrier but it is truer to the underlying font.? Certainly if you are doing design work for the printed page there's a huge difference between these fonts on the printed page where you have 300 or 600 or 1200 DPI that you don't get on the computer screen where you have at best 96 DPI.? The truth is - for computer monitors - there are really only four or five possible fonts that you can see the difference between unless you really do this Apple style anti aliasing.? At smaller fonts at like around the 9pt, 10pt size on Windows all the sans serif fonts look like all the other sans serif fonts and all the serif fonts look the same and you can barely tell the difference.? And the difference is that Apple's way of rendering those you can sort of see the difference in the general weight, the feel of the paragraph of text, does it feel crowded or spindly, does it feel heavy or light, and how dark is a whole paragraph of text.? That's something that Microsoft's fonts never preserved because they've all been hammered into the on screen 96 DPI or 72 DPI pixels.? The other difference is sort of a long time difference which is that traditionally Apple did have 72 dots per inch and Windows had 96.? So pretty much Apple had to use forms of anti aliasing to show you anything.? They truly had blurrier fonts for a long time.
Atwood: Yeah and the other thing I liked in your response to that was that you pointed out that people, and you see this too in programming languages as well, people like what they are used to, right?? There's certainly an aspect of I grew up with this or this is how I learned to do it or this is what I've always seen so this is what I like.? And I think that is why as a Windows user being used to ClearType, which I think ClearType is excellent, seeing Safari's rendering I was like "Oh my God, my eyes are going to bleed from the weirdness of this font".? I think that if you saw it everyday on the Mac side you would grow used to it and say ok this is the way a font should look and I've heard people describe ClearType as quote "spindly."? Because it is hammered into the pixel grid so it doesn't blur over it is very rigid, it's very tight, aligns very sharply with the pixel matrix.
Dave Kauffman:? Hi guys, this is Dave Kauffman, sending in from Vancouver, Canada.? Joel, it's great to hear the sultry tones of your voice on the podcast, rather than just written, so I'm looking forward to supporting the podcast and hearing more episodes.? Here's a question--Spolsky:? Dave is somebody that I know from, I guess he worked at Creo-Cytechs, which is a publishing software company in Vancouver.? I don't know if he's still there, maybe he'll tell us.Kauffman: --for you.? I think you've written before, and I tend to agree, that computer science as a science in universities is quite inappropriate.?? That is, people want to really study the science of it are very in the minority and need to be at universities.? But for the most part, we want good practitioners in the craft of software development, and software engineering.? And that may not be the right place for them when they're trying to find theoretical backgrounds for things that are heuristic.? So my question for you is, is there any real-world use for recursion, or is it just kind of one of these kind of made-up, interesting things that should stay in academia?Spolsky:? Well, there's definitely a use for recursion, it's just not as common as you may think.? But when you're writing a compiler, you definitely need to know how to use recursion. ?Atwood:? Yeah, it's an unusual choice, I think, in mainstream programming.? I think it's definitely something you want know about and understand.? I think more so than pointers, certainly.? I think that recursion is a very fundamental concept that programmers need to understand.? But yeah, I think it's less common in the wild than people who practice computer science--Spolsky:? Somebody who's working in a typical insurance application top-level, is unlikely to ever need to recurse.? Although you might, if you're getting some data in an XML format, and you need to kind of, things can include other things--you may have to write some recursive code, you probably will.? I'm willing to go so far as to say that recursion is a fundamental concept.? On the other hand, there's a lot of stuff in computer science, like lambda calculus or even linear algebra--which is often taught as a part of the computer science curriculum--synchronization primitives, that you're probably not ever going to use, that are just a little bit too theoretical.Atwood:? There's also this big divide--and you also spoke at this Canadian conference that I was invited too, CUSEC, and one of the things I found out there was, there's a huge controversy in Canadian universities about computer science, as a discipline, versus software engineering as a discipline.? I don't view them as different, but they have a set of terminology and a set of classes that are specific to those two things, and it's hugely controversial.Spolsky:? Well, there's no question that they're different.? Computer science is a field of academic study that has pretty much been unchanged since the 70's--I would even go back to the 60's in terms of the core curriculum--that is an academic course of study that in liberal arts institutions is intended not necessarily to be preparation for a career in programming or in software engineering or software development, but to be an academic discipline of its own right, with its own set of important things that you need to know and results, and the kinds of things you do in computer science include proving theorems, proving that programs never halt, for example, stuff that was relevant to what computers were used for, maybe in the early 70's occasionally, but honestly are not really related to what a software developer does today.? So I disagree, I think that computer science is a reasonable preparation for a career as a software developer, and especially if you go for the whole idea of liberal arts, that you're going to a university to learn a lifetime worth of skills that are generic skills you'll be able to use everywhere, then computer science is a pretty good way to learn how to be a software developer.? And for all practical intents and purposes the elite of software developers generally have a computer science education.? Not always, but often.? That's very, very different than software engineering.? The stuff in software engineering that probably every working programmer should learn.? How to design user interfaces that are easy to use, for example, is something that has almost nothing to do with computer science, and is not a part of traditional computer science, and should be a part of every reasonable software development or software engineering curriculum. ?Atwood:? And I think with academics, you have a lot of the same problems of practitioners versus people in the ivory tower studying.? And so I think you gotta have a mixture of thinking and doing.? So as long as you have a good mixture of those two disciplines, I think you're gonna be fine.? I don't think the terminology--I get annoyed by the fact that people really harp on this terminology issue, and I think it's more about what you're doing, versus what you call it.Spolsky:? In defense of the Canadians, it was pretty much the students in Canada who lobbied for a software engineering curriculum to be available.? And that was because they were directly complaining at the irrelevance of many things in computer science to being a software developer and the computer science department's inability to teach kids things like source code control, to teach them code hygiene, to teach them anything about working on a team of software developers.? The computer science curriculum as it developed just wound up being a different thing.? Y'know, it's like trigonometry versus civil engineering. At its heart, there are probably two or three classes that you both wanna take, but fundamentally, they really are different courses.? And more power to them.? It's sort of interesting that that was a student movement in Canada, that they were actually able to sort of persuade their universities to create this true engineering curriculum for software engineers which, I'll bet--I don't know the details, but I'll bet probably only has about a quarter of the courses in common with computer science. ?Atwood:? Yeah, and I love the message there, because it really is--I was appalled to read that a lot of computer science--or whatever you call it--degree students had no practical experience with source control.? And that is as fundamental as it gets to the practice of actually writing software.? And I felt like that was a huge oversight.? So it's a tremendous credit to the Canadian students that they forced this issue. Spolsky:? That actually segues well into this call, I'm gonna play another call, from Nick:
[45:43]
[48:36]
Spolsky: OK, another question.? I don't know if I have another question.
David Alison: Hi guys, my name is David Alison.? I live in Ashburn, Virginia.? I have, er, I'm really excited about this show, this sounds an interesting idea and I'm interested in seeing how it evolves.? The question I have for you is: as a .NET developer that does web based solutions, I'm curious how you guys look at things like the Google App Engine and the impact you think that's going to have, you know do you see that evolving on the .NET side where people will be able to at some point from within a solution or a tool like Visual Studio be able to deploy their application to a scalable hosted solution easily, and as I've been doing web based development for a long time and that is probably the single most difficult thing, is actually, er, it's not building the application, it's supporting it, it's scaling it on the back end, it's all of the IT and infrastructure you have, and that's something that the Google App Engine kind of makes all go away, or the promise of it is very straightforward.? So I'd love to have you guy talk about that and hear what both of you think on it.? Thanks.
Atwood: I can start a little bit on that one.? So I think what Google and lot a lot of other companies are doing now are simply removing what I call the software installation barrier, where everything just runs out of the box, there's no software to install, it's sort of like the browser model of do you install, you know, Facebook?? No you don't you just go to the Facebook website and everything just works.? So, with Google App Engine, you know, all your development would essentially be ready to go out of the box.? Like there's no ... Think about what I had to do with StackOverflow.? I had to install Visual Studio, I have to secure a dedicated server.? All these intermediate steps I have to to get my app go live on the web.? Whereas with something like Google App Engine, you go into your browser, you write some code, and then bam, it's consumable on the web almost immediately.? So they just removed a lot of the intermediate steps.? To me that's what I see it as.
Spolsky: Er, that's clearly the goal.? That's obviously what they're trying to do. We go a long ways to go there though.? The first issues are, if you're going to write code that can be automatically scaled, you have to write code with constraints.? For example if you like relational databases, you can just forget that, 'cause you don't get relational databases anymore.? A relational database doesn't scale beyond a single box, basically.? There are ways to do that, but you don't get the real linear scalability, so you've got to work with a very very different database model that is not nearly as flexible as what we're used to from relational databases.? Maybe it is.? Maybe it's better, who knows?? For all intents and purposes though, if you look at like Amazon DB, that stuff is all incredibly weak compared to what relational database programmers are used to being able to do.? So if you were writing a new project from scratch, you might want to develop it for one of these systems.? Right now, it seems a little bit scary and I haven't really gotten over this, which is: would you really build your mission critical business applications on ... you know at what point can you actually start trusting Amazon or Google or Microsoft now with their Mesh thing ... at what point would you really start trusting them to be there with the reliability that you need?? I mean I suppose they could probably? ... There's a bunch of different aspects to this.? One is I assume they could build something more reliable than you could in most cases, so that's good.? On the other hand, what if Google suddenly decides they don't want ... you know they want to charge more.? You're sort of stuck, you have to pay them, they're kind of the monopoly provider.? Or what if they decide they want to charge you by the byte and they used to be charging you by the kilowatt or something.? 
Atwood:? Certainly there's an issue of scale.? If you're going to be really big or, have an independent entity you want your own server you can totally control.? You don't want those constraints by potentially one of your competitors, right, I mean that's certainly something to think about.? I know in terms of blogging, one of the things I first recommend to people is get your own domain name.? Do not let your name be owned by blogspot or blogger or whatever
Spolsky: Yeah, cause you're going to regret it.
Atwood: You're going to regret it, you going to have no flexibility. You can't move.? All that stuff.? So I think that's a concern as well.? But I do admire what they're doing in terms of removing the barriers to getting things done as a programmer and just putting stuff up on the web.? I definitely admire that and I think being not tied to the executable view of the world like Microsoft is, and the desktop view, is really a strength for them in terms of getting more stuff out there.? I don't know what the quality will be but I think it's certainly valid and something Microsoft-
Spolsky: I mean we might, and I hate to be an architecture astronaut here, cause this is all architecture astronaut-ure.? This is architecture astronomy of the first degree.? That said, I kind of feel like these development environments built ... Right now if you develop on Google your code is not portable to Amazon web services which anyway provides a different set of services than Google provides.? It's not really portable to anywhere.? You develop on Amazon Web Services, it's not portable to the Microsoft stack.? You only have one provider, they're all providing a very very different set of services.? Many of them are trying to provide the same thing in kind of non-overlapping ways.? And this is very much like the platform wars of the olden days.? And until there's something reasonably standard that you can get multiple providers for or that everybody's using anyway, it's kind of like a lot of people won't place their bets until they see who's going to win.? Because there is this terrible risk that Google will suddenly realize that they just can't win in that business, there's no way to make money in that business and they just shut it all down and they tell everybody you've got three months to get your stuff off 'cause we're turning it off and if you've built a business of that then you're in trouble - to put it lightly.? So right now I think a lot of the more conservative businesses and a lot of the more careful businesses will be saying , "I don't need another dependency, yet another way my business can be ruined. I'm going to build something that I control or I'll wait and see who wins here". Sort of like the Blu-ray vs HD-DVD wars.? People won't jump in until it's clear that there's going to be a winner. So there's going to be a lot of thrashing this out as these is very, very 1.0 if not 0.0 versions of these services come out and they're a lot of fun to play with and you know, when version 4.0 comes out and it becomes clear what the technology choices that most people are making, and it becomes clear that there's a sustainable business there for the platform vendor so the platform vendor's not going to go away then I think only at that point will you see the masses actually converting to this model of development.
[56:01]Atwood: But Joel, do you see this as a winner-takes-all type of scenario, I mean, this is the new world of infinite bytes, there's not these plastic disks that have to be distributed and carried at BestBuy, do you really see it as this old-world winner-takes-all?Spolsky: No, I don't think it has to be a winner-take-all scenario, no.? Not necessarily.? On the other hand, the truth is a lot of the companies getting into this business, I guess there's not so many - Amazon and Google are the most prominent - and I guess there are a lot people that provide things like, there always places you can get a virtual machine.? Even a virtual server that you get from Amazon where you basically configure it yourself, is something that's generic enough that you can imagine getting that from someone else.? In the case of Google they're really giving you a special and unique programming environment that it would be very very hard for anyone else to reproduce, so if you've created a crap-load of code for Google you're not going to be able to move it to somewhere else with any reasonable [indistinct]Atwood: Right.? Don't people say the same thing about Microsoft, though?? That, like, you're part of the Microsoft ecosystem so you're totally locked in?Spolsky: It depends on how you've selected your Microsoft [sic] and that can definitely happen.? On the other hand, if you write .NET tools you've got Mono at least.? You know, there's another implementation.? You're writing Windows code not because you have the ability to port it easily to somewhere else, you're writing Windows code because that's where your users are.? You need to run on Windows because that's what people have, you just don't have any choice in that matter, and people do have it.? So maybe it's not winner-takes-all in the sense that there's certainly a healthy ecosystem for Apache and IIS, there's lots and lots of different webhosting technologies, there's no reason you can't pick one, on the other hand there is sort of the risk that these vendors will lose interest.
[58:10]
Atwood: No, it's certainly a very interesting development.Spolsky: I have to say, from experience, it's years and years away, and there's definitely going to be, in two weeks you're going to see 37 dumb little twinkie little startups that do something like order Twinkies over the Internet, showing up on TechCrunch all of which were built with Amazon webservices, and the minute you see them getting listed on TechCrunch you'll go there and you'll see whatever Google's error message is for an application that uses too much bandwidth or too much CPU power and that's all you'll really ever see of these services and that will be the end of that.? That'll be this first euphoric wave in which dumb things are built and they never go anywhere.? But I really do strongly believe that whatever the core services that you're building, you've got to build it on tools that you either control or that are available from multiple sources or that you totally trust.
[59:07]
Atwood: Right.? I love, I know you had a classic post about Excel, and how they had this really radical dependency-rejection culture.? I think that's important to cultivate, you have to choose you dependencies very very wisely, you're going to have them, everything's a dependency, you have a CPU that you run on, and all that stuff.? It's something you really want to think about and give due diligence to, but-Spolsky: "find the dependencies and eliminate them" was their motto.Atwood: Where you can.Spolsky: I don't remember them saying "where you can", I think they said "find the dependencies and eliminate them" - that was pretty much the end of their motto.Atwood: We're not as hard-core as the Excel.Spolsky: You know, if they really believed in it, they'd be selling you an Excel box that you bought in a box from a Microsoft store.Atwood: I think actually they'd be running in a virtual machine, which I don't think is actually that far off in the future.? But I think - I have this radical theory - that everything will be delivered in a virtual machine eventually.Spolsky: That'd be really nice.? That's not a bad idea, and definitely you'll see FogBugz moving not quite to a virtual machine, but we're going to package a lot more of our stuff on Unix we're probably going to start chipping our own version of Apache just to run it on a different port.[1:00:20]
Atwood: Oh sweet! You guys are gonna have...
Spolsky: Uh huh.
Atwood: ...the FogBugz distro?? When someone installs...
Spolsky: Something like that.? I'm not really sure.? I, I shouldn't talk about this until it's designed, actually.? But, y'know, we are trying to, actually, at least have a distribution that, that includes more parts of the stack so that out of the box, if you don't mind just throwing our stuff on there uh, you'll get something that has been tested together and works and if you really need to use the Apache that's on your system, then... ok, but, but, but if you don't, then you don't.
Uh, okay, so before leave I just wanna um, uh, uh, er, once again encourage our uh, listeners, if you have any questions, comments, uh, or anything you want us to play on next week's podcast, to uh, make a little MP3 recording or Ogg Vorbis um, and email that too... 
Atwood: Podcast@stackoverflow.com.
Spolsky: ...podcast@stackoverflow.com.? Uh, if you don't know how to record an mp3, let me just play this...
Tim Patterson: Hi, Joel and Jeff.? This is Tim in Austin, and I heard you guys talkin' about how people might record their audio uh, to send you questions and that.? And I found a thing from Dave Weiner's site called blogtalkradio.com.? And, basically, if you go there, it's got a phone number; you can call in, like I did just now, uh, record whatever you want, hang up the phone, and then it uh, outputs your recordings in a simple RSS feed.? It's got a little link -- on the page -- to an mp3 of your audio which I'm about to send you...
Spolsky: It's real easy.? Blogtalkradio.com: you call a phone number and then it puts up that mp3 recording at a url that is the phone number you called from.? So, basically it's an extremely easy way to make podcasts.? If you wanted to make your own podcast you could just basically call that number every time from the same number... and that phone number -- your phone number -- would be your podcast's url.
Check it out.? Very easy: blogtalkradio.com or just use the microphone on your computer, record an mp3 uh, and uh, send it us.? Um, stereo is not necessary.? Maximum time: 90 seconds... um, even less 'cause y'know I gotta go through a lot of them and figure out what to play.? Thank you very much, and we'll see you next week!
Atwood:?? See you next week. 
Spolsky: Hello! [pause] See the cold... a warm recording is better, a cold recording is cold opening. [sigh]
Atwood: Ha, ha, ha...
Spolsky: You become.. What happens is you become sort of self-conscious. Conscience? Conscious? ... It's aware!? It's alive!
Atwood: Yes.
Spolsky: This is gonna be it. This is our recording, and what I'm gonna do is uh, cut it in some fashion... No I won't, I think we'll just go by with this - it's better to come in. And by the way if you have...
Atwood: No, no wait. I'd like to restart. Could you at least say welcome to the stack overflow podcast or something, so I actually know we're doing it?
Spolsky: You said it.
Atwood: Ha, ha, ha... all right, ok.
Spolsky: Podcast number th-- four! This is the fourth podcast. It's absurd. We are down to... I saw your list of how many listeners we have and we're now down... it goes down every time, so that's a good sign. This time we're gonna get it down to six.
Atwood: We're getting down to just the true fans -
Spolsky: Yep.
Atwood: - of Joel, and myself - which is important, because you know I want to have as many avenues as possible to feed my ego. So this is a new one, which is very exciting for me. 
Spolsky: Yeah.
Atwood: Uh, so let me start. I have some stuff still left over from our first call.
Spolsky: Ok.
Atwood: Questions that people had. And one of the questions that people are asking quite a bit about StackOverflow is: Well, why even bother? Aren't there other sites that do this? Isn't this yet another way to re-invent the wheel in the programming community? I mean, it's not like there's any shortage of places for programmers to go to ask questions and get answers. And that's certainly certainly a fair question. And I want to also open by saying that failure is not an option.
Spolsky: It's a ridiculous question.
Atwood: Heh, well this could totally fail...
Spolsky: What is this, communism?
Atwood: [laughs]
Spolsky: Is this like there's one restaurant, one grocery store, one department store, one airline, one hotel...
Atwood: [laughs] Well I think there's sort of a winner-takes-all mentality that sets in after a while. It's like: would you really start a video sharing site in face of YouTube. And even actually in that example there actually are other video sharing sites that I'm starting to see become pretty big, because they are discriminating themselves from YouTube. 
Spolsky: Yeah.
Atwood: One way they do this is actually having high quality videos... 
Spolsky: With boobs.
Atwood: [laughs] But I've seen like, viddler and vimeo and a lot of people are starting to use those sites. So you know even in the face of overwhelming dominance... 
Spolsky: Mm-hmm.
Atwood: I think it makes sense to have different options. So what are we actually going to bring to the table that actually makes us better, or at least different, than these other programming communities? And I think one of the things we have going for us - and it sounds kinda obvious - is when we have pretty large audiences that we're gonna say, "Hey take a look at this thing we're doing." Right, so... you know, it's kind of like when Nine Inch Nails did digital music distribution, and when Radiohead did digital music distribution, all the commentators, when they talked about that, said, "Yeah, that's no problem, you can do exactly what they did if you have a band.? Just one: be Radiohead, right, two: put digital music online."? So, we've built up...
Spolsky: Is that where Larry Wall's quote about Perl comes from?
Atwood: No, I don't know that quote.
Spolsky: He says about Perl, "If you don't like the way something works in Perl, make a different language, and then make it popular."
Atwood: Yes, yes, so we're hoping that having large audiences that we're involving in this process, through this podcast and through the blog and so forth, is one of the reasons that it's going to be different...
Spolsky: Also, we're going to have boobs.
[3:39]
Atwood: [laughs] Yes, we're going to have attractive female hosts -
Spolsky: -I'd just like to tell people that-
Atwood: -, and it's not going to be Joel unfortunately.
Spolsky: -There's, there's, we have no rules about frontal nudity like YouTube.
Atwood: yeah, exactly, exactly. That's a possibility.
Spolsky: Let me play, let me play a question here, I've got a question here that somebody, uh-
Atwood: Sure!
Spolsky: -that somebody asked, which is sort of relevant.
Kyle (caller): Hi Jeff and Joel. My name is Kyle, I'm a graduate student at the University of Arkansas. First of all I'd like to say that I really enjoy your podcasts and look forward to seeing StackOverflow come to fruition-
Spolsky: (garbled) That's that guy that keeps our --- -casting--- (???)
Kyle: -But one question that keeps popping up in my mind: It isn't clear yet to me how you? plan on cultivating enough users in order for the site to become a really useful tool. Maybe I'm underestimating the size of your community on your blogs, but how are you going to provide enough content to reach a critical mass of activity that will convince developers that using the forums on StackOverflow is worth their time?
Spolsky: So that was the question, I guess, that everybody keeps asking, "why another one, and how are you going to hit that so called critical mass?"
[4:39]
Atwood: Right, well, first a bit of terminology. So, it's not exactly a forum. I mean, when I thought about this and Joel and I were initially talking about this, I framed my mind in a way that said, "OK, this is a forum that we're building." But the more we looked at it, it's not really a forum. It's more focused than that. Cause forums have a problem, and I've discussed this on previous podcasts, where you can talk about anything, right? And that ends up sort of, you end up chasing your tail in some way. When you can discuss anything, you end up discussing nothing.? So, there's a very laser-tight focus on question/answer that I think sets us apart from forums right out of the gate. And then also, and I don't think we've actually discussed this publicly, but there's going to be a Wiki-like aspect to the pages as well. So the questions won't, hopefully won't go totally stale over time. Because once you get enough trust in the system, you'll actually be able to update the questions, point people to different areas as questions get old, and so on. So those are my first two observations out of the gate. What would you say, Joel?
[5:37]
Spolsky: Well, I'm sort of wondering about this term 'critical mass'. Like what is the critical mass here that we need to achieve? If we have one particular programming topic, let's say... um, let's pick something good... LINQ 3.0. Do they have 3.0? How do they do the version numbering with LINQ? LINQ 1.0 for C# 3.0 for Microsoft Visual Studio 12... 11. Ah, so you got this very very narrow topic, and one of the people participating happens to have studied it and written a couple of programs using it, so he kind of knows the answers, and there's 3 or 4 people who just kinda need some pointers and they're asking questions about this very narrow topic. And, lo and behold, because there are those 3 people asking questions and the one person giving answers, maybe for two weeks until they move on, then you have critical mass! And we've only answered one question, I mean, it's not Wikipedia, but you know, assuming that the question is very specific and that the person got an answer to their question, and that Google indexes us and that that answer doesn't appear anywhere else, and that Google then points to us when somebody else asks that question to Google in the future, then that's all that it really takes. I don't think there's a matter of suddenly like hitting either more people than any other site. I don't think that's necessary. I don't think you even have to hit very many people. You know, I have on my discussion group I have this .NET forum, which is a very very small .NET forum compared to all the other gigantic .NET fora that exist elsewhere in the world. And, uh, it's called .NET Questions and it gets you know a few posts a day. But it's really useful to the people who participate there, and those questions and answers do get into Google, not on every topic. So, I don't think there's any particular point at which it suddenly becomes viable. Or, that point is a lot smaller than you think.
Atwood: Yeah, I would agree with that, and I've also seen... a lot of times when I'm searching for information, as I'm searching for it, I'll sort of realize that I could have actually written a better landing page than almost everything that I've found. And I wrote about Model View Controller last night because we're actually using ASP.NET MVC which is sort of a new lightweight MVC framework that Microsoft is gonna officially bless at some point and release. And in the process of researching that, I was like 'OK, well what does Model View Controller actually mean?' I mean, like what have people done with it, how do you define it? And I actually never found a single page that I actually liked that much. I mean, there were bits and pieces of information that sort of helped me on different pages, but I felt truly after looking at all that information I could have written a better article than anything I found on Google. And I think that same logic really applies - there's a lot of really really smart programmers and the amount of information as you start drilling down into these topics, and you would think MVC is a pretty big topic, there would probably be like 'OK, this is the best page ever on MVC, no one can possibly top this page', but I do not believe that page exists. And I think that's true of so many tiny little topics, that you drill down, I mean, much deep[er], much lower than you know this huge concept of MVC. I think a lot of talented programmers can actually, you know, it doesn't have to be one person, it can be six or seven people contributing to this question and answer thread, would end up building a page that's better than 90% of the information that's out there.
Spolsky: Yeah. Why, why, um... I think that the Smalltalk programmers that coined the term Model View Controller... were all that modeled in their thinking, I don't think they really got it right [laughs].
Atwood: Well, it's confusing. I mean, that's one of the things I found is when I researched it, it really is confusing because the terms are so generic, right? Like 'Model', 'View', 'C[ontroller]', I mean these are generic generic terms. So you-
Spolsky: They're also not exactly... Like what's the... The controller is the way in which you use the view to manipulate the model? Or is the controller some other thing? What's going on here?
Atwood: Well, there is controversy about the controller.
Spolsky: Yeah. And shouldn't, shouldn't... What happens if the model changes? Who tells the view to update itself? Is that also the controller's job? So the controller is like a view/model synchronizer? Or is it... or is the user who's using the user interface, is he the controller?
Atwood: Well, I think it's one of those concepts where you get into it what you... you get out of it what you put into it, and I think for me the best example of it actually sort of working was, you know, taking the web browser, HTML and CSS, where the browser is the controller, CSS is the view, and HTML is the model, e.g., the actual bedrock information that you're trying to transmit out into the world.
Spolsky: Yeah, and that's what the Rails guys do, is they're just like 'well, these are subdirectories, we have the view is...', but they call the view the HTML, and the model is the underlying data, and the controller is just the code. But I don't know if that's really strictly what the object oriented people... I don't think that's strictly the way they were thinking about it.
[10:37]
Atwood: Well, I think the value of it comes in the fact that you're actually thinking about your architecture, which is more than I think a lot of other teams do.? You're actually thinking "Okay, how can we actually have some logical separation of what we're doing in the application?"? More so then "Are we doing this exactly right?"? And the example I like to point to is "Is your app skinnable?"? Because, actually, the reason this came up is that I was starting to edit the CSS of the StackOverflow blog to put in our logo.? And I realized the easy way for me to put in the logo was to slap an image tag in there.? Right?? A hardcoded image tag.? But once I did that, our site was no longer skinnable, because I have this image hardcoded in the HTML, right?? It's linked to a specific image.? It's difficult to change that through CSS.? The way you're supposed to do it is have a div that you then use an image replacement technique on from the CSS.? So even in the very basic level arena of HTML and CSS, you have to sort of think about "Okay, how can I achieve my goal?"? And I think the best way to summarize that goal is "How can this be skinnable?"? Like I can truly have CSS.? I can plug in a totally different look for the site without modifying my HTML.? I think that's a valuable concept.
Spolsky: Does any really, does any really quite achieve that with just CSS?? It depends what you mean by...?Wait don't tell me about ZenGarden.
[11:40]
Atwood: Why do you hate ZenGarden??I think ZenGarden is great, I?love ZenGarden.
Spolsky: OK, tell me one example, other than ZenGarden, where somebody actually has a site where just changing the CSS really... and what does really skinnable mean?? It's like changing the look but doesn't really let you change the feel in certain rather crucial ways that you may want to change.
Atwood: My point is that this is , and I think what you were getting at, is that this difficult and you have to actually work at?this in order for it to be truly skinnable.
Spolsky:?I am basically saying that?anything you are going to let somebody customize than you are going to have to do something to let them customize it.?And if the only thing?you are just going to let them customize is fonts and colors by giving them CSS where they can change fonts and colors and maybe put some background images on if you were smart enough to remember to give them an ID or some kinda of tag that they can hang their things off of in the CSS, than you know good for you but do you sort of have to think of these things.? And if they want to hang their tag off of something that you didn't actually give an ID or a name or doesn't use a specific class in your HTML file for it, it may be impossible.
Atwood: Well totally, and I think that is why it is important to sort of look at?MFC and say, "OK, let's think about this.? Like how can we actually achieve this without just rolling along and not thinking about it and then all of a sudden ending up with an app that is so enmeshed in its layout that you can't skin it in any way."? It's not that you want to actually go out and say here there are 50 different ways that you can skin this app, but it gives you a cleaner separation of you know the model and the view and you put the controller in there and the controller is responsible for that.
[13:27]
Spolsky: So let me just play the Devil's advocate for a moment. When you say it's "cleaner," let's say that you have some text here and some text there, and this text needs to be positioned to the left of that other text, because that's just what it means. It's just logically oriented that way. It just makes sense for it always to be on the left of that one thing. So, now, the CSS fascists, or shall I say the CSS extremists, would say, "Alright, that's gotta go in your CSS file." So now, there's this code in the CSS file that's relating to a particular ID in a particular HTML page, and saying this ID goes to the left of that ID, you know, maybe it's floated, or something like that. And now, all you've done is you've separated - you've made people have to look in two places, and every time they look in either of those places, in one of those places, they don't understand why the text is winding up on the left unless they run a debugger, like Firebug, or something like that. And, in the other case, they don't know why - they're looking at the CSS file, and they're like, "Hmm, I wonder if anyone's using this particular rule that I have in here," and you have no canonical way of finding out where in the source code that particular thing may be applied. And all you've done is you've basically separated two things in space that are directly related to one another.
Atwood: Well, sure, I mean, okay so there's really two classes of things we're talking about here.? One is redefining the behavior of default, built-in tags in HTML, right?? Those are generic and universal.? So if you wrote an HTML file, and I have css that's only talking about the built-in HTML elements, it's going to work.? It's going to format, you know, here's your blockquote, here's your list item, here's your paragraph, here's your H1, H2, all that stuff.? But you're right, that when you start digging and say, okay, this is actually an abuse of CSS to call it like the "header div". You're not supposed to mix up semantic meaning like that.? 'Cause I might decide, "Hey your header? I'm going to put that at the bottom." So the thing that's called "header" is now a footer, right? That's where it gets weird, where you start naming stuff.? But you're right, I mean, to some extent, the view needs to understand the model.
[15:35]
Spolsky: I've, you know - the thing is, look I've worked on a lot of projects where the CSS file only gets larger, and that is because there are things that have been added to the CSS file that manipulate some page somewhere to make it look right, because of this belief that things have to go in the CSS file that have to do with style - which is not completely incorrect - the end result is that you wind up with a CSS file that just goes on and on and is almost impossible to parse, impossible to figure out, and you believe that you can skin your site just by giving your CSS file to a smart web designer, and if you ever tried doing that, the webdesigner would come back and say "I just don't know what any of these things are." And you'd have to point out [that] "Oh, this is the display that appears if you get that particular error message, so here's how you generate that error message, and you can go see it." And without that they don't have any real ability to change the CSS without at least being able to test it, or produce all those particular bits of model in that particular view.
[16:27]
Atwood: Sure, sure and I think you've got to view it as like, you know - a long term goal that you move towards - I mean this stuff is difficult, right? There's the easy way, which is to just muddle everything together, like the spaghetti code. Remember classic ASP?
Spolsky: It's not spaghetti, it's neat. You put the things together that belong together.
Atwood: [laughs] Well, they can belong together but, in the ASP.NET MVC, so we've been talking about HTML and CSS, but this also works at the code level - in my blog entry I posted a screenshot of the project layout, it actually is very clean because you have just webpages with essentially mail merge type formatting, right where you poke stuff through the holes in the template - there's almost, there's literally no code there. It's a very static code template.
Spolsky: Yeah that's what you call - 
Atwood: And you plug the stuff into it. So I think it works at the code level and er..
Spolsky: But this calling the separation clean, good Lord, isn't this the opposite of object orientated programming? Like, didn't we a long time ago decide that we want to put the data and the methods that operate on that data together in the same place - because they are related somehow and they should you know, provide some kind of encapsulation by putting them together. Surely, separating out things because this one happens to be view, and that one happens to be model, is a step backwards. Why is that cleaner? It just seems to me like it's just kind of a random artificial distinction. Let's put all the lowercase identifiers in this file, and all the uppercase identifiers in that file.
Atwood: Well, let's think of a concrete example. So in ASP.NET, you know, the traditional web form model, when you have a button on a webpage and you click on it, it would redirect, well it wouldn't even redirect, it's a postback to the very same page. So the code that handles that button click is there with the page. So already you have, you know, you're conflating the layout which is how the button will look, and the visual style of the button, which is the web form. And the code, is, they're sort of right next to each other, they're sort of the same thing. And if you're not using code behind, they're literally in the same file, right, you have HTML sitting next to OK when this button is clicked, do this.
Spolsky: Okay, that's pretty rare but yeah... and you want that.
Atwood: Why would that be rare? That's not rare at all...
Spolsky: No, no, it's pretty rare not to use code-behind.
Atwood: Well, yeah sure, but...
Spolsky: I think most people would probably keep their, try to keep their C# or their VB in a different file than their HTML. But, okay, so the question is where do they, ah...
Atwood: But if you look at PHP and if you look at a lot of the really really popular web programming languages, that's still how it's done. I mean it's very much done that way, that's the default, and people have to unlearn that to learn, okay, that code should go in a different place. And I think this is a question of...
Spolsky: Okay, I understand that that's what we keep telling them to do, but I'm just wondering why are we telling them that separation is a good thing when we just spent three generations of programmers putting the data and the methods that operate on that data together in the same classes?
Atwood: Well, I think that still exists. I mean, that would be the model, right? And the controller could manipulate... it's a question of what do you put in the model and what do you put in the controller, right? I mean, at some point you're going to have a Data Access Layer there, right? I'm unclear whether that would go with the model itself or be considered part of the controller. I think it would be part of the model, personally, so I think what you're describing wouldn't actually be a problem. I think you'd actually have classes that represent the database that actually let you operate on the database, like Customer.Add() and things like that. I don't think the controller would be doing that, I think the model would take that on. So, I think what you're describing is in fact true.
Spolsky: It winds up in 3 different places. And now [you're] even less happy.
Atwood: Well, I don't want to belabor it, but let me bring it back home...
Spolsky: I'm just wondering, I'm just wondering... Listen, I'm all for it, okay, it's Model View Controller, it's great. I'm just kind of wondering, it sort of sounds to me like you're trying to split up things just because of a certain type of anal retentiveness that programmers like to get themselves into. Where they're like 'God, it's cleaner if you separate something' and they just love to have these little separations that they have to spend a lot of effort maintaining. And it makes them feel good in some way, and it's all for some hypothetical goal of being able to skin an app, when the number of skinnable apps in the world is miniscule. It's, you know, less than 1/100th of 1 percent of all apps that are out there can be skinned, or need to skinned, or would benefit from being skinned. And in the meantime, you're telling yourself 'Well, this'll be great because I can just throw this thing off to a designer and...' No, you can't. If you've ever tried to throw a CSS file to a designer, after having built the application, no matter how careful you were, you'll discover that the designer is going to come back to you and ask for 37 changes, and the order in which the elements appear in your HTML, et cetera, et cetera. So, it's kinda weird, I mean it seems to me it's like just one more thing where programmers are looking for ways to make their life difficult. Now I'm gonna get some hate-mail for that one! Anyway.
Atwood: Well, let me give you an example of where I think this will be useful. We've been using FogBugz, and I think we have to be a little careful because there's been a significant amount of criticism around whether this podcast is self-promotional for, you know, Fog Creek basically, so I want to be a little careful but maybe I can balance that out -Spolsky: YesAtwood: By being, by being criticalSpolsky: FogBugz - wait, just a minute. You can buy FogBugz for only $199, per user, and it's free for up to two users (Student and Start-Up Edition). Atwood: Yes, soSpolsky: This podcast is brought to you by StackOverflow.com, a commercial enterprise of Joel Spolsky and Jeff Atwood. Where you were.Atwood: And that's true. Let's be clear, this is absolutely a commercial enterprise at some level, so I want to be completely open about that, but I don't want to be, you know, like late-night television commercial either. Um. So FogBugz, although I actually do like FogBugz and it's very cool, this is the first bug tracking system I've used where it hooks into email automatically, 'cos Team System, which is what I sort of know in my previous life, um, definitely didn't do that and it is very cool when somebody emails you that it automatically goes in as a, you know, a ticket and I can reply to it there and it maintains the histories. That's very very cool. I don't really enjoy the spam training aspect of it.Spolsky: Oh. Our database is already trained. It's already doing 100% accurate job, and that's on about a hundred email messages. I'm sorry, waitAtwood: Well sure sureSpolsky: Not advertising [laughs] you're rightAtwood: [laughs] But I didn't enjoy the training period, just put it that way. And one thing I don't like is, I think the visual layout leaves a lot to be desired of FogBugz. And I think that, if I, if you could skin it, I think. First of all, I think it's realistic to say for a web app, you should be able to skin this in some way.Spolsky: Okay okay okay but if you want to skin it, the, the visual layout is things like, ok there's this drop down menu that appears here, and you decide "hey you know, I don't want that to be a drop down menu, I want that to be over here, and I just want it to be a list of things". But the "over here", that's in the HTML file, 'cos there's an order to those elements, and you have to change the order of those elements, you can't just change the css and say this thing goes after that thing.Atwood: Well I, okay. I'm not saying it's effortless, right. Spolsky: [laughs]Atwood: Like everything else in programming, this takes actual effort, right, but the benefit to me as the customer is I could replace what I consider to be sort of a marginal look of layout with something a lot cleaner, and a lot, you know, nicer looking. Or maybe I could just make it look totally stupid, like iGoogle, right, where you have these, these layouts that are just ridiculous but people love them right, because can customise it and make it their own. I think for a web app it's very, very realistic. I agree that for a desktop app, the concept of skinning is kind of like hard, unless you're doing a Windows Presentation Foundation...Spolsky: Are you, wait, you're kind of a, you're an expert user, are you really gonna go in and skin gMail, or these, you know ...?Atwood: Well, ISpolsky: Isn't that kind of tedious? Who cares?Atwood: I guessSpolsky: It looks likeAtwood: But I feel like - Well FogBugz doesn't even use my whole screen, like it's only using like the left quarter of my screen, it's just, it's, it's, it needs some work layout-wise, so. I feel like this is an area where you know your product in particular could benefit from some thing like this. I think there are real benefits at the end of this, it's not just architecture astronaut stuff. It results in, I think, real flexibility that matters to the end user, and certainly to the development team, right?
[24:12]
Spolsky:? My philosophy is that it matters to them not in the actual chrome, the UI of the application, they don't really care about.? What they care about is, what their documents look like, and what their stuff looks like, and that may mean stuff like discussion groups and wiki pages which they show to the world.? It may mean logos and stuff like that.? But it doesn't really mean being able to change our user interface in any kind of arbitrary CSS way.? I think that a user would have to be extremely--well, how could anybody possibly have time to decide that they want to change major aspects of the layout of FogBugz?? Minor things that they want to change, that's OK, they're welcome to try to make the page wider, and they'll discover that it's hard to read, which is why we made it narrower in the first place.? OK, that's enough of that model-view-controller.? What's next on--Atwood:? No, it's an important topic, because that actually is the architecture we're going to use for StackOverflow.Spolsky:? Oh, good, I didn't realize you were getting somewhere.? You're using the new ASP.NET model-view-controller pack that they released.Atwood:? Yeah, we totally have code, we have error handling, we have a data schema, all that good stuff, so we definitely have progress. Spolsky:? What's the data--Atwood:? Well, it's a question and answer site, you see.Spolsky:? Can I put in a question? Can I go into StackOverflow and type a question?Atwood:? Not yet.? Well, at a very primitive level it does, but it's not really worth showing at this point.? I actually went to the Maker Faire this weekend, which is a Bay-area event, it's sponsored by Make and Craft magazines, and it's sort of a cool event, where a bunch of people come and show off the things they're doing and companies come, and I got to meet somebody from the Wikimedia Foundation.? I didn't realize, but the Wikimedia Foundation has moved to San Francisco.? They used to be in some crazy place in Florida, and their servers are still there, their main Wikipedia server farm in south Florida.Spolsky:? Wait, did you say "Wikimedia"?Atwood:? Wikimedia is the name of the foundation, and Wikipedia is one of the things that they do.Spolsky:? Oh, I see.Atwood:? And what they're known for.?? And I found out that their entire Wikipedia database is 10GB, which surprised me. ?Spolsky:? Not very much.Atwood:? Yeah, I was asking about their server farm and how they back it up and stuff like that, but I was talking to Jay Walsh, who's their head of communications, a very nice guy, and it was just exciting for me to talk about Wikipedia, because we've looked--when we started StackOverflow, you and I were both sort of big fans of what Wikipedia has done, and view it as sort of a role model in the sense of creating evolving, live pages, that I can link to today, and three years from now I know those pages will be as relevant as they were three years ago.? And this is something that blogs do very, very poorly.? Blogs is another sort of model we looked at for StackOverflow.?? So it's sort of a hybrid of these two, I think, that makes it really, really compelling.? There's a blog aspect to it, like question and answer, like post/comment, which is very simple, people understand that.? But on top of that, there's this really nice editing layer that goes on top of it.? And I was talking to Jay and just trying to think through the reasons why I can't stop linking to Wikipedia, which has some scary implications, because Wikipedia's eventually gonna own every keyword.? I mean, it's already happening.? And even in 2006, it was like,? I can't see a world where Wikipedia doesn't own like every single search term, because their results are so good.? And the thing that makes it OK for me is that Wikipedia, and Wikimedia Foundation, is a non-profit.? That's a big deal.Spolsky:? So they're never going to own any commercial keywords, in particular.Atwood:? You think?Spolsky:? Yeah, I don't think so.? By which I mean, if you're interested in getting a Jeep, and you wanna know about--well, actually, that's in there.? If you're trying to find a local Jeep dealer, and see what their prices are, I don't think you would go to Wikipedia. ?Atwood:? Wikipedia is the third entry for Jeep.? And again, I see them just--Spolsky:? So that's like a list of what the different vehicles are and--Atwood:? Yeah, but still, they're number three for Jeep, so .... it's a little scary.? I think there's aspects of Wikipedia that scare me a little-- Spolsky:? Yeah, communism!Atwood:? --but on the whole I think it's a really useful resource.? And StackOverflow's gonna have some of the same aspects.? As you get trust in the system, everything, literally everything, will be editable, with an undo/revision history.? And that's a key part of our strategy.Spolsky:? Lemme play a question here, because that's sort of,[28:26]Andrew: Hey guys, this is Andrew Marl from Las Vegas, Nevada.? I had a question: I understand that you guys are using a Digg-style system, or another style ranking system that'll help push useful comments to the top of a thread, if we have questions, and the obvious junk is gonna get pushed to the bottom.? I heard that in the first couple podcasts.? One thing that I've seen, though, that is kind of a dynamic with programming sites, is that answers will be posted across several posts, going down, and you have to have read the previous post in order to really understand what these replies mean.? And I'm worried that things are gonna go asynchronous if they get pumped up to the top, and it won't be as easy to follow the thread.? Will there be a way to view things in context a little bit better, or how are you guys planning on handling that? Thanks!Atwood:? So there's gonna be two main sort orders for the questions and answers.? One is rank based on voting, and the second is simple, chronological order.? The other thing that will happen, and this is something we talked about earlier, the person who creates the question has one special privilege--I assume, I guess, system administrators will have it as well--but they're able to bless a certain response as "Oh, thank you, this is an answer that really helped me!"? And that may also-- Spolsky:? Sprinkle it with the special water.Atwood:? Yes, it's like a blue ribbon of some kind.? But as the person who created the question, you do have a little bit of special privilege in the thread.? Your responses will be highlighted, you can also grant, basically, a boost to an answer, and say, "This was a really good answer," this is my personal favorite.Spolsky:? This is the one that solved my problem.Atwood:? Yeah, it may not be the best one by voting, but this is the one that the original person who asked liked the most, so you close that social loop of, if I go up to somebody and say "Hey, I'm trying to do this, can you please help me," and they help me, then I say "Oh, thank you very much for helping me." So you can close that social loop, and we felt that was kind of important.? More important than the voting, even, to some degree.? But we hope that the two sort orders will address that concern.?? Where you can view it chronologically, so it doesn't get out-of-order, and you can also view it based on--Spolsky:? Whaddaya do if you're reading some answers, and the best answer is there, and somewhere else is another answer that's also kinda good, and the combination of them would be great, and you wanna somehow combine these answers in a better answer.? In other words, you just want to be an editor, like you're--a lotta the people who have contributed to our transcript pages for this podcast--and thank you all--a lot of them just went in and made a little correction.? They just saw something that was obviously a typo, or some case where some previous person who'd been writing the transcript maybe didn't know how to spell someone's name, so they went in and they correct it.? How do you do that when you're reading answers on StackOverflow, if you just want to make that little edit, to make that question better?Atwood:? So, it'll be very much like Wikipedia, in that once you have enough trust in the system--this is not something we're gonna grant blindly--so you'll have to not only have an account, but also have a reputation, which is what we're calling it, a little bit of reputation, you can actually unlock and click edit, and literally go though and edit anything in the system, really, except for probably other peoples' profiles.? So if you wanted to combine a question with another question, the first thing I would do is consolidate the information across the question, post a link to the other question, it's like, this was also asked here, here, here and here, and then basically cross-reference them.? I don't know if there'll be a way to close a question entirely.? I assume that that's something we'll have to think about.Spolsky:? So I could theoretically, if I saw somebody, if I had lots of karma or manna or whatever we're gonna call it, and if somebody else had an answer that was slightly wrong, I dunno, they left off a semicolon, could I hit edit, add the semicolon and save it?Atwood:? Oh sure, absolutely.Spolsky:? And do I get some credit, do I get some points for that, or do they get all the points for making their question better? Atwood:? No, you will.? You'll get points--and this is--the way to think of reputation in our system is, I'm trying to do it very Google-like in that you can't give yourself reputation.? So you can't--there might be one or two things you can do that just result in immediate increase in your reputation--but your reputation comes from other people voting for you.? So once--I'm trying to think exactly how we're gonna do this--but perhaps once an edit goes in you get a partial credit for any up-mods on that particular thing--Spolsky:? You're gonna have to do something about like circular link-farms of people voting each other up, and so forth. ?Atwood:? Oh I'm sure there's all kinds of evil user pathologies we're gonna have to deal with.? We have thought about that a little bit. One thing we're gonna do is very much like Wikipedia again, is, if a question becomes very controversial, we can lock it down so that only people with reputation can do really anything with it.? As it stands now, we were hoping that guests could come in and add answers, add questions all they want without creating an account.? This is another way we're different from some of the other sites where they really force you to create a login almost immediately.? We are not going to do that.? I believe very strongly in that.? But if a question becomes controversial, we can block that and say, OK, look: only people with reputation or people with logged-in accounts, depending on the degree of how controversial it is, can do that.? So we've given some thought to "evil users".? But I'm sure--people are very wily, and I'm sure they'll come up with new, evil things to do. ?
[33:41]
Spolsky: I don't there's going to be much controversy in these realms, I don't think that we're really...?Atwood: Any time that you have a score in a system, there's going to be people that want to game it.Spolsky: That's true.? And that's a little different than controversy, there's going to a lot of people going through--and this happens on Wikipedia too--a lot of people going through and making technically correct, but almost meaningless improvements to grammar and spelling and punctuation.Atwood: Right.? As long as it doesn't hurt the system, I'm fine with it.? And since your reputation largely comes from other people, not--you can't vote for yourself essentially, that's pretty much the golden rule of Google and the way a lot of these systems work.? It will really have to come from other people acknowledging what you've done, so even if you go through and edit thousands of articles, you're not going to have thousands of points of reputation, only in the sense that other people saw your edits and ultimately up-modded it later.? So we will be tracking that.Spolsky: So you can upmod an edit, or you upmod the article after it's been edited, or--
[34:39] 
Atwood:?? Yeah, I think we'll have to give partial credits, fractional credits--Spolsky:? I mean, technically it's possible, you go look at the history of the article and find the diff and upmod the diff.? I don't know if--Atwood:?? Nobody's gonna do that.Spolsky: Uhh, hmm.? Yeah.Atwood:?? I think fractional is the way to go.? Because, think about it, if you go and completely rewrite the original question, I mean there might be some way of, y'know, doing a line count, saying "how many lines did this guy edit," this guy or gal, I don't wanna be sexist, and say, OK, you edited 50% of this, now you get 50% of the credit for these upmods.? Of course, that could also lead to pathologies, where somebody would go in and just make trivial edits to everything.? [laughs] Yeah, there's always new ways to game the system.? So yeah, this is going to be very much an evolving thing as we do it, but the guiding principle is basically the PageRank model, where other people have to vote for what you've done to make it worthwhile.? And y'know, Google spends god knows how much resources on un-gaming their system.? So no matter how good it is, it's an ongoing battle that you fight, so we'll see how far it goes.Spolsky:? I wonder if there's some way to use their PageRanking.? I mean, one thing you could do is sort of leverage off of Google's opinions about these articles.? I assume we'd use them as a search engine. ?Atwood:?? Yeah, no, that's built in, because we'll have page views, right?? But we could also look up, eventually, PageRank.? Although, PageRank is kind of a weird metric, like it fluctuates a lot, and it can be kinda strange, but certainly page-views is a metric that we use, and you will get rewarded for that.? If you create a question that gets 100,000 page-views, you'll get a special award.Spolsky:? So if Google likes you, then you have a lot of page-views, and if you have a lot of page-views, you get some karma.? So we are sort of getting some of the benefit of their algorithms. ?Atwood:?? Yes, absolutely, absolutely.? And coming back to another topic that came up, since we're gonna have wiki-like aspects, I set up a Creative Commons license for our podcasts, and I actually didn't check with you, I just assumed this would be OK, but I set up a Creative Commons--Spolsky:? What's that, some other kind of Communism?? No, I'm just kidding.? Yes, that's absolutely OK.? That's a good idea. ?Atwood:?? So, Creative Commons is neat in that everything--and here's the key point that people, I think, don't understand, and I don't think I even understood this for a long, long time--is when you create something, it is copyrighted by default.? So there's a default mode of creation: if you create something, like a little drawing on a piece of paper, it's copyrighted by you forever. Spolsky:? That's ridiculous.Atwood:?? Yeah, it's kind of a weird system.? So when you say, I wanna use Creative Commons what you're saying is, I want to give up some of my inherent copyright, so that other people can remix, reuse, benefit from what I've created in some way.? And you can control that, and put rules around it, and it's actually very, very cool.? They actually have a wiki, like a pre-formulated wiki Creative Commons license that I think we're gonna use, because StackOverflow's gonna be very wiki-like on a basic level.? So I think that's probably the way to go, with the default Creative Commons wiki license, and let people go from there.? Because I know people had asked about licensing, and certainly part of what makes the site great, a big part of it is gonna be the listeners, the people using the system.? So I wanna do the right thing in terms of licensing their content so we're not abusing the relationship.Spolsky:? I think what we thought is that we wanted to--we don't wanna license their profiles, because that's their personal information, so we don't really have any right to do that.? But the information that they put out should be redistributable and so forth.? So if somebody puts in information--Atwood:?? Yeah, stuff that's meant to go out into the world and be shared and reused.? So I think we will adopt this CCwiki license for this content.? Do we have any other questions? Spolsky:? We do, but while we're on, sort of, the legal subject, I guess I should mention that we're, I promised to get a lawyer in California, because the idea of using my lawyer to represent both me and the company was apparently a legal mistake, because that person would have a conflict of interest.? So I'm working on that.? So then I have a friend who's looking for a lawyer out there, and I guess apparently the first attempt was this idea that it would be an LLC, and you and I would own some shares, and there's an investor, the investor would have a smaller number of shares that he would buy, but there's sort of the risk that if we're given a part of an LLC for free, and he has to pay for that part of the LLC, that that's a taxable event for us, and we then have a bunch of income--if you do it the wrong way. ?Atwood:?? Yes.? And just to the listeners, so I'm really relying on Joel--I've never run a business before.? I think it's one of those things that, it's exciting to be able to do it at some point in your career, but since Joel obviously has a business, he has Fog Creek, I'm really relying on Joel to sort of guide me though this, about what I should and shouldn't do.Spolsky:? And you shouldn't be, [laughs] because Fog Creek, for example, is a C-corporation, and a C-corporation--I was just thinking, earlier today, the difference between a C-corporation and an LLC is sort of like the difference between, shall we say, Microsoft and open-source, in that, the C-corporation, everybody knows how it works, there's shares, you can make it do whatever you want, ultimately you have unlimited flexibility, but it's not a very good way to do things in certain circumstances, it doesn't give you tax pass-through choices.? And an LCC is this mysterious form that is extremely sloppy, there's no assumptions, everything is kinda loose and whatever you define.? It's really kind of like UNIX software.? So in an LLC, for example, there's no assumption that one share equals one vote.? There's not even an assumption that you have shares.? You can make shares if you want, but that's the first thing you have to do.? There are membership interests, and you can define anything you want, you can say, y'know, I get 100% of the votes and you get 0% of the votes, even if you put in all the money and I put in none of the money, and--you can do whatever you want with it, an LLC, whatever you write down.? It's just sort of this flexible thing, but of course you run the risk of the IRS then disallowing it.? So it's kinda weird.? I think if I had to figure this out myself, I would've made it a C-corp, and that would've been wrong.? But we'll see what the lawyer says.? Just like, when I have to figure out code myself, I just sit down and I write it using Microsoft tools, and it's non-ideal, but it's something that I already know, and I know how to make it work, and I know what all the problems are I'm gonna be suffering because I did that.
[41:03]
[42:00]
[43:24]
Just to take a simple example, another simple example is this conference that we're doing the Business of Software conference that we're doing with Neil Davidson from RedGate software.? Partially, I'm providing some editorial material to the conference in the sense that I'm helping recruit some speakers, and I'm speaking, and you know, giving them brand name and that kind of stuff - calling it the Joel on Software conference.? But the list of details that we had to come up with, about: under what circumstances who gets how much of the revenue; what happens if someone gets a discounted fee; and who gets how much of the revenue if we have a student that's not paying; and so on and so forth.? And you very quickly come up with about twenty kinda interesting circumstances that are not obvious from what you would get from a hand-shake kind of agreement.
Atwood: Right.? I've begrudgingly come around to the necessary evil-
Spolsky: -and the truth is, after this you're not going to see another lawyer for another four or five years.
[45:27]
Atwood: I think I good, I think that's the way it should be.? 
So, quickly, I do want to mention, our logo design contest now over. We did pick a logo. Joel and I both sort of kind of signed off on it. And, I apologize, there were some really great entries and I think the winner, I do want to actually say his name is... Peter Borlace? Borlace? I don't know if I'm pronouncing it correctly but he's out of the UK. I really liked his entry. There were 3 others that were really strong contenders. And we actually did hook those guys up with TimeSnapper licenses from Leon Bambrick. 'Cause I know, and the more I thought about this, 'cause one of the observations you had about the contest was it's kind of unfortunate that it's winner-take-all. It would almost be better if it was, ok, first person gets this much, or first place gets this much, second place gets this much, third place gets this much, so it's not quite as winner-take-all.
Spolsky: Yeah.
Atwood: So, I'm glad we were able to do that. And I went ahead and put the logo together and set it up on the website.
Spolsky: Yeah, it's up on the site. It's great.
Atwood: Yeah, and one thing I wanted to ask you is, one reason I came up with the 99designs contest is 'cause I had mentioned on Twitter that I was struggling trying to figure out what to do about the logo, and that's how I got hooked up with the guys at 99designs. And I was kinda curious, have you -- I'm a huge Twitter fan-
Spolsky: Oh no, do we have to talk about Twitter?
Atwood: Absolutely.
Spolsky: Agh! [Laughs]
Atwood: I wanna talk about it a little bit because I was wondering if you wanted... 'cause I've... it's very useful, right? Like, I got this 99designs hookup through it, right? I mean that's useful. And I get really great feedback, like, I'll post something and I'll get all these great responses "Oh, have you tried this? Have you tried this?" It's basically public instant messaging. It's kinda like IRC but through the Web, right? So it's...
Spolsky: It's kind of weird, I mean it sounds like it was created something for these web celebrities... like you...
[Uncomfortable silence as Atwood removes dagger from heart] 
Atwood: [Laughs nervously]
Spolsky: ...John C. Dvorak.
Atwood: Well, I find it very useful. I, I...
Spolsky: But if you weren't a web celebrity, it wouldn't be that useful.
Atwood: Well...
Spolsky: How many people do you have following you?
Atwood: Uh, like 2800...
Spolsky: 2800 people following you! [Laughs] You have to admit that that's a sort of unusual number of followers. [Laughs]
Atwood: It's relatively high, but I'm not in the top 100. There's certainly way more famous people than me.
Spolsky: Paris Hilton! [Laughs] Does she Twitter?
Atwood: I'm disturbed that you're drawing parallels between me and Paris Hilton.
Spolsky:[laughs]
Atwood: But I think you would actually find it useful, because I love the ability to just share with people. I've always hated instant messaging, frankly - to me this is a palatable form of instant messaging that I really enjoy and get a lot back out of. So I would encourage you to - 
Spolsky: Ah yeah I still don't have instant messaging and I feel like I'm kinda behind. I'm just catching up with email now - I don't know if people have realised this, they may have emailed me - but when I get an email my secretary will print it out and bring it into my office, put it in the inbox and then if I have a reply, I call her, she comes in and she takes shorthand.
[pause]
Atwood: That's - you're lying. That's not how it works. You're exaggerating. I don't believe you.
Spolsky: And so, if I can get my secretary on this 'Tweet -- Tweeter' thing, I might go for that. [Both try and start a sentence at the same time!] I really have a very strong feeling that Twitter is er, is er, it's very, it's not even, it's beyond Silicon Valley specific, it's almost like Silicon Valley news, tech news, specific. Like the people, the big bloggers, the big journalists.
Atwood: Why don't you try it out and see what you think? I mean I - it's kinda like I was very skeptical of blogging [Joel makes stupid noises] in early 2004, you know? But - 
Spolsky: I still don't have a blog. I've never called Joel On Software a blog. It was just er - it's a bunch of essays. And I don't put blog posts because I think they're too short. 'Cause? if you haven't - my feeling is if it 's not a full length essay that I've thought about, then it's not going to have enough - it's not going to be sorta deep enough to be really worth the time, almost.
[~49:11]
Atwood: Well these are very deep philosophical issues you're getting into, so I would suggest trying it out before you conclude that it's not going to work.
Spolsky: (sighs)
Atwood: So did you want to do one final question...
Spolsky: So one Twit... No wait, wait I have to put this down on my "To Do" list: "Get a Twitter".? I'm just kidding, I'm not really going to do that.? Ahh yeah, let's take a question which is completely unrelated here.
Obvious Troll: Hi guys, this is "Obvious Troll".? Ahh... after mocking you on Reddit for your terrible website, I have to admit I've been listening to your podcast and I find it entertaining and very interesting.? After your last episode where you talked about the difference between Computer Science and Software Engineering I realised I had a question for you.
I graduated from college in 1987.? Now I find myself wondering if it is worth while to go back to school and get a graduate degree.? The college I'm looking at has a grad degree in Software Engineering.? Which is interesting to me, but is also terrifying because it's been a long time since I've been to school.? So I have to ask you; do you think that going back to grad school to get an advanced degree and update my skills is worthwhile? Or if I should just do continuing education kinds of things and, you know, update my Java certification and stuff like that there?
Thanks very much and again, I've really enjoyed your podcast.
Spolsky: Ahh... well thank you.? So let's see... 1987.? It depends on what the rules are, do you get back into your frat automatically if you go back to school in '87? Do you have to re-pledge and go through that whole hazing thing again?? I, I'm sorry.
Atwood: I don't know if I am really equipped to answer that question.? I mean I don't know if I have enough background on...? I mean, to me, you know as a practitioner, you know I went to the University of Virginia and although I enjoyed it I was really happy to be out in the world.? You know I just had a hard time at college because I would just rather be solving real problems [Spolsky murmurs agreement] rather than fake problems and that really bothered me throughout college.? It's like, it's so abstract and you have to learn how to learn and I get all that but I was really chomping at the bit to be out there doing [Spolsky: Yeah.] something... ah... practical.? And not that school isn't practical but I just don't think that I would ever, ever personally...
Spolsky: Well these software degrees, especially Masters in Software Engineering, are bound to be a lot more practical than a computer science undergraduate degree at a liberal arts school.
Atwood: Well certainly if you look at, I know Google and Microsoft um... certainly hire differently based on what degree you have.? In certain companies that really value software engineering will accord you a different salary [Spolsky: Really?] and different title based on the degree you have.? Absolutely, absolutely...
Spolsky: We generally have a policy of paying people with a Masters degree one dollar less than people with a Bachelors degree alone.? (laughs)
Atwood: Yeah.
Spolsky: As a symbolic way of indicating to them that we don't feel that masters degrees are necessarily that valuable.? But that's not... that's not always the case.? It really, it depends a lot on the person.? It depends a lot on what you've already learned.? It depends a lot on whether the classes you are going to be taking are things that you've learned before, that you haven't learned before.
A lot of Masters in Computer Science are just repeats of the Bachelors curriculum that are intended for people that didn't go to as good of a Bachelors school or that did not get a CS Bachelors degree and are now coming back to graduate school for the first time to learn CS.? And so in a lot of schools a Bachelors and a Masters are almost indistinguishable. In computer science at least.? So the number of questions there is huge and it just-- it depends.? I can't really answer.? You know in general I'm very reluctant to answer people's questions about "hey, what should I do in life?? Should I take path A or path B?" because I don't really know them well enough to answer that.? I don't even know how to answer these questions for myself, let alone for other people.
Atwood: Well, I tend to fall back into the mode of thinking of, you know, it's all about your portfolio. I mean, degrees are great, but what have you done? Right? Like, what have you really done? What have you shipped? What have you [laughs], what can you point to on the web realistically? Right? What can you point to on the web as like artifacts of things that you've created that mattered? And to me, my number one goal is to constantly create things on the web that matter. Could be code, could be blog articles, could be... as long as it has a public face and it's helping somebody, that's a part of your portfolio, so in terms of investing your effort, I think you have to balance that and think "How can I create things that are findable and that, you know, potential employers would know about me?" Certainly, a degree is one way, right? You have a piece of paper that says, okay, I have a PhD from Harvard in computer science or whatever. But there's many many other ways to do that too.
Spolsky: Cool. Alright, I wanna do a tip of the week... something that Leo Laporte does. But I actually found an application today that has saved me so many hours of work that I kinda wanna mention it. Do you do a lot of SQL database work? I guess we're gonna be using SQL Server for StackOverflow. And there's always this problem of how do you get... you've got your development database and you got your live database, and all of the developers on the team they have their own development database. And keeping those in sync and figuring out what changes you've made to one and how to get them onto the other is something that is not necessarily solved using the out-of-the-box tools. Um, so today by chance, I encountered a couple of products by Red Gate Software. And 'by chance' I say because I've known Neil Davidson for a while, he's the guy who organized the Business of Software Conference. And I know that he had this company called Red Gate, and it's based out of Cambridge, England, and they do tools for SQL developers and I kinda knew the concept was there. And I was just sitting there today, desperately needing to copy a bunch of changes that I had made on my development database up to a live database, and even figure out what those were. And I had very carefully kept a list of all the tables I had changed and all the views and stored procedures I had created, and it was still just turning out to be remarkably tedious. So I tried... they have a couple of things, one is called SQL Compare... I think that's what it's called. Let's find out... [Joel checks out red-gate.com]. Yeah, they have SQL Compare, and they also have something called SQL Data Compare. So, SQL Compare looks at two databases and actually looks at the schemas, and the stored procedures, and the views, and figures out what changes you would have to make to one database to make it look like the other database. And then SQL Data Compare will actually go in the actual datas [sic] and the rows and it'll figure out what rows it needs to copy. So, I just thought I'd call that out, if you're doing a lot of SQL development, you should check that out. This is not a paid advertisement. Everybody's gonna say 'What? Are you guys taking advertisements now?' It's just a really fantastic tool that I've been using today and greatly appreciate. So, I'm gonna go pay for that as soon as I get off the phone with you.
Atwood: Yes.
Spolsky: Anyway. Recommended... Red Gate SQL Compare, SQL Data Compare. Uh, what else do I have on my list? Not that much. I guess we should tell people one more time where the website is, and the transcripts, and how to leave us comments. We get a whole lot of email that we can't respond to. There are... gee, I only did about three of these, but a bunch of people I wasn't able to play their messages: Kurt Leucht [surprisingly this was pronounced correctly as "Loyt"], John Dire [?], Chris Benitz-Cash [?], James Fisher [?], Sean Paulson [?], Craig Shoemaker [?], and a couple others. And I wanna thank you all for submitting questions and I'm sorry I couldn't get to all of them. In general, the ones that I'm gonna play are gonna be the ones that are, you know, just interesting and so that may vary from week to week. And the way that you submit a question is to record an mp3 question. Uh, record it as an mp3, or Ogg Vorbis, or wav, or whatever format you can figure out how to record, and then email that to podcast@stackoverflow.com. Did I get that right? 
Atwood: That's right. Yep.
Spolsky: podcast@stackoverflow.com. Just email the mp3, put in the subject what it's about, keep it under 60 seconds or 90 seconds, and hopefully we'll have time to get to 3 or 4 of them in every episode. And I really appreciate all those good questions, 'cause they give us something to talk about and they keep us grounded. The other thing is that we do get a couple of emails from people who wanna follow along but are hearing impaired and, um, the other trouble with these podcasts is that being voice, they can't be searched by Google and so-forth. So, for those two reasons, we've made a place available for volunteers to contribute transcripts. If you have a few minutes, a lot of people have been doing this, and about two and a half of those transcripts are up there already. Um, that's also on the website at... where is it? If you go to, um...
Atwood: blog.stackoverflow.com.
Spolsky: Yeah, or you could just go to stackoverflow.fogbugz.com, which is our FogBugz site, and uh, go into the wiki there -- there's a wiki with all the transcripts.? And uh, I want to thank a bunch of people; a lot... most of them are anonymous, but those of you that registered: Eric Rogstad, Daniel Pritchett, uh Michael Mathews, Jonathan Rauch, Alex Givant -- I'm pronouncing these all terribly -- Adrian Clark, Christopher Svec -- oh, I know him -- uh, William Merriam.???And I wanna thank uh, and everybody else who contributed in some small way: either, just y'know go up to the -- you can go up to the transcript site, find a minute that's not there, and just type in a minute worth of text, and that'll be uh, appreciated by a great number of our, of our uh, listeners and followers.
Any other uh...
Atwood: Yes.
Spolsky: ... housekeeping?? ... Alright ...
Atwood: No, I think that's it!
Spolsky: ... see you next week!
Atwood: Bye.
Spolsky: OK, and now I...
[1:08:45 End]????????
Spolsky: There we go, ok now it's recording. Well, the good news is that we don't have any questions to play this week.
Atwood: [laughs]
Spolsky: It didn't take me very long to listen to all the incoming email, cause there was only one, and it was a little bit, what's the word I'm looking for. Meandering. 
Atwood: I see.
Spolsky: I guess we really are down now just to two listeners. So, what should we talk about?
Atwood: Well, we can talk about the progress we've made so far. I also have some pending stuff I wanna talk about from previous podcasts, a little bit of trivia. And this is truly trivia: you asked about Leonardo DiCaprio in a television show? 
Spolsky: Yes. 
Atwood: I looked it up.
Spolsky: Oh?
Atwood: It was actually Growing Pains is what you were thinking of.
Spolsky: What did I say, Family Ties?
Atwood: I think we were talking about Family Ties.
Spolsky: See, I think Growing Pains was a Family Ties clone. 
Atwood: One of the offshoots...
Spolsky: Like, based on the 60's show Family Ties, they made Growing Pains. No, I don't think it was spin-off so much as a clone, to take advantage of the apparent success.
Atwood: And just to put this into context for people who didn't listen to the other podcast, this was in reference to the whole "jumping the shark" thing.? Which we had talked about earlier.? And one of the strategies for dealing with shows that are "jumping the shark" is to add a little kid to the show to, you know... sort of spice it up.
Spolsky: Yeah, and Leonardo DiCaprio was one of those kids.? 
Atwood: Yes, he was. Originally. The other clarification - and I actually got in trouble with my wife for this - was when we talked about jumping the shark, the actual "jumping the shark" episode on Happy Days, he wasn't actually on his motorcycle like I had thought.? He was actually water-skiing, which is why he was wearing shorts.? Remember, we were like "Why was the Fonz be wearing shorts?" [laughs]? It's because he was water-skiing. So, I just got in trouble with my wife.? She's sort of a...
Spolsky: I have never seen that episode, and I used to watch Happy Days all the time, but probably before it jumped the shark.
Atwood: The other thing funny thing about the whole jumping the shark meme is that the show Happy Days after the jumping the shark episode had 100 more episodes, which is [inaudible] right...
Spolsky: Yeah, and they all probably made, I don't know, a gazillion dollars. 
Atwood: Yes.
Spolsky: After they jumped the shark.
Atwood: Yes. Yes. 'Cause I think...
Spolsky: We were talking about that today at lunch, about how they have these episodic dramas, like the Sopranos and stuff on television, and they're always great the first year, but then they start to kinda stretch it out, and there's just not that much story that you can keep telling (Lost), and so they tend to get worse and worse in the terms of the quality of the story, but they make more and more money because more and more people know about the shows. And watch them.
Atwood: Well, 100 shows is the magical syndication point.? A lot of shows really kill themselves.
Spolsky: Right, for sitcoms they have to get to 100, yeah.
Atwood: Because I think they make tons and tons of money once they get into syndication.? It's like a gold medal for them.
Spolsky: Yeah, what's going to happen?? They haven't been making as many of those episodic sitcom-type things that can go into syndication. What are the people that want syndicated shows going to show?
Atwood: Ah...gosh...I have no idea.? I try to really limit what I view.? I do actually watch quite a bit of television still, but I try to really limit what I watch because there's so many demands on my attention already.? But anyway, just cleaning up on the whole "jumping the shark" meme, 'cause my wife wanted me to do that.
Spolsky: Ok, alright. Let's cross that one off.
Atwood: Yes, that is done.? So some people have been asking, uhm I just got a little skype notification, that's weird, [laughs]. Some people have been asking about scheduling, and I want to clarify, I've been telling people six to eight weeks until we get to what we call our private beta of StackOverflow.Spolsky: OkayAtwood: So that puts it at, lets see, what is it? It's the middle of May now, so, end of June - early July. Spolsky: MhmmAtwood: And I've also been getting some very very nice emails from people that want to help in some way and contribute, and I've been inviting those people into our private beta... uh..Spolsky: OkayAtwood: ... later on. SoSpolsky: Wait how do you invite what? Through what mechanism do you invite them into our private beta?Atwood: Basically they email me directly and then, I add them to the list. And then six weeks from now...Spolsky: Oh. And you have like a notepad file type thing.Atwood: Pretty much, it's just a basic text file. But yeah, it's hard to manage having a bunch of people contributing at this point, cause we're still in very much the formative of stages. But certainly once we get into private beta, I want tons of people to look at it and provide feedback at that point. So if you can postpone your desire for about six weeks, uh, we'll get you.Spolsky: So how do you get this 6 to 8 weeks? What's this based on? Did you like make some tasks that you want to complete?Atwood: uh no, I er.. That's just sort of... err... off the top of my headSpolsky: [laughs] Well okay, you're doomed Jeff. There's some controversy. You, sir, are doomed, because you don't know what things you have to do.Atwood: Yes. I know, I know. I should have a spec, I should have a burn down chart, I should have, Gantt charts. I don't really have any of that stuff.Spolsky: Well, yeah, that's overkill. You just need a list of things you have to do.Atwood: Yes.Spolsky: So you can go into FogBugz, making a little new project called StackOverflow. Which we might have...Atwood: We have, we have, we have a StackOverflowproject, that's for sure.Spolsky: And then just make a list of tasks.Atwood: Yes, its been pretty minimal up to this point in terms of actual planning. Yeah we're getting to the point where we need to start planning a bit more about what we're doing.[5:27]
Spolsky: Yeah you make a list of task, like, one or two day tasks, put in one or two day estimates for each of them. And then you actually have something to base on something instead on based on... Cause I can't, I mean, at six to eight weeks, that sounds right to me [laughs]. I don't even..? What's that based on? Like the last time we build one of these programming Q&A websites, that's how long it took us? Cause I know I've never. And you know the last time I built something like this, it took about 72 hours. And that was the first version of the discussion forums for joelonsoftware.Atwood: Right.Spolsky: I know what happened was we were about to launch FogBugz 1.0, and knew that we wanted a place for our beta testers and users to be able to post questions and get answers, sort of like a very simple discussion forum. And I think I spent like a weekend and I just banged it out, cause it was so simple.Atwood: So what you're saying is that I should be able to do this in like, a couple days if I was awesome, right?Spolsky: No, uhm, because we've also got tags that we want to do, right, cause we want to be able to tag articles and you want to search for tags and make tag clouds that sort of stuff. We got the ranking, the voting up and down, that's kind of hard to figure out an efficient way to do that.Atwood: Right. There's some parts to it, that's why I guesstimated at six to eight weeks but you know, I figured, the less overhead the better. It's only me and Jared as the only developer, why complicate it? So uhm, that's the state of the project. I do think based on where Jared and I are, we actually do have logins working, we have account creations working, logins created. I think by next week at this time we might have something for you, Joel, to actually try. I mean, it's going to be pretty minimal.Spolsky: Okay, did you just use the login provider thing that ASP.NET supports?Atwood: No err, we kinda rolled our own to a certain degree, because we just want something very minimalistic. We didn't want a overhead and dependencies. I mean, we're trying to be very selective about what dependencies we bring in. We're already bringing in ASP.NET MVC and a few other things.Spolsky: I mean this is just a part of the ASP.NET web forms or something. It's pretty easy, you just take this little login control and drop it on a page. I added that to... We have this internal FogCreek control panel thing that our staff uses to keep track of our customers and all that kind of stuff. And its er, you know, as soon as we got past ten people, we started needing to have something that some people are allowed to do and some people aren't allowed to do.Atwood: Right.
[8:01]
Spolsky: And we wanted to hire a bunch of people, and give them the capability of issuing refunds, so we wanted to make sure that the refund control panel required a logon. So I added a logon capability to an existing ASP.NET site, you know - couple of hours and it was actually - I happened to just use a LDAP source to decide who is allowed to log on.
Atwood: Mhmm.
Spolsky: So they'd just use their Windows password -?but it's actually kinda trivial to give it - to point it to a database and tell it to make a user directory. And it'll even make like user management features for you automatically. All those like oh.. "Cause there's all these little aspects like oh I forgot my password and email me a new password," and getting that right can be kinda tedious.
Atwood: Yeah, the challenge I think is, and you mentioned one part of it which is integration with your existing Windows login, which is NTLM, so that's browser negotiation -
Spolsky: No, it's LDAP, yeah.
Atwood: And one of the frustrations with that -
Spolsky: No, it's not NTLM. No, no, it's not that crazy browser thing where the browser pops up a dialog.
Atwood: No no, there's no dialog popping. What I mean is it negotiates - Are you talking about negotiation of credentials automatically, where they know that you're logged in just by the virtue of the fact that you're logged into Windows? That's NTLM.
Spolsky: It doesn't do that. Well you could, but people don't like that. Because you have to use IE and it's still going to pop up a dialog box and people don't like that. It's just er.. no it actually, the way I've got it setup, it actually gives you a dialog box, in HTML form, where you type a username and password. So it's not that browser based authentication, it's just form based authentication.
Atwood: Oh okay, so you're using form based authentication.
Spolsky: Yep.
Atwood: But this is an app for you guys internally though correct, is that right?
[9:46]
Spolsky: Mm-hmm.
Atwood: Ok.
Spolsky: Yeah, it could use the NTLM but that just doesn't work as well in Firefox and Safari and stuff, it's just better to...
Atwood: Yeah. Well, that's what I was trying to get to. It does actually work in Firefox. The problem is that Firefox doesn't whitelist anything to do that, whereas IE does. IE says if you're in the Intranet zone--you know that whole zone concept they have--if you're in the Intranet zone, it will actually hand NTLM automatically. Whereas Firefox won't, so you basically need to build the whitelist in Firefox and say OK: you can just do *.* or fogbugz.*..
Spolsky: To the ASP.NET team's credit, they understand that people don't like that browser based authentication.
Atwood: Well, I think it works well in an Intranet scenario, it just breaks down completely on the web. So if your product--I mean, if this is something you guys are going to use internally--that's, I would actually use the NTLM auth because it's just less for you to do, right? I mean, you just use the app and it magically works, which is pretty cool. But? in the open internet...
Spolsky: What happens if you try to store like a cookie [coughing]. Excuse me, I'm sick. Bah.
Atwood: [laughs]
Spolsky: Um, isn't there some kind of issue where every time you come back you get that dialog popping up and you have to...
Atwood: no
Spolsky: ...save your username and password. [mumbling]
Atwood: No, NTLM works really well. I mean, it's just you gotta be very strict about it. You can never go across an open internet at any point, otherwise it's just a big pain in the butt. But if, I mean that's the, and to me this is the big conundrum with Microsoft. So much of their stuff is designed to be sold to corporations. Like, NTLM is a classic example. 
Spolsky: (barely audible) That's 'cause...
Atwood: It works really, really well in the context of, you know, specific organizations that have an infrastructure. Um, and actually, you know, in my previous life I used to be a Team System MVP. And Team System is developed exactly the same way. You can see from day one that Microsoft assumed that everybody that uses Team System is gonna be on a network where they have Active Directory and they're gonna have Windows credentials and that's how you're gonna access the system. Even the command line stuff that they do uses your Windows login, right?
Spolsky: Wow, yeah.
Atwood: Which is convenient sometimes and then like a giant, huge pain in the ass at other times, right? [chuckles]
Spolsky: Right, right.
Atwood: Because, for the people at Redmond, they're always on Active Directory. This is how they work. Um...
Spolsky: That's because when you're a company, first of all you have money, secondly it's not your money. But most importantly, even if you are being rational, spending the company's money, which is not yours... even if you are being sort of rational, a company will spend money on fixed costs. Right, you know how every company has fixed costs and variable costs. And the fixed costs are things that they have to buy one of no matter what, like a factory or an office. And the variable costs are things that they have to pay one of for every customer that they get. Like, if you're buying laptops, then a fixed cost is the design of the laptop but the variable cost is the keyboard and the screen and the various parts and the labour that goes into the manufacture of each laptop. And those fixed costs, you spread out amongst all the units that you sell. So, with me so far?Atwood: Yes.Spolsky: So if you're a company, spending on fixed costs is something that can be spread out over all those units. And if you're a fairly successful company selling a large number of products, that may wind up adding almost nothing to the cost of the product. So anything that's a fixed cost, businesses are generally willing to spend on. I don't want to go too far because you have to spread out some huge fixed costs over a very small number of customers, you're not going to want to do that. But on the other hand, something like the Apple model is to design really good products. They spend a lot of the money on the design up front (something that Dell doesn't do) because they want the design to be really good because that sells more units. And designing is a fixed cost; they only have to design once no matter how many units they sell. So, in general, businesses are surprisingly happy to spend on fixed costs. They don't like to spend on variable costs, they generally want to use cheap parts because they don't want to drive up the price of all their units, because then their individual units become more expensive, and the consumers won't buy them because consumers are ridiculously stingy.Atwood: Right.Spolsky: Now, what consumers will spend on is a whole different story. Consumers will spend on things that they're used to spending on, but almost all consumers are going to want those to be priced at kind of a commodity price where there's almost no room for profit. Like, they're really, a consumer... an end user consumer, most end consumers, are not going to spend more than the minimum commodity price for most of the things that they buy. And the exception is luxury goods. Like, certain things that they consider a luxury good, whether it's a latte, or jewelery, or a really cool flat screen TV, or whatever, an Apple iBook or something. If it's a MacBook (sorry, they don't make iBooks any more), if it's a luxury good then they will spend more than just what it's actually worth. And that's the only way you can make a profit off of a consumer. You can't really make a profit off consumers if you sell them things at the commodity price, because you're selling it at the price it cost you to make, like everybody else. And you're scavenging to try to find two or three cents and make it up in volume. That's something that's practically impossible for startups to do. Whereas, if you're selling a luxury good then you can charge significantly more than what the good actually cost, because there's some appeal, some luxury appeal to this product.Atwood: Well, what would you define as luxury on the web? I mean, certainly, what I got from David's talk, and he was very clear on this point, was that you have to sell to businesses if you want to make a lot of money, which is the same thing that I'm hearing from you, is that consumers really aren't really going to flock to whatever service it is you're selling online. And I think part of the problem, and what you're getting at...Spolsky: I'll tell you, the only luxury good I can think of on the web, and I'll come up with some more, but... JDate. It's the Jewish dating website.
Atwood: [chuckle] Nice.
Spolsky: It's a slight luxury product over match.com or whatever that one's called.Atwood: Isn't that what people use Facebook for? For the whole hook-up, the whole dating thing? Isn't that...Spolsky: Yeah, not so much. I think JDate.Atwood: So pretty much dating sites would be the only luxury you can think of off the top of your head?Spolsky: Jewish dating sites.Atwood: Jewish, specialised dating sites.Spolsky: The regular dating sites are commodities. I'll probably come up with some more examples if I think hard about it, but there's not that many luxury products on... There are luxury retailers that sell through the web. But when you think about a luxury product, even in the consumer market, forget the web now for a minute, think about Abercrombie & Fitch. As a luxury product they sell a pair of jeans that costs them the same 48 cents to manufacture in India or Vietnam as Old Navy, but instead of selling them for $20, they sell them for... I don't know, how much are Abercrombie jeans? $70?
Atwood: I have no idea.
Spolsky: $100? And, in order to create a luxury product in fashion, the fashion industry, you have to establish a brand name, so that the people wearing that product will feel extra cool, or will look extra cool to their friends. And so, that's also a fixed cost, incidentally. So the way that a fashion retailer will establish that brand name, is that they'll buy all kinds of advertising with good-looking models, and they try to get celebrities to wear their clothes, and they'll do all kinds of things to try to associate their particular product with a high-end thing because they're still selling the same product that everybody else is but with maybe a slightly different look that is perceived to be better. But in order to make it a luxury product they also have to create this brand allure, the luxury brand allure. Which they spend a lot of money on advertising to create that luxury brand allure. And it's not to create awareness. The reason that there's a Prada ad in the fancy magazines that smell like perfume, is not because you've never heard of Prada, but because they want you to start to associate Prada with high-end, luxurious type things in your mind. And so, they're using that money basically, to buy this... not brand awareness really, but brand positioning that allows them to be a luxury product and to charge more for their product than the commodity price, for a limited number of people. 
[22:00]
Atwood: Right, and certainly when I say luxury, i don't mean online services at all, with the possible exception of the dating services you mentioned. 
Spolsky: No, even in the computer industry we have very few. Apple is a luxury product they charge a couple of hundred dollars more for every computer than the IBM equivalent and it's a luxurious product, slightly better workmanship, slightly better finish and an allure, the brand name they've created with the switcher campaign to try to make you think that you're the cool, scrawny dude who doesn't quite know how to shave every day yet, instead of the tubby...
Atwood: Yeah, but that's still hardware though. I mean, I'm talking about stuff that's purely bought online.
Spolsky: I can probably think of some luxury software products. Maybe Aperture as a opposed to iPhoto. Which is... sometimes you can get your luxury appeal by pretending to be professional, by being sort-of "prosumer", like those thousand dollar cameras which are a little bit too complicated and they look kinda geeky and they're not luxurious in the sense that it's leather, they're luxurious in the sense that they appear to be a professional product sort of like a Hummer appears to be a professional vehicle that you'd use for fighting wars, or something, instead of what it's really for, which is going to the supermarket.? So that's an example of one way you might create this luxury appeal. So now I should really wrack my brain and try think if there's anything on the web, but the truth is the web is a media outlet and media is just media, it's not really...
Atwood: Well, it's more akin to the magazines that you talk about, which are obviously ad-subsidized.? I mean even if you pay $4 or $5 for a copy of Vogue, or what have you, the thing is 30% ads, or more.
Spolsky: Most people are probably paying a dollar for Vogue because they have subscriptions.
Atwood: Right.
[23:50]
[35:47]
Atwood: Yep.Spolsky: Let's see what you've got up there right now.Atwood: Well, I was talking a little bit about my frustrations with Firefox which is...Spolsky: I am going to the bathroom now.? The crap.. the poop is coming out now.
[36:02]
Atwood: That's not... of course you're referencing the classic penny arcade cartoon which I'll have to link up in the post now... oh...Spolsky: About half the things that you have up here are directed at people - that I don't- so I don't get conversat- well, not half these people-Atwood: Okay, here's what it's like - it's like being at a dinner party; you know me, but you don't know half of the people, but the cool thing is in the twitter you can sort-of see the conversation, follow it and you can start talking to other people if you want to - and it's great.? I mean, I don't know how to describe it, it's really strange, I know it seems like it a really useless service, and I know I sound-Spolsky: See, you're someone I'm actually interested in knowing what you're doing, so I might follow you on Twitter: "Ant is against human rights, LOL oh commentors you bring the funny"? Ant?Atwood: Ant is a build...Spolsky: How is it against human rights?Atwood: Well, you have to follow my blog.? There is some context here.? So assuming that you're following me, you would read my blog, which you haven't been, obviously-Spolsky: Oh yeah, you were talking about putting keyboards into the dishwasher and you've got a really messy baby here...Atwood: Prior to that I was talking about more the problems of XML, and a lot of people consider Ant to be a poster-child for the abuse of XML-Spolsky: What's interesting is that XML was really designed for markup, i.e. taking text and adding markup to it; so it's not designed to be an efficient way to store data structures, it's kinda a mess where you use it for data structures.Atwood: But that's 90% of what [...] I use it for in Visual Studio, I store configuration files, and crazy markup I didn't want to see, and it's all data, right?Spolsky: Well what happened is that they is that everyone suddenly realised is: if you have, if we all use the same method no matter how stupid, to store our configuration files - especially if it's human readable - then you don't have to write that code every time for configuration files.? I mean if you look a the classic Unix utilities they all have their own file format and they all have code to parse it and they all have their own rules about how you escape a special character and how you put a quote inside a quote and how you continue a line on the next line and how you put a comment in there and they all have their own rules for that and they all have written their own parsers for that - which have many bugs - and it's just a big mess and as soon as XML came out just the fact that everyone agreed on that on using XML even it it wasn't the ideal format meant that we got all these libraries that we could use for our programming languages and we could stop worrying about what the actual file format was we could just say, "here take this structure and put it in that file and leave me alone", or "Load this structure from that file".Atwood: Right, and-Spolsky: And I don't think you're even meant to look at the text of the file I think you're probably meant to - I mean you can edit an XML file in a text editor, but I think the original vision was that there would be these nice XML editors - of which there were surprisingly few...Atwood: - and that's my problem.? You really end up with XML looking at it almost all the time and it makes - it's just so frustrating cause in our current stackoverflow.com project there's of course web.config, that's one of the master files in ASP.NET, and I hate reading web.config, there's actually not that much information in it, but the formatting makes my head hurt every time I look at it, and every time I look at it I think "God, there's got to be a better way to represent this".? You know-Spolsky: Is there not a GUI, does Visual Studio not have a web.config GUI editor?? I guess it doesn't...Atwood: There is some, but it's mixed you know web.config is sorta like the registry in Windows, I mean it's pretty much the place a lot of stuff just ends up, you know, like Word, I'm sure, puts...Spolsky: -What happens when if load it up in, have you ever used one of those tools like XML spy or one of those XML editors, XML spy I think was the biggest one.Atwood: What's that really going to give you, just like an Excel-type view of it?? I mean without, maybe you don't see the end tags?Spolsky: No, I think you see like a tree; yeah, I think you see there's a tree; you don't see any of the tags and also it knows, it? looks in the DTD so it knows what things can go inside what other things so it lets you, instead of just have to type something, it gives you the equivalent of intellisense, where you can - oh, I don't know what I'm talking about.Atwood: No, no, actually, you're on the right track. When I wrote that post I tried to be clear that I don't think that XML is evil, just think that - particularly in the Windows eco-system with Visual Studio - it's become the go-to standard.? Like if you have any kind of data that you want to store, in a file, that's somewhat human readable then you use XML and I'm not really sure that's the right attitude we should have towards it.? I think XML solves a specific set of problems, like particularly hierarchy, like you mentioned tree: First of all, I hate trees; I mean I think they're necessary from a computer science standpoint, but from a usability standpoint and a user standpoint trees are the worst thing you can put on the screen - so when you said "hey, you get a tree" I'm like "that's not a plus, that's a minus" I don't want to see a ten layer deep tree of junk.Spolsky: Yeah a clean text file would be nicer.Atwood: Yeah, so-Spolsky: I definitely agree for the types of data structures that you would use YAML or JSON or something for, it winds up being significantly cleaner.Atwood: Yes.
Spolsky: And you know the other weird thing about XML is that it doesn't even have a consistent way to do certain things, like deciding whether something should be an attribute.? Let's say that you have a name-value kind of situation.? You know, where the name is "price" and the value is "$100".? It's not even clear if you're supposed to say <product price="$100"> and put that in an attribute, or say "<product>" and then open a new tag called "price".? XML is just not consistent about that.? You can do either.
Atwood: Right.? Yeah, I think XML raises as many questions.
Spolsky: It's clearly not designed for that.? It's really designed just to be for markup, like HTML.? It's great for HTML.?
There were so many...and you know what, the truth is, before HTML, there were things like RTF, and there were so many kinds of textual-based attempts to represent slightly-rich text, or text where some of the text may have various attributes, and may be nested.? And, there have been many attempts to do this, and half the time they are these ad-hoc file formats that invented by somebody who doesn't really think through all the issues.? Especially of escaping, and stuff like that.? Escaping, character sets, validation, testing for validity. XML at least gives you a default option now, which we never used to have, where those issues have been thought through.?
So even if you are too stupid to know a single thing about Unicode, as many people...you know, the truth is that, the early days of the RSS spec, those early specs were written saying it's a plain-text XML file, without saying anything about character set.? In fact, examples did not actually mention encoding.? That should have made the spec incorrect, or invalid, or wrong, when faced with Unicode data, or data in other character sets, and yet, because everybody who used XML and knew about Unicode knew about character-set encoding and knew how XML handled character-set encoding, it was possible for Dave Winer and the early "my.netscape" people, when defining those formats, to actually remain completely, blithely ignorant of character-set and encoding issues, and still come out with a file format that allowed you get the character-set and encoding things right.?
So, that's kind of a nice advantage.
Atwood: Right, because I think… say you had a file in Notepad, like, truly a plain-text file.? There’s that byte-
Spolsky: AHH!
Atwood: No no, hear me out-
Spolsky: You mean Windows 1252?
Atwood: Right, because there’s no encoding information, like a text file.? How do you know what the encoding is for a text file?? Where is that information?
Spolsky: Ahh... I can tell you that.? It depends. ?Well, usually it has to be out-of-band. It has to be in… but it depends. ?HTML, you can carry it in-band, using the http-equiv, but usually it has to be out-of-band.? And, in fact, the way Notepad knows, if you’re asking that specific question, is that it does a statistical analysis of the text, and it uses that to try to guess the character-set encoding, based on the statistical occurrence of various bytes, and then it uses a particular profile, and it’s actually kinda interesting.? Somebody has an example sentence somewhere, have you seen this on the Internet?
Atwood: Yes… that’s what I was saying…
Spolsky: You can type in Notepad, and the next time you open Notepad, you get four Chinese characters, because it happens to be statically… it happens to trick that algorithm.? That’s a really bad algorithm. 
Atwood: Right, but that was my point… I’m trying to provide support to your point, which is that at least in XML you have this tag that explicitly says “this is the encoding” right, “of this XML”, were as with a plain-text file, you have to come up with some scheme, and the Notepad scheme of guessing kinda sucks.? So, I get that part of it, and I wasn't trying to present it as "oh, XML is bad, let's all switch to this new file format that all the cool guys are using". What I was trying to say is why don't we think about what we're doing? That's the general theme of a lot of the stuff in my blog. Can we just stop programming for a minute to think about what we're doing and not make a blind choice based on "Well this is what my tool does, so that's what I have to do"?
I don’t even what to learn anything about any other…
Spolsky: It sort of depends… I mean, if I’m writing some C# code, I’ve got a bunch of data structures, I want to persist them to text file that people can edit and write… why think about it?? Why not just the XML Serialization objects, and just be like *plbbtt*. Done.?Haven’t thought about it.? Now it works.
Atwood: Let me give you an example.? I know it’s written in stone at this point…
Spolsky: I mean, I’ll think about things that are important… like, things that are really… like, let’s say I’m inventing a programming language.? Well then, I’m not going to use XML as my syntax, because that’s the most important thing about my programming language.? But if it’s just like, how to persist some interesting data structure that I’ve created with C#, into a file, that nobody has to read, I just have to be able to load it again later, you know… why spend even a minute thinking about this when I can think about something that’s even more core to my product.
Atwood: Yeah, well… sure.? I mean, that’s an argument that you can pursue down the rabbit hole.? I don’t know how far you want to go, but... 
Spolsky: [laughs] Isn’t that what we’re doing here?
Atwood: ...but to me it matters… every time I look at web.config, there’s a mental cost of me having to parse all these stupid tags mentally.? “Here’s this end tag, here’ s this giant, verbose thing where only 10% of this actually matters”. I mean, what’s the mental cost of that times the number of developers in the world, times number of projects in the world. I mean, I think this stuff matters. And you can also find people will… they’ll develop a website, and they’ll never view-source on it.? They don’t really care what the markup looks, as long as the rendered result is good.? I, philosophically disagree with that.? I think…
Spolsky: It depends on the situation. Come on… if you’re grandma calls you up, and needs a real quick HTML page to sell her couch for craigslist, and she just wants some formatting and some pictures and stuff for that, who cares what the HTML looks like?
Atwood: Well, I care.? In this case, it’s stackoverflow, so I mean…
Spolsky: Well wait… that’s different… okay, StackOverflow is your main work, it’s your main… but here, you’re just trying to make a little web page for your grandma… who cares.? You know, I think really just depends on the situation.? I think you could spend time worrying about things where they really matter.? Let me make… while I’m just counter-point arguing, web.config… I mean, you could use YAML for web.config, but XML is far better known than YAML.? So, if it’s in XML, 98% of those developers who go in there, and look at it and try to edit it, are gonna be like “Yeah, it sucks, but at least I know what it’s doing.” Whereas they’re going to look at YAML at gonna be like “What are those little dashes?? And what does it mean when there’s a little star in front of something, or a little ampersand in front of something, I don’t know what that is, now I’m gonna have to go learn it?”
So, a lot of times, doing what people already know, instead of doing what’s better is helpful.
Atwood: Sure.? It’s a trade-off.
Spolsky: Kinda like QWERTY vs DVORAK keyboards.
Atwood: But my audience is primarily software developers, right, so I kind of hold them to a little bit of a higher standard than random people creating websites.? Sure, if my wife is creating websites, than I don’t expect her to view source, and care that all the tags are closed, and that we’re not using inappropriate tables, we’re using DIVS, and…
Spolsky: But if you call up your wife, and it’s an emergency, and she has to go into your web.config and make some last-minute change, and you’re on the ski slopes, so you can’t even use your Windows Mobile telephone to get on there, and you have to tell her to log on to the website and edit the web.config file, and she happens to know XML from somewhere else, because it’s kind of a standard that everyone learns, than at least she’s got a hope of doing it, whereas if it was in YAML, she’d be like “Ummm… uh-oh.? New thing to learn. ?Emergency.”
Atwood: Well, you could make that argument about new programming languages… anything new.? To me… I don’t know...
Spolsky: Everything new is bad [chuckles]
Atwood: Yeah, I think obviously there's pros and cons to each.? I'm not saying that one is the right solution all the time.? But I think, ironically, that is what is happening with XML.? I think people are saying "It's always the right answer, because it can store anything, right? And all the stuff I use uses it, so it must be the right choice." That bothers me a little.? Maybe I'm just contrarian. Maybe I'm an iconoclast and I want to try different things and see different things, but I think actually understanding the alternatives helps you understand XML better, a little bit, too.
Spolsky: Sure.
Atwood: It’s like… what is it good at?? What is it not good at?
Spolsky: XML is the God language.? You’re just gonna have to get used to it.? [laughs] Just accept the divinity XML.
Atwood: Yeah. That’s what I’m getting at… just understand the pantheon of gods that live with XML. So I’m gonna-
Spolsky: It’s actually shocking in certain circumstances how much better JSON is than XML.? For example, if you need to get some quick data back from the server into JavaScript, in an AJAX programming scenario, JSON is so tiny and so fast and so easy.
Atwood: Right.? And I hope people reading my blog would not get the idea that it's about a knee-jerk reaction one way or the other. It's about understanding the trade-offs and applying those trade-offs to your particular situation.? I think that is the absolute art of programming. It's understanding what you could do, and which one of those things fits your situation best. Versus what so many programmers do, which is "I've learned to user a hammer, and I'm gonna hammer everything." Ultimately, to me, it's about self-awareness.
Spolsky: That’s what distinguishes the good programmers, the fourteen of you who listen to this podcast, that actually care about their tools and what to learn new ways of doing things, from the people are just like “When it works I can go home, so let me get it to work and go, and please stop bothering me with all your stupid things.”
Spolsky: You know, I’ve got Outlook installed on my phone, on my laptop, on my desktop, and every time I have a meeting or something, or some kind of task notification, all three of them beep. 
Atwood: [laughs]
Spolsky: And they’re not even time-synchronized, so it’s like one minute, this one goes, then a minute later that one goes, then a minute later my phone is beeping at me.? Is there a way to tell Outlook that you don’t want to be notified on all your devices when they’re all in the same room with you?
Atwood: I don’t know. I no longer have to use Outlook, although I actually kinda like Outlook, and in a way I’m kinda glad too, because I just feel like Outlook does too much for me. 
Spolsky: Those… where did I see this, news.ycombinator.com?? One of these ycombinator startups make a little app that watches what you’re doing, and tells you how much time you spend in Facebook, and how much time you spend reading news, and stuff like that.
Atwood: Is it that one named x-o-b-n-i?
Spolsky: No, that’s a different thing.? It just tells you who you’re emailing a lot of.? Geez, I’m never gonna find this anymore, ‘cause their search doesn’t work so good…
Atwood: Are you gonna make fun of me for not trying to pronounce x-o-b-n-i, or whatever it’s called? [laughs]
Spolsky: No, it’s totally xobni, man…
Spolsky: Ahh… "procrastinate"… ah… why don’t they have search on news.ycombinator.com?? Anyway, one of the startups does this thing where it tells you, at the end of the week, “you spend six hours this week just reading Reddit, or whatever”, and they’ve actually, I guess, been accumulating this data, and they realized some statistics about what their particularly geeky audience spends their time on, on the computer, and Outlook was ridiculously high on the list.? It sort of combines websites....it doesn’t just say “Internet Explore”, it actually knows what website you were at, so the top ones where like Google Reader, Reddit, Outlook, and Word and Excel (both very high up there).? I was surprised that Outlook was at the top… I was surprised at how much time people spend in Outlook.? 
Hahh! Wait! I think I know why that is!
Atwood: [laughs]
Spolsky: I just figured that out.? Every friggin’ time you have a task, Outlook launches this little reminder window, and that comes to the front and gets the focus. And so it probably things that every time… so, you go to the bathroom or something, you come back, and there’s this little notification on your screen that’s been there for however long you were at a meeting, or in the bathroom, or whatever, telling you that’s time for that meeting, or to go to the bathroom, or do whatever you just did.? And all that time, it thought you were using Outlook.? Well, actually, I don’t really know how their app calculates it.
Atwood: I’ve seen sites like that, where you opt-in, and it keeps track of what you’re doing, for a variety of different reason, but is it definitely interested, and to me, the browser is by far the number one app that I’m using all the time.
Spolsky: I think this reveals what their business plan is.? I hadn’t thought about that, but what’s the business plan of somebody that runs a little app that tells you what you’re wasting time on, so you can try to spend next time on social news-networking websites… Digg.com or Reddit?Atwood: Well it’s quite a time drain-
Spolsky: No, I think it’s probably , if they collect all this data, they can sell that to advertisers, to provide, sort of Nelsen ratings for websites.? That’s actually based on real-world data, like how much time was spent on Facebook, how much time was spent on msn.com, or whatever those sites may be.? They can provide data that’s sort of like the data that… I guess Alexa has this data.
Atwood: That’s what I’m saying.? It’s basically Alexa, what you’re describing.? The problem Alexa has is, their statistics are kinda a lie because they only get data back from people that have their little toolbar installed, so you’re looking at a pretty small statistical subset.
Spolsky: That’s right.? And these people will only get data back from people that installed, and that’s sort of a problem, yes.? I mean, one thing they could probably do is… yeah, I don’t know what they could do.? They could take a couple thousand people and pay them to install this thing….people that are selected sort as demographically representative of the United States, or whatever demographics you want to get, and use that as a… I don’t know what the statistical term is… use that basically to provide a base-line.
Spolsky: So you can say “Alright, so the people actually install this little gimmick heard about us through ycombinator, so they’re gonna spend a lot of time on Reddit, and on ycombinator-related sites and stuff like that, so that’s all gonna be disproportional, but if we can get a thousand people we pay to install this sucker, then that can get us alignment data that actually demographically somewhat valid.
Atwood: Oh yeah, it’s basic Statistics 101, right?? I mean, assuming you have a large enough sample, the data is technically valid.? 
Spolsky: And then, if all their people that [generate the logging] data suddenly stop going to Reddit and start going to Digg, then they can see if the same happens in the statistically accurate sample.
Atwood: Right.
Spolsky: That must be their business plan.
Atwood: So, have you been getting any angry emails about the podcast stuff?? I’m not sure how much of your email you actually read, because I’m sure you get way more than I do.
Spolsky: [laughs] No, I don’t get angry emails.? I guess we didn’t say anything really controversialAtwood: No… well, you did get in trouble with Paul Graham.? We should mention that.
Spolsky: Ah… I did?
Atwood: Maybe we shouldn’t. [laughs]
Spolsky: What did I say?? Oh… I talked about his name-dropping.
Atwood: Right.? And you just made an off-the-cuff remark that was little silly.? So yeah, people do listen.? I don’t know if you read the transcript, but hey, Paul Graham is listening, right, so that’s good.
Spolsky: I don’t think he’s listening.? I’ll bet you he has a “Paul Graham” search at Google, and the transcript showed up on… as soon as somebody typed it in the transcript, it came up as a result on Google for Paul Graham, so Google probably emailed him saying…
Atwood: Yeah, probably.
Spolsky: But Paul, if you’re listening to this, send me an email right now saying “No, I’m actually listening to your podcast.”? ‘Cause it would be nice to know who that person is that’s listening.? ??I would make this a podcast entirely devoted to talking to Paul Graham.
Atwood: Yes.? Now I know we’re not letting people ask questions through email, but I did get one email that was kind of plaintive, and I did want to talk about it.? It’s from Michael Dorfman, and he said, and I quote: “a couple of your comments in StackOverflow podcast #3 actually made me feel a bit embarrassed on your behalf.”And one of them is about pronunciation, which you made fun of.? So Knuth, I guess the K is not silent, as Michael points out, so it’s actually Knuth, which, I don’t know how I would know that. 
Spolsky: [laughs] Yes.
Atwood: Also, that I don’t know the different between computer science and software engineering, which I don’t think there should be this big divide.? Maybe I’m just an idealist… I think it’s all about what you do in the world.? Part of it’s computer science, part of it’s where the rubber meets the road, so I think that’s semantics on some level.
Spolsky: No, but [to his defense] these words do have meanings in academic departments specifically.
Atwood: Yeah.? Yeah.
It’s not like the different between… so at Yale, they have an English department, and they also have a comparative literature department.? And the reason they have a comparative literature department is the English department wasn’t giving tenure to any Jews, so they have to make another department because they couldn’t get senior professors in the English department to hire Jews.? This was in the 50’s.? So they have two departments that basically do the same thing.
Atwood: I see.
So, Michael was very, very concerned that I didn’t have a strong enough background in computer science.? So one of his recommendations was SICP (Structure and Interpretation of Computer Programs).
Spolsky: Ahh… great book. Oh man.
Atwood: Yes, see… Joel loves it, Michael.? So I just want you to know [laughs] at least half of this is legitimate, right?? I will admit: I’m something of a hacker.? To me, my blog is my outlet for actually researching computer-sciency-related things, and some of it’s truly related, like washing a keyboard is not computer science, but it’s interesting to me, right?? Because all of this stuff is interesting to me.? And that’s really what my blog was, was me setting down and having some sort of study time about my profession.? It wasn’t really necessarily reading “The Art of Computer Programming”, by Knuth (thank you very much), but Michael was very concerned.
It was a very nice email.? It wasn’t in any way mean or anything, but I think it’s what you talked about, which is people are seeing different aspects of you as a sort of Internet personality, beyond what they get from reading your website.
Spolsky: Absolutely.? That’s why I like the podcasts.
Atwood: And I’m glad that people now are realizing that I actually have no idea what I’m talking about. 
Spolsky: [laughs]
Atwood: I’m glad that people are getting that.? ‘Cause I am truly just a guy.
Spolsky: Yeah, oh, also, to those of you who read my website, it’s a joke, okay?!? [laughs] Those are jokes.? They’re supposed to be funny.? [laughs]  Okay, got that off my chest.
Atwood: Do you have a lot of people not understanding your jokes, and emailing you about whether you’re actually joking?? Is that a real problem?Spolsky: Yes.? Well, no… I mean, a lot of times, they just don’t get that it’s supposed to be funny.
Atwood: I see.? Is it because they’re from a different culture, or they just have no sense of humor?
Spolsky: They have no humor.? But if you challenged them with that, they’d say “I have a sense of humor!? Of course I have a sense of humor!? That’s just not funny!”
Atwood: [laughs] Yeah.? I think it’s important to try, though.? I’d rather have a site that’s trying to be funny and somewhat failing than one that’s totally dry.? I mean…
Spolsky: Absolutely.
Atwood: …that’s not really much of a trade-off there.
Spolsky: Yeah.? Absolutely.
Atwood: So no questions this week.? We don’t have any.
Spolsky: Yeah, we didn’t have any good ones.? I’m sorry, that’s going to be insulting to the one person that sent in a question.? It was a little rambly, so...shorter next time [laughs]
Atwood: [laughs]
Spolsky: But, if you do have questions, please record them, email them to use.? Just things that you want us to talk about, yeah know?? Until we starting getting… for the next… what did you say… six to eight podcasts, we’re not going to have that much to talk about about stackoverflow per say.
Atwood: Well, we’ll have some, but it’s not going to be enough for the whole hour, certainly.
Spolsky: So if you have any suggestions of stuff that you just want us to rant about, or you want to get one of our opinions on, or both of our opinions on, or if you can think of something that we might have widely divergent opinions on, that would be especially good, so record it using the little microphone on your computer and send that file to podcast@stackoverflow.com. ?That’s podcast@stackflow.com, and we’ll put it on next week… give us something to talk about.Atwood: Yeah.
Spolsky: Anything else?
Atwood: No, I think that’s it.
Spolsky: Oh!? Keyboards… the keyboards in the dishwasher thing.? There’s two things I want to tell people.? One, if you have a piece of electronics and you spill coffee or a soft drink on it, or whatever, like your laptop, you spill a bunch of milkshake on it, the first step is to immediately remove all sources of electricity, so things don’t get shorted out.? Take out the battery and unplug it.? And the second step is to just start rinsing the heck outta that thing.? Just put in under the water and rinse it really really well.? And the third step is to let dry for a really really long time, like a week.? And that’s the way… people don’t realize you can rinse electronics as long as the power source is removed.? That’s the best way to get all that gunk out of there, and once they dry they’ll be good as new.
Atwood: So you’ve actually done this?
Spolsky: Regularly, yeah.? So that’s the thing to do if you get a mess on your keyboard or in your computer itself.? Just rinse it and if you can take apart, in two or three places, so you can get better access and those things dry, the water’s going to evaporate faster so it’ll dry faster, and you won’t have to wait the full week.
But, in general, that’s the way to salvage electronics and, you know, I don’t take responsibility if you ruin your electronics, but this is the best way to try to salvage them if you do spill something on them.
Atwood: Good [tip?].
Spolsky: Second thing is, this is a bizarre story, I just have to tell this.? I can’t believe that this worked.? I had a friend call me up, who’s not very savvy with computers, and every time she try to go run Internet Explorer, she got these really strange error message about things not being installed, and just really bizarre… the kind of stuff you’ve never heard of, and when you search for it, on the Internet, the error messages made no sense.? It was obviously some kinda of weird… I very quickly determined it was a hardware problem, because it was sort of inconsistent. 
She had spent several hours on the phone with Dell trying to get them to talk through how to fix it, and they had not recognized it as a hardware problem.? They had assumed that it was a software problem, and what it probably was is just some memory that wasn’t totally well-seated. 
So, after completely giving up, I just had no idea to fix her computer, and couldn’t get her on CoPilot because she couldn’t even download and run a program because Internet Explorer didn’t even launch…
I suggested, for some reason… I said “Pick up the laptop five inches off the table and drop it straight, flat on to the table.”? And I’m not sure why I suggested that.? I guess I had heard that somewhere that sometimes, ?what happens is that the laptop falls five inches… it’s not bad for the laptop,? I mean...they’re designed to fall three or four feet without significant damage.
And if there are any chips on the motherboard that aren’t fully seated, the laptop stops, the chips continue, and it sort of drives those chips in place.
Atwood: That’s very old-school.? I remember that from a really early computing story.? I want to say “The Osborne”… ah, man.? But keep going.
Spolsky: Yeah.? So I said “Just measure five inches.? Hold it up with both hands, very carefully, over a very hard surface, exactly five inches, and just drop it as suddenly as you can, and as straight as you can”, and that fixed it! And it’s been fixed ever since.? Is that bizarre or what? I didn’t even think it was gonna work, I just thought it was gonna be fun.? ‘Cause… it couldn’t hurt her computer to drop it five inches, and it might save me a trip to Brooklyn.
Atwood: Yes.? Did actually work?? Did it work?
Spolsky: Yes.? And she was like “Now what do I do?”? And I’m like “Okay, reboot. And just try all those things.”? And she’s like “Oh my god everything works.”? And I’m like “Ah, this is crazy, I don’t believe it.”? She’s like “No, really, it works.”? And I’m like “You’re just being nice to me. ”? She’s like “No, it totally works now!”? I’m like “Alright, well, I’m coming to your house tomorrow, so give me a call if it still works after a day or two”, and it still works.
Atwood: Nice.
Spolsky: So, last minute.? If you’re having hardware problems, with a laptop, don’t blame me if this doesn’t work, but try the “Five Inch Drop to Desktop” solution.? It might work.
[1:04:29]
Atwood: And I can tie this back into the beginning.? I mean, the Fonz would just hit it, right?, and make it work.? That's what the Fonz does.? So...
Spolsky: That's right.? And that's why, yeah, that,?in the old days people would just hit the TV and that would fix it because something would, would seat.
Alright, well, uh that's the end of uh, StackOverflow Podcast #6 -- number 5?
Atwood: Five.
Spolsky: Number 5.? We need a counter.? We need an official counter.
Atwood: Yes.? I plan to...
Spolsky: Thanks for listening.? Uh, please send us something to talk about for next week: suggested areas of controversy, um things that we can fight about, um... jokes that we can tell, etc.? Uh, stackoverflow@podcast.com?[podcast@stackoverflow.com].? Thank you very much.
Atwood: Yup.? Bye.
Spolsky: Bye.
Alright, now, how do I turn off the recording?
[1:05:09]
Atwood: I still can't believe you're using that old picture of you. 
Spolsky: There's even a picture of me in Skype?
Spolsky: Uh oh...
Spolsky: [reading off Skype menus items] Personalize, maybe personalize?? Change your picture... change your picture... Yeah, that's right.? Well, it's not mid-90s.? It's the 2000 picture.
Spolsky: Are you one of those guys that knows when all of the pictures of me were taken?
Spolsky: Okay, here we go.? Oh, that's so cute.? Okay.? Now, do you think that it's going to change for you on the fly the minute I change the picture?
Spolsky: [laughs]? Yeah.? It really did, it just changed on the fly.
Spolsky: Now you've got me all obsessing.? Alright, I've got to find the perfect picture, I've got to trim it perfectly.? You don't even have a picture of yourself!
Atwood: Come on.? I've got Ogre from Revenge of the Nerds.? That's the best possible picture.
Spolsky: Oh this is actually a good one.? Now I'm going to have to crop it and scale it.? Alright, let's get on with the purpose of this call.? 
Spolsky: I believe so, yes.
Spolsky: Okay, I'm Joel.
Spolsky: We don't really need introductions because, unlike a radio show where people have every right to not know what it is they've tuned in to, everybody who is listening to this has gone out and downloaded our show specifically.? And they can look at their iPod and it will tell them, "It's the StackOverflow podcast, with your hosts: Jeff and Joel!"
[14:37]
Spolsky: That's because we do this. If it did crash on you you'd see a page...
Atwood: Like "whoops"?
Spolsky: ...I mean it just looks like an error page but it says we would like to submit this error to Fog Creek please click here to see what the information is. We do ask the permission before uploading what could potentially be sensitive information. And that's ok because we only need to hear... if here's a crash in there I only really need to hear about it from four percent of my customers.? If the other ninety six percent don't want to send it to me doesn't matter cause I still hear about it. And yeah, then there's a button and it submits it and it goes into Fogbugz.? It has a simple HTTP interface that you can use to upload bugs and the interesting thing is that its no big deal. Well actually it is a big deal. If the same crash happens twice you don't want two bugs, you want them to be merged into one bug.
Atwood: Yes, that is annoying.
Spolsky: So you have to come up with a scheme. The ideal scheme is just to say filename and the line where the crash occurred and just use that as a unique identifier and you tell Fogbugz I would like to uniquely identify this crash as "file.c line 26" and then any further crashes that occur on that same line of code would be appended to that bug report instead of opening a new bug. So...
Atwood: One thing that I read about was that you can take a hash value of the stack trace but I'm wondering if that would be...
Spolsky: Overkill. All you need to do... Now sometimes you get this problem which is that - you can have to put one there and see what crashes you get - sometimes you get this problem that there is some other crash handling code in the world and so the actual crash is thrown from some crash handling code somewhere.? Or you get an awful lot of crashes that comes from inside some string library function or something like that.? You know, like, well it depends who's calling the string library function, those may be different cases, and then you may actually care about the call stack.? But in my user experience programming just saving the file and the line where the exception occurred finds pretty much isolates almost all the things necessary. If you have a call stack it's useful.
And remember I'm not talking about like what information do you need to repro the crash and fix it, i'm just talking about how do you decide whether two crashes are really the same bug or a different bug for the purpose of letting Fogbugz decide whether to overlay them or not on each other 'cause otherwise it's just irritating.
[17:20]
Atwood: I always felt that this was hugely powerful, and in one of my previous jobs i was spearheading the effort to add this, because i felt like a) if you don't know when you're crashing, you're really failing the users like on a really fundamental level. It's not their job to let you know about problems in your software. So that's a problem, just professionally to me. It's a question of, sort of, almost like ethics at that point.
Spolsky: Well it depends on the kinds of users, but yeah...
Atwood: Once you actually know what the exceptions are you can really prioritise and say "OK, look we have this problem that happens a lot. So even if this is a really painful problem to fix, if we can fix this we can... you know... 50% of our support calls just go away".? Having that kind of data and power on your project is unbelievable and it always surprised me that people would not understand that and not somehow get that in place on their project.
Spolsky: Yeah and in fact for a lot of kinds of applications... you know, like, if you write a Windows application today you can just let Microsoft catch it for you and then there is something you can enroll in and you can get the data on their database... off the Microsoft database of what crash occurred.? And the other step, which you may have left out, which is that once a crash has happened if that... if in Fogbugz you have indicated its been fixed in a later version of the software then you can tell the user "oh, just upgrade to this version and you wont have that crash anymore".
Atwood: Oh, nice.? That's a cool feature.
Spolsky: And that will also eliminate that whole range of tech support calls.
Atwood: Yeah... I like talking about this topic because I think it's like really fundamental and important and for some reason I think a lot of teams miss out on this...
Spolsky: Well..
Atwood: ...and I don't know why.
Spolsky: ...life is too boring when everything works perfectly and nobody ever sees any crashes.
Atwood: [laughs] I like to work under the assumption that I'm going to screw up, right? And then that's the first thing I'm going to deal is having that in place.
Spolsky: Maybe it's like people who don't want to go to the doctor because they don't know what they're going to be diagnosed with. So they just don't go.
Atwood: That's true.? It can be painful to kinda deal with this stuff so maybe it is a form of avoiding reality.? So one, slightly related topic, so last week... I know we keep saying we only have 6 listeners - we have to stop saying that.
Spolsky: I... Yeah, because, well we got 6 emails... [laughs] Yeah we did, we got about 50 emails or something this week.
Atwood: Yes - a lot of emails.? So thank you very much for all the emails and I just want to let people know I have about 58 private beta sign-ups so far.? So if you still want to participate in the private beta...
Spolsky: How do they...? They email you?
Atwood: Yes, they can email me, it's fine.? It's very easy I just add them to the list.? Notepad Technology TM so it's very easy.
Spolsky: Notepad {garbled} What would be the email address that they would use if they wanted to get on the beta?
Atwood: Well they can just email me directly.
Spolsky: At...?
Atwood: Well I'm assuming if they're smart enough to get into the beta they're smart enough to work out one of my email addresses.
Spolsky: Oh, I see.? It's sorta like a little IQ test.
Atwood: [laughs]
[20:20]
Spolsky: What you should do is -- where was I reading about this today? You should send them each an email saying, "Hey, I'll give you $50 to get off the beta test."
Atwood: Oh right, that Zappo's thing. That's what you're referring to, isn't it?
Spolsky: Yes. Yeah.
Atwood: At Zappo's--after training--they have a 4-week training period. At the end of that period, they'll offer you $1,000 to not work at Zappo's.
Spolsky: [laughing] to not work for them.
Atwood: Which is very cool...it's kind of like in the airline industry--oh God, I think it was Julian Hirsch [ed. note, Wikipedia says it was Julian Simon]--actually came up with the idea of paying people not to fly. Like, basically, you know, say the flight's overbooked or whatever. This was a radical idea back in the day. Um, and still pretty radical, right? I mean, to pay someone not to work somewhere after four weeks of time investment in them.
Spolsky: That's radical. Paying people not to fly is just a matter of, like, you know, I can sell somebody a last minute ticket for $1,000 and then bribe somebody who is already on the plane $400 to get off the plane and I've made a $600 profit.
Atwood: Well, they're actually overbooked, though, at that point, right? I mean, they sold too many, 'cause a certain percentage of people drop out, so...
Spolsky: Well, the real reason is they want to keep selling tickets at a very, very high price after the plane is allegedly full. It's not because people are going to drop out, necessarily. I mean, there are going to be a couple of people who drop out, but more important is that they can always pay somebody to get off the plane and make a higher profit by taking that person and putting them on another plane that has extra seats anyway, and was going to fly there anyway.
Atwood: That seems awfully, uh...
Spolsky: It's just making a profit.
Atwood: Yeah. Well, OK. It's probably both of those things. But still, it's a pretty cool technique. Somebody linked that actually on Twitter, your favorite service. That's how I found out about that article.
[21:50]
Spolsky: I really like Twitter, you know what I like? Twittering!
Atwood: [laughs] I know, so if people don't know, I've been actually, I sent Joel a few emails from - Hey your buddy Rands (Michael Lopp) actually is a big Twitter fan as well.
Spolsky: I am, I am a convert to the church of Twitter. I've been posting all my news. I've got thousands of followers on Twitterer-hologryphic [sic]? And, um, I've been following all my favourite celebrities. Um, Leo Laporte, Kevin Rose (swoon). Um, so I know where they are and when they're sending messages to Scable -- Scoble.
Atwood: Ah yes, Scable.
Spolsky: [laughs] Scrabble.
Atwood: I apologize, I don't mean to be a fan-boy, it's just, I don't know why but Twitter I find very, very useful. It's really strange. And it's kind of like..
Spolsky: No, no, no. It's fine for you to find it useful, what's weird is: why are you so evangelical about it? 
Atwood: -- why do I have a --
Spolsky: -- and that leads us back to the principle of cognitive dissonance. Which is; you have no other explanation for why you're doing something. You just cannot figure out why you're wasting time doing this miserable thing that makes you unhappy. It must be because it's great!
Atwood: But it actually makes me happy; like I feel like I have all this community - I meet all these new people. And you know, as a programmer you know I work from home now right. I don't like get out into the World too much.
Spolsky: Maybe that's the problem. Maybe I'm like an introvert and I'm sick of people and I want them to go away. [laughs] I'm always trying to figure out how to hear less news of other people and spend less time talking to people.
Atwood: Yes, yes, yes, but getting back to the original point you brought up was why would you be so evangelical. You realize I have a blog right, the whole evangelical nature of blogging is a really key factor in whether someone likes it or not. Cause there's a lot of people at my previous job -- I would always tell people "hey blogging has worked really well for me". You know, it's like "baseball has been bery bery good to me," right?? Like the classic SNL skit [...] that's not my personality. I'm not the kind of guy or gal that's going to go out there and tell people this is what you should do, this is awesome. That's just not me.
Spolsky: Yeah.
Atwood: And if that's not part of your DNA, it is difficult but it also makes me inclined to talk about things like everybody else should do them, right? [laughs] I like this thing so much you should do it too and I always kind of grabbed people and shake them until they'd do it, right? So I apologize, I don't mean to be like that. But it really works for me, so take it at face value.
Spolsky: OK. What do you think about Twitter by the way?
Atwood: [laughs] I've heard of this Twitter thing. It's actually down right now which is ironic.
Spolsky: [laughs] Oh no wonder we're getting so much work done today! OK, question: I have to give the keynote to the Rails Conference; what should I talk about? I think I may have asked you this before.
[24:30] 
Atwood: Er, gosh.Spolsky: They have the Ruby On Rails conference in Portland next weekAtwood: The typical Joel thing, you have to tell them how much they suck. Open with that.Spolsky: "God, this place is a ghetto"Atwood: -- what idiots they are for choosing that particular technology, because that's what people at a rails conference really want to hear. That always amused me, you gave the keynote at a Java conference, and I think the title was "Java is the new COBOL".
[24:56] 
Spolsky: What? Wait a minute! No, this is not me.
Atwood: That wasn't you?
Spolsky: You're totally making this up.
Atwood: No, no, no, no.
Spolsky: You're totally making this up. First of all, what Java conference?
Atwood: I--maybe I'm misremembering, but I swore...
Spolsky: Yeah, I don't remember any kind of conference, any kind of Java conference.
Atwood: Ok. Maybe I just made that up.
Spolsky: It was funny, but-- No, I wouldn't say that. Java is the next COBOL.
Atwood: Yes. I believe that.
Spolsky: It's the third COBOL after Visual Basic 6, in which I was uniquely involved, so--
Atwood: Yeah. It could be viewed as a derogatory statement, but actually I think it's a compliment, because really, would you rather be programming in COBOL or Java? Is that really even a question?
Spolsky: Yeah.
Atwood: [laughing] Certainly you'd rather be programming in Java than COBOL, if you had an actual choice. So this is actually progress.
Spolsky: [laughing] I'm thinking, wait on, I'm not really sure yet! Whether I'd rather just quit the whole industry and go back into the cereal business.
Atwood: Really. So are you really that anti-Java? Because you know who I met, I met the Gmail guy, Paul--oh gosh, I know I always say this, I'm going to mispronounce his last name--but he's the guy who coined the term--
Spolsky: Just say it.
Atwood: --do not be evil. Or you know, don't be evil. And also he was the original Gmail guy, he was the guy behind Friendfeed. Paul is his name, I can't remember his last name. But I met him, and we actually talked a little bit about the Java thing, because he's very pro-Java, and he was actually very disappointed that a lot of developers--it's very much a knee-jerk reaction--are like "Oh! Java, what a joke!" you know? [laughs]? And that's kind of unfair to the people that do Java and kind of unfair to the language. I can see where he's coming from, I mean on the one hand I will say stuff like Java is the new COBOL, I mean it actually as a compliment, because I think COBOL is old and terrible.
Spolsky: Yeah.
Atwood: But what do you think about that, I mean do you think that's fair, to just dismiss it like that? 
Spolsky: Um, well, in what ways is Java COBOL? It's the de facto choice now for enterprise software development. It's the de facto choice for large teams of programmers that are not the real enthusiasts, but are just kind of career programmers, which means that--you know, not that there's anything wrong with that, but--it winds up being the choice of those grumpy people in the IT department that are adding another line to some insurance-based application or something. So it's filling that particular role, what they call the line-of-business applications, and in that way it's very much like COBOL. It doesn't require you to write in all capital letters. So in that way it's different from COBOL. Wait, I want to--let's get to some of our questions here.
Atwood: I know we have a lot of questions, because we got good questions this week. 
Spolsky: There was something--what were we talking about?? You were proceeding to not give me an answer to what to talk about at the rails conference.
[28:07] 
Atwood: That's tough, it's so open ended.? I'm sure that whatever you come up with will be good and entertaining.? My theory of presentations - some people really don't like this - is that they are really more about entertainment first and information second.Spolsky: Nah, ya think?Atwood: Yeah, well a lot of people really disagree with that.? I think it's the left-brain programmers that go "no, you have to go with the information first"Spolsky: What was the question?? Let's just take one of these questions.? Atwood: Okay.Spolsky: I feel that there's something we're not coming back to.? Oh: number of listeners, you had mentioned that we're using a lot of bandwidth.
[28:50]
Atwood: Oh, yeah, that's true.
Spolsky: But I didn't get--the email was sort of like there was missing... some information. Are we using too much bandwidth? Is that an issue?
Atwood: Well, I think once you start podcasting, you're in a different category of bandwidth automatically. Unless nobody listens to your podcast at all. And as much as you joke about it, people actually do listen to our podcast. I mean significant numbers of people. So we either move to Amazon S3--which I can do, which is 17 cents a gigabyte, I think, which would end up being like 100 dollars a month--
Spolsky: Is that cheaper than what a content distribution network would charge?
Atwood: I don't know. Podcast bandwidth is hard to figure out. So if you have access--you had mentioned something about ITConversations, and--whatever our options are, we should probably pursue them, because we're going to outgrow our current host pretty fast.
Spolsky: Well, what I was thinking is I would ask Doug K., and I haven't asked him this, but maybe he'll say yes, that we could be one of the podcasts on ITConversations, since it's sort of very closely aligned to the kind of content that he's trying to generate there. And I don't know what that would mean, whether we have to--I'm not even sure how that's supported, or what the business model is there... [typing] ITConversations.com. But you know they have all kinds of shows.
Atwood: Yeah, no I've been there before. It's a cool site. So yeah, maybe follow up with him, and see what he says.
Spolsky: Why does it say--is Doug K. not involved in ITConversations anymore? 
Atwood: I don't know.
Spolsky: Now I'm confused.
Atwood: Well, research it and come back to it.
Spolsky: The Conversations Network. What's the connection between the Conversations Network and ITConversations?
Atwood: I haven't been there in a while. So I'm not sure.
Spolsky: Oh, I see, the Conversations Network is a superset of ITConversations. Oh yeah, look at this, they got '08 conversations, media conversations, social innovation conversations, breakfast cereal conversations... ok, we're all set here. Yeah, I don't quite know how it works, but it seems like it might be a way to get bandwidth in exchange for something; I'm not really sure what we would have to do.
Atwood: I should also email my provider and see if we can just buy a larger block of bandwidth, that might be nice as well. So I'll research that on my end, we'll make a note to do that. But let's get to the questions, 'cause I know we probably have a couple, 'cause we were--
[31:10] 
Spolsky: OK, well what I did was I ch... Oops, you still there?
Atwood: Yep.
Spolsky: Something weird happened with my computer. Alright, let's just play a question here and I've got some good hard ones.
Warren Henning: Hello Jeff and Joel. My question is about the schedule for launching StackOverflow. Maybe I missed something and I don't fully understand what StackOverflow is going to be but it just seems to me that it's basically like a database of [...] things you can have problems with in programming that can be confusing...
Spolsky: Yes.
Warren Henning: ...or something. So why not just use something very simple and off the shelf for that like a wiki or something. In which case you could launch very soon - like, within a few days - and run a very you know like a cheap share-hosting account or something...
Spolsky: Etc, etc. That's from Warren Henning. Good question! Jeff?
Atwood: So my immediate answer is, well let's consider something like the iPod. The iPod is really just a hard-drive, an LCD and like some sort of spinner wheel or buttons. So if you break anything down yes it's simple - right? Just throw those things together and you have a product. But, for me it's about the details, right? And writing it is part of one of those details, like having this very low-level element of control over everything that happens on the site is such a better experience than just picking some off-the-shelf thing and just throwing it on the web. Plus it's a point of differentiation at that point. I mean anybody can get a copy of MediaWiki and say "oh cool, look it's my new programmer site," right? And some MediaWiki-generic thing.
Spolsky: Well no, anyway to get people to go there, we have some kind of audience we could encourage to go there.
Atwood: That's true, but I believe very strongly...
Spolsky: I don't really think. I mean how much seriously of the code you that you can write in "six to eight weeks," - which is now five to seven weeks - how much real differentiation can you provide?
Atwood: I think actually quite a bit because what we're talking about is basically a hybrid of Reddit/Digg plus Wikipedia.
Spolsky: OK, but someone else can look at that and they can do that same thing in five to seven weeks, only it would be for them it would only be four to six weeks 'cause they wouldn't have to do any design work.
Atwood: Well again let's just go back to the iPod, right? Anybody could have created the iPod, there's the magical synergy of you know iTunes - right - first of all. The details they got right on the iPod and I'm not saying we're going to be as awesome as the iPod, I'm not saying that at all. What I'm really saying is if you break down the materials using the iPod it seems like a very mundane "anybody could have done this" kind of thing. But if you look at it in the bigger holistic picture only Apple could really have done that because they took the time to say we're going to get every detail of this little thing as right as we can. And that's very much the attitude I have towards a lot of the things that I'm doing. I'm not saying I have success at all of them by any means. But I really believe in getting all these little details right and the other purpose of the private beta is to get some of the edges off, make sure that we're actually doing something that works. The other fear I have is if we throw it out there and it kind of isn't that good, people will immediately write it off. So hopefully that part will be private and we can actually improve it to the point that it's actually worthwhile before throwing it over the wall. So that's my feeling on that one.
Spolsky: OK, well I'll take that as a... a no. [laughs] There's another slightly related question which I might as well play here since it's related.
[34:33] 
[38:31]
Martin Wallace: Martin Wallace in the UK here. I've been following the StackOverflow podcasts and enjoying them thoroughly. It's fantastic to hear the thoughts that go into the development of a software project, and I want to thank you both for letting us do that. Jeff has long been an advocate of open source software in his blog and I applaud his recent decision to donate a not insignificant sum to a worthy project. My question is: will you be making the ultimate donation, and open sourcing the code that StackOverflow runs on? Thank you.
Atwood: So, what he's talking about is, when I originally started taking on advertising, 'cause for a long time my blog was something I did, it wasn't really a business initiative in any way. It was just an outlet for me professionally. So once it started to generate a significant amount of money that really surprised me, I was very conflicted. And one way I wanted to deal with that confliction was to actually donate some of that back to the community. I felt like, one thing that made my blog so successful, wasn't just me, and I know you're down on the whole community thing, or the comments thing-
Spolsky: What?
Atwood: No no no, comments, right? I meant to say comments. You don't don't like comments following your "not a blog" blog entries. But I did, and I felt like the community, the comments from the community were so important to my success. And I wanted to give back.
Spolsky: The only comments I get is these people second-guessing every single decision you make, as to which piece of code do you use for your authentication technology, and "why not just use some open, off-the-shelf back engine," you know? The community is just a bunch of second-guessers, who wants to hear from them?
Atwood: Yeah. But no, I think it's very important to get that kind of feedback.
Spolsky: So you gave some money to a Richard Stallman's organization for GNU...
Atwood: No no no. I gave money to a specific .NET project. My feeling was, it was a $5000 donation to a .NET open source project. 'Cause I feel open source is really under represented.
Spolsky: What was the project?
Atwood: ScrewTurn Wiki. Which is like a really lightweight .NET wiki.
Spolsky: And does their wiki support like voting, and authenti--
Atwood: No, I don't think so. I think it's very much a traditional wiki. You know, like Wikipedia style wiki.
Spolsky: Can ya fork it?
Atwood: [laughs]
Spolsky: Never mind.
Atwood: I suppose you could.
Spolsky: These questions all sort of come back on one another. So what do you think? StackOverflow, open source?
Atwood: I'm torn, because again StackOverflow is very much a commercial venture. Which I guess you could say about ScrewTurn Wiki as well. ScrewTurn Wiki is also commercial. I mean ultimately he wants to get paid for the work he's doing. And I guess I just don't know enough about the repercussions of it to make that decision. I'm not against it by any means. I mean I'm very much pro - as the caller said, Martin said, I'm very much pro open source. And I think I'm just a little nervous, having taken on this project.
Spolsky: But what if somebody cooler than us took that code, and even took, you know, I think we already talked about Creative Commons-ing some of the contributions. So they take the code that we developed, at great expense I'd like to point out - at least six to eight weeks, if not five to seven - and then took all that code and stuff like that, and made another site somewhere that was a better than Stackoverflow. Or it could be called StackDoubleOverflow. It would all be written in English as a second language. And, uh, it would be extremely popular with, say Eastern Europe for example.
Atwood: Right. So that's forking, right? And I have a blog entry about that as well. So the risk was forking is that--
Spolsky: Yeah.
Atwood: First of all you have to have the audience. I mean, you *have* to have enough ..
Spolsky: Well, but they will suck away some the audience that might have come to us, thus reducing the network effect, and thus reducing the value to the entire community.
Atwood: But how would they actually do that? They're just a crappy copy of what we did. And they don't have out audience, they don't have the number of people participating. They would probably never get critical mass. I mean, forking is very much like an evolutionary process, and just like in evolution, most parts of that tree die off.? Right?? Very few survive.
Spolsky: Why do they want our friggin' code in the first place?
Atwood: Well the reason to open source and expose the code is, you might actually get some really cool patches contributed by people. People who feel strongly about a particular feature that we don't have time to implement.
Spolsky: Didn't Slashdot, Slashdot was open source. And didn't people just keep contributing patches, and they just ignored them, and they were just like "Yeah. Whatever. It works. Leave me alone."
Atwood: Well, right. It's a dictatorship. The tone of any open source project is set by the people who run it. They very much set the terms of the debate. Just because it's open source doesn't mean that, in an evolutionary sense, anything will actually happen with that fork you've created. It's very difficult to get those off the ground. More difficult than you would think. You would think, oh, there's gonna be hundreds of vaguely, slightly incompatible versions, everyone's going to be confused, and, y'know, the whole world will explode. But in practice that's not actually what happens.
Spolsky: I don't think the world actually has a need for more than one, or at most two StackOverflows.
Atwood: Well, now you're getting back into a question you asked/answered in podcast one or two, right? Like, how many copies of Experts Exchange do we really need?
Spolsky: How many computers does the world need?
Atwood: Just one. And it's gonna be called Google.
Spolsky: Uh-oh.
Atwood: I'm just kidding.
Spolsky: Oh, I was just talking about the Google mega-computer hive taking over the world and being Skynet, and achieving...
Atwood: Pretty much. We'll just have dumb terminals, and Google Apps, and Google searches, and everything will be hosted by Google. It's like, the Walmart of the Internet, right? I'm kidding. I like Google. I'm totally joking. I don't think that's gonna happen. That would be scary.
Spolsky: You have to be careful. Because as soon as they don't like you...
Atwood: Speaking of which, we should talk about that. There might have been an audio question for this, but Google introduced their own documentation wiki.
Spolsky: Oh yeah. Wasn't there a question about that? No. Yeah there was a question about that, but I didn't uh...
Atwood: Since we're on the topic, I mean, I don't think...
Spolsky: What's it called, Doctype?
Atwood: Google DocType. Thank you.
[44:36] 
Spolsky: But that's not really a Q&A site, is it? Isn't that just like sort of a documentation wiki about HTML?
Atwood: It's a documentation wiki. I do not think it overlaps at all with what we're doing so we can really quickly answer that question.
Spolsky: Indeed Google did have Google Questions or Google Answers or whatever it was called.
Atwood: And they canceled it.
Spolsky: And they shut it down, which is, yeah, really weird.
Atwood: And the guy...
Spolsky: Not an awful lot of things got shut down at Google.
Atwood: The guy behind Google Blogoscoped, Philipp Lenssen, great great blogger, was actually a huge Google Answers, he participated heavily in that. I think he was really disappointed and he's a smart guy. So I don't know, it's weird, you kinda wonder why they canceled that. That seemed to really work. I still actually get hits on Google Answers sometimes when I'm searching for stuff.
Spolsky: That was kind of, I mean, the trouble with any big company is that they just can't pay attention to some of these littler things that aren't really going anywhere.
Atwood: [grunts agreement]
Spolsky: And uh, something that might be a fabulous business for a small company just does not deserve even one millionth of a second of Larry, Sergey, and Eric's collective brain cycles. So these things in large companies tend to languish. That's really the same problem at Microsoft. So many little, little businesses inside Microsoft that would be fabulous stand-alone companies, humongous stand-alone companies that would be great to invest in and would probably do a lot better than they would outside of Microsoft if they just had some kind of, somebody paying attention to them.
Atwood: Why don't more large companies spin off little divisions of themselves? Why isn't that a more common pattern? Because I totally agree with you.? [interjection]? Go ahead…
[46:07] 
  
Atwood: Bummer.
Atwood: I see.
Spolsky: And I think if you took something like that and went to Microsoft. If you bought Microsoft, took over there, kick out monkey boy, and applied that particular set of rules… alright, Windows? Number one, fine. Office? Number one, keep that around. MSN? Number two, you guys have got two years to become number one, or you’re getting spun off, or kicked out, or sold to the public. To me, that sort of makes sense. And then what you do, is you take all this extra money that Microsoft has, and you use it either to pay a big ol’ dividend to the shareholders to compensate them for the years and years that they held the damn stock, or just start your own venture capital fund that just invests in a bunch of little businesses that are going to be standalone businesses that are going to go into all these different little areas that Microsoft wants to go into.
Atwood: I mean, because that was always one of my key recommendations. I mean, you and I have both been long time Microsoft watchers. And I think it’s one of the things that you arrive at almost all the time, is they really should be spinning off little subdivisions to do a better job at these individual things, because they’d have more autonomy, they’d have more focus, more conviction. And it just never happens. And I was just, it’d be interesting to hear why you think that never happens.
Spolsky: Yeah, it’s just, I have no idea. It’s just like this desire to be in charge of a gigantic big company - I guess. I mean there must be a belief that there are synergies, somehow.
Atwood: Synergy. Synergy. [chuckles]
Spolsky: Yeah, I mean, that word has sort of been bandied about. But synergy, there are also negative synergies. In the case of Microsoft they call it “strategy tax”. Where like, the Internet Explorer team is not allowed to fix the DHTML editor, because it might compete with Word. So they’re forced to make that continue to be bad.
Atwood: Oh right, to reduce internal competition. But I think there should be maximum internal competition.
Spolsky: Yeah, and the only way to really cause that to happen... well you wouldn’t if you were protecting a legacy business. [chuckle] You wouldn’t think there should be maximal internal competition. You’re trying to protect a monopoly at all costs, and extract the maximum number of dollars out of it as possible. You might actually believe that somebody else might come up with competition but so far they haven’t so why should we hurry that process along. Anyway, some other examples of strategy tax. Classic example is that when they bought OneNote, which was actually considered one of the nicer things that came out of Windows the tablet edition of Windows. And it was an outside company that they purchased and they purchased the product, and from all accounts, that whole team then spent an entire year re-working the user interface to be 100% Office compatible, so that the toolbars looked the same, and the menus worked the same, and there are all these sort of integration points, and really just kind of mucking around with an already-working application to make it look more like a part of the Office family. And you can sort of see the value there, on the other hand, an external company would never have done that. So there was all that cost, there was all that time that was spent on that. And that’s the so-called corporate strategy tax that you pay at Microsoft. And it’s a negative synergy. It’s a reason why a business is going to be less successful inside of Microsoft than outside.
Atwood: Right.
Spolsky: Some other examples. There are things that are so far down on the list. When you go to the Microsoft Office website, there’s that list of all the programs that are part of Office, and there’s 27 different SKUs you could buy, and each of them have a different set of programs. And it starts out with things that you’ve heard of like Word and Excel and PowerPoint. And then as you get down the list you’re getting into these like Info… Pass, Note… gami, Groove things, expressions, I don’t know what those are. But they’re these little tiny little apps, all of which are just being crushed by their membership in the Microsoft empire. Whatever happened to FrontPage? They renamed it, and relaunched it. What the heck is the new…
Atwood: I think right now, the Expression Web is replacing it. Like Expression is their new Adobe-style stuff. They have a vector designer, they have a paint program, that they bought from…
Spolsky: They do?
Atwood: Yeah, Expression. The Expression series.
Spolsky: Does anybody use that?
Atwood: I think it’s getting pretty much mauled in the market because Adobe is just so strong and powerful. But they’re actually not bad little apps. I mean they actually bought them. I can’t remember the name of the company they bought them from. But they’re pretty clever, they have a neat UI.
Spolsky: Look at this… Expression Web… new era, new… beautiful inside and out… passionate about standards… Expression Studio, Expression Blend, Expression Design, Expression Media, Expression Encoder. Wow, I am so behind. I have never heard of any of these things.
Atwood: Well if you did anything with Silverlight of WPF, those are the design tools that you use to layout like vector-based layout, and some other… the XML language that they use to layout, I can’t remember the name of it off the top of my head.
Spolsky: Don’t you think these things would have a better chance if they were their own company? And there was somebody trying to get press for these things all the time? 
Atwood: Oh, totally.
Spolsky: Instead of just been the fourteenth thing that you have to remember all about the businesses that Microsoft is in.
Atwood: Well, I totally agree. And that’s why I came back to the questions. One of the most obvious things you come up with looking at Microsoft - or any really large company - is they really need to spin off, and if not spin off then give these little divisions huge levels of autonomy.
Spolsky: Yes, more like Xbox style.
Atwood: Yeah, Xbox. That’s the classic example that people point to. Xbox does whatever they want, and that’s made them really successful, or at least moderately successful, so why not?
Spolsky: Or something, we don’t know - because they don’t break it out. Alright, here’s a question…
Daniel Thompson: Hi Jeff and Joel, this is Dan from Birmingham, England. I wanted to ask, what do you guys think will or should be in the next version of Windows, and will it really be worth spending a couple of hundred dollars to upgrade?
Spolsky: Next version of Windows. Should we get that? Should be upgrade? What’s going to be in it?
Atwood: Well, since you think that Apple has been so successful... one thing I don’t understand is I think Apple gets a free pass on a lot of stuff.? Like, is there really that many great features in OS X 10.5 versus 10.4?
Spolsky: Yes.
Atwood: Is that worth $100?
Spolsky: Spaces. Yes, that Spaces feature. Well, because I use it. And I would like…
Atwood: So it has to be a feature that you use.
Spolsky: Well for me, yes. For other people, it might be something different. But you know what, there are so many like… Spaces is an example of these kinds of low-hanging fruit, things that are really kind of easy. And I think one of the problems that they got into with Vista and the original Longhorn vision is that they tried to do several really, really hard things at the same time, like a whole new API, there was WPF and then there were all the new file system things that never happened - the object-oriented file system, which is the same Cairo idiocy that they’ve been failing to ship since 1988 or something. And there were just all these sort of big grandiose changes, all of which were kind of architectural and not really end-user features. And one of the things that I think Leopard shows, where they just have a good backup program, they got this little Spaces thing.? Just be giving people a few simple little easy-to-use and yet useful things, you don’t need to make big grand architectural statements or changes to give people a reason to upgrade.
Atwood: Well, think about… has UNIX really changed that much, as an operating system?
Spolsky: Nobody uses UNIX. That’s not relevant. Nobody uses UNIX.
Atwood: But the underlying operating system is UNIX. You’re saying reinvent some key part of it like the file system. UNIX would never even try that. I mean, have they really ever even done that?
Spolsky: Yeah, yeah, there’s new file systems in UNIX all the time. There’s ZFS and EFS, and yeah, sure…
Atwood: But they’re just new plug-ins, they’re not some grand new vision of how files will be stored.
Spolsky: I don’t know, ZFS is kind of a grand new vision of how files will be stored.
Atwood: Okay, well I was just trying to contrast that with the whole Cairo vision.
Spolsky: Oh.
Atwood: Which I agree is crazy.
Spolsky: Well, no Cairo is just a bunch of weird object-oriented architecture astronauts from decades that are just constitutionally unable to produce anything that ships because that’s just who they are. [chuckle] I don’t want to go too far into that. But they’re just sort of… you know, it’s a grand vision that’s not that far off from the BeOS vision, of how the operating system works. It’s all kind of Smalltalky, in the idea that everything is in an object, and all you’re doing is… and it all kind of makes sense to an architecture astronaut, but they’re never actually able to implement it in a way that actually makes sense to anybody. And yet, what has actually sold upgrades of OS X has been little clever features that you can actually kind of use and that you actually might want. And I don’t know what these would be for Windows but I would sure love something like Spaces, some way to have multiple desktops. Or even just a way where I can say that these seven windows are my development windows and I want to keep those all together, and like minimise and maximise them as a group so that I don’t have to keep relaunching the four different apps that I use for software development when I want to go do some other kind of project that uses maybe a bunch of Excel spreadsheets and a Word document.
Atwood: Let me drill down to something you’re saying there, because I think you’re right. Vista actually has a lot of new features. Please say “oh, Vista doesn’t have anything new”. But if you to the, there’s a Wikipedia page, I’ll link it in the summary, there’s tonnes and tonnes of new features, but the problem is – and let me give you an example – they’re features that nobody really uses.
Spolsky: Yeah, okay [chuckle]
Atwood: Let me give you a classic example: voice recognition in Vista is absolutely amazing, it’s really impressive, if you go through the tutorial and start playing with it, you can resize windows, you can like identify things by number on the screen. It’s incredible. It’s really really cool but: nobody uses it. 
Spolsky: Right.
Atwood: Who actually sets out and says “I want to use voice navigation on my computer”. I mean, it’s really, really rare and it got this first-class treatment in Vista all out of proportion with the number of people that are actually going to use it.
Spolsky: Uh-huh.
Atwood: So I think that a key part of what you’re saying is: they’re building a lot of new features that are kind of cool and maybe even really good, but not meeting the core constituency and things that they want.
Spolsky: And I don’t want to throw too many stones at glass houses, because I’m not really sure I can thing of anything that, other than, like I say Spaces. I’m not really sure that I can think of anything that I feel is genuinely missing from my daily programming experience, or just sort of desktop or Windows, whatever it is, it’s an app launcher. There may be some things I could come up with.
Atwood: But, with OS X it’s also cheaper. I mean, if you look at Visa Ultimate, I think they reduced the price, it was like three of four hundred dollars. But if you had an upgrade that was like one hundred dollars, people would be a lot less demanding, in terms of “oh, it’s got to be this radical reinvention of my operating system”. XP is good enough, and XP was a good release, I mean it really, really was. It’s a testament to the strength of the release that it’s still actually pretty popular at this point.
Spolsky: But I think what I’m saying is: "give me something that I can use every day." Give me even an iPhoto clone or a music thing. I guess they have that, right? They’re just not as good. They’re not nearly… the little apps that ship with OS X, some of those things like Garage Band, you can actually get stuff done with them.
Atwood: Right, yeah. It’s been a disappointment; let me bring up my classic example, Notepad and Paint. I think it’s an embarrassment that Notepad is in the state that it’s in, and also Paint. I mean, have you ever used Paint.NET?
Spolsky: Paint.NET, exactly. Just ship that.? Move on.
Atwood: I know! Yeah, it’s crazy. I’ll never understand the rationale behind that.
Spolsky: We’ve been talking for almost an hour now. Do you want to keep going?
Atwood: No, we should stop.
Spolsky: Yay. Just checking. Yeah, podcasts that I listen to have a tendency to spill over to about an hour and a half usually.
[58:38] 
Atwood: Let's stop at an hour.? I do want to have a shout-out.? Particularly from my point of view, there's not a lot of computer science rigour around the things that I've been saying - that's been pointed out to me in the past - but I do want to give a shout-out to se-radio.net, which is Software Engineering Radio, the podcast for "professional" developers - it's actually very cool.? Their latest entry on their site is Anders, the architect behind C#, the chief language strategist, who is truly a genius, I don't think that I'd debate that with anybody, he really is very very smart.? So if you're looking for really hard-core software engineering: this is not that, but I would point you towards se-radio.net[59:18] 
Spolsky: Se-radio.net... and if you are listening and you have more questions -- we did accumulate a few questions last week -- but if you have anything else you want to talk about... some of the ones that were submitted this week I won't have time to get to until next week, but hopefully we will get to all of them.? But once again... somebody told me I said the email address wrong.? So pay attention now, make sure I get this right: podcast@stackoverflow.com.? 
Atwood: Yes.? That's right.
Spolsky: It's not the other way around.? It's not com@stackoverflow.podcast
Atwood: It's not, it's not... screen...
Spolsky: Com is the last part.
Atwood: It's not an AOL keyword.? It's an actual email address.
Spolsky: Go to AOL keyword "podcast" at stackoverflow.com, and that "at", for those of you that may not be familiar, is uh, Shift - 2 on American keyboards.? It looks like a little lowercase 'A' with a circle around it.
Atwood: Yes.
Spolsky: And that's um, used in uh, um, making bagels and in sending email addresses to people.
Atwood: Mm hmm.? Yeah, thanks for the questions this week.
Spolsky: And... see you next week.
[1:00:17 Ends]
Spolsky: What's new?
Atwood: Are we recording?
Spolsky: (laughs) We're always recording Jeff! It's all recorded... Well, the way Pamela works, it pops up a little thing saying "Do you want to record this call?" 
Atwood: Oh right.
Spolsky: And I had to click 'yes' so maybe the first four seconds or so, you're off...
Atwood: Ok.
Spolsky: But then you're on. But I can always cut off a little bit at the beginning if it's not funny enough.
Atwood: That's fine. I wanted to start by thanking Stuart Cam. He wrote us a stackoverflow theme song.
Spolsky: No kidding?
Atwood: He did, which was very cool. He's from Australia. I put him on the beta list which is in Notepad, it's very exotic. 
Spolsky: Can you play it? Are you set up with the great playing technology?
Atwood: I am not. But one thing I do want to mention was that while Jarrod was here (that's the guy i'm working with on stackoverflow), he listens to a lot of podcasts including ours and he was? letting me audit some of them and... I really decided that I kind of agree with you in that I don't like a long introduction, I don't even really like audio themes. I just think it's sort of unnecessary? on some level. I don't know... it seems more polished? but then it seems like something you have to? fast forward through to get to the 'meat' of the podcast so I'm sort of ambivalent about it.
Spolsky: Yes, Steve Gillmor with his Gillmor Gang? , he used to have a fifteen minute advertising introduction with all kinds of... it was just awful! And? he would divide his podcast up into four parts and eventually you just learn to fast forward to 16:12 or? whatever it was. On every podcast. 
Atwood: Oh that's kind of like episodes of like The Sopranos where there's always that introduction, which is cool the first time right?
Spolsky: Right, trying to catch you up.
Atwood: Well not even that but just like him driving to New Jersey. It's like theme song and the credits and stuff. It all just seems kind of unnecessary, it's I don't know, so I kind of like this concept of the warm start, I guess I've warmed up to this..
Spolsky: It's kind of cool when you look at old TV shows - like even sitcoms - they would have these like long minute introductions. They'd play a little rock song and then there'd be the whole story, the whole background story. And by the time those shows go into syndication, the minute long introduction was down to like an eight second version of the same thing.
Atwood: The only introduction I actually remember really liking was Get Smart.
Spolsky: Oh yeah, he's going through all the doors.
Atwood: Yeah, that was great. I think they're remaking that with Steve Carell so we'll see how that turns out.
Spolsky: Alright, is that a new series or like a movie 'Get Smart'?
Atwood: No, a movie version of Get Smart.
Spolsky: So we can get it over with and get the heck out of there.
Atwood: I did want to thank Stuart Cam for recording that. I think we're probably not going to use it for the reasons I outlined, but -
Spolsky: We could play it at the end and then if people want to listen to it.
Atwood: As a fade out... So I now have 234 private beta sign-ups so I think we're probably good on the private beta for now. I mean if you really, really want to be in then you can email me and again that's the rite of passage. Figure out how to email me, evidently a lot of people are able to figure it out which is good.? But I think we're probably covered for the initial private beta.
Spolsky: Ok, great.
Atwood: So did you do anything exciting over the Memor-- I forgot it was a holiday, I did the typical programmer thing where I only know it's a holiday when the Google home page changes, that's how I know it's a holiday 'cause Google changed their logo.
Spolsky: Oh yeah, you don't have a job - well I mean you do. Didn't the StackOverflow headquarters have the day off? You got into work and it was locked. Shit! [laughs] What do I do now?
Atwood: It was nice -
Spolsky: Stand out in your driveway in your pyjamas with your cup of coffee in your hand, trying to decide how to get to work.
Atwood: Yes, I gotta say it was nice having another developer here. I had forgotten what that was like, actually it's only been like gosh two months. It hasn't even been that long since I worked basically from home. And somebody actually on Twitter asked me if I could write an article about working from home but I think I'm a very bad role model; I'm disinclined to write about that because I think I have... Yeah: it's a problem for me.
Spolsky: So like too many distractions?
Atwood: Not distractions so much, as like I'm sort of a hermit by nature anyway so this sort of encourages some of my worst anti-social tendencies.
Spolsky: Now there's a lot of these shared workspace places that people are setting up. It's like an office with some desks and you join with a membership.
Atwood: The problem is though I'm kind of a snob about the setup that I need. So I would need actually a place where I could bring my three monitors and my desktop PC. I'm not one of those people who can just take a laptop. I'm kind of a snob about that, I need my mouse, I need my displays a certain way.
Spolsky: I'm sure that they don't have like a "no mouse" rule at these places! I'm pretty sure you could bring in a mouse. I'm betting you could bring in a lot of monitors; you might get some funny looks.
[05:03]
Atwood: There was a really funny group. Gosh, I'm gonna have to look the up later, but they do these sort of funny performance art-comedy things with a bunch of people that coordinate with cameras and stuff. One that they did was they went to a Starbucks and brought a whole bunch of desktop PCs - like full towers - so there's like four or five people sitting there with these full size CRTs, like 19 inch monitors.
Spolsky: Oh, old fashioned. Oh my God.
Atwood: And the people in there are like “What is going on?” It was very funny. So that is what I mentally envision when I go to one of these places. Like I pull up with a carfull of equipment.
Spolsky: Those are hilarious. But you can get one of those desktop replacement laptops with the gigantic... like gamers' laptops with the huge screen.
Atwood: I'm such a snob, though. I'm such a snob when it comes to hardware.? I mean, you know I build my own PCs, and it's probably all totally unnecessary, but I really get into it. And yeah, it's tough. But that said, they do have places where you can, what you do is sublet. Like on Craigslist. The best piece of advice I got was to look for cheap office sublets on Craigslist because a lot of places have like an extra room, you know, and you can get a pretty good deal on that. So that's something I eventually may look into. For now I'm just going to be content with the status quo until we get the site up and running to some degree.
Spolsky: Yeah, that makes sense. What you can do is like call an appliance repairmen, pizza delivery guys and stuff like that and you can have a little human interaction: "Could you check the refrigerator, I think the, I don't know, I think some ice cream melted. I might have left it out. The ice cream did definitely melt."
Atwood: You know, in my weaker moments I have actually considered just posting on Craigslist that I want someone to play Rockband with. Although my wife plays Rockband with me quite a bit, but I'm more inclined to invite them over to play Rockband. And Tuesday is a very exciting day because every week they have new songs for Rockband on Tuesday.
Spolsky: Oh really? Do they have old songs? The trouble for me is that all the songs are like too new for me. I've never heard of any of them.
Atwood: Well actually most of the songs are from the seventies. Actually if you sort them by date, there's a lot of songs from the seventies. 
Spolsky: Really?
Atwood: And it encompasses... Yeah, the sixties gets a little rough, cause that's getting pretty prehistoric in terms of rock.
Spolsky: That is prehistoric. But the seventies, I should know some of those songs.
Atwood: Yeah, so this week on...
Spolsky: Do they have Convoy?
Atwood: Ah Convoy, that's a great song. Breaker Breaker good buddy. That's a classic. I have that ripped from an actual CD set. I'm a big seventies music fan actually. I have like twenty/thirty disks of seventies music.
Spolsky: Cool.
Atwood: But this week it was The Cars. 
Spolsky: Yep
Atwood: You know, pop funk, I guess you could say, or pop punk band, The Cars. Their complete album, which is great, cause it has Moving in Stereo and Best Friend's Girl and things like that. I'm a big music fan so it's fun.
Spolsky: What's new ... this week. Oh sorry, go ahead
Atwood: Well I was asking, I wanted to get Fog Creek a copy of Rockband so you guys could have it there, but I didn't know if you guys had room for it.
Spolsky: And then you could live vicariously through us cause we'd just be rockin it out while you're sitting in your house. Trying to teach your dog to play Rockband. Come on, like if you give him a little treat. 
Atwood: Are you guys actually moving offices?
Spolsky: We are moving offices, but it's one of those irritating taking forever kind of situations where the contractors won't return my calls. Oh God, I don't even want to talk about it. [sighs] 
Atwood: Ok, well one of the things I always liked about, reading about...
[08:34]
Atwood: Well, I know people complain a little bit about the self-promotional nature of some of the stuff we talk about, heh, but I always did really admire the way you treated working environment as sort of a first-class citizen at Fog Creek. You know, you gave a lot of consideration to...
Spolsky: That is true.
Atwood: ...having a pleasant place to work that actually is amenable to the way programmers need to work.
Spolsky: Yeah. There's an article in this month's Inc. Magazine for those of you that have access to a, what were they called? Newsstand? Or maybe a bookstore. You go there and they have these things called magazines and?you can buy one that's called Inc. and it's a magazine for small business and I've got an article in there this month about our new office space.
Atwood: Oh cool.?Actually kinda read that. That's not available online?at all though??
Spolsky: It will be online but in order to encourage subscriptions I assume, or out of incompetence, either one, they don't publish my articles on their website with any kind of schedule or regularity or at any kind of predictable URL. So it will show up on the web, it's just hard to know when.
Atwood: Ok.
Spolsky: Sometimes even I don't know, which is why I don't link to them.
Atwood: Well you've talked a little about that in some of our offline calls and I would enjoy reading about that. Because I... 
Spolsky: June [2008] issue of Inc. dot com. I can talk about it now, I mean, I'd be happy to tell people?we've got...let's see what should I talk about??Like what we're doing to make the office nice.
Atwood: [chuckles]
Spolsky: You know, I actually?like looking at a lot of these online office space porno web sites.
Atwood: [chuckles]
Spolsky: My definition, for?those that?are new,?definition of pornography?is "looking at pictures of things you can't have." So if you're stuck in some kind of a, you know,?cube farm or something, you can go to office snapshots, uh let's see, what's the URL of office snapshots? [pauses for a second] Who cares? Type office snapshots into Google and it'll give you the real URL. Look at that, Officesnapshots.com!?And see pictures of?all kinds of dot com sites, dot com and software companies?and what their offices look like. And some of them are pretty cool. If you look closely though, and if you're really paying attention to this, what you'll discover is that even the coolest offices have cool common areas like foosball room, coffee shop cafeteria, volleyball court, gym, whatever they may have in?the common areas. And if you actually get to the areas where the people actually work, they're um, shall we say, not so cool, actually.
Atwood: [chuckles]
Spolsky: So everybody was all?passing around these links to the Google Zurich offices, which, just like incredible, like from the third floor to the second floor there's a slide you can use to go to lunch. Like: there's a hole, in the floor, and then there's a slide. And it lands on a nice rubbery cushion area. And so you can slide down there on the way to lunch. On the way up you have to take the elevator. And there's just all kinds of just cool game areas and there's like?a dark room with an aquarium and lots of relaxing chairs that you can lean back on, and take naps. It's just a very very cool looking office. 
On the other hand  I could not find a single picture of the dozens of pictures that they had in the set,?showing an actual person at their desk. The only picture I could find, it looked like it was just a big gigantic room with a whole?bunch of very small, like four foot desks crammed in there. And people working at basically a typical, typical developer workstation, you know, maybe one computer and two monitors or  like that. But not much attention is put on where the people actually work. There's a lot of attention on the common areas 'cause that's kind of a less expensive way to make it nice. 
And we did, we tried to do the opposite. We tried to put like a lot of emphasis on?where you were sitting when you were trying to be programming.?So some of the key features that we're going to have in our new office which we've never had before are mechanical desks where you push a little button and they go up and down to different heights and that allows you to get the height right to begin with for ergonomic purposes, but it also lets you stand up for a part of the day if you want to. Some people have reported that that?reduces back pain dramatically if you have back pain from sitting in place all day. Just stand up an hour a day and that helps a lot. 
So we've got these desks that move up and down, we've got the ridiculous power strip everybody's got like twenty four outlets at desk height so you can plug stuff in without messing around crawling around under the desk.
Atwood: Wow.
[13:08]?
Spolsky: What are some of the other features that we have that are pretty nice? We have, and these are, there's obviously things like a shower, coffee bar, lunch room, library, that kind of stuff that's sort of the shared common fun areas which we'll have a whole bunch of.?
But, you know, part of our emphasis - obviously - and then the private offices which I have yet to find another company except for Microsoft and Apple, I think, that has private offices for developers.
Atwood: Private offices are definitely nice. I mean I eventually had that at Vertigo and I liked it. But, you know, I'm weird in that I like to decorate.
Spolsky: Uh huh. 
Atwood: I know that's going to sound kind of weird.
Spolsky: How did you decorate your office?
Atwood: I had a mobile, I had, actually, I'll link it in the actual summary of the podcast but there's, you know, you remember that meme "Five things you didn't know about me," that whole meme?
Spolsky: Yes!
Atwood: It was around for a while.
Spolsky: [garbled] so I didn't do that.
Atwood: No one, you're kidding? That's a joke, right?
Spolsky: No, it's true.
Atwood: Are you serious? [laughs]
Spolsky: You didn't want to know.
Atwood: It's so viral.
Spolsky: [laughs]
Atwood: But as part of that, I went ahead and put up pictures of my office space at Vertigo the way it was and you can sort of see it for yourself, you know, a picture's worth a thousand words. But people were very impressed with it for what it's worth. I had a scrolling LED display, I had art, I had a mobile?...
Spolsky: A zipple they're called, right? Zipple?
Atwood: ...and of course my...
Spolsky: Zipple? Zipple!
Atwood: Zipple? What is a zipple?
Spolsky: A scrolling LED display.
Atwood: Oh! I've never heard it referred to as that. But yeah, it was cool. So I very much appreciate, because I like to decorate, I appreciate this stuff and I think it matters, I mean, I totally agree with you that, you know, the environment where you physically sit down and work most of the times is incredibly important to your overall, you know,?happiness in the work place so I encourage that. And this officesnapshots site is cool, I'm definitely going to?link that up. I didn't even know this existed so that's awesome.
[15:00]
Spolsky: Uh, yeah they've done a pretty nice job and I'm sure we're going to blow all those away when they?come to us. I mean there's a lot of bad office space there too. And um, somewhere somebody put up a video of the Yahoo campus the other day and Fake Steve Jobs was making fun of it for just being [Atwood laughs], because they had, and this, once again it was like seven minutes showing their whole beautiful campus, showing all the public areas, you know, the coffee and the lunch, and that kind of stuff, and the gym. Um, and about thirteen seconds at the most showing where people actually worked. And that looked to be those ugly high cubicles.
Atwood: [in disgust] Oh.
Spolsky:?Really awful cubicles, go almost to the ceiling...
Atwood:?Yes. 
Spolsky: ...with the oatmeal colored cloth stuff.
Atwood: [in disgust] Oh. 
Spolsky: And the people, in order to make their office feel cool, had just like decorated them with a lot of crap. Which basically means a lot of broken old toys and stuff?and posters that they've just strung up all over the place. And um, just awful.
Atwood: Yes.
Spolsky: Absolutely awful. So uh, it looked kind of like, dark and dismal. But, um,?I don't know if that's really true of all the Yahoo work spaces or maybe the programmers have it nicer. I don't know. 
Atwood: Did you ever watch the show MTV Cribs?
[16:15]
Spolsky: Yeah. Yeah, I like that show because: why would anybody in their right mind agree to?be on that show??
Atwood: [chuckles] Well, the one episode of?Cribs that was great, because a lot of it was sort of your stereotypical, "I have tons of money so I'm just going to buy the most ridiculous things I can..."
Spolsky: Yeah.?
Atwood: "...and put it in the most ridiculously large place," but it's still fun to watch and some people had good taste and some didn't and it was interesting to see that. The funniest one though was some musician that was actually living with his parents. They did the Crib show of basically his parent's crappy house. [snickers]
Spolsky: Oh!
Atwood: So it was like, "Here's our crappy grill," and it was like, you know,?the ultimate yin, you know [garbled] other stuff.
Spolsky: I think that was a YouTube meme and there was a kid and he's like, "Welcome to my crib," and he's basically showing his bedroom in his parent's house.
Atwood: It was like that but...
Spolsky: It's like, "Here's where the magic is done,"?and he goes down to the basement where he's got his, you know, his cheapo Casio keyboard. [laughs] That's about it. 
Atwood: I think this guy was in like a punk band so it gave him a little bit of, you know,?credibility for that particular genre. 
Spolsky: To be living with his parents. So, uh, yeah MTV, oh officesnapshots.com is MTV Cribs of the office, the programmers' offices. But it's not uh, you know so far I haven't seen anything that's very inspiring and I haven't seen a whole lot of places that just look like they would be really nice places to actually do your work. Other than, you know, what most people build, which is a sea of cubes or a sea of tables. 
And then, uh, if they're like a rich old?school company like Yahoo then they've got a nice cafeteria and a nice coffee bar and a nice gym where you can work out. 
And if they're like a new start-up company like, you know, one of these Web 2.0 start-ups?that has venture capital, then, you know,?there's a sort of a loving photograph of the espresso machine [laughs]. You know, that's nice, you got an espresso machine, but you know, kinda lame. 
Atwood: Yeah. So I take it you're not enamored of the approach where all the programmers sort of have a huddle where there's more of?a communal working area so people can theoretically communicate with the whole pair programming style of...?
[18:15]
Spolsky: Well we do, we recognize that pair programming is very common and it does actually burst out regularly, and so all the desks at Fog Creek are long, straight desks to make pair programming easy and appropriate. I mean, we even pay attention to things like where the legs of the desks are so you can pair program comfortably. And, but what we do have is, you got a bunch of?private offices, you want to pair program: you roll your nice Aeron chair out to the hallway, and then, using your legs, you continue to push your chair down the hallway a little bit, and into your friend's office, where you pull up alongside them and pair program. 
And if you were to go into our programmers' hallway you'd see just tons of communication, tons of, you know, at any given time there'd probably be two people pair programming, but also a lot of people that are?able to just sit and quietly concentrate and get a lot of serious work done because they can close the door when they don't want to communicate with other people.
So I think that there's a feeling that private offices are isolating, and that's just, that's just?not true at all. What it means is that you have a little bit more control over when you get interrupted. You don't have to be interrupted just because the person who has a desk next to yours is having a conversation you're not interested in participating in.
Atwood: I totally agree. And I think it becomes a personality issue too. I mean, certain, some developers are extremely introverted?and really don't seek that out.
Spolsky: Yeah. Those are the ones that will IM you when they're sitting right next to you.
Atwood: [laughs] Well, here's a funny little aside, did you know my wife...
Spolsky:?What?if you don't use?IM?
Atwood: ...my wife subscribes to my Twitter feed because she feels like that's the only way she can get all the information about what I'm doing.
Spolsky: [chuckles] What are some other programmers... I'm trying to think of some other things that the programmers need that we try to focus on for their actual work space. Obviously, you know, the setup that they get,?right now the default is a 30 inch and a 21 inch [monitors]. We found that a 30 inch horizontally?next to?a 21 inch vertically is about the maximum screen real estate that you can see without seriously damaging your neck.
Atwood:[grunts agreement]
[20:12]
Spolsky: What do you have, what?kind of monitors to you have? You said three.
Atwood: Well I'm a big triple monitor guy, cause I feel like then you have a center.
Spolsky: [grunts agreement]
Atwood: The only trick is you have to have two video cards, which rules out, well pretty much you're done with a laptop. So it's pretty much related to desktop machines which is fine with me. Two video cards, and then I have three...
Spolsky: What size? What size are these monitors?
Atwood: 24. Three 24 inch monitors.
Spolsky: So I think that's a little bit more real estate than we have with the 30 inch plus the 21 inch, I think is what we do. Maybe we do a 30 plus a 24, I'm not sure.
Atwood: You never have enough. I think there's no such thing as enough.
Spolsky: Well the trouble though is that, you know, at some point the monitor is just too far into your periphery to be useful for any purpose other than, I don't know, like what you put? You've got three monitors, let's say I gave you a fourth?monitor and you put it to the left of your left monitor. What would you put on there?
Atwood: Well you have limitations in terms of how far you're willing to turn your head, that's for sure. And how far up and down you're willing to move your neck. 
Spolsky: I know that sucks, having to move your neck all day long.
Atwood: But within the constraints of normal field of vision, I would say this is pretty much the limit because these are all widescreens so it is actually fairly wide. It could be slightly taller. I think I could to three 30 inch monitors. I'd actually need a bigger desk?at that point which is kind of sad.
Spolsky: Well what we like is...if you use a 30 inch monitor, you can bring up your IDE if you're a cool programmer or vim if you're a Fog Creek programmer, full screen and it has like a infinite room for editing and email and all kinds of stuff on your main 30 inch, and then you've always got another monitor that doesn't have stuff on it where you can pop up your web browser that you're using for debugging.
Atwood: [grunts agreement]
Spolsky: So that lets you be sure that you always have an exposed web browser view while you're stepping through the debugger. When you're doing any kind of GUI programming, and?a lot?of web programming as well, it's important to have?dedicated real estate for the app that you're debugging. Because otherwise, like, let's say you're trying to debug the window activation event or the, you know,?the window expose, or any kind of, in other words, if you're actually trying to alt-tab between the window you're debugging and your debugger in order to get them both to show on the screen then you're actually introducing changes in program state. Which for certain types of GUI programming may actually make it really difficult to debug things.
Atwood: Right.
Spolsky: That make sense? Like for example the very expose event that you're trying to debug?may have been set off by the fact that you alt-tabbed from the debugger into the app. 
[22:50]
Atwood: Oh absolutely. And one thing I find very helpful if you're running Windows, there's this neat utility called WinSplit Revolution. And one of the challenges, as I sort of grew into larger and larger monitors and... I wrote a blog entry about this, but I think it's actually kind of a big problem for casual and typical users, much less power users, is you have, you spend a lot more time arranging windows. You can't really maximize anything because it makes no sense. I mean, you're not going to maximize like this officesnapshots website. If I maximize it there's just going to be the obscene amount of whitespace... 
Spolsky: [grunts agreement] 
Atwood: ...on either side of this little strip of content in the middle. So you spend a lot more time sort of messing around with windows. So what WinSplit Revolution does is it overloads the numpad. So I can press a CTRL-ALT and a directional arrow on the numpad, and it moves the window to that quadrant and there's different, you can press it multiple times to cycle through. So you can sort of "LEGO block" together your windows without dragging and sizing. And it's gotta be horrible on the Mac, where you can only size in the bottom right. 
Spolsky: Oh yeah, that is sort of a weakness of the Mac. 
Atwood: Yeah, yeah. But historically, I mean think about just the excise, the overhead, of dealing with windows. And I don't mean to single out Apple, cause I think it's just a GUI penalty that everybody pays, that... 
Spolsky: Yeah.
Atwood: We weren't really meant to mess around with windows. You were just meant to, you know, work on an app at the appropriate size and have it...
Spolsky: Yeah, managing your windows is definitely something that is never quite...gotten right. And the trouble is that, you know, if you're an app and you try to reinvent it by having your own rules, which every app does at least try to remember its former (X, Y) position and dimensions. Right? Almost every app will come up with its former (X,Y) position and dimensions?? But if you just do that naively, if you just say, "I will always?preserve my (X,Y) position and dimensions," somebody runs two copies of your app,?they wind up directly on top of one another, which is the only thing you could possibly not want.?And in fact may actually make you believe, make the user believe, that the second copy of the app hasn't really launched.?So that's always annoying. ?
[24:45]
Atwood:? Yeah, there's a couple of things that, and you touched on one, I wish window managers across all platforms were smarter about; e.g. when I open a new browser instance I probably don't want it on top of my other ones, like if there's actual space on the screen that's not occupied by something maybe you could put it there, that would be nice. The other thing that's cool -
Spolsky: The Windows default would be to put it like slightly offset from the previous one.
Atwood: Yeah, I realize there's a lot-
Spolsky: So you could see both title bars.
Atwood: Yeah and there's a lot of ways to do this, I'm not proposing this is the one right way. The other thing I would like to see a lot more of, and Skype actually does this as well as WinAmp, is the, have you seen that thing where as you drag the window close to the edge the border of a monitor, it'll actually sort of snap into place?
Spolsky: Yes, snap-to-edge that's a great thing um -
Atwood: I think all windows should do that. It should just be built in to the operating system on every platform.
Spolsky: Yeah.
Atwood: When I get close to an edge, I mean 99.9% of the time I want it to snap in there.
Spolsky: Yeah.
Atwood: So I feel like we've got a long way to go, and I think as people start getting into larger monitors they're going to run into this more and more often. It becomes really a pain, I mean it's great to have a huge monitor, I mean nobody's going to complain about you know "I have a 40" monitor, how terrible" right?
Spolsky: Yeah.
Atwood: But you spend a lot more time messing around with these windows and it just doesn't feel like work, it feels like -
Spolsky: You know a lot of the Microsoft apps, well actually Visual Studio is the key one that switched to a tabbed interface instead of the old MDI. And MDI is theoretically more flexible because you can put windows anywhere you want, you have great control over where the windows go. Whereas the new version of Visual Studio you basically have a screen you can split it into two or split it into four and each one can have a bunch of tabs in it and actually that turns out to be much more useful than the old MDI style where you had to individually manage all these little itsie-bitsie windows.
Atwood: Oh yeah.
Spolsky: That seems to be the new trend. Paint.NET copied that and that seems to be the way we're kind of going is more towards tabs.
Atwood: I think tabs to a certain extent are better than the solution we had but there's some problems there as well. Before we go too much further I want to figure out how many questions do we have that you feel -
Spolsky: Um, I have two but that's only because I haven't reviewed this week's, but I have two from last week.
Atwood: OK, before we get into that I did want to talk about OpenID because I think you're going to have strong opinions about this.
Spolsky: Ye, ye yeah. OpenID. I'm going to have an opinion on it, I don't know what it's going to be yet. But -
Atwood: OK so as Jarrod and I sat down and started thinking through some of the login stuff and actually a friend of mine, Jon Galloway, who still works at Vertigo, a great guy, recommended that we look at OpenID because well 1) from a selfish perspective of like why even have to write password-handling code, salting code, hashing code, forget-my-password code. Why even have to do anything, why not just outsource that entirely to a third party? And you know I'm very sceptical by nature so I was like OK I dunno, maybe, let me look at this. And when I looked at it I actually went through the sign-up process, got an OpenID, and the problem they're trying to solve is exactly the problem that I was considering which is I don't want to be yet another website that adds yet another cognitive load of "oh you got to create another user name and another password for StackOverflow" that you have to remember or put on a keychain, or have your browser.. It's just more stuff right?
Spolsky: Does anybody have a good way of handling that? Like literally if I go to a website and it needs to be registered, my current way of handling that is Password Safe which Bruce Schneier wrote so I trust that it was good and Password Safe is a little program where you can just store all your passwords in it and it'll even generate nice relatively secure passwords for you for each website and will keep track of them all. Only trouble is I haven't quite figured out a way to synchronize my Password Safe database among all the computers that I use. So if want to go to a new website from home and it's asking me to register, I need to Remote Desktop into my computer at work, run Password Safe, logon to that, use the special password for that and it's just real frustrating. It's a real pain.
Atwood: And that's why I find it amusing 'cause some of the people in the comments, I had a blog post about this and I got some really good comments as usual. One of the themes in the comments was "oh it's no big deal, you just run this password program and you have this encrypted USB key" and I'm like how is that -
Spolsky: A what!? An encrypted USB key that you carry with you?
Atwood: Yeah that you carry with you.
Spolsky: What if these guys get shot? What if it breaks or gets demagnetised or something?
Atwood: I just thought it was amusing that adding all this stuff was viewed as like better than a website, right like I mean -
Spolsky: Well OK, if anyone has a better solution for me than what I'm currently doing, lets do that. Everybody write in next week and tell us what your way is of keeping track of your passwords in all the dinky little websites you visit. Like hammocks.com; I went to buy a hammock - I think some moths ate my hammock last year, I had a nice hammock and I went and got it out of the storage thingy and it was just ripped to pieces. So anyway I go back to hammocks.com and they want me to make a password and a username for hammocks.com! I'm never going buy another hammock! Well actually next year the moths are going eat this hammock too so I'm only going to buy one hammock a year, I don't need usernames and passwords for hammocks.com!
Atwood: Well I agree - [garbled]
Spolsky: So if you have a suggestion for a good way to keep track of your passwords to idiot websites that you're probably never going to visit again -
Atwood: The longer-term solution, that's what I'm getting at -
Spolsky: - for multiple computers.
Atwood: I think the longer-term solution is OpenID.
Spolsky: Yeah, but that requires all these websites to go along with it.
Atwood: Well that's what I'm saying; it's a chicken and egg problem and I think I've decided after working with OpenID I feel it's workable, I feel it's mature enough, there are now OpenID 2.0s, they fixed some of the initial sort of weirdnesses and implemented -
Spolsky: And it already fixed a lot of the early, like there were these initial like uh Passport.com. There were these initial attempts to do something like this that were just not workable in the OpenID way because they were basically Microsoft.
Atwood: Yeah well you get to choose your provider and that actually has a downside as I've found out because some of the providers are kind of sloppy in the way that they work. [laughs] Like they may not use HTTPS which is like really, really bad. [laughs]
Spolsky: What providers don't use? Really?
[31:00]
Atwood: At least one of them, I don't want to name any names but I thought that was odd.
Spolsky: Do tell!
Atwood: But the good providers... So there's really two key things you can -
Spolsky: Name names! Name names! Name names!
Atwood: So let me use your hammocks.com as an example. This is a low value set of credentials right, so you should have no problem attaching this to your OpenID. So you would have an OpenID -
Spolsky: NO! They store my credit card, this is not low value. Low value is like oh would you like to post on Jeff Atwood's blog post. That's low value.
Atwood: Well I think -
Spolsky: High value has my credit card and can buy hammock accessories.
Atwood: OK so well first of all let me make a distinction. You're talking about there's some set of information that would be stored by the OpenID provider, OK? That may not include your credit card so they wouldn't actually maybe not have that information, only the hammock site is. I'm talking about low value stuff like your name, which is fairly public information; your address which let's assume you're getting it shipped to the office, that's public information. You don't really care about this stuff. Not necessarily your credit card but like your date of birth, you know whatever you feel comfortable sharing with your OpenID provider. So when you went to hammocks.com and they said oh create an account, you could if they were OpenID-enabled you would say here's my OpenID URL, OK? And if it's the first time you'd done this with them you do have to enter you know login, password in your provider so you basically get redirected to the provider. The provider takes your password and then at that point they would shunt all this information, it's called attribute exchange -? this is where the value comes in in my opinion - they would shunt all your address, your age, whatever (again) basic information you need so you don't have to key it in every single time you go to a website.
Spolsky: Wait, wait wait. Do I have any control over this? So like every website that I go to with OpenID is going to get all my information that I gave some OpenID provider?
Atwood: Again, this is where it comes into having a good provider. So with a good provider you can say OK share this, this, this and this, but don't share this, right?
Spolsky: OK.
Atwood: So it's all sort of determined by the provider, that's the downside of OK -
Spolsky: Who are the best providers? Is Google a provider?
Atwood: No, Google is not a provider.
Spolsky: What?!
Atwood: The one I like the most at the moment is called I believe it's myopenid.com, I'll make sure I'm saying that correct. [typing] Yes. They do a really good job, I do like myopenid.com, I recommend. So if you want to actually test it, and again it's a chicken and egg problem, but I feel like with StackOverflow I want to be part of the solution, not part of the problem. I don't necessarily want to force people to use OpenID, but this is really I think a better long-term solution for the web and it really could work 'cause it's a distributed version of something like Passport, so people should be more comfortable with it. Not that there aren't flaws -
Spolsky: I'm actually kind of shocked that [pauses] What the heck, I'm looking at this list, I'm really kind of surprised, I thought these people all joined the OpenID consortium, like Yahoo and Google and stuff like that.
Atwood: Well there's a way they can do it. The can become providers but not, I can't remember the exact terminology without the document in front of me, but they hold the credentials but they won't accept them [chuckles] In other words, they'll send - 
Spolsky: That's OK.
Atwood: - the sites. So it's very much one-sided depending on how they adopted it. Ideally they would become bi-directional where they would accept OpenID credentials as well as being an OpenID provider.
Spolsky: Right.
Atwood: But a lot of sites are like oh we support OpenID but they're really just providers. So all that really means is you can use you know jeffatwood.yahoo.com as your OpenID provider on my blog comments for example.
Spolsky: OK, so why wouldn't we tell people to use something like Yahoo or Google as their OpenID provider?
Atwood: Well you can, I found that Yahoo doesn't really do attribute exchange very well.
Spolsky: OK.
Atwood: Which is a big, big value add -
Spolsky: This is depressing you even have to know about this. This is going to break it. If this isn't like standard, if this isn't a simple thing that everybody does in the exactly the same way and that they're all just as good and you don't have to sit around figuring out like what the weaknesses are of choosing who your best... That can just kill it because people will say you know what, if I have to decide I'm just not going to, do it at all.
Atwood: There's definitely a new third party involved 'cause in the old-world way of creating an account like on hammocks.com, the only entities involved were you and hammocks.com.
Spolsky: Right, but I trust Google more than hammocks.com.
[35:25]
Atwood:? Yeah, no, and I think absolutely Yahoo does a good job, I don't want to be negative about it--Spolsky:? And Yahoo, I trust Yahoo more than hammocks.com.? I even trust Microsoft more than hammocks.com.? And especially if it's just being responsible for authenticating me and saying "Yes, indeed, this username really is this password."? Y'know, in fact, if you just simplified it, strip it down to everything, to nothing else other than, my username is always going to be--I wish it was email address--but fine, let it be a URL, although email address would be easier.? And there's just, people like Google are willing to display a page that takes that username, sorry, that email address or that URL, and then prompts me for my password, and if I type it in correctly, they're willing to send some trusted, authenticated, signed widget, schmigeggeot attribute thing to that site saying, "Yes, indeed, this is that person, they have provided a password."? So really all it is, is a way to only have one password.? And if I change my password on Google, then it's changed on all these other sites.? And all that site needs to know is that they are pretty sure that they have [your email] as their logged-on.Atwood:? Yeah, and I agree it's got a long way to go, but I think it has a lot of promise, I think it's something I want to support.? One, from a selfish perspective of, honestly, we write less code this way.? Spolsky:? The real question is, do we wanna support it to the extent that we don't have our own password system at all, we require you to go out there and get an OpenID? Atwood:? That's pretty much the way it's gonna be.? Spolsky:? So we may be the very first site doing this!Atwood:? Well, you have to caveat that with the idea that anonymous access is gonna be pretty-much, pretty close to a first-class citizen in the StackOverflow world.? You'll be able to enter questions, answer questions, and actually even accrue reputation, as long as you have cookies enabled.? Spolsky:? Right, it's just that if you don't want them to be a little more stable, you'll want to--Atwood:? Right, so if all you care about is "Hey, I wanna be totally anonymous," then just disable your cookies and you'll be able to do Wikipedia-type stuff, like edits where basically it's tied to your IP address, because that's all we really have at that point.Spolsky:? So the question is, what is the absolute minimum set of steps that somebody has to do?? Let's say, probably most people don't have OpenID accounts.? Although they might have--y'know, if you can just use your Yahoo or Google account--Atwood:? Well, the problem with Yahoo, you have to enable the OpenID side, which is really annoying.? So even if you have a Yahoo mail account or whatever, you have to go in and actually say, "OK, now I want to opt in to OpenID." So again, that's why I was a little disappointed in the way that Yahoo did it.? Spolsky:? Why? If there's anyone listening from Yahoo who knows why that is, could you please call in and tell us?? Thank you... podcast@stackoverflow.com, just record a little mp3...Atwood:? I figure, in the worst-case scenario, it's not that much worse than creating an account on StackOverflow, like we had a traditional create-a-new-account form.? It's really not that much more work, and you get an OpenID out of it.? Spolsky:? OK, but the question is, if it's us creating an account for you, we can make it zero, we can make it easy.? Like we control the whole process.? Whereas with OpenID, we have to send you someplace, and who knows what the process will be. Atwood:? Well, yeah.Spolsky:? So we gotta give you this page of instructions, and you're like "Oh, God, I need an OpenID provider, what am I going to do?" And then you're like "If you would like to use this, do this, and if you wanna..." and all of a sudden we're asking you to make decisions, and then you gotta open the instructions in one window, and go to that other site and then you know you're gonna have to find your little password file, where you have all your passwords written down, and add it into there.Atwood:? Well, OK, I'm very much a skeptic, and I went in expecting it to suck, and I was pleasantly surprised.? Maybe my standards are very, very low, but I did not find it an onerous process, and I am very cranky about stuff like this.? So part of it's--I'm going to go on gut instinct: if there's a huge rebellion and nobody ever creates an account because they think an OpenID is the worst thing they've ever seen, then we might rethink that.Spolsky:? Well, it's hard to know, I mean--OK, it looks like I don't have an OpenID account, because when I search for my OpenID it looks like I've never made one--we may not know, we may just wind up having half the number of people registering it because the process is just like that much more onerous.? Because whenever you have like a seven-step process, it always knocks out a certain number of people.? And then if you can make it a five-step process, you suddenly discover that you have four times as many people signing up, because at every step you might be losing half the people.? Atwood:? Yeah, that's true.? I think at this point, it's a risk I'm willing to take, and then we'll revisit it later if it turns out to be a bad decision.? But I'm fairly comfortable with it, because (a) we have a really good anonymous experience, like better than 90% of the websites on the Internet, we're gonna have a really first-class anonymous experience, and (2) our audience is kind of a technical audience anyway.? I feel like these are the kind of people that really should know about OpenID, I mean, I think it's solving a very real problem on the Internet that programmers should be aware of, and sort-of-- Spolsky:? Should be supporting.Atwood:? Yeah, should be supporting.? And on some level--well even if you say, "OK, I hate it," or "here's the problems with it," well, how can we fix it?? I really wanna fix this problem--I feel like it's something programmers should be doing.? So there's an element of evangelizing it a little bit as well.? But again: try it, really, go to myopenid.com, anyone who's listening to this and says "Jeff, you're full of crap," maybe I am full of crap--Spolsky:? I'm gonna do it right now.? Alright, here we go, somebody take a--got a stopwatch?
[41:12]Atwood:? [laughs] No, no, no, no.? I would do that offline.Spolsky:? No, I'm doing it right now.? "Sign up for an OpenID." OK, I can do that. OK, 42,13, alright, it's downloading, it's SSL.? "Your OpenID URL is how sites that accept OpenID know you.? You can use your name, or anything you want to be known by." Hmmm... "s" is not available.? Oh, "spolsky"'s available.? Heh heh heh.? Alright, now I need a password. Atwood:? Well, that's another advantage, you can typically get names that you actually want, versus like on Yahoo, it's like, how many names are taken on Yahoo? Pretty much every name ever? Spolsky:? Yeah.? OpenI--oh, sorry, myopenid, username Spolsky, and yeah, I can just click "Generate Password" on--what's it called?--PasswordSafe, which I'm using.? And it generates a nice, secure password for me, and it says the site recognized that it's secure.? "Enter email address." It's optional, which is nice, that's cool.? And the email address just lets you recover your password.? "The fine print.? Enter the text in the image below."? Oh jeez, I can't read it.? I can only read the first one.? What the hell does that say? Atwood:? You gotta read harder.Spolsky:? I think it says various--oh look, I can play it out loud.? "Can't hear the sound?" No, I don't hear the sound.? Oh!? Oh my God, these audio CAPCHA's! It's like [funny noises].Atwood:? It's actually obfuscated?? Even the audio?Spolsky:? Yeah.? Atwood:? Really!Spolsky:? Yeah, it's like that movie with Wim Wenders, where he's an angel that's fallen to earth, and he can hear everybody's thoughts, that he's walking by.Atwood:? Yeah, I remember that movie.Spolsky:? That was terrible.Atwood:? They remade that with Nicholas Cage, and it wasn't any better in the remake.? Spolsky:? Really, what was the movie called, On the Wings of Angels?Atwood:? Something--it was very--it was painful.? I'm trying to forget it now.Spolsky:? Alright, this is a very, very evil CAPCHA.? OK, "Check your email."? What?? But the email was optional! Alright, I think I got one.Atwood:? So now the next job--I don't think we need to necessarily do it on this podcast, but find a site that actually accepts OpenID.Spolsky:? How long did that take? How long was I doing that?[43:47, thus it took Joel 2:25 to make his OpenID account]Atwood:? I dunno, maybe a minute?? That's not very much.Spolsky:? I didn't get the email, maybe it's in my Junk folder.? Yeah.Atwood:? And that's the same stuff we would have to do to you, right?? If we were to write code, we'd be doing the same exact thing.? It's like, why reinvent the wheel so many times?? Spolsky:? OK, so what happens if I go to this URL which is my OpenID? It just says "Page belongs to you, edit this page." Atwood:? You can actually put some identity stuff there if you want to, it can be just a blank page.Spolsky:? "Add a persona"?Atwood:? "Personas" is a fancy word for attribute exchange.? So persona would be information that you want to be transmitted to a site.Spolsky:? Ah, I can upload images! Atwood:? Yeah, your avatar could be part of that persona, right?? So your avatar image, if the site is written correctly, and the provider supports it (myopenid does) it will actually send down that image to the site.? So if you're actually setting up a new account on stackoverflow, it would download your avatar automatically.? You wouldn't have to...Spolsky:? Well, I'm gonna put a picture of Peter Falk.Atwood:? Of course.Spolsky:? Because he was the star of Wings of Desire, that's the movie we were talking about, where he's just walking around, hearing everything that everybody is thinking.? In all kinds of languages, it's really kind of interesting.? Takes a while to figure out what's going on.? OK, so OpenID.? That wasn't so bad, that wasn't the end of the world, I had a little bit of fun.[45:08]
Atwood: See?? It's not so bad, I'm telling you.Spolsky: So what's a site I can use OpenID at, that I can try this on?Atwood: Ah. There's the catch-22, there's the chicken and egg problem.? There's not very many, there's really not very many.? I had to go - I think I found a LifeHacker post that had a few, so I was just experimenting.? And you really are at the mercy of A) the provider - but MyOpenID is a good provider - and B) the site that's actually written to work with OpenID to actually do it correctly, and by "correctly" I mean when you create a new account it pulls down all that information through attribute exchange - you're not data-entering, like, your email address, the URL for your website, your avatar image, all that stuff.? And we're going to do that correctly on StackOverflow, we're going to pull down a ton of stuff from attribute exchange.
[45:55]
Spolsky: Hey, this is cool. Oh, uh-oh, so I'm trying this now with PB wiki, but then it says "There is no PB wiki account associated with that OpenID; would you like to create one?" and then it wants my name.Atwood: So what your falling into is implementation problems on their side.? We're not going to do it that way.Spolsky: Right, right, right - of course.? We're just going to be "Hey I know who you are - you're all set"Atwood: YesSpolsky: Although we may want you to add more personal information other than what -Atwood: SureSpolsky: [...] add all kinds of interesting stuffAtwood: We are going to have profile pages on StackOverflow and you're free to put whatever information you want there, but we're going to try to pre-populate the heck out of it with your attributes from OpenID.
 [46:30]
Spolsky: So I like MyOpenID.? How the heck do they make money?
[47:12]
John Dyer: This John Dyer from Pennsylvania and I have a question about the types of business domains that programmers are in. FogBugz is easily understood by programmers because they're used to tools like this. But what about developers involved in medical or insurance applications? These areas have very complex and detailed rules that are not common to most developers' general life. Joel's developers have to learn the FogBugz application code and the business rules, but the rules are relatively easy for developers to grok. Programmers in other areas face a different learning curve. I suggest that the effort to learn the business rules can be much larger than the application code, so in these situations the one thing that can be controlled is the application code complexity. Having things like complex framework hierarchies and custom compilers can be a detriment because they add considerably to the code. In these situations, isn't it better to code mainly from things like the .NET framework libraries so that there is less to learn?
Spolsky: Yeah, so that's kind of a rhetorical question. But in general in most application areas where programmers are working, it's easier for the programmers to learn the domain than for the users in that domain to learn the programming. In other words, if a programmer goes and works in, for example, insurance and they have to learn actuary tables and whatever the insurance industry stuff may be that they have to learn in order to do their job writing code for that domain. But, usually the programmers are probably more qualified to learn that stuff rapidly than the people actually working in that field would be to learn programming. Now I say usually because I guess medicine is probably a humungus exception where there's stuff that they may just not understand or make take an entire medical degree to know well.
Atwood: Yeah, there was a couple of questions there and some of them were rhetorical but I think it's a good springboard for something I saw recently. Did you see Eric Sink had a nice post about his Ham Radio operators and learning C?
Spolsky: Oh yeah, yeah, yeah.
Atwood: That was really good. My answer to that is not that you shouldn't learn C, but like OK let's take this question as a springboard. Would I rather have programmers that know managed code really well AND the domain that they're working in really well, or would I rather have programmers that know managed code really well and then decide hey I want to learn C just because I can? Like to me, it's much more important to learn the business domain, right, than necessarily C. I mean, I view it as a fixed pie; you don't have infinite time to learn everything there is to learn and, I don't know, I feel like that time should be invested. Learning the business domain is a great place to spend effort like that versus say Eric Sink and Joel Spolsky say I gotta learn C 'cause if I don't I'm not a real programmer.
Spolsky: Wait a minute! You managed to turn this around to whether or not you should learn C! [laughs] We were talking about business domain questions.
Atwood: Yeah, ok so I don't want to totally derail because I know we've talked about this a lot. Knowing the business domain is so important and very few programmers actually do. I know that I spent a lot of time on the apps that I worked on trying to figure out what the heck it was that the customers wanted.
Spolsky: You worked on enterprisey software probably a lot more than I have because you did that for people. But honestly, when you got on a project you often had to learn the business domain and it wasn't that hard, right, when you did?
Atwood: It's not hard in the sense that [sighs] - understanding what people are saying to you is hard because people aren't good at communicating -
Spolsky: Exactly, but what they were trying to say was probably pretty simple if you could just frigging tell what they were saying. It's like "oh this is it, if it's greater than five then 'A' otherwise 'B', that's the whole story?"
Atwood: Yeah, but that's the more important life skill to me than learning C. I figure once you get to a certain degree in programming - as a career - you're good enough at it, honestly.
Spolsky: [sighs]
Atwood: You really need to be good at these other things like communicating with other people, right, being an example of that and learning the business domain. I guess that's my only point, I don't want to turn it my little pet topic but I really enjoyed his article and he totally tricked me with his Ham Radio thing. Oh he's going to agree with me and he tricked me and he actually agreed with you.
Spolsky: Yeah but then you know he didn't really back it up that well which was a shame, but you know I think it's not like, I think in the case of Ham Radio learning Morse Code, this is what Eric Sink wrote is that there's a parallel to be drawn between the Ham Radio people being required to learn Morse Code just because in the old days they used to use Morse Code versus me saying that programmers need to learn C 'cause in the old days they used to use C. I think the key difference between those two is that Morse Code is not the fundamental way radio communication takes place, it's not what's there at a lower level. In other words, the C programming language, although this may surprise some people, but the C programming language is a kind of a way of looking at the programming work that you do every day kind of at a more base, a more theoretical or a more primitive level, understanding the CPU kind of at a simpler level. It's sort of like slow down and let's look at the exact steps that are taking place here. Even if there's nothing more than understanding what exactly is involved in string processing on a CPU. If that's the only thing you learned from learning C was realising what it means for there to be a string algorithm, what it means for copying a string. Why is it that the CPU can't copy a string with the same amount of work as it copies an integer? And format a string -
Atwood: I agree with what you're saying -
Spolsky: So that's the kind of stuff you would want to learn in C. It does have value for a programmer doing C# to learn that stuff, I believe, even if you're only doing C#. In a way it doesn't have value for a radio operator who is never going to use Morse Code and is talking on the radio and what they're talking about is not even being translated to Morse Code by a compiler at some point.
Atwood: That's a totally fair point and a very good explanation of it but let me use your example to illustrate what I was talking about which is: how many times do you run into "ok I don't understand the way this string routine is working" or you're having a performance problem with the string routine where understanding the lower level C would actually be useful versus understanding why the people you're talking to about the app you're supposed to be building can't tell you what you need to actually build the app. In my experience that is a far more common problem and that's really where you want to spend your time learning new skills, if you will, around basic communication, learning how to write well, learning how to speak in a way that's understandable to other people.
Spolsky: Yeah, there's two different... The first is a skill that's useful to a programmer and the second is a skill that's useful to a systems analyst working in enterprise software development where they have to talk to users to figure out what the users want.
Atwood: Wait, wait, so you think there's this wall -
Spolsky: They're different skills for different jobs. No, there doesn't have to be a wall, you might have to do both, in which case both skills will help you.
Atwood: Every job I've ever been in, I had to do both -
Spolsky: Well you know the programmers at Fog Creek, there's a lot of them that really don't have to do both. Although it's weird ok they're working on FogBugz, so they don't have to talk to users. But you've been in jobs that are kind of more enterprisey, in a job that's more producty, product-oriented? There can be an awful lot of people on the team that literally don't have to know anything about what the users want or what the domain is, they can just have something explained to them to implement it.? 
Atwood: It pains me to hear that.
Spolsky: Y'know, I worked on medical software, that was like my first job, was medical software, and all I ever learned was that if you take--this is what I learned about medicine--and I was able to create very, very useful software.? All I learned was that if you wanna figure out the pH that's going on in a cell, like the pH of various areas in a cell, you can put that cell on a slide, put it on a microscope, take a picture of it, at the color of 440 Hz [nanometres], and then take another picture at the light with color 490 Hz [nanometres], and divide those, and that ratio will tell you the actual pH of the cell.? Which is bizarre, but true.? And I don't know why that works, and I might be missing something--actually, it's 490 divided by 440, not what I said.? I think.? Anyway, whatever, it gives you something that lets you see the pH in a cell, so if you wanna do an experiment where you're like "What is the effect of blah, blah, blah on the pH in the various parts of the cell," then what you can do is just take a whole bunch of pictures at these two different colors, with these two different colors of light, and go over every single pixel and divide the intensity you get at that pixel.? So I've just explained something to you which is all I needed to know about medicine to be able to spend a couple years at Yale Medical School writing code that figured out the pH that was going on in a cell and that's all it took, and that's all the medicine that I had to learn in order to create something that was useful to the researchers there. ?
Spolsky: If you have any questions you want to ask us, or any suggestions, or if have any ideas for password management - that was my question this week, "How do you manage your passwords, and keep them synchronized on all our computers and stuff like that?" - record a little audio file, MP3 or Ogg Vorbis and send that little email attachment recording to... Atwood: podcast@stackoverflow.com, and I predict you're going to be sorry you asked that, you're going to be very sorry, there's a lot of strong feelings on this topic.
[1:03:35]
Spolsky: Well, maybe we'll get something interesting...
Atwood: Your funeral.
Spolsky: There must be somebody who's doing something better than I am: remote-desktopping in to my computer at work to find out what my password is for hammocks.com.? And, uh, we'll see you next week!
[1:03:47 End]
Spolsky:?? Hello.Atwood:?? Hey Joel, this is Jeff.Spolsky:?? Is Jeff there?Atwood:?? [laughs] Nice.Spolsky:?? I'm sorry.Atwood:?? Yes, I am the person...Spolsky:?? I'm trying new openings for the show,Atwood:?? OK, I see.Spolsky:?? Cause, you know, there was a little discussion as to the warm startup and stuff like that, soAtwood:?? Yeah, yeah, so no, I like the warm start.? So, let's see, what should we start with today? Um, I guess we could start with, we're going to be hosted at ITconversations, that's sort of confirmed right?Spolsky:?? Oh yeah, yeah, yeah, I think, y'know, they had some kind of thing to sign, which they haven't gotten me yet.? Doug, you listening? Send me that thing. And then we become an ITConversations show, and they're like the NPR of podcasts. Basically they model themselves on NPR, they're a non-profit, and it just seems like a good outfit to be associated with. Especially since we don't really care.Atwood:?? [laughs]Spolsky:?? I'm sorry, we don't actually care, I mean the podcast is not supposed to be commercial in any way, shape, or form, I mean it's just a continuation of our blog experience.[1:04]Atwood:?? That's right, and there's a lot of other really good podcasts on there as well, soSpolsky:?? There are, I've enjoyed many of the ITConversations podcasts I've gotten.? I mean they've been doing it, they were probably doing it, like seriously, like a year or two before anyone was really doing it.? It sort of started out as just like, y'know, audio recordings you could get on ITConversations of conferences and trade shows and that kind of thing.Atwood:?? Right.Spolsky:?? And they had some interviews.Atwood:?? Yeah, yeah, I've listened to a few myself, and they always get some impressive people and good topics, so again it's a good place to be associated with.? I'm really glad that they, they actually sort of approached us, 'cause they actually heard us talking about it on the podcast, and emailed us.Spolsky:?? Right.Atwood:?? Which was very nice of them, so yeah I'm looking forward to it, that's great.Spolsky:?? We're also using one of their tools, they have this tool that they have, that they put out, called Levelator, which is absolutely awesome if you're producing any kind of audio of any way, shape, or form.? You just sort of drop a .wav file on top of Levelator, and it goes through and it adjusts the volumes, the levels, so that everybody, all the participants, come out at the same volume, which otherwise you would have an audio engineer sitting there with a mixer, adjusting it on the fly.? But because they can look forward and backwards in the sound file, instead of merely looking backwards, as the typical automatic levelling machine could doAtwood:?? [grunts agreement]Spolsky:?? They can do that with higher quality.? So for example you could get--the old school if you bought like a Sony casette recorder in 1963,you could push a little button and it would set the levels? automatically, and the way it would do that is, it would just keep slowly raising the level a little bit until it clipped, and then it would knock it back a bunch, and then start slowly raising it again, and so you'd, y'know, about 90% of the time, you'd have good levels, but Levelator is actually able to look at the whole file, forwards and backwards, and say, "hmm, this little part must be that guy talking too quietly," and just sort of raise it or lower it and anyways, it's an awesome tool, I highly recommend it, and a free service from the nice folks at ITConversations, so[3:06]Atwood:?? Yeah, that's cool, I didn't realize that that tool was something they produced, so that's very very cool.Spolsky:?? I'll plug that, yeah.Atwood:?? So, another thing that's going on this week is, let's see, you spoke at the Ruby on Rails conference, right?Spolsky:?? Yeah, you wanted to say rube, I could tell.? The rubes.Atwood:?? No, not at all, not at all.Spolsky:?? [laughs]Atwood:?? I guess I didn't get a chance--I noticed you didn't post about that--I didn't get a chance to search the web to see how that went, but how did the talk go?Spolsky:?? Um, I, I, I, I, I dunno! Atwood:?? [laughs]Spolsky:?? I got a nice email from David Hansson Hanemeier--he's a real sweetie.? Hanemeier Hansson.? David Han--Atwood:?? DHH.? Just say DHH.Spolsky:?? Yeah.Atwood:?? Yeah, that's good.? So, DHH liked it.Spolsky:?? Yeah.Atwood:?? OK, good.Spolsky:?? But he's generally a nice guy.? So maybe-Atwood:?? Yeah, no, I agree, I mean I wrote that one negative thing about him where I was sort of a little annoyed with some of his attitudes towards people who didn't work on, say, Macs, y'know.[4:04]Spolsky:?? Oh yeah, that was sort of silly. [laughs]? "If you don't work on a Mac, I don't wanna work with you!"Atwood:?? Yeah, well he just, y'know, that's the kind of guy he is, and I think this also highlights one of the points I make on my blog: I can disagree with specific things people say, and it doesn't mean that I hate them, or that they're--Spolsky:?? Well it is actually true, when you go to the Ruby on Rails conference, you see that everybody has a Mac.? Now the reason for that is that the Mac is a luxury product, and people will always spend extra money for the luxury products in whatever category they're most interested in.? So the geeks that really love programming, will spend extra for a Mac, y'know, for the luxury laptop.Atwood:?? Right.Spolsky:?? It's like totally that simple: there are some people that will spend extra money for the luxury golf clubs, and there are some people that will spend extra money for luxury kitchen with all the Viking and the Subzero appliances, and it just depends what you're in love with, and the geeks by definition like the computers, and for them plopping down a couple thousand dollars for a slightly sleeker laptop is completely reasonable.[5:06]Atwood:?? I also think it's important to be rational about this and be adult and say, again, I can disagree with specific things someone has said, and it doesn't mean that we're mortal enemies. Because we've brought up DHH before, like he gave that talk that we really enjoyed at startup school that was also excellent, and generally he's a really smart guy.So it's just this one thing that I disagree with, [laughs] but it's amazing how often people, they'll read something you write, and just assume that you're mortal enemies.Spolsky:?? They kind of flag wave-y, you know this is the thing which drives me crazy. Somewhere I found some comment on the ruby blog or something saying "Joel Spolsky will be speaking at the keynote at Ruby on Rails Conference", and the comment was by "A Nonny Mouse" or something - the comment was "Joel Spolksy, isn't he a .NET guy?"I mean what the heck, what does that mean? What's a .NET guy?Atwood:?? Well no you're not even a .NET guy, you're a Wasabi guy. It's worse!Spolsky:?? Yeah... What?... Not even... I can't... [laughing]So, A, I'm not a very good Wasabi coder, cos I'm not on the FogBugz team. B, if I have to do coding, honestly, it's .NET, but it used to be VB6, and I've done years and years of C++, on Unix, I've done years and years of C++ on Windows. I've done, you know, Lisp and Haskell and ML and... So what do they even mean... but forget me, the question is, how is there such a thing as a "dot net guy," is this like, you have the .NET flag? Like that's your religion? Like I am a part of the .NET specific... Like are there certain clothes that I have to wear, and I can't eat any kind of meat on Fridays...Atwood:?? Well there's a little bit of truth there in that, they brought you in because you're a notable figure in the community, which is great, but, you're also not really immersed in the Ruby community. I mean your company is not producing any significant ruby code...Spolsky:?? That is true.
[6:57]
Atwood: So there's a little bit of truth there, but I agree with the sentiment that you're making, which is that software development is bigger than one specific tribe, and we all have -
Spolsky: I think the last keynote speaker they had was Ze Frank, so he's not really producing that much code either if I am not mistaken.
Atwood: Wow, you're really paying yourself a compliment there by equating yourself with Ze Frank, he's like a god, so.
Spolsky: Yeah. Well no, everybody says I was much worse than Ze Frank, so, I'll go for it.
There are communities that are more flag-wavey than others. We were discussing this when I got back from work. I think the Ruby community, partially to their benefit and partially to their detriment, is a little bit more flag-wavey. Is there a real word for that, parochial? Like, believing that their kind is better than the other kind.
Atwood: I know what you mean, and I don't know if there's one word that really captures the entire thing.
Spolsky: There is a whole spectrum, like, I've found in my experience - and I have a limited experience - but in my experience I've found that Windows programmers are the least flag-wavey.
[10:05]
Atwood: Confidence, self-confidence. Okay we're small and we don't care. They gonna be out there beating the bushes and yelling at people.
Spolsky: There is a psychological reasoning for that. Well documented in the psychological literature. Its the same reason people join fraternities. 
Atwood: [grunts agreement]
Spolsky: So there is a principal in sociology called cognitive dissonance. And here is how this works, the idea is lets say for example you are an enthusiast Squeak programmer and you have just written a web server in Squeak - which is the current version of Smalltalk, the open source version of Smalltalk, very nice actually - anyway I think they have a framework, is it Seaside, is that the name of their framework?
Atwood: Ah that sounds right, I don't know.
Spolsky: It just doesn't matter. Anyway so your at work and your just built a whole webserver and you have somehow convinced your boss to built this whole webserver in Squeak. And you know its crashing all over the place, its not production quality, and its just a big disaster, and they can't hire Squeak programmers.? And everybody is yelling at you all the time and people are calling you an idiot.? So now there is two possibilities. You have, there is sorta, what you have now is a psychological conflict.? Between you did something, and it seems to be the wrong thing. So you can resolve this conflict between what everybody is telling you and what you actually did in one of two ways. You can either admit to yourself that you were wrong, and say Squeak just isn't that good.? Or you can make up this story to tell yourself that Squeak must be so excellent that is must really be worth all the pain that you endure in order to use it.? And the second one doesn't involve thinking that you were wrong so it involves less cognitive dissonance.? In other words there is less, your less upset by the theory that Squeak must be really great and that is why you endure all this pain, then you were stupid for enduring all this pain.? So that is the principal of cognitive dissonance, and that is if anything makes you that much, much more attached to the platform because you have to in order to justify yourself why your suffering all this pain. And indeed that is principal that is used by fraternities and hazing.? So they haze people and the people theoretically think to themselves, "Why am I undergoing this ridiculous torture in order to belong to the fraternity?"? And the two possibilities are:
A) I am stupid, which is a painful thing to acknowledge; and 
B) This fraternity is really worth joining.? It's really going to be awesome once I'm a member.? And so it must be worth going through all this hazing. 
And the second one does not require you to think that you're stupid, and therefore most people choose that one.? And so that's the principal of cognitive dissonance.
Atwood: Oh, wow.? I had read the term before but I didn't realize it had that specific meaning.
Spolsky:?? So, yeah, it's easy to find them, and it's easy to find the other 3 or 4 people who are using your crazy platform. Now, I should should say - to be fair - that the reason the Ruby on Rails, and the Ruby community in general has it in for me, is that at some point a friend asked me what to use - what programming environment to use - for something he was building, and Ruby on Rails had been out at that time for 8 months, and I said "You know, Java and .NET are fine" - I can't remember why I didn't say anything about PHP?? And I said "Python is almost ready for prime time" - this was a couple years ago - and I can't remember what words I used but basically "Ruby is not quite ready for prime time yet", you know, it just didn't have enough of a track record that you could bet your career on a Ruby project, especially in his position.? So anyway, so they all decided that I was a lunatic, and they've had it in for me since then, because I am clearly an enemy of the state.Now since then, that was a couple of years ago so Ruby on Rails is now 3 years old, there's a huge community - there's 2000 people going to the rails conference. Just an absolutely stunning community. There's books that you can buy, there's a lot of ruby programmers - Ruby programmers are in extreme demand right now, because they're all sort of working. Every once in a while you see a blog post that says "Heey, uh, if you're a Ruby on Rails programmer looking for a job..." Come on that's ridiculous, that's not happening because the number of Ruby jobs is increasing at a rate that is much more rapid than the number of new Ruby programmers, and it is a very very elegant programming language, albeit, not such a fast one, so for large classes of problems it's quite suitableAtwood:?? Right, well you know what those Ruby programmers should do though, Joel.Spolsky:?? Yah...Atwood:?? They should learn C, I think...Spolsky:?? Well, they mostly know C [laughs]Atwood:?? [laughing] Oh that's your out, you're just going to say "Well, they already know C."Spolsky:?? Well at the reaffirmation of 1915 convocation in North Dakota, they were all required to learn C.Atwood:?? I see, that's good, well I want to make sure that's at the forefront.It's amazing, that is an evergreen topic, the whole learning C issue comes up again and again, it's still funny - there's some very funny things I've read about it, so I enjoyed that conversation.
[16:56]
Atwood: Another thing that happened to me, and this relates to New York City, your hometown: I did write a blog entry about the book Here Comes Everybody by Clay Shirky, and I've been a longtime admirer of Clay Shirky's writing, because I find that--and it's pretty much what I said in the blog post, but it really is true--that I keep going back to it year after year, and every year it seems smarter than the last year that I read it, because everything that he writes about kind of tends to come true. I mean, not everything but like 80%, which is still pretty darned good for somebody who's writing about future trends and things like that. So I greatly admire Clay Shirky, and I loved his new book, Here Comes Everybody, to the point that Jarrod, the other programmer I'm working with on StackOverflow, I gave it to him, and made it assigned reading and said "you must read this, because the site we're building is about online community." That's essentially what Here Comes Everybody is about, about these self-forming communities, and how, now that the Internet is kind of mainstream, it's not necessarily all about techies and people who love computers, that it's really changing--and I hate to be dramatic here--but sort of the fabric of how groups organize in the world, for the better, largely. And it's a really powerful concept, and actually anyone listening I will still heartily recommend the book. And Clay is actually based in New York, and I was wondering, Joel, if you had ever met him.
Spolsky: Yeah, sure.
Atwood: You have?
Spolsky: Yeah yeah, we hang out, man.
[18:20]
Atwood: [laughing] Do you really hang out, or are you exaggerating?
Spolsky: We have hung out.
Atwood: Ok, that's cool. Well, 'cause he emailed me, which was nice again, because I said some very complimentary things about him. And he offered to hang out, he's going to be out here for the Supernova conference.
Spolsky: What kind of conference is that?
Atwood: Ah, it's some--gosh, you know--Web 2.0 kind of thing. I don't understand the details. But it's in San Francisco, which is great 'cause that's just, I can just get on BART and go to San Francisco. So I will have the opportunity to meet Clay as well, which is great, 'cause he's really truly one of my, sort of, heroes.
Spolsky: Yeah. He is. He's a very very smart guy. He's a part of--I think he's a part of this interactive technology program that NYU has had for the longest time.? And there's a lot of really random nonsense at the interactive technology program.? But not him!  
[19:16]
Atwood:? No, no.Spolsky:? I don't want to say "random nonsense."? There's an awful lot of students in the interactive technology program that are really focused on interactive technology as if it were an art medium.? And so they're doing things like making interactive art in a way that is, shall we say, completely relevant to the art world, and completely irrelevant to the technology world.? So they're making things that would have a place in a gallery, and an art historian might have something interesting to say about them, but the geeks look at them, and they're like "I don't get it, you just made a window with static on it."? "Yeah, well, I'm really deconstructing what it means to be a window.? Usually a window is such an information-rich thing, and static is the absence of information."Atwood:? Yes.? So another thing that came up--and I guess I should ask you how many questions we have.? Spolsky:? We have about a hundred. Atwood:? Are you serious?Spolsky:? But queued up, I got about four.? Yeah, we got a lot.? Some of them are no good.Atwood:? That's fine.? Before we get into that, I did read one--I do have an ego, like many people I have an ego search set up in Google, which triggers based on my name, because I do like to know when people are talking about me.? And occasionally it'll find things that I never would've found myself.? And one thing I found this week was a blog post from Paulo.? And unfortunately, Paulo, I don't have your last name in front of me.? But Paulo was sort of complaining about our podcast, and he wrote this really sort of nice criticism.? And I do take that stuff seriously, and I actually had a blog post this week about somebody that wrote this long criticism of my blog and my writing.? And obviously I don't address every criticism that people write about me, otherwise I'd do nothing else in the entire day.? Spolsky:? And people would criticize you for spending so much time addressing all of them.Atwood:? But if it's a really well-written criticism, I do take that seriously.? Because most people are gonna just walk away from it.? If they don't like what you're doing, they're gonna say "Y'know what?? Screw you!" They actually won't say anything, they'll just walk away.? So if someone writes a thoughtful piece about, "Look, I wanna like this thing, but here's why I don't," I do like to address it and take it seriously.? Because I feel like they're sending you a message.? They're saying look, I want to like what you're doing, but here's why it doesn't work for me.? And, granted, at the audience levels you get to, that you've gotten to, and I've gotten to, you can't satisfy everybody--it's impossible. Spolsky:? Well, there comes a time--actually, it's very bizarre--there was some point, as Joel on Software grew, there was some point maybe two or three years into it, where I actually started seeing negative comments.? Up until that point, when it was below, y'know ten thousand readers or whatever.? I don't know what the number is, or the date.? But when it was on the order of thousands of readers.? In the early days Dave Winer used to link to me all the time, and in those days people would just not bother writing to me if they didn't have something nice to say.? Which I thought was really surprising.? But it turned out to be the case.? When you're sort of unknown, and you write something and people like it, you'll get the positive, if they don't like it they'll just click on to the next thing.? And at some point I started getting the first negative feedback, after a couple years.? And then at some point you become--and you're just hitting this point, you've hit this point--where you're actually kind of a brand name, and every young blogger needs to take you down, because you're the established power, you're the authority.? Atwood:? [laughs]Spolsky:? So you need to be put in your place.? So there arise a new, young generation of rebels, who remember not when you were the young rebel, writing interesting things and making no claims to authority.? When you and I started writing, we were like, "well, we're just guys, y'know.? This is what we think.? If you disagree, could you please tell me why, and let's have a debate?"? But we're not saying "You shall believe me because I am the authority!"? I was very careful not to say that.Atwood:? There's a Catch-22, though.? Perception becomes the reality.? I mean, that's true of everything.Spolsky:? Well, no, at some point you become the official authority, right?? So now, all of a sudden, Wikipedia's saying that Jeff Atwood and Joel Spolsky are authorities on blah, blah, blah, or they're gurus of such-and-such, or maybe that's just what people think, because we automatically zoom up the Slashdot and Reddit and Digg and stuff like that.? And so we must be--or everybody is always mentioning us in meetings at their little software company as if we were the authority on something, and they say "Who the heck are these jerkoids?" And they go, and they research, and they realize that we're just actual humans, that we have no claim to authority, that we don't--you don't know C, and I'm not the king of the Universe, or something.? Oh, I know, I don't like exceptions.? And therefore--Atwood:? Which is dumb, by the way, but go ahead.Spolsky:? Yeah, let's talk about exceptions.Atwood:? No, no, I--Spolsky:? That was completely--Atwood:? Do you really wanna talk about exceptions?Spolsky:? I dunno, I just feel like I was misunderstood on exceptions.[24:10]Atwood: Ok, go ahead. The floor is yours.
Spolsky: When you're writing systems programming, an exception is just a way to get a bug in your code you can't see. When you're writing application programming, it's a marvelously convenient and useful thing to have. But I came from a kind of a world where you're trying to write like a little bit of C code, like a page of code, that a processor can run, that will absolutely 100% work. And you really need to be constantly trying to think about every code path, and an exception is just one more thing that you may forget to think about.
Atwood: Mhhm.
Spolsky: So there.
[24:49]
Atwood: Well, I think this is an area where C programming is really worse, much worse, than modern structured programming like you'd see at Java or .NET.? Although Java does have that crazy concept of the checked exceptions, that you actually have to catch all the exceptions.
Spolsky: Yes, C has something called a long jump, which is technically an exception but doesn't clean up stuff that's on the stack that you left around, that you might have to free. C++ obviously has exceptions. But it kind of doesn't matter.? At what level you are implementing something?? If you implementing a fairly low level operating system functionality and for whatever reason it is absolutely essential that the code runs perfectly and that every control path is carefully thought through and tested, then I think control paths, it helps to have your control paths be explicit in the code, because it's one of the things that - you know with exceptions you've got some function in the middle and you completely forgot that their functions that your calling that are throwing exceptions to functions above you.? Now if you writing application programming, and there's something you need to get done. [...] If you're writing, heck a bug-tracking application, then 99% of the time when your have something that goes kinda wrong at the very low level, it's ok to just kinda abandon what you were doing, clean up only the most rudimentary of ways, display some kind of error message and let the user go on, and it's really really nice to have that exception capability as a programmer. It's just if you're were writing say a memory allocator for an operating system, then using exceptions?is probably a very bad idea, 'cause it probably means that there are invisible code paths you haven't thought about.
Atwood: Well how many people are actually writing memory allocators for operating systems...Spolsky: None.Atwood: Relative to how many programmers are working.Spolsky: Yeah, I agree.Atwood: So yeah, that where a lot of that, I think, criticism comes from.Spolsky: Yeah well the world, I mean there are sort of different types of things that people are doing with their programming languages. And there is different tools that are appropriate to different kind of things. What I, what I should get myself into a debate about is threads, it's like I'm pretty convinced that it's almost never the right thing to do to write code using threads.
Atwood: Yeah, that one I actually might be with you on. Because certainly you could go to the Unix model where they just basically fork.
Spolsky: Yes.
Atwood: Ghetto threading. That's just spitting up another process that does the same thing...
Spolsky: And at a great expense and coming up with some enormously complicated inter-process communication mechanism that's so difficult to do, that you are forced to get it right. [laughs]
Atwood: Yeah, I...
Spolsky: Where as a thread sort of thing: [pixie voice] "la la la, I'll just put this thing there, and put that thing ... and take the thing there...", [/pixie voice] and all of the sudden you have a run condition and you don't know why.
Atwood: I like the song you were singing while you're writing the threading code, that's a nice touch.
Spolsky: People always sing to themselves as they write thread code the first...
Atwood [laughs]: It's like one of those songs in the Snow White and Seven Dwarfs, the dwarfs are singing the songs and writing the threading code, but it's going to be... there's going to be dead... there's going to be dead dwarfs, deadlock, whatever, yeah.
Spolsky & Atwood [laugh].
Atwood: No, threading is one of the major problems facing the community, but what I found paradoxical about this whole situation is web server applications scale hugely, and nobody's writing any... like you think those PHP guys are writing threading code? I mean it's laughable, right? Like... [laughs, to demonstrate]
[28:04]Spolsky:? No. ?And they're getting the advantage of threading because the guy that wrote their webserver thought really, really hard about threading, and has implemented all the threading code correctly - although that was practically impossible - whether it's IIS or Apache or anything like that.? I dunno if the other ones do much threading.? Does Apache even do threading, or do they just make a pool of processes and throw things at the wall?Atwood:? In 2.0--I do know a little bit about this, not a lot, but I'll tell you what I know--Apache 1.x did not really do that, it followed sort of the Unix model of, it would just fork, fork, fork and create new processes.? But I believe Apache 2.0 does use some threading.? Like, they sort of rewrote parts of it to better accommodate operating systems that weren't Unix, right?? Because on Windows, if you do that forking model you're gonna fall over, because creating a process in Windows is a really heavy-weight thing, it's not something you wanna do accidentally.? So they did--in Apache 2.0, I think they changed their architecture somewhat to accommodate both camps.? But I'm unclear how much, how far that goes.? Spolsky:? Yeah, and in that particular case you have a very specific type of thread, which actually doesn't have to do much more than emulate a process that you used to have code for.? So at least you have a fighting chance of getting it right, because, 
Atwood:? Right.Spolsky:? Alright, where were we?Atwood:? No, no, one last thing on that.? So, Paint.NET, which we've talked about, it's a great app, Rick Brewster, who wrote that has a great blog where he talks about Paint.NET.? I'll always remember he wrote a really long blog entry about the threading stuff that he did for Paint.NET.? And graphics is one of the areas where you can actually get huge benefits from threading.Spolsky:? Gaah!?? Oh, you mean if you have two processors?Atwood:? Yeah, if you have more than one processor.? If you have multiple, six, eight processors, it scales really, really well, and it's one of those problems that's amenable, just very amenable to this approach of multi-threading.? And he said up front, "This is the most complex code in Paint.NET, by far," was the threading stuff.? And it just goes to show you that even when the benefits are very clear, versus unclear, like, "Well, why should we thread?"? It's really the most difficult code you may ever write, and it's a huge challenge, even when it's the right thing to do, it's a huge challenge.? So there's a lot--Spolsky:? Yeah, and the difficulty probably means that you're gonna get it wrong.? So in general, sometimes something may be the right thing to do, but there's something else you can do that you're more likely to get right.? Sometimes, you really have no choice, you absolutely, positively, like if you just need to be performant [sic] on large graphical operations on multicore systems, then you can either do multiprocessor, multithreaded, but you're gonna have to do one or the other.? You're just sort of left without a choice.? On the other hand, threading was initially proposed as a way of taking these object-oriented programs, and having the objects run on independent threads, and it was actually believed that you would do this -- I guess in the early days -- it was actually believed that you would do this simply for the convenience of not having any particular determinism as to what order the objects ran in.? Like, let's say you were writing a little game, and the game had sprites and the sprites were moving around on the screen, and there's your AI, and there's you, and there's your sound process, and there's the little musical things that are playing.? It's like, let's just throw each of those in a thread, and it's really convenient, you don't have to figure out how to schedule them in any way, you just let them each run in their own little threads.? And then all of a sudden you have code that's a million times too hard to maintain and get right. Atwood: Right.Spolsky: Ummm.... how did we get on that?Atwood:? Well, because--Spolsky:? Let's delete all that. That was boring.? Atwood:? No, no, no, I thought it was a good discussion, I don't want to delete it.Spolsky:? [laughs]Atwood:? I do want to come back around to Paulo, because I realize I talked about Paulo, he actually left a comment on our site, because I left a comment on Paulo's site, trying to have this conversation,? "What don't you like about it?" And granted, we can't satisfy everybody, but I was curious to hear what his thoughts were.? And I think a lot of what he's saying here is actually a comment on the blog.stackoverlow.com.? He wants us to talk more about the specific technology we're using in StackOverflow, and how we're using it.? So let me just, real briefly, touch on some of the stuff we haven't talked about.? So we are using SQL Server 2005 as the backend, which is kind of the default choice if you're a Microsoft developer, I mean, you're in the Microsoft stack, so you're gonna use the Microsoft database.? I have had pleasant experiences with SQL Server.? One thing I do like about it is, it's mostly self-tuning.? Because I know when I use MySQL, Spolsky:? Uhhh, no it's not!Atwood:? Well, OK--Spolsky:? No, just no, good Lord, you're gonna think that, and then one day there's gonna be some query that's unbelievably slow, and you're gonna be like, "What the heck?" And you're gonna spend like five hours working on it, and then somebody's gonna be like "Oh, did you try sp_updatestats?" And you're gonna run sp_updatestats, and all your problems will be cured.? And you'll be like, "well, why didn't it do that?"Atwood:? Well, that's one of my beefs, and I've actually run into this more with MySQL.? Like, MySQL, even with little, dinky stuff, like when I had that problem with WordPress, I had to go through, and basically reconfigure huge swaths of MySQL to get it to perform respectably using WordPress.? And it was a really simple database, there must've been like 20 records in the whole thing.? So I think that's disappointing.Spolsky:? When you say self-tuning, do you mean there's that wizard you can run that tells you what indexes to create and stuff?Atwood:? No, I guess I'm a little bit of a utopian, in that I believe the database should be looking at the queries that are coming in and making decisions about those without you necessarily having to do tons of extra work.? Like, say you start querying a column over and over and over, but the column isn't indexed.? Well, the database should go "Y'know what? I'm gonna put an index on this column, because you weren't smart enough to do that."Spolsky:? OK, that would be great, but SQL Server doesn't do that.Atwood:? Well, I know, I agree, and I want to be clear, I think SQL Server is slightly more self-tuning than MySQL, but not--you're right, at some level all these databases--and the worst is actually Oracle, where it's almost like Oracle they go out of their way to create this priesthood of people that understand Oracle at a very low level.? Because you almost have to tweak the crap out of everything in Oracle to get performance.? Have you ever actually worked with Oracle?? I did at a previous job.Spolsky:? I definitely agree with you.? And, you know what, SQL Server, I haven't seen the prices lately, but last I was looking it was one fifth of the price of Oracle.
Atwood:? Yeah.? Well, compared to MySQL, which most people effectively have used free -- although I don't think it's actually free, I think there's licensing behind it, and doesn't -- Sun actually owns MySQL now.
Spolsky:? I want to say two things about MySQL.? Well, I want to say something about MySQL and then I want to say something really really deep.? The thing about MySQL is that we support SQL Server and MySQL for FogBugz, and MySQL is the only database I've ever programmed against in my career that has had data integrity problems, where you do queries and you get nonsense answers back, that are incorrect.
Atwood:? You've actually got, like, bad answers back?
Spolsky:? Yeah.? Like you would do "select count from some table" and you'd get some large obviously random number that is not correct.? And, uh, the response to that particular incident was, "oh, yeah, that's just the version of MySQL that ships with that particular version of MacOS X and you need to upgrade to the latest version, and it won't have that bug."? But I've never -- but what occurred to me is MySQL has lots and lots of little versions like many of those open-source products and many of them have data integrity type bugs or data integrity type issues that would be shocking to anybody that's used to working with stable releases from Microsoft.
Spolsky:? Now the deep thing.? I just want to say the deep thing before we go any further, which is that what I just told you is just this one little anecdote of one thing that happened to me.? And it's a little bit distracting - lately I've become a little bit distressed at how, especially in our field and the field of blogging, these little anecdotes tend to become more than anecdotes.? Like, maybe, this is just one little tiny thing, and maybe I just happened to miss, because that wasn't the query that I did, that exact instance of this exact thing happening in SQL Server where MySQL got it right, or maybe -- basically, the experience I've had is just one person's experience and that's not a lot of experience to do a judgment call on.
Atwood:? Not enough data to make a decision source.
Spolsky:? Right.? It's just an anecdote.? And that's one of the things that frustrates me, actually, about blogging or just the Internet in general.? I was ranting to Jared last night, I practically couldn't go to sleep I was so upset because he was -- we were trying to figure out what fridge to buy for the beach house, and he was just sort of surfing the Internet, looking, seeing what people were saying about various fridges, and I wanted to read Consumer Reports, and he's like, "ah, Consumer Reports is so depressing because they're always testing things and they're always telling you that you shouldn't buy a SubZero because it has twice the incidence of breaking, and it's just depressing."? And I said, 
"well, you know, at least Consumer Reports buys all these fridges and they set them all up and they do some kind of moderately scientific experiment on all these fridges, and then they send letters to thousands of people asking them what kind of fridge they have and how often it breaks, and they actually compile this data, and when they're telling you that a SubZero is twice as likely to break as a General Electric, that's actual data.? But when you go to Amazon and you read the review for the General Electric fridge, you're getting information from a person who has experience with maybe four fridges."? 
You know?? It has no scientific background whatsoever and absolutely no reason to be answering this.
[38:06]
Now, what set me off on the whole thing was an article that appeared yesterday in the New York Times.? I don't know who wrote it -- a New York Times columnist was complaining about the decreasing level of service on american airlines.? Not American Airlines, but airlines in the United States.? As they cut costs, they're decreasing levels of service, and she illustrated this by saying that she was on a flight recently where there was no sink in the bathroom.? There was just one of those little squeezy things with the alcohol rubbing stuff that you use to decontaminate yourself after you go to the bathroom, but there was no actual sink sink with running water, and she thought this was a gross, this is terribly gross, and she says look how much they're cutting back.? And this annoyed me because there is actually no airline that has removed sinks from the bathrooms.? What had happened is she had flown on a little isty bitsy commuter plane which she obviously never did before and they never had sinks.? 
Atwood: I see.
Spolsky: So, because it's a 19 person plane which she didn't notice, I guess, and it's small.? And what was weird, first of all, is that this had gotten past fact checkers, but also, it occurred to me that her anecdote was just based on her experience in taking a few flights, and she had taken a flight on a large plane and then taken a flight on a small plane, and decided that that must be a cutback that american airlines are taking.? And you know, there are lots and lots of cutbacks, and they are removing the pillows and the blankets and the earphones and whatever they're removing all kinds of stuff, and that's true, they're just not removing the sinks.? There's plenty she could have complained about that would have been real.? So that was bad enough that the general story was kind of wrong in that particular way by applying an anecdote of somebody who does not have a lot of experience with taking flights and is therefore extrapolating from a very very small piece of the elephant and describing the whole elephant.? But then there was an entire train because this is the New York Times and they have commenting on this article - there were another 200 comments from all kinds of people who had also each taken one flight recently, and were extrapolating wildly, and saying crazy things like United Airlines is getting better when it's not, or Continental Airlines is the worst when it's not, or just all kinds of stuff that's just factually wrong, but because of the three flights that they took, and they didn't realize how badly they were extrapolating their anecdote onto reality.
Atwood: I think that's a fair point, but I don't know that the Internet makes that unique.? The Internet just makes it easier for you to get up on a pulpit and express your one data point.? The other thing that's interesting there --
Spolsky: And the New York Times would have run that stupid story if it had been a print paper long before the Internet came out, so that's true.
Atwood:? Yeah, yeah, so there's not --
[40:41]
Spolsky: So I won't blame that on the Internet.? There's just a weird tendency to make anecdotes into truths and I actually as a blogger I'm starting to feel a little bit guilty about this because I don't know how many times, I mean the standard model for a blog--not your blog, your blog articles are, like, researched, so I like them--but the standard model that I follow, and that a lot of people copy me, is to tell a little anecdote, some little story of something that happened to you, and claim that it's a model for what everybody should do all the time, and then try to make some kind of big meta "The moral of the story is, you should always do this."? And when you add up all those morals, it takes about ten minutes to find everybody saying everything every possible way.? Atwood:? Right.? Anecdote-driven development is probably a real challenge.? And I'm glad that you saw that, because you're right, I mean a lot of your early writing is hugely entertaining, and I think it has some excellent points as well, but you're right, it's anecdote-driven.? So you can begin to question the model, it's not exactly science.? And I think the model that I've been using is more of a meta-aggregation type model, where I go out and I look at a bunch of different people's opinions, and I try to sort of more-or-less summarize them, and then also maybe have my own position on it.? So you're right, it's sort of research-oriented, in the sense that I'm quoting a lot (people complain that I quote too much) but what I'm doing when I do that is I'm trying to show you different facets of this argument.?? And it frustrates me a little, like with the XML thing that I wrote, and the PHP thing that I wrote, that people see those as just straight up opinions, as like "Oh, Jeff says XML sucks," "Jeff says PHP sucks," so: he sucks.? But what I was trying to communicate is, there's pros and cons to this stuff.? And I obviously have opinions, because I'm a guy that has a lot of opinions, that's one reason why I have a blog.? But I'm trying to show you some of the nuances to it, like the pros and cons to it, by pointing out other people that have written about it, and places you can go to find out more about it.? And generally, I just want people to think about it more.? And that's why I wrote a blog post that I referred to earlier about "strong opinions, weakly held."? And the weakly-held part is where you're looking at the research and saying OK, this is what I think, but I could be convinced otherwise.? And Paul Sappho, who actually came up with that, he was the former director at the Institute For the Future, which is, I guess, some think-tank, actually wrote me about that, which was great, I was very glad to hear from Paul, but I was glad to finally have a name to put on this, because I really do do that, I'll get really excited about certain things, and say "This is the greatest thing ever since sliced bread!" And then like a week later, I'm like "Oh, that's all crap, this is the new greatest thing!" And rather than considering myself this total flake, who's very easily swayed by whatever--which may still be true--I can say it's the byproduct of strong opinions, weakly held.?? Spolsky:? Yeah, and some of this stuff is not actually--like, it's OK not to have a scientific answer, because you could derive it from first principles, so to speak.? Like, you don't actually have to go out and measure a million development teams and find the ones using JSON, the ones using XML, and the ones using YAML, and see which one is most successful, which would be an impossible scientific experiment, you can actually go back to first principles, and just look at the code, look at the data formats, and come to a reasonably educated opinion about the superiority of one or another.? Atwood:? Right.? I think if you look at enough opinions--the example you gave, about refrigerators, let's go back to that.? So the way I would approach that personally, I would view those all as datapoints, right?? Like, Consumer Reports is a datapoint, the Amazon reviews are a datapoint, like the spread, like how many people hated it, how many people loved it, how many were credible.? You end up having to consume a lot more of this to get a good answer, because you want to look at the big, big picture.? If you zoom in on this one user on Amazon who hated Sub-Zero, obviously you're going to get a wrong impression, or an incorrect impression, that person is not a scientist.? But if you consider it all, there's actually some great information that can come out of it, there's a consensus that can kind of emerge.? And if you ever use, like, Rotten Tomatoes--Spolsky:? Sometimes. And sometimes the consensus is that we have to invade Iraq! Because they have weapons of mass destruction.? 
Atwood:? Yeah.Spolsky:? And you're just reading every newspaper, and they're all saying the same thing.? And that's why I'm really--well, I don't wanna make this political in any kinda way, but it's not a refrigerator that makes this dangerous, or accidentally using YAML instead of JSON, what makes this dangerous is when your entire country goes to war because you don't have a good system of ferreting out the truth.Atwood:? Right.? Well, I think if you're going to war, somebody's lost their sense of humor, and their objectivity.? I mean really, at some really high, meta level, someone has lost their sense of humor.? And I think it is important for everyone to realize, these aren't religious issues, particularly a refrigerator, that's easy to see.? But when you talk about Iraq, it becomes almost like a religious issue, and that's really the danger, and I think that's the great thing about strong opinions weakly held, is, you can say "I'm not going to be religious about this.? I feel strongly about this, but I'm not going to fight you to the death about it."Spolsky:? I'll change my mind if I'm wrong.Atwood:? Yeah, show me data, right?? It's about the data.? And there's all these datapoints, and y'know, my wife is a scientist, and I think I share a fascination with collecting data of various kinds.? It's just really fun to go out and look at all the data points, and graph it, and come to a conclusion.? So that, to me, is what it's about: getting as many sources of data as possible.? And that's why the Internet is so great, and I can tie that back to Clay Shirky's book, there's so many more people giving you data that there's an endless supply of this data, so then it becomes a question of, how do you aggregate it, what do you do with it?? That becomes the challenge.Spolsky:? Interesting.Atwood:? So hopefully you guys get a nice fridge, I want you guys to have a nice fridge.Spolsky:? Yeah, I don't even know what we're gonna do about that.? Apparently the Sub-Zeros are--they're just really, really expensive, and they have two compressors instead of one, so they break twice as often.Atwood:? Weren't you telling me your fridge has a problem where you close it, and you can't reopen it because there's too much pressure?? Which I found very comical.? I have a mental image of Joel Spolsky like pulling on the fridge and being unable to open it.? Going "I found the Wasabi!? If we had the Wasabi in this fridge it would totally solve this problem!"Spolsky:? Yeah, it is that fridge, and that fridge actually died.? So in looking to replace it, we discovered that it's one of those really wide fridges, it's 42 inches wide, so wider than a normal fridge, and those are just like ridiculously expensive, just like shockingly expensive.Atwood:? That's hilarious, because--Spolsky:? So we're getting it repaired instead.Atwood:? --we had a similar problem with stoves, there's this geometric correlation between width of a stove - and I am not at all joking - and price.? It's hilarious.Spolsky:? It's factorial.Atwood:? Yeah, it's almost factorial, it's incredible.? And so you're right, what we ended up doing was building a facade, so that we had a smaller, narrower opening, and we could actually not pay $5,000 for a stove.? So I feel your pain, it totally correlates to width, that's hilarious.? So before we go too much further, I would like to get to the questions, I feel like we're--Spolsky:? The questions?? Oh yeah, let's do at least one.? Where are we? How do you get the questions? I click on here. Ah here is a, oh this is a good question cause we were talking about languages, I want to bring this one up. Here is a question about DSLs.
Tendayi Mawushe: Hi Joel, Jeff my name is Tendayi Mawushe in Dublin, Ireland, and as one of your two remaining listeners I would like to say I am certainly enjoying the podcast and I hope you guys have the energy to keep it going.? My question is a follow-up to the discussion you had last week on XML. ?I work primarily as a Java developer and certainly in the enterprise Java world, there was a time you pretty much couldn't do anything without writing a lot of XML. 
And to some extent in response to that a new idea has came up that is gaining popularity which is that of Domain Specific Languages or Language-Oriented Programming. Where you create little languages which take the concept of your problem domain and keep in as first class contracts.? And then you write your business applications in those little languages.? Just wonder what your thoughts are on that and where you might see that idea going in future? Thanks.
Spolsky: You recently did the whole XML jazz, so you wanna take a shot at that?
Atwood: Well I think in the general principal he is describing I am definitely for it.? Ah I mean I think there is going to be increasing specialization in languages and I think Ruby is an example of that.? That I think if you went back three or four years people would say you know, "what your creating a new language what are you, crazy?"? I mean you know what that sounds like right, Joel? [laughs].
But I think creating new languages they solve really specific problems that your having makes total sense. And I think eventually the software engineering or computer science or whatever you call it might actually evolve to the point where you'll have an explosion of these really narrow languages attacking your domain. Like say your doing embedded programming, 
Spolsky: Well they already exist.
Atwood: Yeah, and I think the popularity is gonna grow is my point. Its gonna be less of, "oh, you've got to choose Coke or Pepsi."
[49:30]
Spolsky: Well think of... Alright let's say you need a programming language for, to run phone switches. So, like, for example the Asterisk configuration file. There's a programming language, and it's a language in which you describe stuff about how the phone switch should work and it certainly doesn't need loops - 'cause that doesn't make sense in a phone switch.
Atwood: Right.
Spolsky: But it does need things like "forward calls from this number after 6pm to that number."
Atwood: And one thing that always bugged me a little was I enjoyed - even in the C# code that I was writing - I enjoyed using regular expressions 'cause I viewed regular expressions as a language specifically dedicated to dealing with strings and I thought that it did that extraordinarily well, right? I mean, granted the syntax is a little hard to read but if you're manipulating strings, regex is like such a joy. I mean really it's just fun to work with for me, and the same thing with SQL. I would meet programmers that hated SQL. How can you hate SQL? SQL is the language of data. Like saying you hate SQL is like saying "I hate data" which I can't really empathise with. I didn't see a problem "mixing" these languages, like you would see programmers write these long frameworks that did nothing but hide the fact that "oh you're using regular expressions? Well now you could just instance up this object and call this method and you don't ever have to - you can pretend that SQL and regular expressions don't exist!"? And I had a problem with that. And I feel that Domain Specific Languages are powerful precisely because they attack the problem specific to the thing you're trying to do.
Spolsky: Well I have a stupid question. Where are these coming from? Are these coming from Java programmers? This concept of Domain Specific Languages. Like what world is this from?
Atwood: I think, so, Rails -
Spolsky: Is it the Patterns people?
Atwood: I have no idea. I think Rails as attacking the Web problem. 'Cause Ruby's the language, right? And people say "Ruby on Rails" and they sort of forget that there's two specific things there. There's the language Ruby and there's Rails which is this DSL attacking -
Spolsky: I mean Rails is in Ruby. When you're writing Rails code you're not writing in some language that somebody's written a mini compiler for. You're actually writing in Rails code.
Atwood: Hold on, but the dynamic nature of Ruby means it's Lisp-like in that you can redefine the language. You know you can change the way the string works, like literally, like completely which is scary to me and I think scary to a lot of other people who are like "Wow, the string doesn't work like I expect it to any more." But you've built a little new language, right? Because you can redefine the fundamental way the keywords work at a very low level.
Spolsky: So is this coming from people like Ruby, or is it coming from people in Java looking at what Ruby is doing and wishing they could do the same thing?? Of course the one thing I can be sure of, it's not coming from Lisp. [laughs]
Atwood: That's all you do in Lisp. Lisp is like the -
Spolsky: Exactly! That was my whole point! [laughs]
Atwood: Yes, well Lisp is the canonical example.
Spolsky: The truth is, for somebody to stand up and say "we need Domain Specific Languages", seems to me like they're using a programming language which doesn't have a good enough way to express trees as literals. And C# and Java are firmly in the camp of not having a good enough way to create trees. So basically to me, if your language has a very very powerful capability of creating any size or shape of data structure literally in the code on the fly, that's how you're going to do your domain specific stuff/language/whatever. You're going to say it's a tree that has these things in it. And so because Java never had a good way to make a tree literal, it was just impossible, you would have to create all the objects and then assign them all to each other, and then create references to each object inside each of its parent's objects and you would just end up with thousands and thousands of lines of procedural code to try to describe, you know, a typical XHTML page, if you tried to do that as a literal in code. And so I think that the first thing the Java programmers did (and that's a little what this caller was alluding to) is the wrote really good XML class libraries and they used XML as the be-all and end-all language for everything and then they allowed these XML class libraries to somehow load those structures into memory and then do the domain-specific thing with them and then that way you could basically use XML as your syntax for any kind of Domain Specific Language you wanted to come up with, whether it's describing a world of games, or describing a bunch of rules for interest rates at a bank, or describing business process rules, or creating a fluid-flow model for a factory or whatever it may be. You would do it in XML and then you would parse the XML using the tools and then you'd get it to a data structure and it seems to me like the Lisp programmers would never have had this thought for a minute because it would never occur to them that you can't just create lists of lists and just nest them all as deeply as you want in their native language which they are using every day.
Atwood: Right.
Spolsky: And what's really cool, and the really cool thing about Ruby - and Python actually - is that they actually have enough syntactic capability that you can create code that is actually procedural but looks declarative.
Atwood: Right, agree totally. And that's hugely powerful.
Spolsky: Yeah, so it sort of looks like you're creating, like let's say that you are trying to create this domain specific language and you're doing it in Ruby code actually. The whole thing may look like it's a tree, it's declaring a tree and it's saying that thing is here and that thing is there and actually that thing has got to run at runtime, it just happens to look - because just the nature of the elegant syntax of Ruby and Python and the ability to override things at the right points and at the right levels - and the ability to just create, you know- does C# 3.0 -- sorry to ask such a stupid question -- does it have a way to create a list on the fly, even?
Atwood: They've been slowly sort of overloading the language to do dynamic-y [sic] things. Generics was one step in 2.0 and now one thing they've added is, I think it's called extension methods where if you decide "hey the String class should have this method called JeffsCrazyMethod()" that looks and feels like a native method but is in fact declared in your code -
Spolsky: Wait, wait, wait. A very specific question: I just need to make an array that has the values 1, 2, 3, those three values, one, two, three in the array. So I know in classic Java I need to declare the array -
Atwood: You can do it inline.
Spolsky: - and then I have to set the values of each of those three things. So in C# I -
Atwood: Yes. You can do that.
Spolsky: Can I nest things? Actually that's some of the dynamic 3.0 features, right?
Atwood: Right. Yeah you can do that, you absolutely can. There's a bunch of semi-cool stuff in 3.0.
Spolsky: So that's an improvement over where we used to be and once they get really good at that stuff you may never create another DSL again.
Atwood: I will say that, you know not to come down hard on Java again, we've already I think pretty burned on that -
Spolsky: [laughs]
Atwood: But I will say that C# and particularly Anders [Hejlsberg] - you know: the language designer - has been really smart about growing the language organically in ways that people want that reflect -
Spolsky: It kind of makes sense.
Atwood: - the new thinking about, OK, dynamic languages are great and we have the DLR, the Dynamic Language Runtime which is what IronPython, IronRuby are based on. And did you see recently that IronRuby, which is John Lam's project, actually I think was running unmodified Rails code, that's a new development. They actually got Rails up and running on IronRuby which is a huge deal. That was pretty recent news. So I think Microsoft has been really responsive to a lot of these new developments in sort of the developer community, maybe more so than people would give them credit for being Microsoft. Microsoft has been such a long-time developer company, if you think what was Microsoft's first product, it was like BASIC I think for the Altair, right? So this goes back to their very roots and I still think they do development stuff really really well so I want to give them their props on this. They've been I think keeping up very well with new developments such as Ruby.
[59:06]
Atwood: But that next step is the Dynamic Language Runtime, so I see what you're getting at, they are bolting stuff on --
Spolsky: No, no, I'm even talking about just type inferencing, and they've kind of added things, you know, and it's, you can sort of see how it's possible to do these things, but you kind of can't do what you want to do.? I wish I could give a better example of that.? For right now, the key thing that I remember is that you don't have to declare the type of something, however, it'll infer it in many many cases, but the minute you take that thing whose type you haven't declared and you want to infer, and you try to pass it to another function: you can't do that.? And so whole categories of things become impossible for no reason.
Atwood: Well, I think what you're seeing there is you want to go fully dynamic, right, you don't want this fake pseudo--
Spolsky: No, I don't want to go dynamic, I want to go type inferred.? There's a difference.? I want the compiler to figure out what type something is at compile time, which is what it's doing, and I want it so I don't have to type the actual type.
Atwood: That's the very nature of dynamic languages.? You don't have to type anything you don't want.
Spolsky: Yeah, but there's a difference between a dynamic language and type inferred.? A dynamic language is one where it's not decided until runtime what type something is and that has a performance penalty.? A type inferred language is one where it's decided at compile time but it's decided based on all kinds of inferences and logical reasoning that you do about the code.? That thing must be an integer because a minute later you're going to add something to it, so it's got to be an integer, so I know it's an integer then I can compile it as an integer and make it run just as fast as if it were native code without any performance penalty, but without requiring you to declare that it's an integer, we can infer that.? So C# is not yet doing the dynamic thing.? What C# is doing is type inferencing in certain cases in certain situations.? But it's so narrow as to be frustrating.? And I was kind of disappointed in that, I was expecting it to go a lot further.? I think they're now, I really do feel like C# in some ways -- it's still the main language that I use so let's not get carried away -- but I do feel like it's a generation behind Python and Ruby, and certainly a couple of generations behind Haskell.
Atwood: Well, I think, well, that was my point, is that I think if you feel strongly about that then IronPython and IronRuby, that's what that's entirely about.? These are from the ground up, and they're running on the--Spolsky:? IronPython is pretty freakin' amazing! Did we talk about this last week?? IronPython is actually a better ASP.NET programming language than C#.? Atwood:? Oh yeah, I don't doubt it.Spolsky:? Because you don't have to keep doing this form.findControl thing, you can just put the name of the control.? And it'll - because it's Python: it's dynamic.Atwood:? Right, I agree, and that's sort of what I was getting at. Well, we should probably cap it here, because I don't want to get to far over an hour. But there's a nice discussion on performance I want to have, maybe next week.Spolsky:? Cool, OK.? What else did we have to talk [about]?? You know what, I did go through a whole bunch of the emails that we got, and we have a whole bunch more, and I'll play them and I had four for today, and I didn't really get to all of them.? But if you're listening, y'know what would be cool to call in about?? We didn't get a lot of answers about this.? What system do you use for managing passwords.? Because I don't think I've gotten a good answer to that.Atwood:? We got a lot of textual responses.? We didn't get a lot of audio responses on that.Spolsky:? Yeah, I have no use for text.? I can't read.? [laughs]Atwood:? [laughs]Spolsky:? Get your little mp3 recorder, and tell me what method you're using to keep, in a secure fashion, all your passwords to all these websites, and make it available on multiple computers at home and at work and all that kind of stuff.? And maybe even Mac/Windows would be good, and available on the Web in an emergency, and so on and so forth. If you have a good solution--Atwood:? Yeah, email that to podcast@stackoverflow.comSpolsky:? Like I say, record an mp3, Ogg Vorbis, .WAV, or use that BlogTalkRadio thing (which is awesome) a lot of people are using that, works very well, it's just a phone number that you call and records a little mp3 for you, and you get the link to it and send that to us, and what else, any other business that we have?? So, this is podcast episode number eight, which means that we have three to six weeks until we're shipping the first beta of StackOverflow.Atwood:? One tiny bit of business.? I did add one more member to our team, it's another person that I used to work with, because I have cronyism really badly in the way that I do my projects. Spolsky:? Right, that's coming out of your salary.Atwood:? We have added another person to the team.Spolsky:? Who's that?Atwood:? His name is Geoff Dalgas, and I worked with him in Colorado, through '99, and he's a very, very smart coder, and I'm very excited to have him on board.Spolsky:? Alright, we got three people, that means it's two to four weeks, instead of three to six weeks.? Totally makes sense.Atwood:? Mostly just trying to compensate for my own inadequacies, and Geoff is gladly helping me with this. Spolsky:? I was down at the construction site for our new offices today, and they gave me a schedule, and I'm like, "Well, when are we moving in?" And they guy said, "Well, y'know, October 15th." [laughs] October 15th, oh my God, we were hoping August 1st.? And I said, "Y'know, October 15th, we're gonna be homeless on September 1st, so is there any way we could move that up to September 1st?"? And he's like, "Mmm... alright."Atwood:? [chuckles] Just like that.Spolsky:? Yeah, and so what he was thinking, obviously, is, "You can believe September 1st if that makes you happy, but you're still moving in October 15th." [laughs]Atwood:? Well, what are you guys gonna do then?Spolsky:? It's just a disaster.Atwood:? What are you guys going to do, seriously?Spolsky:? Well, the main reason this thing's so long is because they are not yet trying to get--there's these things called lead times, in construction, where you like order a part, like a particular kind of vent, or a particular kind of light, and the person who makes it says, "Well, there's a 14-week lead time on that." Which means you can't have it for 14 weeks.? And they seem to have the philosophy that if this happens, that gives you fourteen weeks to relax at the beach, until the light arrives.? And my approach is, go back to the light vendor and say, "What kind of lights do you have that are similar to the light that I like, which are in stock?" And they say, "Oooh, yeah, I guess we could do that."? So a lotta the reason that their schedule was so absurd is that they are not yet aggressively trying to, let's say, "manage the vendors," so as to bring those long-lead items in shorter, or replace them with other items, or just basically do everything they can to get things moving faster.? So hopefully they'll do some of that, and we'll be in sometime before October 15th.? But it's kind of a bad situation.Atwood:? Yeah, OK, well, I'm sure you'll keep us updated, and I'm sure the fine people at Fog Creek will have someplace to work, even if it's only a foldable desk in the hallway somewhere.Spolsky:? [laughs] Kind of something like that, yeah.? Anyway, the hallway of your apartment, right?Atwood:? [laughs]Spolsky:? Thanks a lot for listening, to all you peoples out there.? Send us more mp3's with your questions, limit them to 90 seconds, please, podcast@stackoverflow.com, see you next week!
Atwood: Bye!
Intro, advertising
[0:51]
Atwood:??? Uh, the WWDC is going on, right? The Apple conference.
Spolsky:??? Yeah. The Apple pilgrimage to the Mecca.
Atwood:?? That's right, I think there was some new product they introduced. I don't know what it was; I haven't heard anything about it yet, but I think there might have been a new product introduction.
Spolsky:??? Our listeners will probably know more about it than us, 'cause by the time this hits the airwaves...
Atwood:?? Yeah. That's right, that's right. So it was fun; I got to meet a few Apple people and... 
Spolsky:?? Oh, did you actually go?
Atwood:?? Oh, well no I didn't go to the actual conference. There was a... just sort of a...
Spolsky:?? Oh, there was just, like, a really cool line outside that you just hung out at?
Atwood:?? There was a little event that I went to. I was actually invited by Wil Shipley, who wrote the Delicious Monster software.
Spolsky:?? Oh yeah, that's awesome!
Atwood:?? Yeah, and also he is a user of FogBugz as I found out -
Spolsky:?? Yep.
Atwood:?? - when I met with him. He had very favorable things to say about FogBugz, so...
Spolsky:?? Oh good.
Atwood:?? Yeah, and when I talked to him I told him, "yeah, you know.. " talking about Joel, and he's like, "oh is Joel here?!" and I said, "no no no, Joel's in New York." [chuckles]
Spolsky:?? I have people for that. I sent my people.
Atwood:?? To actually attend these events?
Spolsky:?? Yeah, there were a couple of FogCreek people there.
Atwood:?? [chuckles] Yeah, for some reason Will kinda reminds me of you a little, I don't know why. Maybe it's just the whole general attitude, I guess. He's very outspoken.
Spolsky:?? Is he like stunningly handsome?
Atwood:?? [laughs] He's just very outspoken, very opinionated. But yeah: great guy. So, that's where I was at.? I got to do that.? That was kinda fun.? So, one thing that I posted this week and got a lot of feedback on, and maybe... I'm sure you'll have an opinion on as well, was as we work on StackOverflow we're actually building a lot of functionality in JavaScript.
Spolsky:?? Oh yeah, just go for it.
Atwood:?? Yeah, 'cause it's just really mature now. There's so many common frameworks for using JQuery. But, a lot of things we want to do... it just seems very natural to do it in a kind of semi-dynamic sort of way. The editor we're going to use - has a very unfortunate name, WMD, but it's based on MarkDown - and it has a real-time preview and that's a component that's already built.? But that's Javascript.? And then some of the other things we're going to do, such as when you ask a question, it's gonna, out of band, go out and query to see if other questions similar to the one you're asking have already been asked. That's another thing where it just seemed sort of natural to just do it as you type. So yeah, so one of the questions I posed in the blog was, you know, "is it OK to, at least when you're asking a question and when you're actively participating [Spolsky: and editing] and editing, exactly, is it ok to basically require JavaScript?"? I mean, I'm sure.. the site won't be "broken" if you have JavaScript off but it will be probably a pretty poor experience.
Spolsky:?? Does anybody really turn off JavaScript nowadays, and like successfully surf the Internets?
Atwood:?? Yeah, I was going through my blog...
Spolsky:?? It seems like half of all sites would be broken.
Atwood:?? Yeah, and I kinda asked that question in 2006.? I was like, "well who really browses the internet with JavaScript off?" and now, it's like 2008 and it seems even more, sort of ridiculous that someone would do that. I think there are obviously accessibility concerns that...
Spolsky:?? I'm tempted to scrap IE6.
Atwood:?? I think we'll work on IE6.? I'm not too worried about the visual look, my feeling with IE6 is as long as the site kind of works, it doesn't necessarily have to look "right"
Spolsky:?? Well, you'll find all kinds of little weird JavaScript weirdnesses with the editor and stuff and it'll, at least our experience is that it takes a lot of time to backwards test all those things and get them working on IE6.
Atwood:?? Yeah. Yeah, that was one of the weirder news items that came out of the WWDC was Mobile Me, according to Apple, doesn't support IE6 and that was, I guess, kind of news. But yeah, IE6 is generally reviled sort of like the old Netscape 4.7.
Spolsky:?? And apparently... did you hear the reason why Mobile Me doesn't support IE6? 
Atwood:?? They're Apple. Do they really need a reason for doing the things that they do?
Spolsky:?? The reason is that there's some kind of bug with cookies from two-letter domain names, 'cause it's me.com
Atwood:?? Really? 
Spolsky:?? Cause IE6 had a bug. That's what I heard.
Atwood:?? Really? That's interesting. I didn't know that; I had never heard that explanation yet.? 
Spolsky:?? One of these rumors that floats around. 
Atwood:?? Oh, and also a pronunciation thing, because of course I'm the bad pronunciation king. I have said, "OS EX" before, which is wrong. It's actually.. 
Spolsky:?? No, they will.. yeah..
Atwood:?? It's "OS TEN," and I apologize to everyone who was.. whose ears were offended by that 'cause I just didn't know. 
Spolsky:?? I say that too. I can't remember. It's one of those things that I'm never gonna be able to remember.
Atwood:?? I found a short post... 
Spolsky:? Life is too short to worry about what they call their operating system.
Atwood:?? You know, it was funny, their "proof" for it, which was very amusing, which I agree with actually was that in OS X's speech synthesis module, if you type "OS" and the character 'X' it'll actually read it as "OS TEN." 
Spolsky:? I'm sure, I'm sure, I've heard Apple employees say "OS X."
Atwood:? Really?
Spolsky:? Yeah.
Atwood:?? Yeah, well that's a, you know, according to several sources - authoritative sources - is that it is, in fact, "OS Ten" so I'm trying to say it the right way. So I apologize.
Spolsky:? Well, you're gonna have to remind me 'cause I don't have the brain cells for that particular application right now.
Atwood:?? I don't know why I was even searching for that. I think it was just one of those things. It's weird, I'll just be working throughout the day and I'll just have some random thought like, "Oh, I gotta look this up" and of course, it's totally interrupting whatever it is I'm doing. It's very much an Attention Deficit Disorder. But hey: I learn useless things like how to pronounce, you know, OS X.
Spolsky:? There's an article which is probably not worth reading, but the title says it all, by Nicolas Carr called, "Is Google Making Us Stupid?"
Atwood:?? You know, you and I are on the same wavelength! I have that up on my screen, I totally was going to talk about that.
Spolsky:? Alright, well I guess I'd better read it.
Atwood:?? It's really good. It's really good. 
Spolsky:? Now remember: Nicolas Carr, the only reason you've ever even heard about him is because he wrote this book claiming that all these companies spending money on IT projects are a waste of time because all they're doing is fussing around with the fonts and typesetting their PowerPoint slides and they're not actually adding any productive value in any way.
Atwood:?? Yes.
Spolsky:? So that was sort of his first major... getting himself on the map by claiming that all this, all this IT work we've been doing - adding GUIs and wizzy things and fonts - just creates make-work which doesn't actually create any kind of long-term competitive advantage for any particular firm. 
Atwood:?? And that, just to be clear with our audience, that book was called "IT Doesn't Matter" as in 'it doesn't matter.' 
Spolsky:? Yep.? So "Is Google Making Us Stupid?" is an excellent follow-up probably to that... kinda the large picture.
Atwood:?? Yeah, no he's a brilliant writer.? I mean, this particular article is in "The Atlantic" so you know he's a real writer because if you get published in "The Atlantic" then you're actually a writer.? So what I do is just sort of hacker-y.? He's really good.? And actually he has linked to my blog before which is always a little thrill when people really, really good link to your blog.
Spolsky:? But not from "The Atlantic?"
Atwood:? Pardon me?
Spolsky:? But he linked to your blog, but not from "The Atlantic?"
Atwood:? No no no, from his own blog which is called "Rough Type." But it's really funny that you bring that up because I literally have that up on my screen and that article - which I did read, actually last night on BART on the way back from this WWDC party - it was interesting because it was saying, you know, the way you consume information online sort of changes the way that you actually approach reading fundamentally, which I think you can make kind of a case for this because he had a lot of - it's somewhat anecdotal, right? - but he also cites this study, which was really interesting (in the UK) and I'll read you just this one little paragraph. So, in this study - this is actual science, right? - they said, "it is clear that you are not reading online in the traditional sense. Instead, there are signs of new forms of reading emerging as users "power browse" horizontally through titles, contents, pages, and abstracts, going for "quick wins," it almost seems as though they go online to avoid reading in the traditional sense.
[9:10] 
Spolsky: That used to be called speed-reading and they used to sell courses on television. Late night you would tune the TV and there would be a person advertising a course in speed reading. So i'm not sure this is entirely completely new-Atwood: No no noSpolsky: -this activity.Atwood: I agree this is not at all new.Spolsky: "Power browsing", instead of "speed reading."Atwood: It's funny I remember talking to my dad at one point. My dad and I used to be, .... I was always an avid reader when I was a kid, and my dad and I would go to the library and get books for each other and stuff like that.? And my dad asked me. "Oh what books you have read recently?" and I said "you know haven't read a lot of books. I spend most of my time reading stuff on the Internet." And that still is kind true.? I mean I'm reading Clay Shirky book for sure. But-Spolsky: Yeah.? Have you finished that yet?Atwood: -the number of books that I read is very very small now.Spolsky: Have you finished Clay's book?Atwood: Not not yet, I'm about halfway through now but god I love it. The more I read it the more I like it. and I did follow up with Jarrod from the StackOverflow team. I gave him my original copy of that book while he was here. So I am following up on his homework 
Spolsky: Err, no it is a complete waste of time. I love 37Signals - more power to them. What they are going to get: they are going to get people doing this. Half of them are going to be people who would of signed up anyway.? That are making their own account and paying themselves their own affiliate payment just as a way of scrounging a few pennies.? Umm, it's just a huge waste of time.
Atwood: So you don't like affiliate programs at all? In any way?
Spolsky: They just don't drive any business. No.
Atwood: It's hard for me to take that seriously because I got to tell you I derive a significant percentage of my income today from affiliate traffic on Amazon.
Spolsky: It's just Amazon.
Atwood: Well...
Spolsky:  Amazon is different. And the reason Amazon is different is that Amazon sells millions and millions of products to millions and millions of people and there are millions and millions people with Amazon links and Amazon accounts and millions and millions willing to buy from Amazon so if you link to a book at Amazon its going to be some substantial percentage of people that click on that link already have an Amazon account are interested in the book, wanna buy from Amazon and do it. But with 37Signals they are not at that scale, they don't have enough products really for it to be worth it for anybody to make a lot of effort building these affiliate sites. What we got, I'll tell you why, because we did it and it was a waste of time and every month I had to write all these $17 dollar checks and mail them to four corners of the earth. It was an enormous waste of time. What we discovered is that the biggest category was people - of actual affiliate payments - was people who set up there own affiliate account to make their own purchase. Which you can make against the rules but, you know, you can't really police that stuff and who cares anyway? So...
Atwood: Amazon polices that very well actually, but go ahead.
Spolsky: Yeah, well they police it because it's kind of a big deal. I mean it's their... a big thing. The thing about Amazon is it's sort of like, it's such a huge exception in e-commerce. It's the only affiliate programs that works, literally. I mean, can you think of any others?
Atwood: Well, I participate in several others. I can tell you what they are.
Spolsky: Do you get...
Atwood: ...eBay just launched surprisingly - they had outsourced theirs to Commission Junction, one of the biggest sort of third party ones that would do it if you want to out source the whole... like the writing of the $17 checks you would go to Commission Junction. They become a middle man, they offer your catalogue whatever it is and people can do it through there. So I've done stuff through Commission Junction, specifically through Newegg 'cause I buy a lot of computer hardware and I tend to recommend hardware - you've probably seen me post about that in the past. So I affiliate it through Commission Junction. 
[48:27]
Spolsky:? I think a lot of people people misunderstood what Seth was saying.? He basically said, and I'm going to read the quote from Seth's website:?
If I need an animator, I can find the world's best animator. If I need a bond to insure my movie, I can find the best broker at selling completion bonds. 
[...]
Not the second-best or someone who will try really hard or someone who is pretty good at that and also good at other things. [...]
When choice is limited, I want a generalist. When selection is difficult, a jack of all trades is just fine.
But whenever possible, please bring me a brilliant specialist.
and I think where Seth is coming from here is not talking about whether a person - and this I think Mathew is where you're misinterpreting it a little bit - there's a marketing concept (which Seth is obviously familiar with, being a marketing expert) called positioning and the concept of positioning came from one of the books on my list - I think - by Ries and Trout which is called (surprisingly) Positioning, and the idea is that a given product or a given company or a given product line has to occupy exactly one slot in people's brains.? So, for example, Hertz can be the car rental agency; Avis can't have that slot.? And so Avis had to come up with a different slot, they came up with "We're number two, we try harder" and they occupied a slightly different slot in people's minds.? And similarly, Microsoft with Windows came up with "We're the operating system that runs all the computers on everybody's desks" and so that wasn't available when Apple needed an operating system [sic] and so they have to be the cool home alternative computer that's really powerful and sleekly designed and so forth and they're trying to occupy kind of a different position in your mind.? So similarly you know, if you were going to go to a restaurant and you wanted some Thai food, would you go to a Thai restaurant, or would you go to a restaurant that sort of had Thai, Chinese, Japanese and Mexican food all on the menu.? I think you might guess that the Thai restaurant is going to be a little bit better at Thai food, that's what you really want.
[50:41] 
Atwood: What if you want a burrito on the side, you might go to the-
[50:47] 
Spolsky:? [laughs] no, you don't want a?burrito, no you want Thai... Yeah, so the marketing experts always have this approach that it's better to have a narrower product rather than a wider product for many reasons.? And in fact, one of the reasons that so many of these Web2.0 companies fail is that they try to be too horizontal, they try to have a product for everybody and they end up getting nobody, because they're just not being specific enough and people have very specific needs, and if you have a very specific product that meets someone's specific need, that person will find you - especially in the age of Google - whereas if you have a product that solves everybody's problems then you won't, really.? So for example, if you're a plumber, and you're just getting started, and you're putting a big yellow-pages ad, you can just say "I'm a plumber, I can do anything.? I'm kinda good at all kinds of stuff, and I'm just learning, but I'll be able to do just about any plumbing task you have," and you can put that ad in the yellow-pages, and you'll look just like every other plumber that's there, and you won't get any phone calls.? On the other hand, if you say "I really understand those German Dornbracht faucets.? I'm an expert on Dornbracht faucets," it might seem like you're reducing the potential audience of customers that you have, but what you're actually doing is--you have no customers, what you're doing is, you're now attracting a bunch of new customers who will say "Oh, good, I got a Dornbracht faucet, I'm gonna call that plumber, because that's the plumber who knows about my kind of faucet." And all of a sudden, you start getting calls.? And that's sort of a general marketing principle: if you're having trouble attracting an audience, the first thing to try doing is figure out if you could just narrow to a much more specific audience and cater specifically to them, provide a better product for them.? So I think that's what Seth was talking about.? I don't think he was really talking about--like, the CEO of a company, especially a startup, does need to wear every single hat, and needs to be the accountant, and the programmer, and the system administrator, and the payroll specialist, and the HR specialist, and all those things, the marketer, for their company.? That's definitely true.? But I think a startup or a young company is always gonna do better if they can narrow the number of potential customers that the serve, rather than trying to go off after a horizontal market. ?Atwood:? Right, I think that's a great point, and I love Seth, I think he's got a lot of really interesting things to say, but sometimes I think he does a little--he does engage a little bit in the marketing doublespeak.? I mean, he does it in a very cool way, that makes you feel sort of enlightened, but it's interesting on this post (you sent me the link out of band, which was nice) he puts a whole coda at the end explaining his position, because I guess a lot of people misunderstood what he was saying.? And basically, he's saying two things at the same time, he's not really taking a position, he's saying it's OK to specialize in being a generalist.? Well, what does that even mean?? Specialize in being a generalist?? Now we're in 1984, right?? But still, it is good to think about this stuff, as long as you don't take it too seriously.Spolsky:? Specializing in being a generalist would be being the kind of person that's like maybe a management consultant, where we hire you because you're willing to see the big picture, and you know a little bit about everything, and you can actually come in and give sort of a general solution.? Or, let's take an example of, a startup company may need somebody to be a CEO who is a generalist, and knows about lots of these things, and that's what they're good at.? Whereas maybe at another phase in the lifecycle of that company, they might need somebody who's really good at sales, or marketing, or technical skills, or something like that.Atwood:? Right, and then to your previous point of where it really is valuable for a business perspective to specialize, I like Larry O'Brien's blog.? He wrote a neat entry where he talked about how his blog helps him get business, and he pointed out something interesting, that he made this one blog post about Sabre, which is, I think, the airline reservation software, it's been around a long time. ?Spolsky:? Yep.Atwood:? And that single post had resulted in more business for him than all--he had been very into, I think, pen, the pen stuff he had been doing, and he was like "Yeah, I spent a lot of time on this pen stuff, but it never really resulted in any business for me.? Whereas, this one Sabre post I made resulted in all this business for me."? So that's an example of specialization, right?? The people who care about the Sabre stuff found him, probably through Google, and saw that he knew about it and were hiring him, and so on and so forth.Spolsky:? There's a real tendency, you'll see a lot of young people that start out as independent IT consultants, and they'll take any job, they just want a job, and so people say "What do you do?" and they say "Well, everything, really.? I can learn any programming language, any API, whatever you throw at me I'll learn it, I'll be good at it, it's fine, I can do all this stuff.? Do you want me [to be] a system administrator, do you want me to write code, do you want me as a DBA, I can do all that stuff, and I'll learn it, and I'm young, and enthusiastic," and this is just not appealing.? Whereas if they came out on the very first day and said "Y'know what I'm an expert at? Stored procedures in Microsoft SQL Server 2000.? I don't really know much about this 2005 thing.? And I don't know about functions.? Or views, or SELECT statements.? But stored procedures?? Boy, do I know that cold!"? And y'know what?? There's gonna be somebody who needs a consultant and wants some help on stored procedures in SQL Server, and they're gonna find you.? And now you have a customer.Atwood:? Right.? Well, that does run contrary, because if you just call the sales department, the answer is always "Yes," right? Spolsky:? Well, OK, if you get somebody calling you, fine.? There's a difference between sales and marketing.? The sales department always says "yes."? See, there's a tendency to think the audience of my potential customers, the number of people with a problem, the percentage of people in the world that have a problem, times the problems in the world that I can solve, and so the larger the number of problems that I can solve, the larger the number of people that are my potential customers, and therefore, the more customers I should have theoretically, and that seems to make a lot of sense.? Unfortunately, you haven't really explained how these people find you, and why they would want to use you.? And it's real easy to specialize.? You can be the restaurant that has outdoor seating, so you can bring your dog--and you can just put in an ad, saying "The food's not so good, but boy are we dog-friendly!? We'll bring your dog a little bowl of water and a treat while you eat your hamburgers."
[56:57]
Atwood:? Right.? Yeah, no, great point.? And I do love Seth, he's got a lot of really interesting things to say.? But I think that sometimes there's a little bit of double-speak there.
Spolsky:? The marketing
Atwood:? Yeah.? It is marketing, you know?? Very good marketing, it's the kind you sort of like yourself for reading it, but it's still marketing!? You know, let's be clear about this.? But yeah, so let's do another question, that was a really good one.
Spolsky:? Okay, well here's an answer actually:
[57:22] 
Jim McKeeth: Hello Jeff and Joel, this is Jim McKeeth and I have the solution to your password storage challenge: what you do is reverse your premise, instead of trying to synchronise stored passwords across multiple computers, instead you need a reproducible way of generating a secure password.? And the solution to that is passwordmaker.org, it's an open source program that uses a secure hash, your super-secret password and the URL of the site you're wanting a password for to regenerate the same password every time for each site.? Since it uses a hash you can't reverse it, they can't ever get your super-secret password, all your passwords are independently secure and reproducible.? Check it out: passwordmaker.org 
[58:11] 
[59:06]
Spolsky: Wait, in your brain? I have like 600 websites that I had to make accounts for. Atwood: Right but somebody made point in a comment in a post I made, which was that you only really have 3 passwords; You have the super secure one you're going to use for the things that matter, like money stuff.Spolsky: Yeah.Atwood: You have one you use for stuff that is kind of important, you want a password that doesn't suck too much there. Then you have passwords for sites that, really, does it even matter? If someone compromised your password to this dinky little, like hammocks.com? Does that matter?
[59:44]
[1:00:32]
Atwood: Well I should point out, it's actually now "www", it's just passwordmaker.org.Spolsky: That is true. The www, it...Atwood: [laughs] Spolsky: What happened?Atwood: I had a funny blog entry, well I thought it was funny, this show "Home Movies", which was an animated thing...Spolsky: It's a sex site!Atwood: What?!Spolsky: No, I'm just kidding. Just kidding.Atwood: They had a whole skit about whether you should say "www dot",? you know, I just found it very amusing. My wife and I, we would quote it to each other all the time, so I'll put a link to it in the summary. But yeah, it is annoying that when you talk about sites, you actually can get it wrong. Like "Oh, I said www but it doesn't actually belong, doesn't begin with www", or vice-versa, say you said "passwordmaker.org", or "well, it's actually www.passwordmaker.org" but is that inferred, right? Do you really need to say it? Is it really... I don't know. The whole thing is just annoying. You know, I wish we had kind of just decided on one or the other and everybody did it that way.
[1:01:27]
Atwood: What?Spolsky: "google.com"Atwood: Oh, right. Of course.Spolsky: And I think number two was Yahoo. [laughs]... The reason, they finally figured out, is because they have a little bit of Javascript in the page, that moved the focus to the search box. So it's not that people were searching for "google.com" on google.com because lots of people are retarded in that particular way. It's that they just started typing "google.com", thinking that the focus would be on the address bar, like it's supposed to be, only to discover that Google had stolen the focus and put it in that box.Atwood: Right. Oh, the focus-stealing. Man, that drives me nuts. Spolsky: Right, they actually take the keyboard focus away from the address bar and put it in the search box, which just saves you reaching for the mouse, so it's a nice thing, but...Atwood: I think that's... I know we're at one hour, but I want to spend 2 minutes talking about that, I did have a blog entry talking about "the evils of focus stealing", which can be really traumatic... depending on what you're doing, but...Spolsky: Yeah, you could be typing.
Atwood: The browser one is particularly egregious, because the default Google search page in Firefox does that and I had to finally turn it off... [phone rings]... Sorry, we'll have to edit that out. I forgot I had a phone here, I get so few calls.Spolsky: [laughs] That was me, actually. [laughs]Atwood: I had to actually change the default behaviour of Firefox, in that regard. I use about:blank, that's always my homepage, because that's what I like. That's my homepage.Spolsky: Yeah, I used that for a long time.Atwood: Yeah! But it was really traumatic because I would fire up a new browser, press Alt-D, to go to the top, and all of a sudden I'm typing in the Google search box. Spolsky: Or half the letters are in the top, and then half the letters are down in the Google search box, depending on how the Javascript thing launches up.Atwood: [phone rings] Right. Oh, this phone: it's not good, it's not good.
Spolsky:? Something even more annoying is the -- just throw it at the wall, real hard.
Atwood:? It's actually a call I need to take.? So let's end it just here.
[1:03:25]
Spolsky:? Let's end it just here.? You have been listening to StackOverflow podcast number nine, if you have feedback, suggestions or anything you want to talk about, record in ninety second sound clip, MP3 or Ogg Vorbis or whatever the case may be and email it to podcast@stackoverflow.com? Thanks for listening and we'll see you next week.
Atwood: Yep, bye.
[1:03:45 Ends]
Outro, advertising
[1:04:41]
  
Intro, advertising
[0:59]
Spolsky:?? Hey, what's up?
Atwood:?? Just working on StackOverflow: the usual things.
Spolsky:?? Really? [Laughs]
Atwood:???Yes.?Contrary to popular opinion, we do actually do work on the project.?I know you don't believe me, but it does actually...
Spolsky:?? What is this project again? Is it a kind of a of podcast? [Laughs]
Atwood:?? Yes, its a kind of a website we're building.
Spolsky:?? That reminds me, we should probably take some time to explain to some of the new listeners, the IT Conversations listeners, who suddenly got our podcast shoveled into their iPods without asking for it a little bit about what we're building and what the point of the podcast is.
Atwood:?? Oh sure. Absolutely. So StackOverflow is a joint venture between me and Joel where we are trying to combine our communities, our respective sort of... programmers and those that love programmers. And actually build a website that serves that community. Its sort of built by them, for them. And it's specifically to address the growing number of programmers that aren't really learning programming from reading books any more, they're learning programming by doing stuff - loading their IDE or TextMate or whatever they use - and just trying things.? And when something doesn't work, they then do a web search to find out "why didn't that work", "how can I learn more about this" [Spolsky: Yep.] and so StackOverflow is really there to feed those searches, and it's not by us, me, or you, but really everyone. So as little problems come up you'll post a question on StackOverflow and it's a very low friction, very simple website, not a lot of long-term commitments, no sign-up.?Very Wikipedia like in some aspects, and our hope is that you'll find... be able to post your question and also find answers to questions you have while programming on the site.
Spolsky:?? Cool.
[2:48]
Atwood: Yeah, and...
Spolsky: Yeah.
Atwood: I have my movie pitch, hold on, my movie pitch, which is: It's sort of like Wikipedia...
Spolsky: The elevator pitch?? 
Atwood: [Laughs] It's like that, but I like to call it the movie pitch, you know, they always talk about movies it's like: Driving Miss Daisy meets The Predator, right?
Spolsky: Right.
Atwood: So I'm gonna call it...
Spolsky: "It's The Graduate ten years later"! [Laughs]
Atwood: That's right, so it's like, Wikipedia, meets blogs, meets Reddit/Digg. And also a bit of Experts Exchange but we have very ambivalent feelings towards Experts Exchange.
Spolsky: We don't want to mention them.
Atwood: Yes. Sorry. I've already done it.
Spolsky: First of all they put that annoying hyphen in there, so it used to be Expert Sex Change and then they put in hyphen in to disambiguate
Atwood: Yeah. They should just embrace that identity, I think.
Spolsky: Exactly. That was sort of kind of funny. 
Atwood: [Laughs] 
Spolsky: Yesterday I had an error message and I tried typing in and went to Experts Exchange and it said "The answer is only available if you pay" but of course, sometimes, if you just keep scrolling down, you'll see the answer anyway.
Atwood: Well, I will say that some of the people at Experts Exchange do have a sense of humor because they actually saw what we were doing, someone did in their community and invited me to their conference which is, like, in August and I forgot where that is, actually...
Spolsky: Where is it?
Atwood: Yeah, that's kind of important. [Laughs] But I thought I might go because it seams like at least a couple of people had, you know, some sort of a sense of humor and they realised "Hey, you know, we're not all necessarily competing, it's a very large pie", which is the way I still view it.
Spolsky: You know, a lot of the people that contributed there are gonna contribute to our site. Heh heh heh.
Atwood: Sure! Yeah, I mean it's... I think our site is gonna be better because it's going to be very low friction and very simple and clean and just, basic. So I think we'll distinguish ourselves that way, if by no other way.
Spolsky: We are not gonna be selling memberships.
Atwood: No. We won't be selling you anything. There will eventually be ads (just to be clear) because this is a... unlike Wikipedia this is actually a for profit venture but... you know, in a very tasteful way, it's the way I say it; and in a way that serves the community, and not fights it.
Spolsky: Right, in an earlier episode we had actually talked about trying to make sure that the questions and answers were in some way Creative Commons licensed or something.
Atwood: Oh yeah, uh, cc wiki is what we're going to use. And actually, somebody emailed me who had grave concerns about how we were going to license and I emailed him and said "hey, cc wiki is in the beta, it's in the footer of the beta, and what do you think of that?" and I guess he hadn't seen that particular one but he seemed very encouraged that we were thinking about it and doing something about it. And that's really the intent of these podcasts and the blog and all this other stuff, and why we talk about it before it's actually available is we wanna get feedback from the community on what it is we're supposed to be building as we build it. And we don't want that to go on too long obviously, we don't want to have like a Duke Nukem Forever type situation where, you know, it never actually ships. But, uh, I don't think we'll have that problem.
Spolsky: [Laughs] That's funny, I, you know I was pretty sure, that's an excellent opportunity for a rat hole, that Duke Nukem Forever, I was, I'd been convinced for the last decade or so that they were just pulling one over on us, pretending that there was another version of Duke Nukem coming out and not really doing anything, and every once in a while, just for kicks, they'll leak something somewhere to somebody.
Atwood: You know, in a way I'm going to be disappointed when it ships because it's become the benchmark for all software of like "well, at least we shipped before Duke Nukem Forever". Like, the Wine project, did you see this was news? The Wine project, which is like a Windows emulator under Unix ...
Spolsky: Yes, they declared that they're version 1 now. 
Atwood: ... actually shipped version 1.
Spolsky: Yeah, yeah.
Atwood: That was 15 years.
Spolsky: Really? 
Atwood: [Laughing] Yeah, 15 years. It's an old project. I remember a friend who worked at Sun, gosh this was in like '93, and she was telling me about the Wine project. And it wasn't a new project then.
Spolsky: There was another one that was made by a company called Bristol Technology, you remember that?? It was like a way to get your code to compile under Unix, if it was Windows code.
Atwood: I don't remember them.
Spolsky: And I don't know what happened to them, I think Microsoft sued them into oblivion, uh, because, I don't know, let's look up "Bristol" on the web.
Atwood: There's a wine that's called...
Spolsky: Bristol.
Atwood: It's probably not the best search term to use. Wow.
Spolsky: They're just gone.
Atwood: That's what happens when Microsoft doesn't like you man. They, they're just gone.
Spolsky: They were bought by uh, yeah, there was, they were acquired by HP, but it looks like they have long since given up their original product, which was kind of like a commercial version of Wine, essentially.
Atwood: Ah, I see.
Spolsky: Umm, ok, let's see I have some, did we have something to talk about initially? Oh, uh, just to conclude then what this podcast is, for those of you who are new to the podcast, is, since Jeff and I are on opposite coasts, Jeff is on the left coast and I am on the correct coast, uh, we uh, meet virtually every week by having about an hour long phone conversation just to check up on the status and talk about any design questions that may have come up or, uh, things that are going on with StackOverflow and just generally just to chat, you know, and we thought it would be fun as long as we're having these weekly phone conversations to start recording them. Which is what we did. In the first episodes you can actually hear they sound like phone calls, we've since switched to Skype which has higher audio quality. And, uh...
Atwood: And you're using a, you're using a new fancy mic. right?
Spolsky: I'm, yeah, I'm using one of these like fancy radio broadcaster mikes.
Atwood: Awesome.
Spolsky: I can't hear the difference. Can you?
Atwood: I can hear it. Yeah, I definitely can. 'Cause there was a little bit of breath-noise on the other one, but it sounds, it's better.
Spolsky: It's true, we've also eliminated the air conditioning noise that was, it's pretty loud in our office.
Atwood: Yes. So, I also have, I want to make a confession. The way this works is we record 'em and then I listen to them and make semi-detailed notes about sort of what we talked about, and some, I like to hyperlink a bunch of stuff so that people who don't want to listen or just want to see the topics can just follow along. Plus, I find it useful as well to go through the notes...
Spolsky: Yeah, I think it's incredibly useful, those show-notes.
Atwood: Yeah, so, I want to make a confession, so as I'm listening to the show I realize that, and I've gotten better with this and I think there's other reasons this happens, I realize I'm not hearing everything you say. [Laughs]
Spolsky: [Laughs]
Atwood: This is probably not a revolution, a revelation, to people who, listening is really hard. And in my defense, a lot of times like I don't want there to be dead air as we're talking so I'm trying to queue up things I want to say so that there's not some long pause while I think about "oh, what should I say next".? So that's my defense.
Spolsky: Jeff, you're not listening to me?
Atwood: Well, it's strange I would hear you say something wow I, you know after the fact I might go "wow, I totally did not hear Joel say that..."
Spolsky: Just, I think I have to have a test. There's gonna be a test at the end of this episode [laughing] on everything I said.
Atwood: It's really hard, that's really the lesson, is like, "do you really listen to people?"? It was really kind of shocking to me when I did that, and I've really tried to do better because I was shocked I was like "how can I not be listening to someone who's talking to me?" But I think, you'd be surprised, I mean just recording yourself and listening to it this way is, is a little bit shocking in what goes on.? And, I have improved, I've noticed it happens less often where you'll say something and go "wow, I wish I had heard that the first time 'cause I would have responded to it."? Um, so that's my confession of this particular podcast.? We have a lot of progress on the project, so there's a number of things I could talk about there.? How many questions do we have queued up?
Spolsky: OK, uh, let's see, um, wait, you were saying something but I wasn't listening. [Laughing] How many questions do we have queued up?
Atwood: That's right.
Spolsky: I got, I got three. 
Atwood: OK, we can probably...
Spolsky: Um, and also, I've also queued up, this [rimshot sound]. So if you want to tell any jokes, I've got a rimshot all set up.
Atwood: Ugh, ok, please, that's, we're only going to do that once ever right? That was the one time, and...
Spolsky: [rimshot]
Atwood: Ugh, yeah, I guess I asked for that, so.
Spolsky: There's a website you can go to.
Atwood: Yeah, that's great. Great. So now it's like a morning show.
Spolsky: It's called instant, InstantRimshot.com it's just got a big, gigantic red button right in the middle, and when you click it [rimshot]? Isn't that awesome?? If you ever need that, really quickly. 
Spolsky: Alright I'm done.
Atwood: There's a site like that, those are called single serving websites, website that you go to have very, very, that's one thing they do and it's ridiculously simple.? There's a site like that but it does that "wha wha wha whaaaa" sound (laughing) which I find much funnier actually.? My wife, uh, told me she used to work with someone and they talked about the transitions sound between this person's slide should be that "wha wha wha" because it's, their presentations were so bad, that would have been wholly appropriate for that person.? 
So let's, let's talk about StackOverflow and what's going on.? So, first of all we did have a beta site up and very clever hacker listeners figured out the URL for our site - not that it's very difficult to figure out [laughing].? And we're actually interacting with the site, now, normally I would actually welcome this and I, I - don't get me wrong I think it's very cool that you guys are interested and engaged and want to help us - but, uh, the site is really not fit for human consumption at the moment in that we're rebuilding the database like pretty much daily.
Spolsky: How come I can't figure it out?
Atwood: Uh, I dunno, are you, maybe, you know, this is like one of those tests you talk about in your book.? Maybe you're failing your own, you wouldn't hire yourself at this point.
Spolsky: What is, it's not beta.stackoverflow.com?
Atwood: It is, that was what it was, but I moved it because...
Spolsky: Because people were figuring it out.
Atwood: And this is really for your own protection, I mean I, I want to wait until the public beta, or, excuse me the private beta.
Spolsky: OK, ok, ok, what was your blog post about this week on Coding Horror, not that you had only one. Specifically, June 14th, 2008. And the headline of which was "don't go dark."
Atwood: Well, I thought that was, yeah, you commented there, and I was like "that was a little unfair", have we really been dark? We have this podcast, we have a blog where we talk about what we're doing.
Spolsky: That's true.
Atwood: Uh, we're not really dark. Dark is like dark. Dark is like just a void where there's no idea what's going on, and I don't think that's fair to characterize it that way.
Spolsky: No, you're right.
Atwood: Um, but anyway, I do appreciate the interest, and actually anyone who found the beta site legitimately, email me, 'cause I will give you a special badge - a hacker badge - that will be on your profile on the real site once we have the private betas which I thought you might find fun.
Spolsky: We don't need no stinkin' badges.
Atwood: I think the badges are fun, I think people will see how they work and the, they're completely optional, you can just ignore them if you don't like them.
Spolsky: Badges?
Atwood: I know the movie you're referring to that's the Sierra Madre, Treasure of the Sierra Madre.
Spolsky: And it's one of those things that they never really say that the way you, you know they never actually say that.
Atwood: Right. 
Together: It's a mis-remembered quote.
Spolsky: Let's see the official quote is badges, we don't need no stinkin' badges, it's "I don't have to show you any stinkin' badges."
Atwood: Yes. So, the badges, the way we're viewing them are complementary to your reputation score. And all this is again optional, you can ignore it, but it's for a way that for people participating in the system. The only importance it will have for these people is that you will not be able to treat the site like a wiki and actually edit everything until you get enough reputation in the system. So, we're like Wikipedia in that you can edit everything, but we're unlike Wikipedia in that you have to earn that ability a little bit by participating in the system normally for a while, and then after the system trusts you it'll say "ok, you can do this, 'cause you're, you know, you've participated." Yeah, I think it's a good balance, because we'll still have anonymous participation, to be clear, anonymous people will be able to ask and answer questions no problem, they just can't edit, 'cause we view edit as kind of a privileged operation.
Spolsky: I think it is gonna be terrific.
Atwood: Yeah, I think it's a nice compromise, I mean, I think it's a nice, sweet middle ground that will work well. So, we've done a lot of work around build, well technically Jarrod, one of my co-workers on this project, did a tremendous job on getting our build up and running.? We actually have a build script now that's checked into source control, so we can do, we can pass the Joel test, we could do a one step build that deploys the database, the code, and, actually even does unit tests, Jarrod went way above and beyond.? One of the advantages of the MVC framework, it's really easy to write unit tests for this site, because everything is, is a URL, like every action is a URL.? There's not a lot of post-back stuff going on.? So we actually have, as part of the build, it deploys the database, deploys the code, and then it actually creates users, you know (and that's just, again, URLs), and then it actually creates questions.
Spolsky: Don't you have to be a little careful to make sure that like those URLs aren't things that search engines and Google spiders and stuff will accidentally hit?? Like if you've got a button that's like "click here to delete all posts in this area" and then a spider comes along and clicks it while it's downloading copies of everything 'cause it thinks it's just a link. 
Spolsky: It's not a problem if it's behind a form or something.? But, like, sometimes you have a temptation to, I think that's why there's this general rule that a hyperlink should never take an action.? Uh, only form submits should take actions.? Because, uh, you know the spiders will never try to fill in a form. 
Spolsky: And it's a GUI in VB. 
Spolsky: Nice. 
Spolsky: Well, of course, the temptation, I was talking to, who was I talking to about this yesterday - you?? Anyway, some 
Spolsky: [Laughs] there's a real tendency, you know, the one thing that all developers in the world have in common is that they will tell you that the codebase they're working on sucks and it's a big mess, and if only they were working some place else that was more professional the code would be nice and whatever.? And there's a real tendency whenever you're doing any kind of project, no matter how large how small, how much code, whether it's like 15 minutes of code that you're going to write right now or a day of code or a week of code, to do it in two phases.? And in the first phase you say "let me just get it working", because, if I don't have something working then there's no point if it's good or not, I'm going to do the minimum, you really want to get that reward of getting something up and running and seeing it working and then you can come back and make it fast, and you can improve the algorithm, and you can polish things, and you can restructure the code so it's clean.? And there is just a real tendency, and that's when you start to use cut and paste code, and all kinds of the anti-patterns from that great book called AntiPatterns, I dunno if that's on my list, but all of the things that you do to just get it working that you think you'll clean up later.? And then the joke is you never come back and clean them up later, and that's not because you're a failure as a human being (although you might be) but that's not why you're not doing those other things.? You're not doing those other things because once you have it working they suddenly seem a lot less interesting to you, you're like, you know, I've got a few pages of code, I don't even have to look at it anymore, 'cause the code now works, like, why should I even worry about that. In fact, it occurred to me, and I started to notice this phenomenon with code that I wrote on Thursday. I try to make like at least a day every week or two in which I literally do not open my email or web browser and just try and take a day and write code, otherwise I would never get any code written. And what I was writing actually is a little utility for the internal sales people here at Fog Creek to use to generate coupons. Uh, which is 99% of the coupons are somebody asking for educational discount on our software so we give them a coupon. So, um, we used to have this horrible way of doing it and I made a good way of doing it. And basically, somewhere in there the data structure works like this in the database, there's a row for each coupon, and then for every coupon it may cause various discounts to be applied to various products. So, like, I could give you a coupon that's worth 50% off on FogBugz for Windows, 50% off on FogBugz for Macintosh, 50% off on FogBugz for Unix, 30% off on Co-Pilot, or whatever the case may be. So, that's obviously a one-to-many relation, and so I've got to insert one record in the coupon table and then I've got to get the ID of that record and then insert a whole bunch of records in the coupon line, line of coupon table, all using that ID. And I was actually doing this from code, and as I was doing this it suddenly occurred, I was doing this by having two separate blocks of C# code, the code that inserts the coupon and then the code that gets the newly inserted ID and creates all those other rows. And I suddenly realized I could do this all from a single SQL statement, or maybe not one statement, the statements could be merged into one call. And that would make what is now about a page of code become about half a page of code, and it'd just be cleaner and nicer. Did I do it? No. 'Cause I got the thing workin', and then I went home. And there's just no reason ever to open up that code again. But if anybody does open it up, they're going to say "ugh, why didn't he..." 
Spolsky: That helps? [Laughs] Nobody, nobody. 
Spolsky: Oh yeah, this isn't, to be fair, this is not really quote "production" code, this isn't code that we're trying to sell to somebody, it doesn't have to last very long, it's just a tool for our internal salespeople to use.? Once it works, and this is one of the things that I think people find depressing when they work in internal IT instead of working at a product company as software developers.? It can be real depressing because once you get the code working, the business case for spending any more time on it evaporates.? It's like, "we can now make coupons, so why are you concerned about whether there's, you know, one SQL call or two SQL calls there, don't even obsess about it."? And, uh 
Spolsky: You could sit there and polish that little piece of code 'till the end of eternity, you could make the world's best.? But it would not improve your sales people's ability to make coupons, and therefore there's no business case for it and it's a waste of time.? On the other hand, if you make a company that's like the, the coupon company, and that's your whole business, is making it really easy to make coupons (I don't even know what that means), but, let's say this code was a part of our product then every time I make it better I'm going to improve my customers' happiness and therefore sell more copies.? So, when you're writing production code that you're going to sell, or code for the marketplace, or even like working on a website that the whole world's going to see, like you guys are, like anything - StackOverflow, Google, whatever - every time you make that code better, you make your business more successful.? Whereas when it's that secondary support code that's being used for some internal payroll application it just has to get good enough and then there is no return on investment for any further work.? So I think the people in IT departments are just really depressed.? Or, eventually they get kinda frustrated because there's a real strong business argument for them just not to work very hard or make their code very nice. 
Spolsky: My time in the industry was working at Viacom.? So I worked on websites for MTV, the Sundance channel, Blockbuster, you know Viacom is just this big holding company that owns all these other media companies.? MTV is the most famous one.? And the code that I was writing there, I just remember like getting something that they wanted, somebody wanted like an automated FTP, and I wrote this totally overkill elegant system for synchronizing two directories using FTP from a laptop to a server and then launching some kind of a content management system in the background.? And it was just like totally overkill and they appreciated that, but then I documented it and I made a setup application and I made an administrative tool and I made six, there were six different manuals, depending on what your role was in using this thing, you had a custom written manual that described exactly how you worked with this tool.? And, nobody ever once looked at those, and the only reason I even did that is 'cause I was basically under employed there and just had nothing to do most of the day.? So I sat around polishing these things.? And, it was sort of frustrating to me that absolutely nobody ever looked at it, or used it, or [laughs] ran the code.? But then they certainly didn't appreciate the overkill that went into creating the promotional website, the internal promotional website for the tool, or the documentation, or the setup apps, or anything like that. 
[25:56]
Spolsky: You know, I used to have to wash dishes. 
Spolsky: But I actually did peel potatoes. I didn't peel that many potatoes. Onions, when you peel onions, ugh. I worked in the, when I was in the Israeli army I just spent months working in the, I don't want to say dining room, because it was a tent, with mud floors, in the desert. And my job was setting the table, and washing the dishes. Clearing the table, setting the table, washing the dishes. And that was like 18 hours a day: Setting tables, clearing tables, washing dishes. 
Spolsky: It really was, no, but I fell in love with that guy, 
Spolsky: Oh my God what a great guy. I was just like 
Spolsky: I would have gone to the end of the Earth for him. 
Spolsky: It's not just that, it's also, like, for that CEO, it's like I am not above you, I'm not some special person that needs to be spoon fed that can't clean up his own spills. And also, you guys, we really do draw our org-charts upside down at Fog Creek.? And we see "management" as just being here to support people and in fact I was just talking to somebody who was recently promoted to be the team lead of FogBugz, who was talking to me today, and he's like, you know, he mentioned something which he thought was kind of frustrating which was that a lot of times when there are like little emergencies that just need to be fixed like there's a little bug here in some old version of some code, you've got to check out that old version, fix it, get it deployed to these four customers, whatever. These just like little emergencies erupt all the time.? And he winds up doing all that stuff.? And the reason is because at Fog Creek we totally recognize that we want our developers to be able to concentrate on one thing and just come in and concentrate on that thing and never get interrupted, and not have to multi-task.? And the only way to make that happen in the real world when there's all kinds of little emergencies cropping up all the time is that the emergencies get handled by the managers, so that the people can do their job, no matter how grubby the emergencies are.? And if you look at what me and Michael do here it's just a lot of like ad hoc, like, literally, right now I'm making decisions about the benches that will go in the coffee bar for our new office.? You know, stuff that you would think like, "hey why don't you delegate that stuff, and think about the big picture," but the whole reason I'm not delegating that stuff, is so that the staff here can concentrate on just doing one thing, whatever that thing may be.? The sales people can do sales, and the developers can do development, so, an interesting part about saying, like literally saying "our hierarchy is upside down, management is a support function, it's there to support developers doing their jobs," mean that as you get promoted into management you're going to find that you're the person that has to do all those little clean up jobs and all those little emergencies that crop up, so that the developers can have kind of the luxury of just doing whatever their main multi-month project is, without it 
Spolsky: It's pretty hard. And it's gonna, you guys are sort of already doing it with StackOverflow, but, I remember the early days of Fog Creek when we were literally two people - it was me and Michael - and we would just take turns doing everything else so that one person could sit and write code.? So, there was a big block of time when I just did literally everything at Fog Creek except for what Michael was doing and Michael was writing, let's see what was he doing, at one point he was writing the store, the online store.? And then at one point I actually went through FogBugz line by line and cleaned it all up, to make it, like, code that would last for a thousand years instead of code that was sort of, kind of able to work (and I think much of that structure still exists).? So, but anyway, the point is that while we were doing this the other person was doing literally everything else.? And one of the things I discovered was that as sort of a small business, when you're operating, when you have all the features of a small business has, including customers, that's at least 50-60% of one person's time, is the overhead of maintaining the fact that you are a business.? I don't even, I'm not sure what stuff is, 
Spolsky:?Well with Google, that would be Android I suppose.
Spolsky:?No, why is that necessary? Why? 
Spolsky:?It's the famous walled garden. [Atwood laughs.]
Spolsky:?Ah God, that's like the people saying that they like AOL. Remember AOL in the old days where it couldn't go to the web sites? It had its own version of websites that had its own content and there were like these "go" keywords and if you wanted to be a content provider with Apple [sic] you had to go to Virginia and sign a contract with them and all that kind of stuff and then your provided this content and they gave you a little bit of money if anybody looked at your content. Which is cool, until the people stopped paying per byte then they stopped paying the content provider the money and then all of a sudden everybody realized that this is a dorky walled garden that had about 1/1,000,000 of what was on the Internet because who could be bothered to go to Virginia and make that deal??
Intro, advertising
[1:07]
Atwood: So, um, let's see, what are we going to talk about today?
Spolsky: I have no agenda.
Atwood: I can...? No agenda?
Spolsky: No agenda.
Atwood: How many questions do we have?
Spolsky: Oh we have questions, let's see: I got four!
Atwood: Ok, we'll try to make sure we have time for those.
Spolsky: Some of them, we can do some of them.
Atwood: Yeah, so, let me start with some complaints about the previous show.
Spolsky: OK.
Atwood: So there were complaints that we were talking over each other quite a bit.? Um, that is hard to not do. [laughs]? Not because we're both liking to talk, although that's probably true as well, but because there's always a little tiny bit of latency, and I find that any time there's latency it really aggravates the "Who's On First" ?problem [http://en.wikipedia.org/wiki/Who's_on_First%3F or perhaps he meant "who goes first" - ed], so that it can be a challenge?to figure out who's talking.? So we will try to do a better job on that.
Spolsky: Yeah.
Atwood: Because I did take that to heart a little bit.
Spolsky:? The trouble with skype is that it doesn't multplex so if we both talk at the same time, it just sort of jarbles... gumbles... you wind up not being able to hear either person.
Atwood:? That is true. You can kind of hear the other person, but their volume level goes way way down.? So, you have to really strain to hear them.? So I empathize, that's not a good thing to do, so?we are going to try not to do it.? So one thing I'd like to talk about today is a little bit of database stuff.? Now Joel did provide me with a drop of the discuss.joelonsoftware.com, the?.NET forums.
Spolsky: I like the way you say "drop" as if this is something that I'm going to do on a regular basis. 
Atwood: Well, we have to do it again.
Spolsky: [...] something.
Atwood: Yeah, the reason that I needed this is on a lot of the previous projects I've worked on we did these postmortems, and I've always felt like postmortems are sort of underutilized in software development where you... Where everybody has a meeting.? Because nobody likes to talk about the things that didn't work.? Everybody wants to - particularly in corporate America - it's like everybody's a winner.? There's never any failed projects.
Spolsky: You must live on the west coast.
Atwood: [laughs] Actually, this was on the east coast that I'm thinking of, but I've seen it all over where...
Spolsky: Postmortems I've been to everybody just loves to whine and whinge and all I can remember is the bad things.? And it's usually just the last three weeks of bad things that they remember.? They don't remember any of the good things from the beginning.
Atwood: Well, I think you have to have somebody?driving it?that's...? You have to have a moderator, big-time for something like that.? Somebody who's not biased, like maybe somebody who wasn't intimately involved in the project who can sort of keep things on track.? But it's important because what I've found is if you don't do the postmortems, you're not really addressing the systemic problems in your development.? Like the things that for future projects that you could actually fix before you even start.? And one of the big things I've seen personally in the projects that I've worked on is we never had good test data, so we always ended up just keying... Developers would just randomly key in data, testers would just randomly key in data, and you just sort of hoped that things worked, and then?we'd?deploy to production and we'd find that, "wow, once you have a thousand records performance tanks," or "there's all these cases about nulls that we didn't look at," and yeah.? So having a really good test corpus, and there's really two schools of thought on this.? 
One is data generation, where you just synthesize a whole bunch of fake data, sort of looks kind of random, but that can be good.? You can have like Unicode in it, things like that that you would not normally have to test;? 
And the other is just to get a giant body of data.? 
So in this project, we actually had both options because we're using the Team Suite version of Visual Studio [http://msdn.microsoft.com/en-us/vsts2008/default.aspx]?which I got through some friends at Microsoft.? It's a very expensive version of Visual Studio.? It's like, I think the license is like $7000, it's a lot.? But it includes, part of it, one small fragment of it is the database edition and one of the things, one of the many things it will do, is let you generate these data generation plans.? It's kind of cool, it actually ends up being reverse regular expressions in a lot of cases.? That's the really powerful generator.? In a normal regular expression, you're matching, right?? Like, "oh I want a number here, a letter here."
Spolsky: Yeah, that's just how you use it, I guess.? Yeah, yeah. 
Atwood: But it's kind of cool because I had...? It's not necessarily a unique idea, but when we had this problem I was thinking: wow, wouldn't it be cool if you entered a regular expression, rather than matching those characters, it actually generated those characters. That would be perfect, because you could generate almost anything using regular expressions.
Spolsky: But but but but but but...? You see the bug here, right?
Atwood: Well, no.? What's the bug?
Spolsky: Well, for your very...? In order to generate the test data that's going to test your?regular expressions, you're going to copy those regular expressions [laughing] and you're going to tell some app to generate a bunch of things that match all those regular expressions,?and then you're going to get this nice, clean, perfectly conformed data that doesn't really test anything because, you know, it's not...
Atwood: Some of the things you can do, for example, you can set a percentage of how many of the values will be null. So you can have like 50% null on one field, and 0% null in another field.? The other interesting thing is you can set a random number seed.? So you're actually generating repeatably random data.? Which I know sounds weird, and it is a little weird actually, but you can actually write unit tests based on your data generation plan that would say, "oh, well, I know this record is always going to exist because that's the random number seed we used".? So you can actually unit test your database in some form with these data generation plans.? You can also write custom code.? You can also (for example) generate from another table.? Like say you're generating names of cities.? Well, I'm not going to write a regular expression, although you could, it would be weird, that had like fifty cities in it.? You're going to have a table of fifty cities, right? You want the generator to pick at random one of those cities, like Cleveland, Des Moines, place like that.? 
Spolsky: How about Cincinnati? 
Atwood: Cincinnati perhaps, yes. [laughs]
Spolsky: Yeah, okay.
Atwood: So it's really?pretty flexible.? I really like it 'cause I found very little tooling around this the last time I looked (which admittedly was a while ago... this?was around 2005).??But it's really essential to test with a pretty large corpus of data.
Spolsky: ?Yep.? There's a new product also, if you don't want to use the Team System there our friends at Redgate have a product?called?SQL Data Generator [http://www.red-gate.com/products/sql_data_generator/index.htm].? It's $295, and it just generates some realistic test data.? And it does things like actually generate real cities in the city column that actually exist, and then when it generates those it'll get the state right, instead of getting the state wrong, or putting states into German cities and stuff like... you know, it generates pretty realistic looking data.? I'm not really sure what all the features are.
Atwood: Cool.? Well, that's one of the problems that Microsoft has, I think, is?that... this particular tool ends up being really expensive and hard to license because...
Spolsky: Yeah.
Atwood: You can get it outside the Team Suite?but then it's: you're floating out there with this unusual add-in for Visual Studio.
Spolsky: I don't really get what Team Suite... I mean, my feeling is that Microsoft just noticed companies like IBM with their Rational Suite [http://www-306.ibm.com/software/awdtools/suite/] charging somebody (I don't know who) $6000, $7000?a desktop for, pretty much, nothing.? Or, well wait, not nothing, sorry.? An IDE, and some features for the IDE, and some hard to use bug tracking, and a whole bunch of other stuff and Microsoft said "hey, why can't we get in on this $7000 a seat market?".? But it is a very, very niche market, so except for the people that are the partners who get it for free, and so forth, I think we're really talking about a few hundred institutions around the world that are really going to use these gigantic packages.
Atwood:? Yeah, it's frustrating because this data problem, I view as, you know, core mainstream software development, so I want this tool to be in the hands of as many people as possible, and the licensing - and just the understanding of how to even get it - gets in the way. Which is why, you know, companies like Redgate, I think, have a great niche because one, their product is only two hundred dollars, you can understand how to get it, like you just download it right?
Spolsky:? Yeah.
Atwood:? ... I assume there's like an eval version that people can get.
Spolsky:? [grunts agreement]
Atwood:? And when I was working with, mostly we're using it because we have it.
Spolsky:? Yeah, sure.
Atwood:? Its in our default tool set.? It actually works really well.? I'm sure the Redgate tool is better because another advantage that these vendors have is that's their entire life blood is this product, whereas for Microsoft its just a checkbox on a feature list. I'm sure the team that works on this is very, you know, gung-ho about the feature, but it's not the entire company.
Spolsky: Exactly, they can't get any attention from anybody above them. And and, nobody is going to think of... nobody is even going to know that they necessarily have this feature.
Atwood: Yeah, it's a challenge. It's a challenge. I don't really know what the answer is. But my point to all of this is, please look at data generators. They're a really great tool to have in your tool set. I found many shops had no idea what I was talking about, when I went to talk to them about data generation and what it did. ?But, it was always one of my favorite things to demonstrate, because I felt it was a big quality of life improvement for mainstream development.? I mean 'cause who doesn't write an app that talks to a database at this point.
Spolsky: You still get the weirdest bugs, even when you have data generation.
Atwood: Well but, yeah, sure, this is like unit tests.  I mean, you are just climbing the mountain of quality.?  It takes a long way to get to the top. ?We are just talking about working out the base camp now.? So another way, if we don't have data generation. You gave me a drop of the data base, so if you have an actual corpus, that works really well.? I was surprised to see that you only posted three times in your own forums. That surprised me.
Spolsky: Umm, oops. Wait, thats not total in my own forums, thats just that particular .NET questions forum. 
Atwood: Thats true, that's fair.? I was giving you a special like ID and looking up your identity and everything and I was like, "I did all that work for three records?" 
Spolsky: [laughs]
Atwood: Yeah, so there's like 14,000 records so it's a really really good size corpus, so--
Spolsky: I don't necessarily think we should launch with it 'though.? I mean, we've been talking about launching with it and I have this fear that it will give us a ridiculously strong .NET flavour from day one, which may drive away people in any other technology.? We might be better off launching empty to the beta testers.
Atwood: Okay, I'm open to that.? I mean, I... right now, for development I want a large corpus so I can be confident we're not making any error in the database and so forth.
Spolsky:? Sure.? Yeah.? Hey, the other... speaking of postmortems: you head emailed me that you're in charge of programming the search feature.
Atwood:? Oh good I'm glad you brought that up, yeah I wanna talk about that.
Spolsky:? Yeah, definitely Lucene.NET.? We have been trying to make SQL Server full text search work for the last 8 years... with very little success. [laughing]  So...
Atwood:? You know we're gonna get...? we're gonna get emails from people that work on the sql server team, you know that right?
Spolsky:? Yeah, and you know what they're gonna say, they're gonna say: [whiny] "Hey, I'd be glad to listen to whatever problems you've been having and help you solve them.? And I'm the program manager for the next version, and I want to make this better".[/whiny]? And we'll be like "yeah, ok, go read the 800 posts that I put on your friggin' forum in 2001 that you haven't answered yet." [giggles] Because I do get actually quite a bit of that from Microsoft when I complain about anything - I complained about MSDN on the web being not webby and?the URLs changing all the time and got another email from someone who claims to be the Program Manager and they're revamping the whole thing and it's going to be completely different and what would I like to see changed, and I'm like "no, not revamp, thats the whole problem, you guys keep revamping the whole thing".
Atwood:? Right, well. Can I drill down a little bit? (Yeah lets talk about..) I mean 2005... What is... my expectation was in 2005 that full text would be pretty good.? 
Spolsky:? It's not.
Atwood:? Why isn't it?
Spolsky:? Don't know.? Well, first of all...
Atwood:? [laughs] Don't know?? Okay, right.
Spolsky:? I'll tell you the two biggest problems that we've always had with it.? One is that it is grafted on using the stand-alone Microsoft Index Server, it is not very native to SQL Server.? And in particular what that means is, for example, instead of being a part of the database, that gets backed up with the database, and treated as a part of the database, and gets detached when you detach the database and attached when you attach the database.? Instead of just being a real part of the database, it's actually its own thing, over there in Index Server land, and it has its own unique identifying numbers that don't match the SQL Server unique identifying numbers, and they just put a million records in the registry to map these things, to connect them. ?Atwood:? What? That sounds insane, what you described!Spolsky:? [laughs]? One of the reasons why this turned out to be extremely--now for somebody who just has one database, and they're just sort of plinking around, they may not mind this situation, but we host hundreds or thousands of databases on our servers, and this just doesn't survive.? Having the index server being separate from the database itself.? So the index is like its own thing that's not a part of the database.? When you update a record, it doesn't know that it's supposed to update the index.? Instead, the index has to come along and spider it or something later.? And in particular, the problem that we found was that a lot of times, we would detach databases that weren't in use, and we would try to reattach them later, and that would cause the index server to confuse something, and basically full-text search would then be all messed up for the next three weeks.? And we finally learned a fairly complicated and tedious procedure that involved destroying all the full-text indexes, and then detaching the database, and later reattaching it and recreating the full-text indexes, which was the only way to solve this particular problem.? And to be completely fair, between SQL Server 2000 and 2005, this got about 50% better, but it was never really completely solved.? Is that right, Michael?? It's kinda working now, Michael says.? Michael says [garbled] problems with 2005.[15:12]Atwood:? Well you know what you guys need, though?? 2008.Spolsky:? Woohoo! 2008! [laughs]? I do.? Are they gonna ship in 2008, do you think?Atwood:? Yeah, I heard after the summer.? So this year, but not real soon.? I was asking because I was wondering if we should use it on StackOverflow, but the feedback I got was definitely no.? It's not that ready yet.Spolsky:? The second problem we have with it is, it's just slow.? Like, a lot of times, a query will just take fifteen seconds, thirty seconds, for the first query, and sometimes it'll speed up later for the next query after everything gets all paged in, but it is just slow.? And when we switched to Lucene in FogBugz, our search became usable. People have an expectation of search in terms of finding things and being usable that they learn from Google, and unfortunately Microsoft Index Server is just not anything like Google-quality search.? It's sort of like 1993 electronic database search if you went down to the library at school and you were doing a paper on psychology and you needed to find something in some corpus and you ran some kind of search, and it thought for a while and gave you back a bunch of wrong results based on, the highest result would be the page that mentions that word the most times in the document.? And it's just one of those things where it doesn't seem to be finding anything, a lot of times it would find things where the word that you're searching for is just not in there and you can't figure out why it's bringing this back as a result, and you suddenly realize that it's conjugating something in some funny way that's causing a match that's incorrect, because it's trying to do stemming.? It's just old-fashioned search, it's just like before-Google search.? And people's standards have risen, and they expect to be able to find things, and people--we discovered when we were using SQL Server built-in full-text search, that people just didn't expect search to work in FogBugz, and weren't using that feature.? They were going to great extents to try to find things using the filters.? And then just scanning.? And once we switched over, it was like, "Hey, the search box works!? You can type things in there and actually find results!"
Atwood:? Well, you guys must have a pretty big set of databases now, because of all the hosting you're doing.? Because, when did you guys start doing hosted FogBugz?Spolsky:? When did we start doing hosted FogBugz?? Maybe ten months ago, I'm guessing?? I'm not remembering.Atwood:? So it wasn't that long ago.? So you guys are becoming like a little datacenter.? You're starting to have, like, real major size problems.? Not that--I wouldn't necessarily have, but I would empathize with. Spolsky:? We have an unusual problem in that we want to give every customer, every hosted customer, their own database.? So in particular, that means having, literally, thousands of databases on our servers.? Which SQL Server was never really intended for.? And actually, SQL Server 2000 was just ghastly if you tried to attach more than about a thousand databases.? Things fell apart.? Suddenly basic operations would take ten minutes.? Things like sp_helpdb to get a list of your databases.? SQL Server 2005, to their credit--and I didn't really blame this on Microsoft, it sort of felt like what we were doing was unusual, and that to design a SQL Server thing to have that many attached databases is a very different project than to design a SQL Server to have a normal number of attached databases.? But the thing about FogBugz is, a lot of these customers use their databases kind of rarely.? Like, they might go in there two or three times a day.? It's not a helluva lotta transaction processing.? So in terms of CPU and disk storage and all that kind of stuff, we can easily put hundreds and hundreds, or even, like I said,? thousands of these databases on a single machine, and it's fine.? Except for the fact that some things weren't scaling in SQL Server 2000.? And years ago, we switched to 2005 and completely solved these problems.??Atwood: Right, this brings up an interesting... well I think two interesting points, one is one of my favorite bloggers Reginald Braithwaite has a great post on how?people who work in corporations are trying to compare your app with what they use on the web, right? Because now, you know,?in most corporate situations everything is locked down, you can't exactly install applications. But, there's this?emerging class of web applications that everybody can get to right next to your app. And Google is one of those things,?right??So, you're right. So, when somebody searches in Google, they see?it return instantly. They see it return highly relevant information. And they also see that?they can just type stuff in, it doesn't, you know. Your apps usually compare very unfavorably. And, it's?almost like unfair comparison because i mean think of all the work Google has put into this massive server farm you know and your dinky app. Is it really even fair to compare them. On one?level 'no' but in another level 'yes.'?
Spolsky:You have no choice.
Atwood: So, it's a real challenge. Every app is kinda competing with the web now and there's certain things that it does very very well. And then the?other point is that your use case is different then from my use case. That doesn't make either of us wrong. And certainly?I totally respect where you're coming from with the things your doing with FogBugz.?But, I'm only ever going to have one database, ever. Right? StackOverflow..
Spolsky: Yeah okay, that's true. That problem is not going to probably happen for you. On the other hand, I think performance-wise, and just in terms of the relevance of results.
Atwood: Oh, right. No, I'm totally going to look at Lucene based on your recommendation.
Spolsky: Illustrate the [???]. Yeah.
Atwood: I was really surprised. ?I thought it would be better in 2005 but-- no, no, I'm totally going to take your advice. ?I just want to point out that a lot of times when people are discussing things, they don't talk about their implicit assumptions in their use cases, and they just end up talking.? Not that we're doing this, but I see it a lot on discussion forums, and it's like everybody has their pet use case and that's the most important thing in the world to them, but they just don't get that other people are using it in like sometimes radically different ways which would change all the rules for what they're doing.
Spolsky: Yeah, or they're imagining something completely different. They're imagining a different story.?  You know they have-- I think that's how a lot of political arguments, where you're arguing, you know "Should we allow-- Should there be a tax, an R&D tax break, for research and development?" ?Well, you know, you can imagine R&D tax break being a way for companies like Microsoft to just not pay their taxes because they spend so much on it.  And these are highly profitable companies and they should pay their fair share. ?Or you can imagine like little startups with two guys in a garage, trying to save a few bucks.?  And it just depends on whether you are for or against that political statement or whatever.? It often depends on what story you're telling yourself is you're having the argument.? And if two sides are imagining a different story, they're gonna maybe come to different results as to what should be the policy.
Atwood: Right, but I wish more people would dig down to assumptions when they're talking about stuff. And you kind of touched on this a little bit in the Five Why's when you guys had that datacenter problem.? It's like "Why did this happen? Why did this..."? You keep asking "Why?"? I mean, there's a similar logic you want to apply to understanding use cases, like "Well, why is this important?", you know, and just digging all the way down to your assumptions that you're-- the assumptions are there because you don't know they're there.? You know, that's why they're called assumptions, so.
[22:06]
Spolsky: [chuckles]
Atwood: It's kind of nice to have somebody help you air those out and understand what assumptions you're making. So, Lucene? You guys have had really just blanket great experiences with Lucene? I mean...
Spolsky: Well, to be fair, we started out for some reason trying to use CLucene, which is the C port.
Atwood: [Laughing] Nice.
Spolsky: I'm trying to remember what-- oh I know why, 'cause we didn't want a dependency on .NET. We were trying to avoid a dependency on .NET...
Atwood: I see.
Spolsky: ...for FogBugz, which we eventually gave up on. And it was just-- it was just like there was threading code in there, let's put it that way, so it just was not stable. And, [we] eventually gave up and switched to Lucene.NET and we've been really happy with it. ?I've been using-- you know, what made me think Lucene would be good enough is this Lookout for Outlook thing, which I've talked about on my website, which is a plugin for Outlook written... let's see when... uh, help... let's see if it has an About... okay, I just hung it. You know how-- like Outlook uses again the Microsoft Indexing Service, it's never been fast, it's never been good. ?And these guys, about... let's see when it was... 2003. So, about 5 years ago, basically 1 or 2 guys started this little company to take the Lucene engine and make it available as a plugin to Outlook, so that you could use it to search your email. ?And it is astonishing how much better it is than any of the search that is built into Outlook, to this date.? They then got-- well, the main guy at that company-- the company got "bought" by Microsoft, I don't know for how much money, and the main developer on Lookout went to work for Microsoft, and everybody sort of thought that Lookout would then be incorporated into Outlook. ?Meanwhile, the Outlook team was going in their own directions with search, obviously to be better integrated with the operating system and the search service that Microsoft already had. ?And Lookout is obviously open source so it's not something they can-- sorry, Lucene is open source so this is not something that Microsoft can really just use. ?And so, they continued to make Lookout available for a while, and then for some reason when Outlook 2007 came out, they implemented a feature to check if Lookout was installed, and if it was, to disable it. [laughs] And I think, I don't know if they were just being lunatics or if this was just incompetent, rampant incompetence, or if there was some genuine technical reason why they did this.? But what they were telling people is "Oh, you don't need Lookout anymore because Outlook now has search built in!"
Atwood: [grunts agreement]
Spolsky: Or "a better search". And it is better, but it's not as good as Lookout.? It really isn't. ?It takes, you know, minutes and it's just tedious.? And it's just not as good, it just really is not as good. ?And so, fortunately, the Lookout programmer has since left Microsoft and he has posted instructions on his website for how to get the old version of Lookout from 2003 to work with Outlook 2007, which is what I use.? And it's great, it's fast, and it returns relevant results, and it's just really really reliable.? And so, I always had real good experience with Lucene, and that's why I was enthusiastic when the FogBugz team wanted to use it.?
Spolsky:? Maybe, yeah, you have to... 
Atwood:? You have to be outside the machine to make the change happen which is really kind of depressing. Because that has implications for the American system of government and things like that -- any large system, it seems like you can make change more effectively from the outside than the inside: it's a little depressing.? This has happened to Google too, like Dodgeball, they bought a bunch of stuff -- well not a bunch, but -- there's some really high profile things that all large companies buy that just seem to disappear.? It's like [Blanky?] said, that you buy them and think "oh this is going to be integrated and it's going to come with the product, it's going to be wonderful" and you know it just falls apart, it just gets absorbed into the machine and just dies.
Spolsky:? Yeah I was going to think of all the Yahoo! acquisitions: del.icio.us, flickr, uhhh... what was the other big Yahoo! acquisition? Where the founders are now gone, yeah, and then you know, none of those things ever shipped another version after they got acquired. Now part of that maybe...
Atwood:? Kinda makes you wonder if there should be large companies, maybe there should just be a whole lot of small companies.? But on a previous podcast you said that large companies just, that it's a function of like money I guess, or size, or, I don't know, I didn't really...
Spolsky:? You weren't really listening. [Laughing]
Atwood:? No no, I was listening but I just, it's hard to believe that's why that happens, it doesn't seem very sane.
Spolsky:? Large companies, well, I don't remember what I said then, but I will point out that at large companies you start to develop these "local maxima" as I call them.? So, local pockets where people maximize for the success of the pocket where they work.? Their team, their division, their P&L, you know their profit and loss statement that they're responsible for, what their bonus is gonna be based on, and people will optimize for that instead of for the good of the whole company, by doing things that are just retarded for the whole company. Or the opposite happens at Microsoft, and I think that's what happens with Lookout, is, Microsoft has this thing that they call The Strategy Tax, which is, basically...
[27:07]
Atwood:? Oh right, that's what you had talked about before, The Strategy Tax.
Spolsky:? It's all the work that anybody has to do to support Microsoft's strategy of Windows Everywhere, and whatever Microsoft's strategy du jour is, and so the Internet Explorer team is told that they can put in some editing, but if it's as good as Word then they're gonna be threatening the Word monopoly and therefore they have to stop making editing in a web browser be as good as Word.
Atwood:? Yeah, yeah, that's too bad, it does happen a lot.? So changing topics a little bit, so one thing that came up last week that I spent at least a day and a half working on is, so, in StackOverflow, there's wiki-like aspects to StackOverflow, so you can actually enter something known as Markdown markup.? Have you had a chance to look at any of the Markdown controls or anything?
Spolsky:? Is it the same, are you actually using Markdown there?? I thought it was some slight...
Atwood:? We're using Markdown, we're using a control called the WMD control, again, very unfortunately named, that's a great control.
Spolsky:? [inaudible] Markdown?
Atwood:? Yeah, it uses Markdown.? So, one of the interesting things about Markdown that seems like a plus but quickly becomes a negative as you start writing the code, is that it allows... the spec, not the control, I'm talking about the Markdown spec, allows you to mixHTML tags and Markdown tags.
So, the reason, like, Wikipedia and a lot of other sites that allow user input use a separate markup language is just because it's so much easier to do it in a safe way.? Because if you can allow arbitrary HTML  to be inserted into your database, and then rendered to the page, this opens you up to this class of cross-site scripting vulnerabilities, the abbreviation is XSS. And cross-site scripting is really disturbing, and actually I did some research on this in 2007 and since I wrote about it, cross-site scripting is now the most common security vulnerability in the world, for software.
Spolsky:? Wow.
Atwood: So it's a really really big deal. So if you allow input from users to go into your database you have to sanitize it. I know it sounds really simple but...
Spolsky: I just did it right now [laughs] I just did a cross-site scripting vulnerability in dev.stackoverflow.com.
Atwood: Yes, you might have.
Spolsky: ...right this very second, [I put] "onclick=" and I wrote some JavaScript and it ran my JavaScript...
Atwood: Well no no no, you have to submit it to the database. That actually won't go into the database, that's just for rendering.
But if you click "save" and then the page renders that way: absolutely. So I want to be clear: so it's gotta be written to the database. There's nothing I can do to prevent the preview from showing it 'cause the preview is... so you strip it out.
It's a lot more complicated than developers think and I talked about this on the blog but there's this page of just... It's a hackers page of like all the ways you can type your HTML that are just you know, obfuscated and weird and broken in a lot of ways...
Spolsky: yeah yeah yeah, to get past the filters...
Atwood: It's really disturbing.
I want anybody listening to this who is a software developer who does anything on the web. Please: go to that site and just scroll, its got a huge... You'll scroll for like ten minutes from all the exploits that have been typed in there, it's really disturbing. It'll really open your eyes.
Spolsky: Yeah, I mean FogBugz works on the assumption that everything is invalid except for those things which are valid. So it's basically just going to discard everything until it finds something that it is absolutely confident is OK.
Atwood: Right, no. Whitelist. You have to use a whitelist-based approach and for some reason a lot of developers even today... I posted a code snippet so I have a snippet based on a whitelist 'cause our use case is very narrow. I'm only supporting the tags that Markdown emits really.
So you have two options. You can either do it the Markdown way. Like let me give you an example. So italic is asterisk-word-asterisk. That's italic in Markdown. That gets converted to, you know, <i></i> or <em></em>, but you can also enter the <i></i> if you want to.
So I'm only supporting that subset of tags.
Spolsky: If you're only supporting that subset of tags, why don't you just store the Markdown in the database?
Atwood: Well we are, we're storing both. Because everything is editable so I have to go back to the editable state and I don't want get into a situation where I have to convert from HTML to Markdown. I don't know if I even have code to do that frankly.
Spolsky: Wait wait, there is. Why do you have to store both ? You can always run the Markdown thing again in order to produce a page.
Atwood: There's a problem. Because there's two sets of code because we don't execute JavaScript on the server. The thing actually interpreting the Markdown and converting it to HTML is JavaScript at this point. So if I want to get a pure, you know, one-to-one, in goes back to out conversion, I'd have to run JavaScript on the server.
So I'd be using a .NET Markdown library...
Spolsky: Yeah, there is a .NET library.
Atwood: Markdown is complicated enough that not everybody does it the same way. There's these subtle differences in the implementation OK ?
Spolsky: So wait, what's wrong with the .NET Markdown library ?
Atwood: There's nothing wrong with it, my point is that it's a totally different code path so the input and output would be on two different code paths which makes me nervous and...
Spolsky: No no no! wait wait! Stop!
Why don't you do this: Just accept input in Markdown, don't accept any tags. Store the Markdown in the database and when you need to display it, you either run through the JavaScript on the client in order to display it and if they don't have JavaScript, then they're looking at plain text. Or you run through a different code path, the Markdown .NET on the server in order to send HTML back to the client.
Atwood: Well, I have one problem with that, which is I feel like that gives a really bad experience to people who for whatever reason don't have JavaScript running. They're not even going to get basic formatting...
Spolsky: Yeah but that's the whole point about Markdown is that it looks nice. It looks completely legible in its raw format. 
Atwood: Oh I suppose. I dunno, I thought like we had plenty of database space. I mean our server has like, 300 gigs of space.
Spolsky: I'm not concerned about that, I'm just wondering why half... Because the way I'm describing it you don't need any filtering.
Atwood: Well you're doing the work on every single page though, that's... I kind of object to that a little. That means that every single page we render, we have to go through and render Markdown again which seems...
Spolsky: You can render Markdown so fast that you can do it on every key-down on the page...
Atwood: On the client sure, but...
Spolsky: ...and that's JavaScript. First of all on the server you can do it much faster because it's compiled code, but if you can do that on the client, why not continue to do that on the client. Just keep that JavaScript in there and use it to convert the Markdown to HTML on the client.
Atwood: We could. It's something we thought about doing but since I have both versions I figured I have flexibility. I can just send down the pre-rendered version and not have to worry about differences in implementation.
I mean we have all the options so the point you're bringing up we could do that because I'm storing both representations.
Spolsky: It saves you from writing any code to sanity-check HTML.
Atwood: Oh, I see what you're saying. OK.
Yeah that's true because if I'm never writing HTML to the database... But then I have to disallow... wait a minute, that's not true though because Markdown itself allows HTML so you're saying strip out HTML from the Markdown and just...
Spolsky: Change all the <'s to &lt;
Atwood: It also gets a little squirrely because we can have code blocks inside the Markdown. Like say you have Markdown issue, oh we're having this problem in HTML right. You have a code block of actual HTML. It could be a cross-site scripting vulnerability, I mean lets bring this full-circle. You're like "wow, I've found this cross-site scripting vulnerability. Let me paste it in and show it to you," right ?? Well that's actually safe inside a code block. So if I strip out blindly, I mean I have to have logic to avoid the <pre> blocks, the things that are actually supposed to render that way.
Spolsky: Ah, <pre> blocks you don't just get an &lt; in there ?
Atwood: Um...
Spolsky: I think that's probably what you have.
Atwood: The whole stack gets really confusing because you can actually, like I said, be pasting in script vulnerabilities that actually render safely.
[35:02]
Spolsky: Here's my point. Uhh, in general, my design philosophy, which I have learned over many years, is to try and keep the highest fidelity and most original document in the database, and anything that can be generated from that, just regenerate it from that. Every time I've tried to build some kind of content management system or anything that has to generate HTML or anything like that. Or, for example, I try not to have any kind of encoding in the database because the database should be the most fidelitous, (fidelitous?) highest fidelity representation of the thingamajiggy, and if it needs to be encoded, so that it can be safely put in a web page then you run that encoding later, rather than earlier because if you run it before you put the thing in the database, now you've got data that is tied to HTML. Does that make sense? So for example, if you just have a field that's just their name, and you're storing it in the database, they can type HTML in the name field, right? They could put a < in there. So, the question is what do you store in the database, if they put a < as their name. It should probably just be a < character, and it's somebody else's job, whoever tries to render an HTML page, it's their job to make sure that that HTML page is safe, and so they take that string, and that's when you convert it to HTML. And the reason I say that is because, if you try to convert the name to HTML by changing the less than to &lt; before you even put it in the database. If you ever need to generate any other format with that name, other than HTML - for example you get to dump it in HTML to an Excel file, or convert it to Access, or send it to a telephone using SMS, or anything else you might have to do with that, or send them an email, for example, where you're putting their name on the "to" line, and it's not HTML - in all those cases, you'd rather have the true name. You don't want to have to unconvert it from HTML.
Atwood: No, I agree with that, and that's why we decided to store both representations, so we have all the options at that point. It's really a lot more complicated than you'd think after actually dealing with it.? I mean, that's really what I learned from this, you have to be... and thats why cross side scripting is so dangerous, because there are so many ways to get it wrong, that are really kind of subtle, so I think that's the only lesson I have here.? And I'm open to whatever rendering strategies we want to use.? I just kind of like the elegance of not having to do anything Markdown related on the server.? My XSS routine, I posted on refactormycode.com, so people could look at it and make sure my white list based approach was correct.? And I got some really nice feedback on refactormycode and I plugged a few holes, and as far as I can tell by the people looking at it, it's actually valid because it's really draconian because I only allow a very very specific set of tags, and if you're not on that list you're just, you're gone.? Either HTML encoded, or actually deleted. So there's two schools of thought on that.? So I feel pretty confidant that the XSS...
Spolsky: [laughs] You've grown attached to this code, even though you don't need it.
Atwood: Well, no, I just like not having to execute Markdown on the server.? I think that's really nice, because I have one code path.
Spolsky: No, you don't have to.? When you're sending a page to the client you send it with a bunch of Markdown and the same JavaScript that you use for interpreting that Markdown that you use on the post page, and it runs that JavaScript real quick if it can, and then they get their page converted to a bunch of HTML.
Atwood: But the control doesn't really arbitrarily render Markdown, it's not designed to do that.? I mean, I could repurpose it.
Spolsky: That's, that's, that's easy. There's all kind of JavaScript versions of Markdown floating around.? There's one, they probably just copied all of the code from that.? There's one that's one of the top three hits for Markdown on Google. Where the heck is it? That uhh [sigh]
Atwood: I don't know, I just philosophically I don't like that the page is going to look, granted Markdown doesn't look bad per se, but it's not going to look great.
Spolsky: Here we go attacklab.net/showdown
Atwood: Well right that's the control we are using.?? Attack lab's is the WMD offer.
Spolsky: Oh, okay.
Atwood: Yeah, no, we'll look at it.? I mean, this is the kind of stuff during the beta and stuff I want to get really good feedback on this.? And our performance is really incredible now. I mean, we are returning in milliseconds.? Granted we are not doing everything we should be doing, but even already with the beta, we're astonishingly fast.? I'm really a stickler about speed.? It's actually appalling, like a lot of sites I go to, like I've been doing a lot of searches.? 'Cause for examples my SQL has gotten very rusty, because I haven't used it in a while.? So I was doing a lot of SQL related searches, and a lot of the sites I would land on would take just forever to load.
Spolsky: And then they would try to sign you up?
Atwood: Yeah, and just the layout is confusing.
Spolsky: And it's like Experts Exchange, [laughing] you have to scroll down past all of the advertisements to get to the...?
Atwood: I'm in the situation now where I really wish StackOverflow was up and running 'cause I would literally take a lot of the stuff I'm looking up about SQL, just really simple things, frankly, and I would post them as questions on StackOverflow and I would personally refer to them because it's gonna be (to me) a better system. So, one of the things I like about building StackOverflow is even the partial version of it we have now, I? think is actually better than a lot of the sites that are out there, and it's so low friction. You actually enter something on it, you don't have to sign up, there's not a lot of, you know, extra stuff on the page you have to think about. There's pretty much just the question and the answer, a basic, you know, Markdown editor. And it's amazing what you can do in Markdown. Um, and also mixing in HTML as well. If you get confused, you're like, "I don't understand Markdown."? You can just type in the HTML, and it'll work. 
Spolsky: Hey, where did that - that's an advantage - where did that...uh...syntax. I saw some kind of syntax coloring when you did code.
Atwood: It's in there. You just have to, so to make a code block in Markdown you indent four spaces. You can click the toolbar button which is Ctrl-K.
Spolsky: Well, how does it know how to syntax... it looked to me it was doing syntax coloring unless I'm dreaming it.
Atwood: It is. Okay, so that comes from, that's a project some Google engineer, I think, wrote it--it's called "Prettify." And it's a little interesting in that it actually infers all the syntax highlighting, which sounds like it couldn't possibly work--it sounds actually insane, if you think about it.? But it actually kind of works.? Now, he only supports it for, there's certain dialects that just don't really work well with it, but for all the dialects that sort of, you'd find on Google. I think it comes from Google's Google Code.? It's the actual code, it's the actual JavaScript which is on Google Code that highlights that the code that comes back when you're hosting projects on Google Code.? And you, and you, um, 'cause I think they use Subversion so you can actually click through...
Spolsky: How do they know, how do they even know what language you're writing in? And therefore, what a comment is and...
Atwood: I don't know.? It's crazy.? It's prettify.js, so if anyone's interested in looking at this, just do a web search for "prettify.js," and you'll find it.
Spolsky: Somebody, somebody call in with a next week, please. Send us, send us an mp3 with an explanation of what the heck this thing does, what languages it understands, why it works.? I just typed in some random thing in a language I made up, and it actually syntax highlighted it reasonably well.
Atwood: Right.? It's kind of amazing.? It's pretty cool. It's really neat.? So yeah, no, if anyone else has any other suggestion for syntax highlighting, please let us know. 'Cause traditionally what you do, like on Wikipedia, for example, when you put a code block in, you do have to specify the language very explicitly.? So it is unusual to have a highlighting engine that just infers everything and most of the time actually does get it right, so it is kind of cool.? So, yeah, no, I'm really excited about StackOverflow.? I mean, like I said, just doing the searches that I've been doing to build it.? It's sort of a recursive thing, where I wish I had it.? So I could use it as my research notebook.? And that's actually how I'm going to use it.? So I figure: even if nobody uses StackOverflow, I'm going to use that crap out of it. So, that's my own logic.
Spolsky: Yeah, so will I.? I asked a question yesterday and answered it myself.
Atwood: Yeah, yeah, there you go.? So I was going to talk a little bit about Steve Yegge, but I don't think we have time.? I'd rather get questions at this point.
Spolsky: Um, yeah.? That takes Steve Yegge, I think Steve Yegge takes a really long time.
Atwood: [laughs] Yeah.? So let's queue up some questions here.
Spolsky: Yeah, here's one from Stephen Hill.
Stephen Hill: Hi Jeff and Joel, my name is Stephen.? I'm from Blackpool in the UK.? What do you think of Microsoft Silverlight?? Do you think it will catch on, and will you be using it in the future?? Thank you.
Spolsky: Silverlight.
Atwood: Well, okay, first of all, we had some complaints that you were talking over the people asking questions, so I just want to be clear about that.
Spolsky: Yeah, I'm doing that on purpose, so there.
Atwood: Okay, I--The audience is not liking that.
Spolsky: Just the people that emailed you are, don't like that.
Atwood: Well, yeah, it was more like comments, but yet. And also Stephen Hill, thank you. That was a very succinct question, and I love that. I just love quick, and "here's my question", awesome.
Spolsky: I edited like crazy.
Atwood: Did you? No you didn't.
Spolsky: Yeah, do you want to hear the original?
Atwood: Did you? 
Spolsky: Yeah.
Atwood: No. No I don't.
Spolsky: I did I got it down from ninety seconds to eleven seconds. He had, actually, eight? questions in a row, and he was very kind and left big pauses between each of the questions and said just go ahead and pick the ones you like. And that's what I did.
Atwood: Yeah, if you can ask short question that's be awesome. So Joel, take it away.
Spolsky: I don't know anything about Silverlight. Didn't you used to work for some kind of Microsoft Solutions Provider or something?
Atwood: Yes. I know far more than anybody should know about Silverlight. So OK. So, I'm of two minds on Silverlight. From a programming geek perspective, it's actually very impressive. So, there's Silverlight 2.0, which is like, the real version of Silverlight that's not quite out yet, still in beta. There's also Silverlight 1.0, which is JavaScript based, which is like the fake version of Silverlight, that's kind of going to die off once 2.0 is out. So Microsoft already has this problem of, they have these two sort of radically different versions of Silverlight that are named the same thing, which is annoying and very Microsofty. I guess they felt like they had to get something out there, 'cause you know.? So we're really competing with Flash; let's be clear on the messaging here.? So Silverlight competes with Flash, period.? It does more than Flash, though.? And by that I mean, this is where the programming geek stuff comes in.? It's another version of the .NET runtime, and it's a really cool common-language runtime that supports Ruby, Python, VB .NET, C# and I think even JavaScript.? So you got a really like hardcore, like Anders level language platform running in the browser now.? And a lot of geeks saw that and were like "Wow, this is awesome."? And it is awesome, right?? I mean, you can do real programming.? Not like this ActionScript stuff which is still to this day crazy--I mean people build fantastic stuff and it's all Flash, but it's not exactly a programmer's paradise.? You know, if you're used to like C# and what I call "real programming."? Not that I...
Spolsky: Let me ask you a question. Let's say you were a--you didn't care about any of this Flash competition or anything like that.? You weren't even making Flash controls or anything. You just had a web page, like a nice .NET 2.0 thing with like Markdown engines and stuff on your web page and you've got large volumes of JavaScript code to run your site.? Now let's say Gmail, for example.? There's just a lot of JavaScript there running everything.? And there's actually so much JavaScript there that the performance is starting to be an issue.? So my understanding is that you could take this JavaScript, compile it into a Silverlight thingamajiggy, without changing it even, and get this bytecode that would run really really fast on any kind of web browser that had Silverlight installed, and then for the people who don't have Silverlight installed, you'd just fall back to the old slow JavaScript.
Atwood: Well, not quite.? 'Cause with Silverlight you're writing to a different DOM.? You're writing to the Silverlight display surface. 
Spolsky: But, but but--Ahh!
Atwood: You can get to the browser stuff, but then you have to go through COM, and you're paying a lot of performance penalties at that point.? So in Silverlight, it's like Flash, in that you have your own drawing surface that does primarily vector-based stuff.? And you can put, you know, user controls on it, and they're building this whole set of dropdowns and radio buttons and stuff.? But the use case of talking to the web browser object model is not really what Silverlight is about.? It's more like Flash in that regard, where you're actually writing to the Silverlight surface.? And you can do almost like 3D type stuff, I mean you can do, it's much more powerful than your typical browser display elements.? But it's a totally--the downside is, as you pointed out, it's kind of a separate world as well.? So anyway, that's architecturally what it is. I am excited about Silverlight 2.
Spolsky: It's ActiveX controls. 
Atwood: Yeah, it is kind of like that. And it runs on the Mac, and it runs on Firefox, and Microsoft has done a very good job with Silverlight, of being open and saying "Hey, we're going to run on all these different platforms, we're not going to discriminate, it's not a Windows-only type experience."? But on the whole, and I think you brought up one of these points, I think the problem that Silverlight's going to have is--like WebKit, for example, that team is working on massively improving JavaScript performance.? They have some technique, and I'd have to look it up, but it's some sort of hybrid, not compilation, but really fast interpretation they're doing, and they're getting some amazing results on benchmarks now. Much faster... like Firefox3 was very fast with JavaScript, this is, I think, faster still by? like 2x.
Spolsky: Wow.
Atwood: So really the competition for Silverlight is that you can still do vector stuff aside, with vectors there's a huge weakness... But talking to the browser like say to the Markdown control that we have, if you had really fast JavaScript, why not just do it in JavaScript? ?I mean people understand the browser DOM, divs and CSS and stuff, so outside of vector based stuff I don't see... It may not have enough compelling strength in the face of really fast JavaScript interpreters that are starting to emerge. ?I think... I think that's the...
Spolsky: Yeah, I think the truth is I've never seen an application - there's been a lot of programming environments that are basically ... the idea being that you get a rectangle inside the web-page somewhere, and it being desktopy inside that rectangle.
Atwood: Yes, that's what it is.
Spolsky: And that... It started with Java applets, and there was Flash, for a while there was ActiveX controls which had huge security problems, so forget that for a moment, but even if they didn't have the serious security problems that they had, just the fact that you're stuck in this little rectangle and you're navigating inside the rectangle, and the back button blows away the entire world that you were just in, and it was just like the un-webiness of these desktop apps running in the rectangle in the web-page...
Atwood: Right.?
Spolsky: You know, they were useful for like little controls, so you might use it like the WMD thing that you have, where it is a little WYSIWYG editing box effectively. And you know, it's basically being a control on a form, you know, then it's a decent control development environment, but the idea that you are going to build a whole app on this... And people have built like entire Flash apps where the whole app is Flash, but you know, they are always sort of upsetting in some ways. You can’t select text and cut and paste it, you can’t bookmark things that are inside there, because they are not real web pages with real URL:s. A lot of times… Have you ever got an email sent to you by your secretary, or something, saying: “Oh, go look at this”, and you’re like “I don’t get it. It’s the top level web page of some furniture distributor.” [laughs] And you go there and then you realize that it is a gigantic Flash thing, and they spent six months and they navigated to something interesting inside this gigantic Flash control. And then they wanted to send you a link to that, and they did what they had learned to do, which was to send you what was on the address bar, which hasn’t changed for the last twenty five minutes, while they were browsing around in this gigantic Java… oh, sorry… Flash based… you know… universe onto itself.
So I think that… Honestly I really do feel like many, many times the lesson has been learned that when you try to build things in the web that aren’t webby, because they try to have their own rectangle, you are going against the grain of the web in a way that makes it extremely, extremely unlikely that people will go for it, that it will take off.
Atwood: Right… No I completely agree with everything that you said, because Flash still has this problem. ?I tell people that are really excited about Silverlight… I’m like “Yes, from a geeky perspective it is absolutely cool”. You’ve got this really kick-butt runtime. You can write Ruby code that runs super fast in the browser, which is incredible.?  So that is really cool, but you are still playing in that rectangle, right? ?How much adoption has Flash really gotten? And Flash has been out for like ten years, a long time.? How many websites do you go to that are built entirely in Flash, and how many people rightfully complain about those apps?? This is not a solved problem, I mean you can have all the same all the same problems that Flash has, just different flavours of them. ?So you’re not embracing the web.
Spolsky: And you don’t have the ubiquity.? At least Flash is ubiquitous, except for the iPhone.
Atwood: Yes, and even on Microsoft’s site… They have Silverlighted up some areas of their site in what I consider very inappropriate ways that makes them actually worse and more painful to use. ?I think Microsoft downloads does this now, and the download site is just painful to look at because the font rendering is wonky. ?Because the operating systems font rendering is actually outstanding I mean this is like how many years of computer science they spent on this. Where as in Silverlight, it is like “we have our own font rendering engine”. It’s not as good.
Spolsky: Really?
Atwood: Oh, yeah. It looks really bad. ?I’m really sensitive… I’m kind of a wonk when it comes to how fonts render.? It’s really kind of annoying, actually.
Spolsky: I’m surprised that they don’t let the operating system render the fonts. [Answer: platform indepenance requires known font rendering behaviour, thus rendering their own fonts]
Atwood: Well, there is something about the way that they are doing it that is wrong, that is really wrong, that to my eye was like “Wow, that look really, really bad”.? It was really obvious. ?And Flash does this to.? The way Flash renders fonts: bad, horrible.
Spolsky: They have to be scalable.
Atwood: Yeah, but there is a font rendering technique that is called sIFR that is really cool, where you take a div, or something, and you can dynamically replace it with Flash to use whatever font you like.? It sort of solves the web font problem, but it has a fallback because it is a div with another font.? But it does not really look right, because the fonts are rendered through Flash and not the browser.? So I posted about this on my blog, and people was like “Wow, that looks really bad” and I was like “Wow, I didn’t see it”, but once they told me I totally saw it, and then I could not un-see it.? Right? I totally... They ruined it for me.? It was like “Here is this cool thing”, and they were like “It’s horrible”, and I was like “Oh, you’re right, it’s horrible”.? So I agree with all those criticisms.
Spolsky: So, ok. We officially poo-poo on Silverlight.? Here's a question from Dave Roberts.
[52:17]Dave Roberts: Hi, Joel and Jeff!? My name is Dave Roberts.? I'm going to hearken back to the discussions you had a while ago on the podcast about Jeff learning C. ?Jeff: [sighs]Dave Roberts: Joel, would you hire Jeff?? If not, would you hire me?? If not, would you at least sign my book?Spolsky:? Yeah, I can sign your book.? Bring it by the office.? Alright, David Roberts.Atwood:? I really don't want to go back to learning C.? I mean, that's really kind of a boring topic to me now.? It's been discussed.? I think you either believe it or you don't.? I don't believe there's any other--it becomes religious at some level, and it's just unavoidable, I think.? There's so many things you can learn that are helpful to you.Spolsky:? You are a blub programmer!? You don't know what you're missing!Atwood:? So, lemme also state that Joel has already said that if I worked at Fog Creek I would have been fired a long time ago because I'm not keeping a list of all the things we're working on.? And not necessarily in FogBugz, but I don't have a concrete list of the things we're supposed to be working on.? My management style is a little scatterbrained.? But I feel like with the team I have--and maybe I can talk a little bit about the Yegge thing, in a very brief way.? So, one of the things that's exciting to me about the team I've formed for StackOverflow is, one, it's not just me.? One of the pieces of advice I got early on was, "Don't let it be just you."? And I totally get that now, because when it's just you, it's hard to tell.? There's nobody pushing you or pulling you in any particular direction, it's just wherever your ego takes you.? And that's kind of a dangerous path to be on, when it's just you.? I mean, I'm sure some people can pull it off, but--and I've written before about, when you're programming--programming is really a social activity in my opinion.? I mean, for a long time it's been, OK, you talk to the compiler, it's like "What do you need all these human beings for?"? Well, a human being wrote that compiler, right?? And having another pair of eyes on your code is going to improve its quality by more than double in my opinion.? So there's all these really concrete reasons why you would want someone to work with you.? And the people that I've picked to work with me--I've been very fortunate in that these are people that I've worked with, that I know they do great work, because I've worked with them before.? I handpicked the people that I wanted to work with.? That:
 A, I like them very much on a personal level, we're very close friends; and
two, technically they're outstanding.? 
And how do I know that?? It's not because I looked at their resume or went through a vetting process, or any of that stuff.? I have worked with them for extended periods of time.? And I think this was Steve Yegge's point.? Of course, it's a really long post.? Steve wrote a post "Done and Gets Things Smart," and I honestly had a hard time figuring out where he was going with a lot of it.? I mean, he's a great writer, I agree with all his points, but he has a tough time summarizing in a way that I can understand, of, like, what is the point of this essay?? And my interpretation of that essay was: probably the only way, one of the only ways to figure out who's truly great, is to work with them.? And get the recommendations of--like, he views it as like a state diagram of "Name the best engineer you've ever worked with," right?? And then just keep having people do that.? And follow that chain all the way back until you have the one super-engineer, right?? John von Neumann or whoever it's ultimately going to be.? But I do believe in that.? You know who's great because you've worked with them.? It's a chicken-and-egg problem. ?Spolsky:? It's a fourteen-year-old named Jason, and he lives in Idaho in his parents' basement.? He's got a little IBM XT set up there. ?Atwood:? Exactly.? And he's the one uber-hacker, he's the best engineer in the world.? So in terms of--gosh, I don't know if I've even actually answered the question--who would you hire, that's really the question.Spolsky:? No, I think the question is "Would I hire you?"? [laughs] If I'm not mistaken.Atwood:? [laughs]Spolsky:? And I think, effectively, I did, because I had this project I wanted to do, and I brought you on even though you didn't know C, and we did it jointly.? And people bring a lot of different skills and values to different projects, and different people are suitable for different things.? A lot of what I talk about specifically is how Fog Creek hires general-purpose programmers.? But who can be the founder of a company is not the same as who can be an excellent general-purpose programmer. ?Atwood:? Right, and I can also tie this back to my point, [which] was that you and I had this conversation where, we feel like we know each other.? Even though there's no reason--we totally do not know each other, right?? I mean, we spent really no time together, but through reading your writing, and you reading my writing--and we did meet that one time in Emeryville, so we've seen each other physically, had a little eye-to-eye action.? But we felt like we knew each other.? And there was some implied level of understanding.? And also I think Joel is like me in that he likes people that question him a little bit.? Obviously I was very critical of Joel, but I like people that are somewhat critical of you and will view you objectively and not just say "Oh, whatever you say, man."? So I really enjoy working with people that challenge me some.? And also, some of the feedback, Joel, we've got on the podcast, it's like "Why do you guys have a podcast?? You never agree with each other!? You're totally fighting each other all the time!"? And I don't see it that way at all actually.? I mean, do you see it that way?Spolsky:? Uhh, no.
Atwood: Yeah, I think this is normal back-and-forth you should have in any good working relationship. You should be questioning my assumptions, I should be questioning yours, and then we synthesize some understanding out of that.
Spolsky: And we're not going to have a successful working relationship if we're not honest about what we think. If we try not to hurt the other person's feelings by saying "It's okay for you not to know about pointers" or whatever. [laughing] You can do that, and that's fine, but you can't have an engineering relationship if you're not willing to call the other person out on their bullshit in every case. You know, you can't do [that] in science and engineering. You know, it might work well for politics. Maybe.
Atwood: Yeah, so I was getting great mileage out of that at the WWDC party I went to, 'cause you know everything pretty much on the Mac is C... Objective-C. There's not a whole lot of different programming options for desktop apps on the Mac that I could tell. So I was talking to a lot of people that actually worked on core parts of the operating system. And I asked them "Oh, so what are you programming in?" and they would say "C." ?And I would go "What is C? What is this C thing you're talking about? ?Is it like Java?? Like an early version of Java?" ?You know, like "that band that guy was in after the Beatles?? The Wings? Is that what you were referring to?"
Spolsky: [laughing] The Wings. Paul McCartney in Wings.
Atwood: Yeah, exactly. Paul McCartney's Wings. [Playing stupid] "He was in a band before Wings? I don't know what that is!" Right? Yeah, so I'm glad you're enjoying that joke because people really seem to enjoy it, and I just enjoyed playing off it. It's just funny.
Spolsky: I wish I had a snippet of Band on the Run to play right now.
Atwood: [laughs] It is a great album. I will say that Band on the Run is actually a very good album.
Spolsky: Okay, the second part of the question was "Would I hire Dave Roberts?" and so I have happened to take the liberty of popping up his resume here, and let's see, so he has a 3.5 GPA so he just made the cut for that score.? Let's see, I've heard of some of these companies that he's worked at.? He's always learning new technologies to keep himself organized, so he's doing things in Python, Ruby on Rails -- that's still a positive sign... it won't be for long [Jeff laughs]. ?He's done 3 years of C++, that's good, I would take that as a plus. ? I would probably say [to Dave] that you would get a phone interview at Fog Creek. ?That's all.
Atwood: Did he actually enclose his resume as well?
Spolsky: Yeah. So I'm going to have somebody call him actually I think.? Yeah, he would get a phone interview. ?Now, I should mention that maybe phone interviews screen out about 50% of all people and then, of the people that come up to New York to interview in person, maybe 1-in 4, 1-in-5, 1-in-6 get hired. ?And of those, we very rarely regret it. ?The other thing we have is-- and this goes to Steve Yegge's point-- is that we really like hiring people through co-ops or interns or internships, where they come work with us for a few months in the summer. ?A lot of times there we find people that we really want, and make them full-time offers.? Sometimes we find people there that we really want, and they don't want to work for us, and that's fair. ?And sometimes we find people that we really think would be-- to put it nicely-- do better somewhere else. So.
Atwood: Right. ?Hiring is tough. ?I mean, I think you have to have a thick skin, is what Joel is saying.
Spolsky: Yeah [laughs]
Atwood: And I empathize, 'cause you really do.? On both sides.
Spolsky: The truth is-- I hate to say this-- but I mean we're very very selective in our hiring. ?Google is selective in their hiring, and I do recommend that people be selective in their hiring. ?On the other hand, I know that a lot of people that don't make the bar at Fog Creek-- just 'cause like I honestly-- given what I've heard from our developers [about] what goes on in our programming interviews these days, I don't think I would pass! ?So, on the other hand, a lot of the people who don't make the bar at Fog Creek will go off somewhere and do something and be fantastically successful somewhere else. ?And one of the things that's kind of important to remember is that, for us, hiring somebody who we-- what we would call a false-positive, somebody that we think is gonna turn out good but doesn't turn out good-- is really, really costly. ?And it makes everybody unhappy. ?You know, they might move to New York. ?It makes them unhappy, it makes us unhappy because we have to fire them and that sucks.? There's a lot of expense because we paid them for 6 months while they wrote bad code that then had to be rewritten. ?And all that stuff [that] adds up to a false-positive is very very costly, whereas a false-negative-- if we tell somebody that we don't think they can make it but maybe they can-- what that costs us is whatever the interview costs us. ?You know, $2000 to fly them to New York and put them in a hotel and some time that we spent interviewing them. ?And so, the truth is, I'd rather err-- and it's unfortunate-- I'd rather err on the side of safety at this point and get people that I know can-- that have a much higher probability of being successful. ?What that means specifically is that chances are that most of the people that we're turning away at the end of a day of interviews would be great programmers somewhere else... or here, but we just don't want to take the risk.
Atwood: Right. ?Yeah, no I think that's a fair point. ?And like I said, you have to have a thick skin. ?And I think of it more as like relationships. ?You know, like intimate relationships you would have with another person. ?There's a lot of reasons they can't work out, and not all of them mean you are a bad person. ?There's just a lot of reasons that things don't click and there's a lot of fish in the sea. ?A lot of fish in the sea is my point, with jobs as well so keep that in mind.
Spolsky: Yeah. ?For example, we had an intern who was a marketing intern, and he was just not that good at being a marketing intern, but that's because he didn't know anything about marketing and we don't have a marketing department so there was nobody to teach him. ?And he was just not figuring it out on his own. ?But if he went to some organization that had a big marketing department, where somebody could teach him how to do marketing, he would be extremely successful, you know? ?That's really what I thought, and so actually we would not be doing him a favor by hiring him at Fog Creek to do something where we can't give him the conditions to make him successful. ?That does nobody any favors.
[1:04:46]
Atwood: Sure. ?Well, we're at a little over an hour, so we should probably cut it off here. Are there any notes for the end of the show, anything you want to...
Spolsky: Yeah, well first of all, once again I want to thank all the people that are working on those transcripts up on the wiki. ?I see they're getting done, that's really awesome. Secondly, we only got to 2 out of 4 [questions], but we'll get these other ones. ?Please do still record MP3s and send them in to podcast@stackoverflow.com or whatever sound format: MP3, wav [correctly pronouncing it as "weyv"], or look for BlogTalkRadio if you don't have a way for you to record sounds.
Atwood: Wait Joel, did you say "wave"? "Wave" file?
Spolsky: "Wov"! I said "wov"! [jokingly mispronouncing wav (file format) as 'wov' as in a previous podcast].
Atwood: Okay, good.
Spolsky: It doesn't have an 'e', so it's "wov".
Atwood: Yes, of course it's "wov" now, obviously.
Spolsky: [laughing] What was I a talking about?? Oh, please do send in questions or just stimulating things that you want us to talk about.? The more provocative the better, you know, like 10 seconds or so of real good provocation that's gonna have me and Jeff at our throats, is probably the best thing you could send in.
Atwood: Yes, that's true.
Spolsky: And, I'll see you next week!
Atwood: Yeah, thanks guys!
Spolsky: Bye.
[1:06:01 ends]
Outro, advertising
[1:06:55]
Intro, advertising
[01:02]
Atwood: I've heard of this "podcast" thing. I think we should get on top of this hot new trend.
Spolsky: [giggles]
Atwood: While it's still cool and all.
Spolsky: Ok.
Atwood: Yeah. So this week was a short week...
Spolsky: It was?
Atwood: Well it was for me cause I had a vacation thing.
Spolsky: How?
Atwood: I went to Iowa with my wife.
Spolsky: What's that thing they say now? You're not doing it right. [chuckles]
Atwood: What do you mean?
Spolsky: The vacation.
Atwood: Oh wow.
Spolsky: Hawaii, even San Diego if you're in California: it's close. Um, the Caribbean, Europe, Australia...
Atwood: Well this was a family, this was a family thing.? This was one of those required events.? It was in Des Moines.? It was nice.? I mean, Des Moines, nice.? It's got a really nice Fifties-style architecture there, it's not a bad place.
Spolsky: [laughs] Fifties-style architecture?
Atwood: [laughs]
Spolsky: Sounds like a, like a real thing.
Atwood: It's off the beaten track.? I like Americana and I like people from the Midwest.? My wife is from the Midwest.? They're actually very very nice people.? Uh, but one thing that happened to me while I was flying out is I'd forgotten how difficult it is to actually work on an airplane with your laptop.? It's pretty much impossible.? I guess unless you're in first class or something.
Spolsky: You have to have the X, like the IBM X series, the really small ones.
Atwood: Well mine is the [Dell] XPS 1330 which is an ultra-portable. It's like a three pound laptop, it's a thirteen inch screen.
Spolsky: That should work.
Atwood: Well it should work. But the people in front of me reclined, and I gotta tell you, it's really... you're allowed to recline, right?? It's a built-in feature of the airplane, but it's really hard not to resent the people who sit in front of you who decide to recline.? Because...
Spolsky: Yeah. It's just not fair on a short flight.
Atwood: [laughs] Yeah. Yeah, so that was awkward.? But I did get to actually work on some StackOverflow code, believe it or not, while I was on the plane.? A few little minor things I checked in.
Spolsky: All right!
Atwood: Yeah. Yeah. Subversion has really good offline support, which is really nice: easy to appreciate that on an airplane.
Spolsky: Have you ever heard... wait, Subversion has what? Huh?
Atwood: Offline.? Subversion has a very good offline client.
Spolsky: It does?
Atwood: Yeah, yeah, oh yeah totally.? Yeah, as long as you're not trying to check anything in.
Spolsky: Oh! Well then you don't get the benefit of source code control while you're disconnected.
Atwood: Well, yeah... that's a good point and I think that's one of the things about the distributed version controls, that they sorta, sorta get you on the right path.? It's like they're versioning everything you do.? And if you think about what's happening, it's like "Well, why not just version every time I save the file?"? Right, internally, and just give me like an audit rollback of every... you know, kind of like the "undo" buffer, that's in Windows?
Spolsky: Uh, yeah, but there's points, there's certain points that you want to declare as, "This is a major point, I'm about to do something crazy, I may want to go back to this restore point."
Atwood: Sure.
Spolsky: So you want to be able to establish that one of those particular undo points is more significant than all the little undo points.
Atwood: Well sure, sure.? But I think all those little undo points can be useful at times too. It's like on a computer, you know, computers have like so much space and power, it's like, "Why not just track everything I'm doing?"
Spolsky: Yeah.
Atwood: Not necessarily check it in, per se, but give me like a local audit trail that's like written to disk, it's not lost.? You know, cause Visual Studio's undo is great, but it's like, it's only like per file and if you close Visual Studio or Visual Studio crashes you lose your undo buffers.? And things like that.
Spolsky: Absolutely.? While we're talking about laptops on planes, have you ever heard of undervolting?
Atwood: I have.
Spolsky: You have?
Atwood: I do that. 
Spolsky: You do?
Atwood: Uh yeah.? Well, I'm a hardware, you know, enthusiast.
Spolsky: I thought, here I thought I had discovered something nobody else knew.
Atwood: [chuckles with pride] No, undervolting is really cool.? That's just a way um, so power usage of a chip is like the square of the voltage.? It's also related to speed, obviously, like a five gigahertz chip.? But it goes up like much more, it tracks much more strongly to voltage.? So you can get huge power savings by reducing the voltage at which the chip runs.
Spolsky: Yeah.
Atwood: And overclocking, overclocking and undervolting are related because in overclocking you typically overvolt, which means you give it higher peaks, so the ones are higher and the zeros are... lower [chuckles].
Spolsky: [laughs]
Atwood: I know that's not the best technical term.
Spolsky: [laughing] So you've got a one then a two.
Atwood: Well exactly!? It goes up to eleven.? But what it does is when you juice the chip, it's able to usually sustain higher clock speeds than it normally would.? So the risk with undervolting is you could destabilize the chip at its default voltage.? But Intel usually is so conservative with these things, with these settings, usually you can under or overvolt them at least ten or twenty percent without too much danger.
Spolsky: Well here's how I discovered this: so I have a MacBook, the little one, Air, the MacBook Air, which I got because the old MacBook... well, I got it because it was sexy, but actually I got it because the old MacBook Pro that I was using was just getting really really hot in my lap and it was heavy and it just wasn't a nice way to watch video, to watch either downloaded movies or whatever. 
Atwood: Right.
Spolsky: And you know, sitting in the living room.? So I got the Air because everybody said, "Oh, cooler, lighter, smaller."? It was true it was not cooler and in fact the first phenomenon I noticed is that the videos would play for about five minutes and then just start stuttering like crazy, like you'd get one frame per second all of a sudden and it just, the audio wouldn't keep up with the video. 
Atwood: You know it's funny you mention this cause on my laptop I had Podcast number one, and I was just listening to it to compare sound quality and stuff and you actually talked about this cause I remembered talking about that.? And you actually did mention it on podcast one.
The reason I was thinking about it cause on Twitter, Wil Shipley was complaining that he has an Air, and he had to blow on the back, on the bottom of it, to get the second CPU core to come back cause...
Spolsky: Oh! Ok, ok, so I have...
Atwood: It was like a Nintendo cartridge, where you have to blow on the cartridge before you plug it in. [laughs]
Spolsky: See, I can't get Wil Shipley, I'm trying to find Wil Shipley.? If any of you knows Wil Shipley, please tell him to call me because we want him to speak at our conference and I have about a thousand things to tell him.? And one of them is, [laughs], that I have the solution to the MacBook Air problem. 
So it was the video was... and then, and then somebody said, "Hey check if the CPU's overheating or something," and I found a little monitor that lets you put the CPU usage indicator in the menu bar so it shows the percentage load on each CPU cause it's two cores, it's like two CPUs.? And I started running that and I noticed that whenever the video was stuttering that was because one of the cores was shutting down.? And then I, at first I assumed it was a faulty chip and then I discovered that it will do that when it gets hot because that's a pretty quick way to cool down the chip - theoretically. 
And so for a while I worked on the assumption that the problem with the MacBook Air is the ventilation cause it's got its ventilation slots are right on the bottom.? And the only thing that keeps the ventilation slots from being completely blocked when you put your laptop on something is these little rubber feet which are really thin. So if you put it on a perfectly flat surface those ventilation slots on the bottom theoretically work.
Atwood: [grunts understanding]
Spolsky: But they just weren't, and I wasn't able to watch video.? So what I was doing was I was setting my MacBook Air up on two books with a gap in between them.? So it was like standing like in between two books kinda perilously just so that vent would have at least an inch clear below it.? And then I could sort of watch video but not always.? Even when I did that it would overheat.
Atwood: [grunts understanding]
Spolsky: So finally I encountered this thing called 'Cool Book' which is just a little app that some guy in Sweden wrote that's impossible to understand and has a really difficult user interface that you have to sort of study to understand and it lets you change the voltage that the chip runs at, and its not just one voltage, its like multiple voltages like when your going at like 1200 megahertz use this voltage and at 1400 megahertz use that voltage and so there's a whole bunch of different settings and the voltages are things like 1.1 and the defaults are in the 1.1 area and I got it down to about .95 and I’m pretty sure it didn’t stop crashing and what happened was that the CPU started running much, much cooler, like 75 degrees instead of 100...Atwood: Yeah, the voltage I think goes up with the square of the voltage [sic]Spolsky: Yeah.Atwood: And it has a huge, and it doesn’t sound like a big difference, but it actually isSpolsky: Oh it really was.? And I think it will probably, I mean it will make the battery life last long enough not that I really care, because I mostly use it at home, but also its shockingly cooler and so its kinda weird, you said you, you’re right, Intel or I don’t know, if it's the Mac hardware engineers, that just assume different chips, you know there is some variability the chips and some of them need more voltage than others as they come off the assembly line, and -Atwood: That’s because, well, I think some of their newer chips they do actually have a range of voltages they'll ship at, so they don’t have to throw the chips away.Spolsky: Oh, interesting.? Well, my theory was that they just set it at a nice, high voltage that all chips will function properly at, instead of actually adjusting to the lowest possible voltage for the particular chip that they just made and the net result is that even though they're being conservative, you know, which is worse?? Overheating CPU, I mean, that is a failure too in one direction.Atwood: Right. Well you talked about how aesthetically pleasing the bottom of the Air was and one side affect of that unfortunately is there is no ventilation holes, right?? So, heh, its sort of a challenge.? But?I think a lot of laptops have had similar overheating issues where they don’t ventilate well when they're actually on a lap, you know, cause that's -Spolsky: Yeah yeah yeah. Well you know what, not the [Lenovo] Thinkpads. The Thinkpads have ventilation off to the side, they work great. But anyway?back to this 'CoolBook' thing. You run CoolBook, and it takes about an hour to understand the documentation, because?I didn’t know anything about undervolting, and every time?I would try to read something about it, it was like electrical engineering stuff. And the UI was just not intuitive and?I didn’t understand what exactly?I was editing and how?I was controlling it, when it was going to save the changes and that kind of stuff. It was just not written that well.?And then you had to like run a separate program that tested your CPU, to make sure that you hadn’t lowered the voltage too much to the point at which it was unable to, I don’t know, compute the square root of pi.
So that was all so incomprehensible, and it took about an hour of studying and fiddling around before I finally got it to work and I got much lower voltages than it shipped with and this completely solved my problem and to test it out last night I watched the entire Big Lebowski on hulu.com and it was fine.
Atwood: [chuckles] You had to for testing. You didn't really want to.
Spolsky: [laughs] No, I didn't want to, no. [laughs]? But you know, I did my duty and it was great. So wait, um, but, this UI is difficult to say the least.? And you'd think that somebody at Intel could write an app that, you know, ran for about an hour and basically just tried lowering the voltage until it failed and then raised the voltage a little bit, just found the right voltage for every chip.? And they just did this on the assembly line while these machines are being assembled, or at the very least make a download available.? So customers can run this and get their, because it really does increase the battery life time and it really does reduce the temperature.
Atwood: Well, right.? Yeah, no, they do that, it's called "binning."? But I think it varies depending on, you know, what chips they're making, what the demand is, but binning is the process by which you take a given chip, and you see, "Well, what speed will it run at," right? Cause some chips just have fewer defects and actually run better at lower voltages, I mean there's a lot of variability.? These, you know, what, .45 nanometer now?? It's like really really tiny stuff. 
Spolsky: So I know they did this with speed, but do they do this with voltage as well?
Atwood: Well sure 'cause the two are related.? Like I said, I mean, if you have a really good chip it can run that can run really fast at really low voltage, or really slow at really low voltage, right?? Those things are related.? But...
Spolsky: Yeah.
Atwood: I think what happens is if they're building chips at a certain speed they may not test below that cause that's like their floor.? Like, "If it runs at this, we don't care, that's our lowest speed," or whatever.? I don't know if they go to the absolute floor.? They might on laptop chips.
Spolsky: Yeah, but they didn't... I mean they clearly didn't in the case of the MacBook Air and if they had they would have increased the battery time a lot.
Atwood: But they like to leave a lot of headroom.
Spolsky: Yeah, maybe.? I mean maybe I'm going to load Excel one day and it's just gonna shut down and the computer's gonna panic.
Atwood: They way you test that is the way historically you always test that, is you run this program called Prime95.? Which all it does - and it has a Mac version I'm pretty sure - all it does is calculate prime numbers at varying sizes. And you run two instances of it, one for each core, you have to run two copies of it and that will load it far beyond what most people will ever do to a CPU. So if it can survive dual Prime95...
Spolsky: Oh I have a stupid question now. Surely there are some instructions on the chip... I mean what if there's just some part of the chip, am I being crazy right now? [laughs] Maybe I just really don't understand CPUs.? What if there's some instruction that calculating prime numbers doesn't execute?? Like some Intel machine language instruction...
Atwood: Well, that's not really...
Spolsky: ...that some part of the chip just never lights up, and that particular part of the chip just happens to want more voltage than it's getting?
Atwood: Well, that's not really the intent of the code.? The intent of the code is to make the CPUs as hot as they possibly can.
Spolsky: Ohhh.
Atwood: Cause heat is what triggers these failures, usually. 
Spolsky: Okay.
Atwood: So really, you're just exercising a particularly, uh, I think the floating point part of the CPU tends to use a lot of power.? Of all the programs you can run, that's one of the highest power consumption, like I have a little device that actually tells me how much power the CPU, the PC is consuming at the wall.? And you can run all different kinds of programs and see which ones, you know, load the CPU the most, as measured by power draw. And it's really hard to beat Prime95.
Spolsky: Okay. 
Atwood: So, I'm by no means an electrical engineer and I apologize to anyone listening to this who is or knows one I apologize.? I have a very limited sort of enthusiast understanding of how this stuff works, but I have done this for a number of years and I know what...
Spolsky: Yeah. I do want to emphasize to anyone listening that I also misunderstood undervolting 'cause I thought it was the opposite of overclocking, which it's not. Undervolting just means less voltage; you still run at the same speed. 
Atwood: That's right.
Spolsky: The chip is actually, it's not like you're slowing down your computer in order to keep it cool - although you can do that too if you want to.
Atwood: Yep.
Spolsky: And in fact, one thing that the Mac, the MacBook Air does not ship with which, is possible to turn on the chip very trivially, is: when running on battery power and you don't have a lot to do, just turn off one core.
Atwood: Yes.
Spolsky: So I think the way it ships, the MacBook Air you have I think eight hundred, a thousand, twelve hundred, fourteen hundred and maybe sixteen hundred as the speeds that it will go at.? But you could set it, you could give it a six hundred, where it will turn off one CPU and run at twelve hundred, or six hundred each or whatever.
Atwood: Right.
Spolsky: I know what I'm talking about.? You can make it run much slower and use much less voltage.? Or maybe it doesn't... no, yeah, that would use less voltage.? And you can do that whenever you just don't have enough load.? And I guess there probably... you know I can imagine the Apple engineers thinking that they don't want to do that because that might reduce the multitasking feel of the system.
Atwood: Well one problem they would have with this approach is that some CPUs may not actually tolerate lower voltages like yours does. You know Intel rates them at a certain voltage.
Spolsky: Yah.
Atwood: There's variability, right?? Plus or minus ten, twenty percent.
Spolsky: Yeah, well, they should test that in the manufacturing process.? Anyway.
Atwood: Yeah.
Spolsky: So anyway, Wil Shipley, there's your solution. Go install cooledit [meant CoolBook] and waste half of your life, half of a day of your life configuring it.
Atwood: But bear in mind this is coming from the guy who advised us to drop the computer to fix it.
[16:46]
Spolsky: Hey, that worked!? Was that on podcast?
Atwood: Yep, that was on the podcast, I think one of the earlier first five that we did. 
Spolsky: That computer is still running!
Atwood: I know.? I'm just teasing you. ?I'm only kidding.? So I had another...
Spolsky: Also she had a baby that won't stop crying. 
Atwood: Oh, no no no no.? That's not hardware, that's like software.? That's a totally different topic.
Spolsky: [laughs] Five inches off the ground.? Onto a padded surface, padded surface.
Atwood: Yes.? So another thing I wanted to talk about is I had a, a funny thing came up... so I had a ego search set up, I think like a lot of people do, and Google I think, I don't know if it was Google search or, I think it's Google blog search.? But it just tells me when people are talking about me.
Spolsky: Yeah that's cool, that's awesome.
Atwood: And, and, I like to do that.? I don't necessarily respond to everything cause that's kinda creepy if you're the guy who's always responding to everything everybody writes about you.? I think there was some guy on Usenet who used to do that and they came up with a name for it.? You know, Godwin's Law?? Something like that where...
Spolsky: Yeah, what the heck was his name?? It was like 'scrid' or something [Transcribers' note: Jeff's show notes identify him as 'Kibo'].? It was something that could be grep'd, and he used to just grep for himself.
Atwood: Right, and then anytime you invoked his name, it was like Beetlejuice.? You know, he was 'poof', he was there.? So I don't want to be that guy necessarily.
Spolsky: He showed up [laughs].? What was that guy's name?? That's funny.? He would just show up in any usenet group anywhere.
Atwood: You realize that when I talk about this stuff, then I have to go research it.? That's why it takes me so long to do these notes for the show, but I will have the link in the notes for the show of this guy.? But I do pick up some interesting things and I enjoy reading them, and one thing I picked up, gosh I suppose it was over the weekend, was - and you'll like this one - and the title of it is Don't let Jeff Atwood lead your web project.
Spolsky: Oh, yeah, Marco?
Atwood: [laughing] This guy, Marco Arment, who is the lead developer at Tumblr.? Which I like.? I like Tumblr, Tumblr is really cool.? He also has some site, Instapaper, and then he was also at this web search engine, Clusty, which we actually looked at.? We were researching sort of the way web search engines worked and search results.? Clusty would do clustering around, like, different vectors of a term like "jaguar".? Like "jaguar" could refer to: Atari Jaguar; it could refer to a jaguar, the big cat; it could refer to an OS X variant; it would do clustering like that.? And I think Google kind of does a little bit of that now.? I don't know what happened to Clusty, but it was a neat site.? But was frustrating to me about this post was that-- it's fine, I don't mind people criticizing me and in fact, if it's good criticism, what we call "constructive" criticism, then it's actually helpful.? But I did not find Marco's post to be very constructive because there's nothing in it that really explains what he thinks I'm really doing wrong.? I mean, he sort of vaguely alludes to the fact that I sort of said negative things about PHP, which I don't think I actually did [laughs nervously].? I get a little frustrated with sometimes the way people interpret my posts because I wasn't really saying that PHP sucks.? What I was saying was a good developer can write awesome stuff in anything.? Right?? Whether the language is good or not ends up kind of being secondary to whether what you've created is actually good and interesting and useful or not.
Spolsky: Yeah, I have to agree with you. Yeah.
Atwood: And I really wasn't dissing PHP.
Spolsky: Yeah.
Atwood: Yeah, so I'm a little frustrated. I had a little sound clip. I got Pamela hooked up, and I want to play a little sound clip as my response to that so here we go, it's 14 seconds:
Sound Clip:? Other rappers diss me.? Say my rhymes are sissy.? Why? Why? Why? What? Why, exactly?? What? Why?? Be more constructive with your feedback, please.? Why? Why?
Atwood: So that's my excuse to play...
Spolsky: Flight of the Conchords.
Atwood: Flight of the Conchords[laughs]. [rapping] "Be more constructive with your feedback!" [/rapping]? So that's...
Spolsky: Thank you very much for that "Brit" [mispronouncing "Bret" on purpose, one of the members of that duo]. "Brit", "Brits"...
Atwood: Oh, my wife and I, we love the Conchords. We're kind of actually a little bit obsessed with them now. They were in...
Spolsky: You know, I'm a New Zealander, so all those jokes, like when he says "Brit?", "No, Brit", "You mean Brit?", "No, Brit".
Atwood: [laughs]
Spolsky: [laughing] Because it's "Bret" of course.? With an E.? New Zealanders say "Brit".
Atwood: Yes, lots of love for the Conchords.? They had a concert here but, one problem with the Bay Area is a lot of the cool concerts sell out in seconds.
Spolsky: Right, right.
Atwood: And they even had a second show, and they all sold out.? And of course they were scalped like crazy, which makes you hate the scalpers even more than you already do, and it's just unpleasant.? But we didn't get to see the concert, and they actually played the Google I/O conference as well, which I was really bitter about that.
Spolsky: Yeah, yeah.
Atwood: Cuz if I had known they were playing at the Google I/O conference I would have pulled strings to actually get me a ticket or an invite...
Spolsky: Yeah, a couple of Fog Creek people went to that.
Atwood: Yeah.
Spolsky: I heard it was great. I actually heard that that was the best part of the conference.
Atwood: Aw... That just-- that does not please me, I don't like hearing it.
Spolsky: [laughing] Sorry.
Atwood: But I do have-- I recommend that the Flight of the Conchords album is available on Amazon MP3, DRM-free, and I highly recommend it.? I think it's hilarious.? And also the show, which is on HBO, right, Flight of the Conchords, excellent show.? So really that was just an excuse for me to play Flight of the Conchords.? So I apologize, Marco, but I do wish you could tell me like why I suck, like what am I doing wrong?? Like...
Spolsky: Yeah, you know I think that it's just that you're just generally an idiot.? Um, but, then again [laughing] that's his opinion.
Atwood: Yeah.? No, no.? And it's a valid opinion but I-- Well, what specifically?? I don't know.? I just-- my analytical programmer mind can't let it go a little bit, you know what I mean.? I get it on a personal level, it's like "Okay, you don't like what I'm doing".? That's fine.
Spolsky: Well listen, if you're really searching, then search on my name and you'll find all these people complaining about how I interrupt you, and I never listen to what you're saying, and I'm the idiot, and you're the wise one on the show.? And that's fine, because what's cool is, the more-- that's just going to make people listen to the podcast more.? That's the way it is with podcasts.? There is nothing more fun than listening to two people, one of whom you hate, one of them you like.
Atwood: That's true.
Spolsky: It doesn't matter which is which.? It's just so much more fun than if you like them both, or if you're-- there has to be like one guy there that you just want to punch.? Or you can't get emotional.
Atwood: [laughing] It's Joel.? You guys should-- you should punch Joel.? Joel is the guy that's-- I'm you're friend.? Joel, I don't know, he's crazy, so.
Spolsky: Remember, in the early days we were talking about setting up some deliberate conflict debates, just to make the show more interesting.
Atwood: We could.? Well, hopefully that's what the questions do.? I mean, that's-- hopefully.
Spolsky: Yeah.
Atwood: Hey, did you want to talk about, um... you had the Fog Creek Management Training program? The reading list? Cuz we had our [lists?] for a long time. 
Spolsky: Yes.
Atwood: And I don't have a ton of StackOverflow stuff to talk about. I mean, we have a lot of progress on the site, but it's just been a short week, so it's tough for me to have a lot of topics at the top of mind.
Spolsky: Yeah, and to be honest we didn't get a whole lot of recorded questions this week.
Atwood: Okay.
Spolsky: So we should talk about books.
Atwood: Yeah, books are fun.? We love books.
Spolsky: There was one book question... you still there?
Atwood: Yeah, I'm still here.
Spolsky: Okay, I don't know, I clicked something and then I heard a click sound, and thought I might have [unclicked?] you.
Atwood: No, no.? I'm alive.
Spolsky: Um, alright forget that question. That's not really relevant. But alright, let's see. The books... SMTP... uh no, that's not what I meant...
Atwood: Yeah, it's the Fog Creek MBA Curriculum dot HTML.? http://www.joelonsoftware.com/articles/FogCreekMBACurriculum.html ]
Spolsky: Ah, Fog Creek MBA...
Atwood: ...Curriculum dot HTML. 
Spolsky: Yeah.
Atwood: There's a lot of books here, so [laughs].
Spolsky: Some of them aren't that good.? Um, okay.
Atwood: Maybe... I'm not going to read the list.? What you should do is, why don't you go down the list and just highlight the ones that you think are interesting, and I'll make remarks as appropriate.
Spolsky: Where in the heck did this go?
Atwood: Are you still trying to find it?
Spolsky: [Laughing] Penetrating[?] program books... Ah, here we are: reading list, software management training program.? So, there will be a link in our show notes if you're missing this.? What I'm going to do is go through the list really rapidly and highlight the great ones and the random ones, and I'll explain why some of the things that are on there are on there.? Ah, yeah I can do this pretty quickly, um...
Atwood: Okay, wait, before we start... The intent of this book list is to support - you guys have a management training program?
Spolsky: We do.
Atwood: Okay.? And so are these the type of books that your average programmer should read, or just people who want to ultimately run their own companies, I mean, what's the audience here?
Spolsky: There's a couple of goals for our management training program.? The first is to take - I mean our original goal actually, was to take the kind of people that go to good schools, want to get into business, want to go get an MBA, and need to get some real-world experience before they can get their MBA.? A lot of them go to management consulting for two years and they do real drudgery and they get paid nothing and they get treated like crap and the drudgery they do is just stupid, but they have to do it because they want to get into business school, and the business schools need to see a couple of years of real-world experience.? Plus, the management consulting firms make those jobs sound extra extra excellent.? When they're recruiting on campus, they're always like "We have offices in Paris, London, Moscow, Sydney!", and what that means is: you will never go to Paris, London...
Atwood: You'll be in Des Moines, like I was.
Spolsky: [Laughing] Yes. You are not going to Sydney, because we have an office there. Where we don't have an office is Tulsa, and that's where you're going! [Laughs] So, those programs sound really great, and we thought a lot of kids who are interested in that might be interested in something like this.? What it turned out - you know, we're learning slowly - but what it turns out is that the ideal candidate for our software management training program is a programmer who has been working for 5 to 10 years and has managed to be completely oblivious to the business side of software, and really wants to move into management or start their own company, and they're just missing all this knowledge of everything that the suits do in their company.? They never got it, they were allowed to just be coders and so we came up with a program that sort of started out at 3 years but is now down to 2 years, where the academic component comes from going to school to get a Masters in the management of technology.? There are 3 programs in the management of technology in New York: at Columbia, NYU, and Poly.? So, a couple of people went to Columbia, um, the 2 people that are in it right now are going to Poly. They're pretty good programs, and then during their work hours at Fog Creek, they rotate through various different responsibilities, all of which are sort of "suit-like" in the company.? So, they'll rotate through sales, customer service, QA testing, program management, and they're usually given various semi-management tasks to work on.? It gives them a lot more experience with the not-coding side of a software company.
Atwood: And just to support your point.? I have the minority opinion that being a software developer - the way to become a better software developer is not necessarily to do all the coding you can forever, but also to complement those coding skills with also business skills, communication skills.? So I believe even if you have no intention of starting your own company, I think it will better you as a programmer to study some of the business stuff.? I mean, I know it's kind of a minority opinion, but I really believe that.
Spolsky: No, you're probably right.? And in fact I would even go so far to say that a coder, a software developer, in the first 5 years of their career - and this number may vary radically - they acquire a set of programming skills that tend to sort of plateau.? At some point, you're as good a coder as you're ever going to be.? And, it may be for some people it may be 1 year and they may be doing when they're 19 because they started coding when they were 12.? For some people it may take more than 5 years.? You know, that obviously varies, but there is sort of a plateau at which point you sort of sit down and you write really good code.? I remember, after about a year of programming, I got to the point where the compiler never complained about anything I did.? Like before that, it was like "How do I get the compiler to accept what I'm typing at it?" [laughs] cuz I would just be making syntax errors left and right.? I got to the point where pretty much I didn't make syntax errors.? You know, I started making logic errors, and that was - that's one milestone.? But, you know, obviously as time goes on you get better and better and you start - and one of the things that I've noticed is once you sort of - at some point, you kind of max out on how good code you can write.? Then what tends to happen for a lot of people - and a lot of people have reported this and I feel the same way - is that you actually get wiser about what you do.? You do things in a much more intelligent way the first time, but you also get slower about doing them.? So, for example, it'll take me - it might take me a week to get around to writing 8 lines of code, but those 8 lines of code that it took me a week to write are going to do what some other kid spent a week, wrote 800 lines of code with 33 bugs that he had to debug on Wednesday, Thursday, and Friday.? And so he'll wind up with, you know, hundreds of lines of code to do what my 8 lines did, just cuz I did it in a more intelligent way, but I didn't have quite the stamina to just really bang away at it.? So what I found is a lot of software developers, they sort of hit a plateau with their coding skills, and then they start doing more and more intelligent things with code, but it's kind of - that's the good thing, but the bad news is that they have less stamina for coding so they don't write as much code, and so their output tends to level off.? And that's just with the code until, Jeff, I think what you're saying, which I agree with, is that at that point you really need to start thinking about communication skills and business skills and econ[omics] and design skills and a whole lot of other things, besides [writing code]. 
Atwood: Well, I think writing code, for a long time, is it's own reward.? It's like you write code because you love to write code.? And then eventually reach a point where you love the code enough to write as little of it as you humanly can.? Right?? You sort of let go a little bit of writing code for the sake of writing code.? Cuz it is fun, it's really fun to build stuff, and that doesn't go away.? But you start to ask "Well, why am I writing this?" That becomes the more important question that "because we can write code".? And it's always amusing to me how often I'll post stuff and developers - it's like a knee-jerk reaction every time - "well, the answer to this is obviously is more code."? Right?? Like that's the answer to all problems that we have in the world - we just need to write more code to solve all these problems.? And you start to wonder, like, "Well, does that really work? Does that really scale? Is that really going to solve the problem?"? I mean, that's sort of the way I look at it.? And I still do love writing code. I mean, I really enjoy it, but I think you get a lot more perspective over time.
Spolsky: You also tend to find these shortcuts.? You're always trying to think "How could I do this with less code?" or "How could I reuse some other thing that already exists as a way to do this thing?"
Atwood: Yes, exactly... So, let's go down the list.? This is a great list.
Spolsky: Okay here we go.? Some of you have read some of these books.? There's The Mythical Man-Month which is kinda famous - everybody's read that, right?? I mean it's really sort of the--gives you a basic understanding of what it takes to get a development team to work together; and mainly the problem that that book gets into is that adding people doesn't necessarily help make things come in on time.
Atwood: That is the one, true classic book, I think.? I think everyone should read it. 
Spolsky: Yeah.?
Atwood: You should just have it. It's sort of like?The Bible of software books.? I mean, it was sort of?the first major?software book and you owe it to yourself to read it if you haven't.
Spolsky: Yeah. Yeah, I actually?just gave it to my whole?sales team to read.? Um, so let's see.? Don't Make Me Think?[by] Steve Krug.? That's actually one of the better books about user-interface design that gets into some of the theory of user-interface design rather than the practice.? There's an awful?lot of books that tell you "do this, don't do this, put this here, don't put that there" but underlying all that is sort of this theory of people are malicious,?stupid, and bored?and don't want to deal with your app; and?really they're just not paying attention to what your app is doing and you really have to make them, you know.? So Steve Krug has a great book, and really it's about web usability but it applies to all?user-interface design.? So that's a pretty good UI design theory book.? 
Growing a Business by Paul Hawken, this is the guy that created Smith & Hawken which is a company that sells garden implements.? But he's created a couple companies over time and he's really got a philosophy of boot-strapping a company, of growing slowing and cautiously without using large sums of capital, without taking major risks, and really growing a business like you would grow a tree which is very different than the Silicon Valley model but it is the Fog Creek model of boot-strapping so that's why that's on there. 
Now this book DEC Is Dead, Long Live DEC - there's a bunch of books on here that I just picked because they were stories of high-tech firms, the origins of high-tech firms.? And when I was starting Fog Creek I could not get enough of these books that were just?like "here's the story of some stupid company that succeeded or failed."? And just the more I read about them sort of?the more I learned about, you know, what should be happening.? So there's a bunch of those in here not all of which are necessarily worth reading but some of which are.? So I'll call those out, I'll say you know, "this is just another story," when I pass through them. 
Applied Cryptography,?Second Edition -- ya know, probably only the first half of that book is really?important.? I think it is kind of important to understand what the algorithms are and what they can do and can't do.
Atwood: [jokingly] And you should be able to write them in C.
Spolsky: [laughs] You don't have to be able to prove them.? You should be able to understand that factoring a prime [sic, perhaps he meant large] number is what all this stuff depends on, and you should be able to understand what it means to sign something -- to digitally sign something.
Atwood: Yes.? No, the concepts are hugely important.? I totally agree.
Spolsky: Yeah, I mean?we use them all the time, yeah.
Atwood: Yeah, and he has a number of follow-up books where his focus has kind of changed over time; he's sort of gotten into more of the human aspects of, you know, "the algorithms can't save you when the people are stupid."
Spolsky: The interesting thing is that the first edition of Applied Cryptography has like almost a rant in there about how we really should replace replace cash with digital cash because it has the following properties: it's more anonymous; it's more secure; it's more... and ah, that just makes you laugh. And I think he completely turned around on that one. But that said you should know what it means to be public key cryptography -- you should know how public key systems work, you should know what signing -- what digital signing is, what hashes are for and why they work.
Philip and Alex's Guide to Web Publishing, that's the one with the little guy sitting there with the dog.? He really was a pioneer on the Internet, on the web, and he has a very humorous and light style of writing that made that kind of interesting, although now it's kind of a historical piece.? I don't really know how important it is anymore.
Atwood: Well, I want to kind of give that one a shout-out, because I actually bought that one because I saw people talking about it.? And I was surprised.? You're right, it's totally outdated in terms of the actual content but it's still a really compelling read, which surprised me.? And he also pioneered the style of something I'm very ambivalent about - it's text interspersed with random photos which I find a little...
Spolsky: Well, he's a photographer.
Atwood: Well I know but, like, I don't know, it's just I like the pictures, but...
Spolsky: You know what?? If he hadn't of done that, nobody would have known who he was.
Atwood: It works for him.? It works for him, I will say that.? I love that book, even though it's...
Spolsky: He wrote Travels with Samantha (sorry to interrupt) - when he wrote Travels with Samantha on the web, that was the first website you could go to where there was a person telling you a story and showing you pictures.
Atwood: Right. That book is worth getting, it really is.? You can get it for nothing, used.? And it's really a fun read.? So, I do recommend that one.? That's all.
Spolsky: Yeah. The style, I mean, I sort of copied the style of putting random pictures in, obviously, and I think that it actually makes people-- honestly, I feel like half of the success of Joel on Software is using a slightly larger font and having pretty pictures [laughs].? Just make the whole experience.
Okay, Sam's [Wiley's?] book Testing Computer Software, this is the classic book of what software testers do.? And it is a well-written and clear survey of the field of what software testers do.? Most software testers are not trained in software testing.? I don't know if there is such a thing as being trained in software testing, and so this is the book that you throw at them, and they read it, and then they're like "Okay, now I know how to do my job".
Atwood: Cool.
Spolsky: Design for Community, Derek [Pawazek]'s book is one of the only books about, like, how to do UI design such that communities can get created.? Have you read that one actually?
Atwood: I have not.? I've never heard of this book actually.
Spolsky: Oh, well that's sort of one of the classics.? Since we are doing a-- we are designing for community.? Now, it's a little bit-- I'm trying to remember why I'm not so excited about-- I'm half-hearted[ly] excited about it.? It's a half-good book.? I think that it doesn't really cover-- it doesn't really touch on all of the points of how to design for community, and it's a little outdated.? But this is a guy that was building web communities and it shares his experiences, so there's a lot to learn from it.? Let's put it this way, it's not quite-- you know, Clay Shirky's new book Here Comes Everybody sort of supersedes this a little bit.
Atwood: Right.
Spolsky: Version Control with Subversion, that's just on there because if you've never encountered version control you should understand how it works.
Atwood: Well, you know, one alternate there is Eric Sink [who] had a great series on source control.? And you know, this is a guy who wrote a source control system so he knows it inside and out, which was awesome.? I think he eventually published that.? I got to look up how.? I would almost recommend Eric's stuff as just "Here's what source control is.? Here's what source control is supposed to do for you".
Spolsky: Yeah.
Atwood: That was just a brilliant set of writing.? And, yeah, source control is important.
Spolsky: Yeah, if you use source control and you know about it, just ignore that [book].
Now, The Non-Designer's Design Book is awesome. It's written by a designer who happens to be named Robin Williams.? It's not that Robin Williams.? And she is a, I think, Santa Fe based graphic designer, and she's written a couple of books on the general topic of "Here's how you design stuff" and mostly about how the page should be designed.? But it all applies to the web and to any kind of graphic design you do.? And again, it's some very simple principles that you can apply to making things look better, like just lining things up.? Things like, "things should be lined up."
Atwood: And this is another point where, as a programmer, it's like "I don't have to do any of that design stuff, somebody else does that".? I think as a developer, you really should know basic design principles too.? Like you should know enough not to make a page that looks just like a GoDaddy.com for example.
Spolsky: Well, I think that programmers are very frustrated by that, because they think that it's an artistic thing that they've never been taught how to do, and they don't think of themselves necessarily as being artistic or having artistic skills.? And actually, the great thing about Robin Williams is that she shows you some of the underlying principles here, of how this stuff works in a way that is completely understandable to a programmer because it's almost like algorithms that you follow and your pages look better and things look better-designed.
Atwood: Great book.? Highly recommended.
Spolsky: The Pragmatic Programmer.? Yeah, say something about that, I can't remember what the heck goes on in that book.
Atwood: Well, it's just a classic set of guidelines for programming without pulling your hair out. Basically, like, some of the classic concepts that people write blog posts about to this day, like "Don't Repeat Yourself" [the DRY principle], broken windows... Andy [Hunt] and Dave [Thomas], the pragprog guys, were really the first people to talk about this stuff, like in 2000.? I mean it shows you how young our craft really is, when we're talking about the people-- the first people to publicize this were in the year 2000, that was like 8 years ago!
Spolsky: Yeah.
Atwood: And now this is considered classic material, and for good reason.? Like, if you read The Pragmatic Programmer you'll be nodding your head like every 5 pages.? It's a lot of really good collected wisdom expressed in a very down to earth way.? It's very complementary to Code Complete, I think.
Spolsky: Yeah.
Atwood: I would recommend them almost side by side.
Spolsky: Yeah, or what about the Robert Glass book Facts and Fallacies of Software Engineering?
Atwood: Oh sure, absolutely.
Spolsky: A lot of the same topics.
Atwood: Yep, another great, great book.
Spolsky: Yeah, Robert Glass is somebody that a lot of people, I hesitate to say, our age have not heard of, because he's really the previous generations' Jeff Atwood. [laughs]
Atwood: You give me too much credit.? That's way too much credit.
Spolsky: [laughing] From?two previous generations.? A combination of Joel Spolsky, Jeff Atwood, and Paul Graham, all put together.
Atwood: Right.
Spolsky: I want to scroll back a little bit.? Measuring and Managing Performance in Organizations by Robert Austin.? Something that I'm a big believer in, that when you try to measure people's performance, individual's performance, and you try to do these scientific experiments where you're like "If you do this, what will be the result?" the people are self-aware, unlike things that you'd normally do scientific experiments on.
Atwood: Machines?
Spolsky: Yeah, say machines or chemistry experiments.? You're sure they do these chemistry experiments and the chemicals don't know what you're doing, but people do.? And so, his thesis is that when you try to measure performance in organizations, in order to get better results-- for example, you decide to start paying programmers for not writing, not creating bugs, and you think this will make better code, then for a very short period of time you actually get the results that you wanted.? For a short period of time.? But very rapidly, the people figure out how to game the system and how to get the measurements that you want while maybe doing something that is not-- that is perverse for the organization.? So this is-- I could go on this for hours and hours and hours, but luckily Robert Austin already has, and this is a book that's fairly academic.? He's a professor of [?] business school, and it's on a subject that it's just hard to find a lot of people that believe in this, so. [laughs] So, that's a good book to read.
The reason I put Paul Graham's Hackers and Painters is there's some good stuff in there. The best thing is "Why Nerds are Unpopular" at the beginning, and I think an understanding of the nerd personality type is fundamental to dealing with people in the software world.? I think that's really one of the-- there is a personality type that is extremely common among great programmers, and understanding that personality and putting that into context, is probably the most critical thing for a person who wants to manage programmers to do.
Atwood: Right, and Paul gets a lot of experience with that, being that he's running Y Combinator and dealing with all these young software entrepreneurs.
Spolsky: Yeah, and I think that that essay is what got him his audience which is gets him so much attention of people that apply to Y Combinator.
Atwood: Right.? Yeah, a lot of his early essays are really classic, so definitely worth reading.
Spolsky: Let's see, Competing on Internet Time is just another one of those like "Here's what was going on".? It's another one of those history of a business, kind of.? The whole concept of Internet Time turned out to be false [laughs] so maybe that book-- I really should delete that book.? You know, there was this idea that they said of Internet Time of things going fast, and you'd look out-- you know, cuz Netscape 1 came out and then Netscape 2 came out-- and you know what?? Any software product that you work on, the first few releases come out very quickly because there isn't a big installed base and a lot of backwards compatibility.? You can just sort of knock things out, and you actually add features very rapidly to a new computing system, which you just cannot do when that system is more mature.? So, I don't think there was anything about the Internet that made there be a short release cycle. I just think that was just a complete fallacy.? So forget this [book].
Atwood: Okay.? We'll?[scrap] that one.
Spolsky: There are some sort of internal, like "what happened at Netscape?" stories that are interesting.
The Inmates are Running the Asylum.? Alan Cooper, a famous UI expert, has written a lot of books about user interface design.? All of them are good.? This is one of the best.? He does manage to squeeze more words into fewer thoughts than anybody else I know, he really does cram the words in there.
Atwood: Well, hey, did you notice that the newer editions of About Face [The Essentials of User Interface Design]?? There's been about 3 versions of About Face now, and he keeps adding authors, but it makes it better because it sort of dilutes some of the Cooper-isms that we sort of...
Spolsky: Cool.
Atwood: Yeah, so I will say, get newer editions of the Cooper books, particularly About Face because he adds authors, and it really does help the book when there's more than one author - in his case.? Although, Cooper is great, but there is such a thing as too much Cooper.? Definitely.
Spolsky: Yeah, he's saying the right things, you just kind of have to speed-read to get them at about the right speed.
Atwood: He kind of likes to bludgeon you with it.
Spolsky: Donald Norman, The Design of Everyday Things, he's the mother of all UI design books, and this is even before there was UI design.? This book - The Design of Everyday Things, which I believe was renamed [from]?The Psychology of Everyday Things - that's the same book.
[Transcriber's note: this book was originally titled The Psychology of Everyday Things (1988), but is now titled The Design of Everyday Things (2002).]
Atwood: Oh, that's right, that's right. That's just a classic. There's nothing really else to say about it other than it's truly a classic, so...
Spolsky: He talks about things like "What makes a door work?"? Why are some doors easy to go through and some doors seem to confuse people?? Stuff like that, that really is very similar to UI design but he was talking about this before there was that much UI.? And, so this book has examples like a clock radio that's hard to use.
Atwood: But you know, that made me feel good reading that though, because I figured if I can't get software UI to work, then there's people who can't get door UI to work!? It made me feel a little bit better about what I was doing cuz I figure, okay, the software is a little harder than a door, so if it's hard to get a door right, imagine how hard it is to get software right with all these buttons and dialogs and things, so...
Spolsky: Yeah.? Alright, The Difference Between God and Larry Ellison, just another insider account of Oracle.
 How Bill Gates Fumbled the Future of Microsoft, just another insider...
Atwood: Hey, wait! We can't just gloss over The Difference Between God and Larry Ellison!? That's probably my favorite technical book title, it's hilarious [laughs].? Larry Ellison is-- I don't know if you know much about Larry Ellison but I'll link his Wikipedia article I guess but Larry Ellison is kind of a strange guy.? I think he fancies himself like sort of a-- literally like a tech ninja.? He's a very strange guy and worth reading about, he's quite a personality [laughs].
Spolsky: Yeah.
Atwood: Anyway, that's all.
Spolsky: So anyway, the subtitle of The Difference Between God and Larry Ellison is that God Doesn't Think He's Larry Ellison.? Get it?? [deadpan] Ha ha. [/deadpan] Okay [laughs].? That's actually the title of the book!? But, you know, I just put it on there [the list] cuz pretty much anything that was the story of a software company or an Internet company, I just threw in here. 
Similarly, How Bill Gates Fumbled the Future of Microsoft - a lot of insider stuff about Microsoft. I think it was taken from those emails that they had to submit in some antitrust case. 
Linus Torvalds' Just For Fun - his story about creating Linux. 
On a Roll, by Howard Jonas, is the story of IDT which was an early Internet Service Provider and again just another story of an Internet startup. 
The First $20 Million is Always the Hardest is actually a novel about a fictitious software company or hardware company or something in the Valley - ah, you can skip it - it's just another thing to read if you want to know how Silicon Valley works, and it's in the form of a novel which makes it in some ways more true than a non-fiction story because when you're telling a fiction story, you're limited to the facts but when you're making up a novel, you can come up with the exact facts that you want [laughing] that most closely corresponds to the general truth.
Atwood: Right, and hey, complementary to that, have you seen the documentary Startup.com?
Spolsky: Oh yeah, that's not a bad one!? Yeah, that's a good movie.
Atwood: That-- I would maybe add that because that shows some of the pathology of some of the early web bubble stuff that's just-- it's amazing, so...
Spolsky: It's kind of insane, but I mean you know what?? I don't think that was unique to that period.? I think a lot of companies start with that kind of hubris and that kind of misunderstanding and that kind of overhiring and all those pathologies...
Atwood: The reason I thought about that is cuz you said, you know, you couldn't make this stuff up, it seems fake.? Like, you're watching-- this is truly a documentary, this stuff all happened, these to real people.? And you would swear it's like a reality show where everything is sort of semi-scripted and not really [real]-- but it's astonishing.? I'll link it in the show notes, but, yeah.
Spolsky: Alright, so Random Excess is the story of Corel which is a Canadian-based software company that made some photo-editing software for Windows, before Photoshop was available for Windows and now they, you know, they bought WordPerfect and stuff.? But it's just sort of the history, the rise and fall of the company.? It's a very hard book to find.? You can get it like used, in bookstores in Canada and stuff.? I don't even know if it was published in the United States, so it's tricky to get.? But again, it's just another story of a software company.? 
Showstopper! by G. Pascal Zachary is the story of creating Windows NT version 1.0, which they called version 3.1, but it was version 1.0.? And it's just basically the story of creating a new operating system and it's fantastic!
Atwood: It is, it's really good.? And you know Dave Cutler, the primary architect, was just this fascinating guy.? I love the sections on Dave Cutler because he's sort of the anti-Unix guy and it's weird to me to think that there's basically only two operating systems in the world now.? There's pretty much everything is either Unix or Windows NT-based, which is based on I think VMS, which is what is...
Spolsky: It's not based on it.
Atwood: Well, it's inherited.
Spolsky: It's written from scratch.? A lot of the underlying philosophy takes some things from VMS.? For example, the concept of objects that it uses is from VMS.? The concept of access control lists is from VMS.? But it really was a from-scratch operating system.
Atwood: Right, and [is] anyone even building that anymore?
Spolsky: Yes.
Atwood: Do you think there will ever be another operating system in our lifetime that matters?
Spolsky: Yeah, people make them all the time.? Oh, that matter? [laughs]
Atwood: Yeah, that ends up getting significant market share?? I don't know.? But anyway, fantastic book!? Really highly recommended.
Spolsky: The Leap is just a guy who made an Internet company called the HomePortfolio, which is his website where you can find, like, let's say you're looking for a faucet for your bathroom renovation, they will have all the faucets there.? And it's just sort of one of the stories of one of these crazy dot com companies.? They maxed out their credit cards, they spent a lot of time talking to VCs, some of the VCs were stupid, some of them were smart, et cetera, et cetera... 
Okay, Digital Hustlers - what the heck is that about?
Atwood: If you can't remember, then that's not good.
Spolsky: Yeah, don't get that one.? Wait, let's see, let's look-- I'll zoom in on Amazon and see what it says here: "Living large and falling hard in Silicon Valley [sic]", oh man, oh "Silicon Alley".
Atwood: You're not even in Silicon Valley!
Spolsky: It's Silicon Alley.
Atwood: Oh, Silicon Alley.
Spolsky: Okay, I have no idea. This is just one of those books you read to get some of the insider knowledge and you don't have to read them all.
In Search of Stupidity, Rick Chapman's book, he wrote this great book about basically why the first generation of software companies all fell to Microsoft.? So, here's why Lotus fell to Microsoft, and here's why WordPerfect fell to Microsoft, and here's why Novell fell to Microsoft.? And his general thesis - which I tend to agree with - is that it wasn't that Microsoft was so smart, it's that all of these companies made some critical, crucial, and easily pointed-to mistake they made.? There was a goof, in all of these companies.? And Microsoft just didn't make that mistake, and won by default practically, because they didn't make the mistake.? So, some funny stories about what happened, really mostly around the first gen of PC software companies: Ashton-Tate, Novell, Lotus, that kind of stuff.
Startup is an older book.? It's about a company, a Silicon Valley VC-funded startup that was created, called Go, to create a tablet computer, before anybody knew what a tablet computer was, before they even really had laptops.? And, it was an abject failure but, again, a lot of the insider stuff: what goes on in typical VC-funded, typical Silicon Valley companies.? Even though it's very old, it's really completely contemporary in terms of the what goes on and stuff.
Atwood: Well, you know, pen and touch and stuff is one of those things that's taken 15, 20 years to catch on.? I remember all those really early infatuations people had with pen computing.? Remember that?
Spolsky: Yeah.? Well, they thought...
Atwood: Even now, we still don't have it.
Spolsky: The theory was that the old business people would never type, because they have secretaries to type, and they never learned how to type, they didn't want to type.? And so pen was supposed to alleviate that. And then there was this special niche of the UPS driver, and the doctors walking around.? But mostly the theory was that the older business executives, and lo and behold they retired, and the next generation knew how to type.? And that was that.
Atwood: But there are always-- you'll still meet people that are really into like-- there's a bunch of really cool tablet features in Vista.? Like many features in Vista, almost nobody uses them, right?? But they're actually pretty cool and people who use them swear by them.? They love tablets, they wish every laptop was a tablet, and we're still not really there yet.? So, anyway...
Spolsky: And we may never be.? Okay, Peopleware, 'nuff said.? Best book ever.
Atwood: Yep, great book.
Spolsky: I don't even think-- I don't think there's anybody listening to this podcast... [laughs]
Atwood: Yes.
Spolsky: If you have not yet read Peopleware, what are you...
Atwood: Do not pass GO, do not collect $200, go straight to your favorite bookstore and buy it.? Yeah.
Spolsky: It probably should just be first on this list, cuz it's just the n'est plus ultra, the ultimate bible, the source of all knowledge, which is that: SOFTWARE MANAGEMENT IS ABOUT PEOPLE.
Atwood: Right, and I would also advise people to spider down the book list.? DeMarco and Lister have written other books that are also very good.? So, if you like Peopleware and you think it's classic, walk the list.? Read some of their other stuff.
Spolsky: Yeah. The Macintosh Way is Guy Kawasaki, one of his early books.? He's written a lot of books, but this is-- in the early days, he was the evangelist for Macintosh.? And by being an evangelist - I think he made up that word - I think pretty much it is fair to credit him with the concept of "tech evangelism": the idea that you are almost a religious leader trying to get people to adopt your religion.? And...
Atwood: Yeah, anybody who does any kind of evangelism, that's always the spiritual godfather, is Guy Kawasaki, who was really the first to do it.
Spolsky: The book is great.? Ah, Microsoft Rebooted, yet another inside-Microsoft book.
 Speeding the Net, yet another Netscape book. 
aol.com, there you go, there's the story of AOL. 
dot.bomb, is the story of an e-commerce company in the first dot com boom that was just sort of a hysterical laughing-stock failure. [Joel and Jeff laughing] There was a time when all dot com companies were failing and some of them got written-up and at least they got a book out of it.
Atwood: I'm kind of glad I wasn't in California for that, cuz I think it would have been bad.? I think it was bad for most programmers.? That's one think I don't like about that...
Spolsky: These guys-- dot.bomb was interesting cuz they were in Virginia or something so they didn't even have...
Atwood: [surprised] Oh, they were?!
Spolsky: Yeah, they didn't even have the benefits of-- they were actually in your hometown.? They were in Charlottes... ver... berg... ville...
Atwood: Charlottesville?
Spolsky: Charlottesville, yes.
Atwood: Okay, that's where I went-- I went to the University of Virginia, so I spent some time in Charlottesville.? Interesting, maybe I'll...
Spolsky: It was a company called Value America, and I'm almost certain that it was in Charlottesville.
Atwood: Interesting.
Spolsky: Yes, [interesting]...
Atwood: I will look that one up.
Spolsky: ...company.? The New New Thing by Michael Lewis is the story of... not Netscape, but what was next... no, maybe it was Netscape.
Atwood: I've heard the title, but I don't know this book.
Spolsky: It's basically the story of Jim Clark, who created Silicon Graphics and Netscape.
Atwood: Oh, right, Jim Clark.? Yes.
Spolsky: Oh I know what it was: this was his book about this company that he was starting called Healtheon which was a failure.
Atwood: Right.
Spolsky: But anyway, Burn Rate is a story of a New York based Internet entrepreneur-- or journalist turned entrepreneur turned journalist. Yet another inside story of a startup that's sort of tech-related so that's why it's on there. 
Accidental Empires [by] Robert Cringely is basically the great classic story of how Microsoft got to be Microsoft. 
Atwood: I love Cringely. He also has 2 videos: Revenge of the Geeks? [Transcribers' note: It was actually called Triumph of the Nerds]? Oh gosh, I've linked to it before.? But there's a video series that's very complementary to this book, where he talks about the history.? It's about the time Windows 95 was launched, that's when he filmed it.? But I love Cringely.? He's still around, he still writes his columns.
Spolsky: That's a different human, but it's the same name.? Yeah.
Atwood: [astonished] It's a different person?!
Spolsky: Yeah.
Atwood: You're kidding me!
Spolsky: Yeah, they switched.? It's like Bewitched, [laughing] how they switched the actor.
Atwood: Oh man!? This is so uncool.
Spolsky: Yeah.
Atwood: Aw!? Okay, I did not know that.? I'm disturbed.? But anyway, proceed.
Spolsky: [laughing] Robert Cringely was originally, like, the rumors column in the back of one of those weekly computer magazines.? It was either PC Week or InfoWorld, I forget.? And they had this rumors column and they didn't want to take-- they wanted to appear anonymous so they had the made-up name Robert Cringely and there was some kind of dispute over who got to keep the name and the current one is not the same as the old one.
Atwood: [?]
Spolsky: Yeah [laughs].? Revolution in the Valley is about Macs, good book, lots of pictures, lot of fun.
Atwood: Just to interject, we're probably going to run out of time here.? So what I would do at this point is just pick the ones you really like in the last quarter of the list.
Spolsky: [sarcastically] Oh geez, but we're having so much fun [/sarcastically]. Okay.
Atwood: I know, but it's an hour, so.
Spolsky: Ow.? Okay.
Atwood: There's a lot of good books.? This is a lesson-- is that we do love books.? I mean, StackOverflow is about "okay, people don't read anymore" and yet there's so many fantastic books, right, that you'd never have time to read them all. [laughs]
Spolsky: These are all good. You have to read all of these, I'm sorry. [Scanning the list] Yeah, you pretty much have to go back and read all of these.
Atwood: They're all that good.
Spolsky: Well, I mean they're all useful.? The only category I would say is that there's a handful of these that are just more-- there's a bunch of them, and I'll just list them-- that are just more stories of inside companies.? 
There's the inside story of Ben & Jerry's [Ben & Jerry's: The Inside Scoop] which is a great bootstrapping example.? 
Microserfs is a made-up story but it captures something about the life of a programmer.? 
The Art of the Start, that's another Kawasaki book so maybe you don't need all of them. 
The Business of Software [Joel?makes no comment]. 
A Random Walk Down Wall Street [Joel makes no comment]. 
21 Dog Years, is sort of a story of inside Amazon from the trenches. 
Inside Intuit, is the story of Intuit. 
Direct from Dell, is the story of Dell. 
Amazonia, is another inside story about Amazon. 
The Paypal Wars is the inside story of PayPal. 
The Search, is about Google. 
High Stakes, No Prisoners, is about this company, Vermeer, which is bought by Microsoft and became Frontpage.
Atwood: [wearily] Oh yeah, Frontpage.
Spolsky: So those are all like-- you don't have to read every single one of those but it's kind of-- if you're doing a startup, it's nice to know what went on at other startups just to get a benchmark and to get a feel for what kind of mistakes you can make.? It can make you feel less lonely.? And so, the more of those you read the better, but you don't have to take them very seriously.? Everything else here is really like-- a lot of these books I have here are like the key introduction to a particularly important thing that you need to know about. 
So for example, The Goal and Critical Chain are about a particular way of looking at-- it's the Theory of Constraints, which is a sort of important business concept.? The Goal talks about it in a manufacturing context, like "How would you make a manufacturing plant?" where Critical Chain talks about it in a way that is actually relevant to software schedules.? So those 2 books are pretty important business concepts. 
A Random Walk Down Wall Street is probably the most important book you can ever read about personal investing. 
Crossing the Chasm is a pretty important book about marketing. 
Four Days with Dr. Deming is just a great look into the methods of management developed by somebody who is a guru to many.
Atwood: Yes.? Deming is very very famous in business circles.? Even I know that name.
Spolsky: Umm the uh... and then I would skip to, The E-Myth Revisited is sort of important, an important concept for entrepreneurs.? The e-myth is this idea that if you're a great programmer you should be able to make a software company, and its important to realize is that making a software company is not being a programmer, it's something else, and so The E-Myth Revisited?starts with a little - I don't know if its a true or an apocryphal story - about a woman who's in a pie shop, and she's made a pie shop, and she feels like she's an entrepreneur, but she's sweeping the floors and making pies all day, and thats all she has time for, and the important thing to learn is you can't be making the pies, you have to be making the system so that the people can make the pies, so that you can scale, because if you can't scale you're just working in your business, you're not working on your business.
Atwood: Right. Like if you're the CEO and you're spending all your time programming thats kind of a failure mode in and of itself.? Which is a hard pill for people who love programming to swallow, but this is what I was getting at earlier as well.
Spolsky: And then the next four, of whats left on the page here, the four most important to read are The Psychology of Persuasion by Robert Cialdini which is universally known as just Cialdini -- thats what everybody calls that book, its called "influence," and its about five techniques that people use to influence other people and it is basically the heart of all marketing, and also the heart of all scams.? And its important to protect yourself and understand the methods that people use to get you to comply to their requests and their desires, and thats a very very important book for everybody to read.? So thats one: I said there were four. 
Getting to Yes is probably the best book you could ever read about negotiating.? 
The Little Red Book Of Selling is a great book about selling, about doing sales, and if you only read one book about doing sales, it should be that. 
And How to Win Friends and Influence People is something I would just recommend to everybody, its a bizarre title, everybody's like "What?? How to win friends and influence people??? What is this, some kind of goofy..." and its a really really ancient book,? I mean its from the twenties or...
Atwood: Thirties, yeah, a really long time ago...
Spolsky: But its unbelievable, I give it to literally every sales person, every software management trainee on their first day, and they read it and say "You know, I thought this was going to be some kind of cheezy kind of thing", but there's a reason this has been a best seller for eighty years, I mean it really is incredible how there is a science of how to win friends and influence people. 
Atwood: Yeah, its not gamey, its more just like "be good to the people around you" which, I don't think it hurts to remind people of that... so its really based on just, being a good person.
Spolsky: Yeah, its not at all manipulation, and its not stuff you would have thought of, and its stuff that geeks tend to be particularly bad at and they wonder why other people are so good at making friends, and... and influencing people, and then you read this and you say well, here's 17 concrete things you can do: specific steps you can take.
Atwood: a) remember peoples names -- thats always a good one.? It's simple stuff, its algorithmic, right?? And the polar opposite of this book would a be like, there's all these crazy books on dating, where it's like "the game", its like "how to manipulate women into liking you, or to manipulate the opposite sex into liking you" -- this is not at all like that.? Those books are really evil [laughs] and wrong.? This is not like that.? This is the good spectrum of those kind of books, and you should read it for no other reason than that, actually.? 
Spolsky: So there we go, I guess we've gone through a lot of this... we're sort of out of time.? Everything else on here is, some of these things like Essentials of Accounting it's like, "eh", you gotta know how accounting works, you have to know what double entry bookkeeping is, this is one of the better books I've found that explains it in a clearer way, but if you have another one, or if you already know about that, that's ok too, its not the most superbly classic book.
Atwood: Right, just branch out into whatever you're interested in: I mean, follow your interests obviously, but I think my point is to cultivate interests that aren't all related around programming, I mean, you know, related things, things that take you in slightly different directions (but are still related to programming) so thats a lot of the message that I send out in my blog for sure.
Spolsky: So if I had to, you know what I'm going to do?? I'm going to go through this list one more time, and I'm just going to call out, like, the ones that are important things, you know, if you're an entrepreneur, if you're starting a high tech company, kind of the most important ones that you probably haven't encountered, you've probably already seen some of these, some of these are just filling you in, but: 
Don't Make Me Think is really important for understanding UI; 
The Non-Designer's Design Book is really important for understanding design;
 Facts and Fallacies of Software Engineering is one of the great -- like covers some of the things you probably don't know about software engineering... lets see, I'm just skipping through to try to find the ones like...? 
Peopleware is not missable. 
The Secrets of Consulting, I didn't mention this earlier, thats a good one, but... you can miss it.? Unless you want to do consulting.? If you're a software consultant.
Atwood: Yeah, the [Gerald M] Weinberg books are great as well.
Spolsky: Uh, The 22 Immutable Laws of Marketing, that's pretty much-- if you have to read one book on marketing-- well no, if you have to read one book on marketing read [Influence:] The Psychology of Persuasion by Robert Cialdini, that's probably better.? And Getting to Yes, because you probably do have to do negotiation.? You're going to have to negotiate with people in zero-sum games.? And Dale Carnegie [How to Win Friends and Influence People].
Atwood: Right. No, that's a good list, I'll definitely summarize it in the notes.? So do we have any other things we want to say before we go?
Spolsky: Okay.? Is this going to be the most boring podcast we ever had? [transcriber's note: yes]
Atwood: Uh, no.? I find it interesting. I mean-- no, I don't think so.? I find the book list very interesting.? I like to read books, and I think a lot of people that read my blog like to read books, so I think it's fun.
Spolsky: Okay.
Atwood: So.
Spolsky: What would be-- you've read some of these-- which is-- and we both agree that Peopleware is sort of a big highlight, but what would be your second book to tell everybody that everybody must read?
Atwood: Well, I think Don't Make Me Think.? I mean, that's probably my #2 book of all time, so if you haven't read that, definitely read that.? But, to me, the interesting thing about this list is the more business-oriented stuff, like how to negotiate, how to do marketing.? You know, stuff that as a programmer, you're not necessarily having a burning desire to learn, but I think it's very complementary to what you ultimately do, so, it's about branching out.
Spolsky: It's kind of weird: what I've discovered is there's so many fields where there is one book that is so much better than all the other books in the field, and it's recognized that way.? And it sells better.? For example, in the field of investing: The Mythical Man Month. [Transcribers' note: I think Joel meant to say A Random Walk Down Wall Street here!].? There's always just one book that stands head and shoulders above all the other books in the field and it's the obvious one to read if you want to learn about that field.? And then there's about a million little other books that you can fill in your knowledge later.? But, the big classics-- and I've put a lot of them on here.
Atwood: Right.? So resist the urge to just code non-stop.? I mean, put down the compiler for a minute and learn about some other aspects of the world that are related to this universe that we code in.? So, I think that's the message of this particular podcast.? So Joel...
Spolsky: Alright.?
Spolsky: Transcriptions? We're good, I think
Atwood: Okay, excellent.? I want to extend my invitation: If you want to be in the private beta, I'm not really accepting people in anymore, but if you do a little bit of transcription work - and again, it's honour system, I'm not really going to check up on you, we're all adults here - email me and I'll be happy to invite you to the private beta.? The private beta is still scheduled for this month, it's looking like it's going to be more towards the end of this month. [nervous giggle]
Atwood: It should still be this month-
Spolsky: Wait a minute, we've got to talk about schedules next week - but we're out of time [laughs]
Atwood: We can talk about schedules next week, that's no problem.? But then, as we always do, please submit questions, I think we're a little low on questions aren't we?? And we also want to urge people to...
Spolsky: Uh, you know what?? Not a quick question.? Think of something controversial for us to debate for next week.? If you've got a controversial thing that you think me and Jeff will disagree on, then that's what I'm going to play.? And what you do is record a little MP3 or Ogg Vorbis, and you email it to podcast@stackoverflow.com and we'll play it on the air. Try to keep it under 90 seconds.? There's a thing called BlogTalkRadio you can use if your computer is not setup to record, like you don't have a microphone or something. BlogTalkRadio has a phone number you can call, and it'll set you up with an MP3 you can mail us, it's quite simple.? Until then, we will see you next week!
Atwood: See you next week!
[1:09:07]
Outro, advertising
[1:10:01] 
Intro, advertising
[1:06]
Spolsky: I was listening to Adam Curry and John C. Dvorak going at it.? They have a podcast that's pretty good called "No Agenda."? And they were talking about how the Skype thing, Adam Curry is in England and John C. Dvorak is in California, and when they do Skype there is like a half second delay there. Or a second delay.
Atwood:??? Wow.
Spolsky:? They were talking specifically about that phenomena, of how that little bit of latency makes it seem like the other person isn't laughing at your jokes.? They are sort of begrudgingly conceding, maybe after some thought to provide a little bit of simulated laughter.
Atwood: [chuckle]
Spolsky: because of that slight delay there.
Atwood: Oh yeah, latency is evil stuff, no doubt.? Conversation destroyer.
Spolsky: if we ever get anyone to listen to our podcast, apparently you can switch to ISDN, and you get no latency. 
Atwood: Well we're only going across...We aren't going across an ocean like they are.
Spolsky: We aren't going nearly as far. Well I think most of the problem is the uphill bandwidth out of Fog Creek, coming out of Fog Creek, which is shared by a lot of people and that problem will go away after we move offices in a few months.
Atwood: You guy's should upgrade your AOL dial-up connection to something, you know like ISDN.
Spolsky: I hear they have 14.4 now, instead of 9600
Atwood: [chuckle] Exactly. So I have something from the previous show, you mentioned that you are an honorary Kiwi, an honorary New Zealander.
Spolsky: Not honorary, no I'm an actual New Zealander, I never said honorary, there was no honor. 
Atwood: Well, there is.
Spolsky: It is great to be a New Zealander.
Atwood: Alright, well explain please.
Spolsky: [chuckle] What, what, what?
Atwood: Well, why are you a New Zealander? You're not from... That was not mentioned in your Wikipedia entry, I cannot believe it to be true.
Spolsky: [chuckle] My father is a New Zealander... Do you want me to show you my passport? Good God!
Atwood: No, I didn't know this about... You're really a New Zealander?
Spolsky: Yes. I'll tell you the story. My father is a New Zealander, and for brief period of time, I don't know if this is still true, actually it is still true, before they had the Internet if you wanted to visit Australia, which I did, you needed a Visa as an American citizen. Nowadays you go on the website and you pay $10 and its done, but you used to have to go to their Consulate in person and apply for a Visa to visit Australia and I went to the Australian Consulate and stood in line for hours and hours and hours and this was the Consulate in Rockefeller Center in New York and I noticed that there was no line across the hall at the New Zealand Consulate because they don't require Visas. So it occurred to me that maybe New Zealanders don't need Visas to visit Australia. So I went to New Zealand Consulate and asked if it was true. And they said: "Indeed. New Zealanders can visit Australia without a Visa". And I said:"Well, I wanna be a New Zealander. My father is a New Zealander. Can I get a New Zealand passport?" And they said: "Certainly, Sir. Go down to the basement, get some pictures taken, bring them up". And I did, and they did, and they made me a passport. 
Atwood: That was nice.
Spolsky: That was very nice. So now I'm a New Zea... I mean, you know, by birth, I guess, I'm a New Zealand citizen.
Atwood: Oh, very cool. I didn't know. I know that FogBugz has the kiwi logo.
Spolsky: That's right. That's the part of the reason. That is a national flower, actually. People think it's a national bird, but it's a national flower in New Zealand.
Atwood: The kiwi is a flower?
Spolsky: No. Just kidding.
Atwood: Ok. [chuckle] Looks lot like a mammal.
Spolsky: [chuckle]
Atwood: I'm not a "scientist", so I ___
Spolsky: It's not mammal. It's a bird! It's a flightless bird. And that's his bug, that's why it's FogBugz. Get it, it's a bug: He can't fly.
Atwood: He is very cute. I do actually enjoyed that aspect of. And he goes sleep at night, which is, frequently, when I'm using system.
Spolsky: Oh, I'm glad that you noticed that, that's a good sign.
Atwood: Yes. Totally. What about the name "Fog Creek"? Why "Fog Creek"? What's fog and creeky about New York city?
Spolsky: Yeah. Well, we had a little creek in our original office. We called Fog Creek.
[pause]
Atwood: I'm not getting it. You actually had a creek?
Spolsky: Yeah, just like, well... more of a leaky faucet, I guess. Not a "creek" so much as a "dripping faucet that could not be completely contained".
Atwood: But surely naming, I know, naming is really difficult. And so much thoughts goes into this names. So what — is the nether meaning to the name?
Spolsky: Um. No.
Atwood: Ok. 
Spolsky: Yeah.
Atwood: Just... Ok. I'm a little disappointed, I've gotta tell you.
Spolsky: [chuckle]
Atwood: Not quite as exciting as I was hoping it would be.
Spolsky: You know, this things go in waves. You know, different trends. As time goes on it becomes different things become, right now it is very important to have something that's unique in Google. And to be able to get a domain name which is why you get all this [cthulhu sounds]. And thats an actual name of a Web 2.0 startup.
Atwood: Well, that's a little scary.
Spolsky: Yeah, it's just a lot of Q's and X's and the Hebrew letter Heth. 
Atwood: So I wanted to give a shoutout.? Somebody sent in a question recording and I totally abused their trust and stole their topic and posted it on my blog.? This guy, Yuvy?
Spolsky: Yeah
Atwood: He sent us a link to the Spartan Programming that I liked so much that I kinda stole it and put it on my blog.? But he sent us recordings as well so then I felt really guilty.
[6:25]
Spolsky: Spartan Programming - I saw that on your blog and I thought, you know, it's true really, we only really hire programmers with great abs, here at Fog Creek, and I'm in favor of that policy.
Spolsky: [chuckles]
Atwood: It's funny because... and I read it and I was like, "No, you're right", that basically is the same thing as Spartan Programming but , you know, much, much longer.? And it's ironic that — and poor Steve — oh, by the way I did contact Steve, he might be able to, if we want to have him on the podcast as sort a guest, 
Spolsky: Oh, great!
Atwood: ...in like a month or so... he's got like a vacation, and then he's got some deadline at Google that he's working on.? But I would love to have him on because we talk about him all the time and I kind of feel like he's here even though he's not here.
Spolsky: He's watching from the ceiling, like ceiling cat?
Atwood: I don't know why that is... [garbled] 
Spolsky: On the topic of Spartan Coding I've been noticing the same thing, the same kind of phenomenon, I haven't given it a trendy name, but in Visual Studio, or actually ASP.NET programming with C#, in version 2.0 it got possible to do a lot of things in very concise declarative ways, so an awful lot of web pages that just present, do basic CRUD stuff, you know present data, and format data, and just let you edit, update and delete data.? Absolutely stunning how much of that can be done entirely by declaratively creating these tags in your HTML file, much of which can be done with actually a graphical designer, so actually sitting with your left hand and just using your right hand with the mouse you can create, you know, fairly complex CRUD apps in a way that's really awesome.? And I've actually found that my old crappy code is the code in which I have 20 or 30 lines of C# doing something, and the elegant new code is the code where there's almost nothing in C# and almost everything is in the ASPX file, in the form of, what do you call that? ASP.NET HTML? Embellished HTML?
Atwood: I don't know if there's a word for it, but I know what you mean, it's basically a hybrid of HTML markup and then server directives. 
Spolsky: Right, but they're not even really server directives so much as like these custom tags, and the way ASP.NET works is that each of these tags, at run time, becomes an object, it gets created as an object, and all of these objects are nested in each other in the same way that your file is, and then some magical sequence of events happens, cascades over all these objects, and then generates your final page.? And it might call into your C# code, but it might not.? And I actually thought, I'm sure that you, by this point you already read Marco's reply to, to...
Atwood: Ooh, no I hadn't seen that actually, I'll go look that up.? Is it on his Tumblr blog? 
Spolsky: Eh, probably.? Anyway, he said, basically, that we're idiots for using ASP.NET, and that we should be using PHP like everybody else, it's perfectly good, and... Marco, you are wrong! You sir, are wrong.? PHP is a generation behind ASP.NET.? ASP.NET version 2.0 with C#.? Writing web apps like that is like driving around in a Lexus SUV, and you PHP guys are like riding bicycles.? Just wanted to say that.
Atwood: Oh, this is cool: I'm reading it now.? My lyrics are bottomless.? So, let me tell you Marco, if you're a Flight of the Concords fan, we can never be enemies, because I love everybody who loves Flight of the Concords.? So we'll always have that in common.? But I've really warmed up to the concept that, the whole thing about you know, "PHP sucks but it doesn't matter". It really is true.? I think it's possible to write good code in PHP and produce some really amazing sites. ? 
Spolsky: But you know what, ASP.NET, it's like having electric windows, and electric locks, and leather seats, with air conditioning, with cushions, and ahh!!? It's just a luxurious experience, and you pay for it, because you're going to have to pay $800 to put Windows on every server in your data center, so it's the expensive option, but you get your money's worth.
Atwood: Well the one thing I will say is that compiled performance is, I think underrated a little bit by the people who do dynamic stuff, because the way it is now, with compilation, you have to really really screw up to cause yourself a performance problem, whereas in PHP I think you have to be a lot more careful because everything's interpreted. And people always forget that these interpreted languages, it's like a factor of 100, the performance difference, I mean literally, like in McConnell's Code Complete 2, when he did the rewrite of Code Complete he put in examples in like Python, and I thought it was PHP, but the point being he was comparing compiled to interpreted and the difference is still as large in relative terms now as it was back in 1993 when he originally wrote that.? It's just fundamental to - I think - the science of languages.? I mean, there's a lot of really good work going on around Javascript to make it faster, but I think there's a limit to what you can do, and people underestimate the performance difference you're going to get.? Now, that said, you're going to spend most of your time talking to the database anyway, right? So... I think it just lets you be a little more loose in the way that you program and not have to worry about performance as much.? I mean, to me that's, I think one of the major differences.?
Spolsky: Right.
[12:14]
Atwood: But yeah, that's cool, I'm glad you pointed that out. Because I had looked for a response, but I didn't see one.? I'll have to read that at some length later.
Spolsky: [Chuckles]
Atwood: Let's talk a little bit more about StackOverflow and where we are.? So people are asking about the Beta, and you were asking about the beta.? So in the last podcast I snuck that in at the end of the schedule. 
Atwood: Well, right, right. So let me talk about that. Because you said, "it can be missing limbs" - which is - there's all these disturbing analogies like "we're going to flesh something out," what do, we start with a zombie and we just start grafting flesh?? It's disgusting! 
Spolsky: You start with a skeleton, and then you start - basically you get one of those things that the builders use to put glue behind the tiles... spatula! What are those called? Spackling knife, and you start slathering the flesh onto the skeleton.
[14:42]
Spolsky: I don't believe that has to be there on day 1.
Atwood: Well, I do though, because the whole ... keeping the system alive, plus being able to edit your mistakes.
Spolsky: I've had discussion forums for years where people can't edit their mistakes, and they survive and they get an audience.? It's not the end of the world.
Atwood: This isn't something that's gonna take us a month to implement. I think it's gonna be more like a 2 week thing to really get it working. But that's the main reason actually.
Spolsky: Nobody's gonna have enough karma to edit in the first 2 weeks anyway, so just launch without it, we'll wait till people get the karma, and we'll tell them that they need even more karma before they can edit [chuckling].
Atwood: You don't need karma to edit your own stuff though.
Spolsky: Oh I see. Weren't you going to make, like, a 30 minute rule or something like some people have. You know what, Jeff, people launch these conversation things all the time without editing. And sometimes they even see it as a virtue, where they're like "this makes people extra careful about what they post, because they know they're not going to be able to edit it. So they double check it three times."
Atwood: Well, I gotta tell you, the way Twitter works, there's no way we can have worse down time than Twitter. I feel like whatever we do, it'll be better in terms of uptime than what Twitter has.
Spolsky: Does Twitter have editing?
Atwood: No it doesn't.
Spolsky: Ah-ha!
Atwood: Well, you can delete your tweets though, which we don't even allow.
Spolsky: They're out there, they're gone, they're in the ether. It's like un-sending an email.
Atwood: OK, so the official statement of record is: maybe this month if the stars align correctly, but more realistically, definitely by the middle of next month (I think). I mean I've talked to the team and we all sort of have a consensus that we believe that's an achievable timeline. So the key pieces are all there, so people can actually give us meaningful feedback on all the features.
Spolsky: OK.
Atwood: Plus, it's a big beta. There's like 350 people on my beta list now. Plus my friends and your friends. I assume people at Fog Creek would be allowed to go into it. So this is like pretty big.
Spolsky: On weekends, from home.
Atwood: [Chuckles] This is gonna be full of useful things that will help them do their job 'though.
Spolsky: Let me play a question, that's kinda related to that, cause the answer to that question is the next thing I wanted to say.
[16:41]
Isaac Moses: Hi, this is Isaac Moses in Baltimore, Maryland.? Thanks a lot for the podcast, I'm really enjoying it.
Spolsky: Do we have a lot of listeners in Baltimore?? It seems like all these questions are coming from Baltimore.
Atwood: I don't know.
Spolsky: Maybe there's something wrong with the... maybe we're being blocked in the rest of the United States.
Atwood: I'd like to hear the rest of the question.
Spolsky: Yes. 
Isaac Moses: How do you plan to get people who know stuff to keep coming back to your site, and find questions that they know the answers to?? Thanks, 'bye.
Spolsky: Yeah.? I don't [garbled] a problem.
Atwood: Ah!? This is... this is a feature that's near and dear to my heart.? 'Cause I just implemented, uh, what will be called badges, so...? I am also a big fan of the Xbox 360, I believe it is one of the best products Microsoft has released in a long time...
Spolsky: Do they call them "badges"?
Atwood: ...much better...Ah, they're called "achievements" in the Xbox 360 system, and it's amazing how seductive these things are, like, when I read about this, I came late to the Xbox 360 'cause I was trying to get the most out of the last generation of gaming platforms...
Spolsky: [chuckles]
Atwood: I don't really like to buy a lot of consoles, it's just — there's a lot of hidden costs, and I'm really a PC gamer, I'm sort of a, again, I'm a snob, I'm a hardware snob, so of course I'm not gonna be into that, but Rock Band really pushed me over the edge.? And one of the things I found after reading about achievements, I was like, "Oh, that's dumb."? You know, as you play the game, you do things, and you get these little badges, these achievements that show up in your profile online, so people can see them.? See, that's the key thing — other people can see them, that's the really important piece of this.? I was like, "Oh, that doesn't matter."? And then, as I played the Xbox 360, I got these achievements, and I became totally obsessed with them.? I was like, "I have to have all these achievements for these games that I like," right?? Because I just, I want them, I must have them! [laughs]
It's amazing how quickly I turned around on that, so when it came to StackOverflow, I was like, I want to have something like achievements in StackOverflow.? So we have this "badges" system, which is very much analogous to Xbox 360 "achievements".
And there's really three roles that these things play.? The more I played games on the 360, the more I understood the genius of the achievements.? They do three things.
One, they encourage people to do all the things that the game lets you do.? Right, so some people will play a game and like never do some big piece of it just 'cause they never see it or never get around to it or whatever.
Spolsky: Seems boring when they're looking at it from the outside.
[pause]
Atwood: It totally seems boring from the outside, but I'm telling you, once you get in, it's so seductive...
Spolsky: No, I mean that part of the game may look like, "Oh God, I don't wanna go into that room, that's crazy."? But then, say there's a badge there that you want.
[19:04]
Atwood: Or, yeah, like, "Why would I bother with multiplayer, I don't enjoy multiplayer," but there's a multiplayer badge, so you're like, "Well, it's not too tough to get this entry-level badge so I'm going to go do the multiplayer," and then you might really enjoy it or, y'know, you might think it sucks or whatever. ? So along those same lines, on StackOverflow you will collect badges — what I call bronze badges — for doing the basic things you can do on StackOverflow, such as voting, asking a question, answering a question.? Tagging something as offensive gives you a Spam Cop badge.? So you will be rewarded for doing the things you're normally supposed to do.
Beyond the basic level of functionality there's additional badges for people that sort of enjoy the site and want to actually get all the achievements — sort of the completionists — who actively participate in the site. And then there's the hard-core people, right, which would be me by definition 'cause I'm... I moderate on the site. But we try to get all the badges just because we can. 
So it really supports I think several different methods of interacting with software and it's a really neat concept.? It's also very fun and playful.? Other people can view my gamer card and see what I'm good at and what I enjoy doing based on which badges I've chosen to get, or achievements.? So that's one way we're gonna encourage that, for people to come back.? But Joel, did you have any other...
[20:25]
Spolsky: Um — yes!? What were we talking about?? Oh, uh... yeah, I like the badges, I think people will co-operate just to, just because it's fun to be an expert, and to say, "Ooh, I know the answer to that!? I can, I can help some people!"? Uh, and I, and I think they will come back, kinda partially to establish themselves as an expert in a particular field.? Um, partially, uh, just 'cause it's, it's like, y'know, why do people play trivia games, 'cause it's fun to, to rattle off the answers and, and be right. But, I've also thought about what do I want to get out of StackOverflow personally?? One is obviously being able to ask, uh, and answer questions.? But I have certain expertise on things like, ah, the business of software.
Atwood: Well, also QuickBooks.
Spolsky: QuickBooks?? Oh yeah, that's right, QuickBooks XML.? I've forgotten everything I...
[garbling, laughter]
Spolsky: Forgot everything I ever knew about that.? But, uh, we wrote a, we've got a lot of QuickBooks integration code that I wrote.
Anyway, The business of software, what I was thinking of doing actually is just have a little tag called, "Biz of Software", or "Ask Joel", or both, maybe, "Ask Joel" and "Biz of Software".? And just maybe subscribe to an RSS feed for that tag, when new questions come in and if they're interesting, I'll go answer them and then I can [...] point people on my website to my answers on that topic.? Just in general.? So it's almost like my blog — kind of — like you could subscribe to see Joel answering questions about the business of software, you can ask me questions [...] I do this for the same reason as I create a website,?as I create Joel on Software, 'cause I wanna kinda share the knowledge.
Spolsky: And in fact, even if you have one, it doesn't work — as I'm discovering, in the beta.
Atwood: [chuckles] We do need to get Joel's login — just to give you an idea of where we are, I said, we're still in beta — Joel cannot log in.? We can log in, but we need to do a lot more...
Spolsky: It lets me in, it just never shows my name.
Atwood: I know.? Which defeats the whole point, because your reputation is tied to you.? So you're right to be, you know, concerned by that.? We will also have voting, I should have mentioned that, you're going to have your sort of semi-traditional voting system, so people can vote on the questions and the answers.? Those votes will transfer to your rating as a user, your "reputation score" is what we're calling it.? One thing that Jarrod did that I thought was very clever and that I totally agreed with, without even consulting him on it, is up-mods are twice as worthy as down-mods. So voting down doesn't hurt people very much whereas voting up helps them a lot.? So negative votes are sort of downgraded in our system — they still count, but not as much.
Spolsky: Hmm. [garbled] Yeah, very negative elsewhere [/garbled]
Atwood: Yeah, that always bothered me like on Reddit and places like that: one down vote complete cancels somebody else's up vote. And the problem with that, and I think we've talked about this a little bit before, not on the podcast, is when people down-mod there's a lot of reasons they'll downmod something.? One could be that they just don't like you, right? which is valid, I guess, but it doesn't really touch the topic that you happen to be talking about: because they don't... they just don't like you.? Or they just don't like the technology stack that you use, so they're going to down-mod everything you enter, because they don't like your choices in life — which is great, right?? So one way to combat that is to reduce the value of down-mods, to acknowledge that down-mods are kind of broad whereas an up-mod is pretty clear, it's like "I like what you're saying", right, well I guess you could have people that just up-mod everything you say because they're "yes men" or whatever, but thats — it would be really rare behavior...
Spolsky: So there's like, for a given post, you might find eight reasons to object to it, all which would cause you to down-mod, but only one reason to really like it, so a post on which people are really evenly divided would get eight down-mods and one up-mod, even though there's evenly...
Atwood: Right, I mean, I guess that's just my intuitive — I don't really have any science or data or anything...
Spolsky: The only thing that reminds me of is that, you know,? Paul Graham created Hacker News after the experience of Reddit, and he just doesn't have down-votes unless maybe I'm just not powerful enough to see them, but on the homepage there's only up-votes.? On the comments, there's up and down votes, on the home page it's just up votes, and he must have some kind of theory behind that.
[25:00]
Atwood: Some other things we are doing on StackOverflow that are pretty standard and we should also bring up the Joel test. I want to talk about the Joel test. I still like that. It's one of the my favourite things that you did. That was great. It's a classic, a classic.
Spolsky: Long before I jumped the shark.
Atwood: Back when Joel actually mattered. Let's talk about that. So, the Joel test and the other thing I like about the Joel test, not to get into promotion of your stuff (I have no reason to promote your stuff), but your job site. One thing I liked about your job site is? that it integrates with the Joel test, so when somebody posts a job listing, they'll? say, "Well here's this is the job we have, here's why it's awesome to work for us, and also we meet 10 out of 12 of the Joel test rules." These are great rules. I thought that was a very clever integration point; I really appreciated that. I've actually been going through the Joel test. It's something you naturally arrive at as a programmer, I think, when you work on a project. Another example of that is that we just hooked up CruiseControl , so as we check in code, it actually does a build for us, deploys it to the server, and sends us a summary email of here's the changes that went in, here's the build process. It does unit testing as well. There are some basic unit tests we run to make sure it's kind of working. I think that's? a very natural evolution and I guess that's Joel test #3 "Do you make daily builds?" It's a little beyond that actually, above and beyond, but certainly it meets the Joel test.
Spolsky: People have asked me over the years, "Why don't you add unit testing to the Joel test as the 13th requirement" that you do unit testing, or test driven development, or some form of test first or automated testing as part. The truth is that you have to go back and remember what the Joel test is. It's not a complete encyclopedia of all good practices. Nor is it the Ten Commandments. What it is, is a metric for the quality of a team that's pretty hard to fake and is a pretty good way to quickly decide whether a team is a good development team or not. It was originally designed to be a way for job applicants to look at a job. Originally, in the early days, I wrote that because a friend of mine came to me and said:
I was applying to a bunch of jobs and some of these companies look organized and some of them look disorganized and I found that a good way to find a good employer was to ask them during the interview to show me the last spec. If they looked at me like they didn't know what I was talking about, I didn't really want to work there.
Atwood: This was eight years ago, to give you the credit...
Spolsky: I probably wrote it eight years ago, but that particular incident was probably 10, 11, 12 years ago that somebody mentioned this. I thought about this and said, "hey, that's pretty clever" and I tried to think of some of the other things that you would want to check that your employer is doing to decide that this is a good place to work. I thought about how I took a job once because the interview was so difficult that I realized that I probably wouldn't be working with morons. Suddenly I realized I don't want to work at a place that doesn't make its programmers do some programming questions during the interview process. And so I came up with this list of twelve things which honestly if you are going on a job interview and are interviewing with several people in the course of the day and they all say at the end of the interview, "So, do you have any questions for me?" you can probably find out information about the Joel test in the first 3-4 interviews. You can get answers to all twelve of those questions. "So what do you use for source code control?" "Oh, we just carry floppy disks around the hallway." Ok, hmm, yeah, I want to work here.
Atwood: [chuckles]
Spolsky: So that's what it was designed for. Just because something is a good development practice doesn't mean it has to be on the Joel test. The other thing about unit testing and test-driven development is that it's really difficult to get right. There's all kinds of cases where it doesn't work, so there is a lot of controversy. It's not a universal thing. There are too many cases. There are cases like GUIs where you can't do it. Or, think about a really mature product that has been around for a long time and you have a million tests in your test-driven development suite, a million little unit tests. Now, every time you make the smallest change, if it affects 0.1% of those tests, now you have ten thousand tests to rewrite. Test driven development, unit testing is very, very valuable, very, very powerful, but also it's not a universal "everybody should have this on 100% on all things no matter what." If you do it that way you're probably not being 100% smart.
Atwood: The way I describe it, and this is something I stole from Fowler who had a quote on this, is that as a programmer you don't just write code and check it in, you write code, you run it in some way to exercise it unless you are pathologically bad.
Spolsky: Or pathologically good. [chuckles]
Atwood: Yeah, or you're that good, you're like a ninja who doesn't ever need to run the code you just check everything in. You're like Knuth or whatever.? Just taking that process, the manual ad-hoc testing that you do, think about "How could I don't [sic] repeat myself? How could I avoid having to do this next time I touch this code?"? Because the next time you touch this code, you're gonna have to do the same exact thing, right?? Well now I run it, I type some stuff in, I make sure it works.? So part of, I think, getting on the road towards testing — and I agree, it's a very, very long, hard road — is thinking: how you can avoid doing the same things over and over, e.g. manually testing your stuff every time you make a change to it.? So if you think about it more in terms of "take what you're already doing, manually, and just come up with some framework for doing that automatically", then I think you get the right mindset of what it's trying to accomplish.? It's not trying to create more work for you, necessarily, it's trying to reduce the amount of work you do in the longer term.? It does take a little bit more work to set up unit tests, but ultimately, say you make fifty changes in that code.? Well, that's fifty times you don't have to run the app, type some stuff in, press "Enter" and see what happens.? Does the unit test run?? Then, OK it works.? Of course then you have the issue of, OK, the unit tests may not be sufficient, they might not be testing some case that actually fails, so it does take some effort.? But that's the way I like to look at it, and that's something Fowler expressed, and I liked the way he said that.? So another thing that we do, that's kind of fun now, is we — one of the things that I struggle with on websites is, what version is a website?? Like, do you guys have a version number on FogBugz?? 
Atwood: Yeah, but this is a great point too. When I worked on projects I certainly agree that the database getting out of sync with the code was one of the major sticking points. It was like well the database should be versioned, which it is in source control - we have it in source control so we're not repeating the particular failure mode -?but it is good to keep a version, an explicit version number in the database so if something goes wrong and you deploy the latest code to you know 2 versions ago database, you don't just immediately blow up, maybe there is something that actually checks the number at start up.
Spolsky: Your situation is a little bit different than FogBugz because you guys will only ever be running against one database.
[pause]
Atwood: Well, true. Although once we get into the beta we'll have multiple databases on the same box 'cause we're in development has to go in parallel with the beta so there should be multiple databases running.
Spolsky: And then you start to run into problems like: I have a stored procedure in my database and takes three arguments and I want expanded to take four arguments. But I can't because the person calling the stored procedure in the code has to change at the same time as the database changes. Which can't happen in a production database. So you have to make a new version of the stored procedure that takes four arguments. You name it you know underscore two or something. And you start calling that from the new code, while the old code uses the old function, and it's kind of sickening but that's life.
Atwood: It's kind of ghetto, but I think even the Windows API does that. Don't they have like .ex methods?
Spolsky: Yeah. And then they call it ex, and then ex2. 
Atwood: Yeah ... [chuckles] ... and then they add numbers too it. Yeah, that's a tough problem, I don't know how I would solve that. So ... probably on StackOverflow the next thing to talk about is ah ... gosh ... there's been a lot going on this week.
Spolsky: Yeah ... uh really? Cool.
[pause]
Atwood: [chuckles] Sorry, I have some notes here, I just lost track of what I was going to talk about. Let's move on to something totally different.
Spolsky: Okay, let's take a question. Unless you have have something different on your list. You sounded like you have something different on a list there.? 
Atwood: I do, but we can come back to it.
Spolsky: Alright. Oh, come on give me your question, it's probably better than...?
Atwood: Well, it's not really a question. I was just going to talk about Petzold book on Turing.
Spolsky: Oh, Petzold’s book on Turing, I have not read that.
Atwood: Yeah, so Turing's famous paper on computability is essentially the basis for all modern computers. He basically invented computers - all modern computers - in like 1936 with this one paper.? There's some other work going on from people that sort of got similar results, but Turning's the one that generally gets most of the credit for this paper.? So Petzold spent nine years writing this book.
Spolsky: [giggles] Well, he did other things too during that time.
Atwood: Well, yeah, of course. But it was a long term project for him. And it's amazing – he posted on his blog all the research he'd done last nine years. He posted a picture of his bookshelf, all the books he had used to research the Turing stuff, to get the background. Because he talks about the history, you know, pretty much every aspect of the paper is examined, all the context, all the related topics are spidered down into as well. And it has, like, five bookshelves worth of books [six bookshelves, but not bookcases]. Like, literally. It's like: “Ok, here's my bookshelf.” It's unbelievable. It's clearly nine years worth of books, that he's been reading on a topic. It's very exhaustive. But what I like about the book, and not to pimp the book too much, but I just really enjoyed it, because I love history. Like, he's writing about people, more than code. Or really both things at once. Because he's examining Turing in the context of the mid-thirties, all the research that was on. And then, the other things that Turing did. Because Turing was one of the main guys who solved the Enigma encryption problem in World War II. So he examines that. And then Turing actually... I don't know, how much do you know about Turing and history and what actually happened to him? That, actually, kind of sad...
Spolsky: I do know, because there was a great play. What was that play called? “...of the Enigma...” something? Here let's ask the Google... “Breaking the Code”. Is that it? “Breaking the Code”? Was that a play?
Atwood: Yes. That sounds right.
Spolsky: Oh, yeah. I mean, there was a Broadway play. A theater play. About his life.
Atwood: Right. And you saw this one?
Spolsky: I did!
Atwood: In New York city, perhaps?
Spolsky: In London.
Atwood: In London? Wow, really impressive.
Spolsky: Maybe it was in New York...
Atwood: Oh... Yeah, so it's a little bit of a sad story. It's like one of those... Oh well, I'm a pop-culture maven. I'm gonna turn this into a pop-culture reference, those “Behind the Music” things, where they cover bands that become very successful. They always has a dark side, because success, kind of, ruins you on some level. Like, you have access to all this really bad things, all this negative people and you have all this money. I'm not saying that's happened to Turing, but it's like that Turing is one of the brilliant minds in the computer science. I mean, he is called literally “the father of computer science” for that reason. And he's a guy who was completely persecuted to the point that he killed himself because he was gay in the late fifties. And it really pains me to even read about that. I mean, he's a guy who basically beat the Nazis. Right?
Spolsky: Yeah.
Atwood: Even in his time I'm sure he was viewed as a major... like an Einstein-like mind in the field of computing. And that didn't seems to matter, he was prosecuted like just a common hooligan. And it's just sad the way his life ended. He actually ate a cyanide-dipped apple. So overtones of, I guess Snow White or the bible or whatever you wanna read into it.
Spolsky: Yeah. Socrates.
Atwood: Yeah, Socrates! Thank you. And Newton. The apple is very...
Spolsky: There is a made-for-TV movie of the play I see here, you can see. I wonder if the made it a DVD or something.
Atwood: But I'm just flipping to the... I love this book. I complained and I felt bad, I don't know if you saw, but I railed on Petzold's other book, which is on Windows — WPF book.
Spolsky: Oh, you didn't like it?
Atwood: I really gave that a very negative review, because I felt it was the “wall of text” problem. And the sad thing is that Petzold is such a brilliant writer. I mean, when he's writing about history. I mean, he really makes it come alive. All this background, all the history, all the reasons this stuff that matters.
Spolsky: This book is on win32 programming or Windows programming in general. The original “Programming Windows” was one of the best written, clearest written books I've ever read about programming.
Atwood: Well, I think that's my point. Is that Petzold is such a good writer that he's wasting himself on really narrow technical topics. Something like this, which lies at the intersection of the people, history and computing. It's a really meaty topic with a lot of stuff you can talk about to explain it. It's not like the latest API du jour.
[40:08]
Spolsky: I think he recognizes this.? I kind of feeling that one of the reasons he's writing these books about?Turing is because the WPF book was, you know, not a huge seller and you can no longer make a?living writing books about programming Windows.Atwood: Well that's funny than, because I am not sure a book about Turing going to be like... Spolsky: Well?it's gonna have a?mainstream audience.? Surely the New York?review of books or what ever will review it and he'll get a ...
Atwood: Perhaps but still pretty...?It's still pretty dense but it - I think the kind of book 10 or 20 years from now will still be totally, totally relevant and I think that's great because Petzold is?such a good writer that he really deserves books that have longevity that people will come back to.? So I was really just excited for Charles when I read the book.? I really enjoyed it too, so I recomend?it.? Everyone listening defiantly get a copy of "The Anotated?Turing".? If you have any interest at all.
[40:59]
Spolsky: Ok. The Annotated Turing, by Charles Petzold, available from your favorite bookstore. This'll sell to a general history of science audience.
Atwood: Sure. Sure, I think it will.
Spolsky: More than a programming book. A programming book that sells 10,000 copies is a bestseller. That's just pathetic.?
Atwood: Yeah. No, don't write books. I had a whole long email chain with someone who wanted to write a book, and I was really trying to talk him out of it. I don't know. Do you have any words on that? You've written some programming —
Spolsky: I have, but —
Atwood: Your books are —
Spolsky:? Y'know what, I have a new book that just came out, it's called More Joel on Software.? It's the further —Atwood:? Oh, you do?Spolsky:? Uh huh.? About a week ago, yeah.? It's a bunch of articles from Joel on Software — it's sort of a continuation, combined with Joel on Software (the book).? If you combine those two, you have pretty much all the good stuff from Joel on Software.? There's nothing new in the book, and I should make that clear.? If you've been following along, if you've been reading my blog since the beginning of time, you've read all this stuff.? But it's a lot of material, and having it in a book form is a great way to read it for the first time, or give it to somebody.? Or put it on your shelf. ?Atwood:? Do you think that your blog turns well into a book?? Because I've been approached for that, and I've always pooh-poohed it, because I think my blog in particular, does not translate well to that format.? I think yours might.? But what do you do for chapters, how do you organize it?? Do you just group by topic?Spolsky:? Well, there's sections by topic, yeah.? So there's a bit of a theme, but it really is like reading a collection of essays, and not like reading a single book.? But then again, y'know what?? It's a book, a bunch of chapters.Atwood:? You mentioned we had some more calls to go to? Spolsky:? Good question.? Let's take a call.? Here's one, from Nicholas:Nick Kavadias:? Hi, Jeff and Joel, my name's Nick, and I'm from Sydney, Australia.? My question is, do you have any advice to someone who wants to get involved in a tech startup that's not in Silicon Valley?? I get the feeling from Paul Graham's essays that you need to be in Silicon Valley because it's a startup hub.? Thanks guys, and keep the podcasts coming!Spolsky:? So Silicon Valley startup hub — I personally think that the negatives of Silicon Valley outweigh the positives. ?Atwood:? But you live in New York City, so you're biased.Spolsky:? True.? That's true.? Y'know when I see the kind of crap that comes out of Silicon Valley— I mean seriously, just look at TechCrunch, and read about all the startups, and it's all the same thing, and there's just a groupthink going on there, and the people are just piling onto social networking, with every possible variation of social networking, and it's all so unoriginal.? And there's something about the groupthink that happens in Silicon Valley that I think makes it really, really difficult to stand out and succeed.? And the minute that you start to fall a little bit behind, all your good employees flee to the next big, exciting startup, because there's always something more exciting over the next road, or in the same building, or down the street.Atwood:? So I think, to me, the question is about— it's about locality and teamwork.? So I think now, with the Internet being so mature, it's possible for people to work remotely.? I mean, look at my team.? So I have a guy in Corvallis, Oregon, I have a guy in Morganton, North Carolina, and then I have me and you, and we have a virtual team, right?? We're four different people, and four different dots on the globe.? Well, all in the US, technically.? But timezones can be a challenge, I will say that.? And I've heard that many many times before.? When you have many timezones separating you from your co-workers, you just get on very different cycles, and it can be painful to work together.? And I think there's also something to be said for physical presence.? I mentioned when Jarrod was here visiting from California, it was really fun for me to work next to him.? And I also noticed when Geoff and Jarrod were essentially on vacation for a little while, I was working sort of alone on the code, and I felt very isolated.? It was weird to not have anybody to type, like, instant messages to to ask questions, or send an email and get a quick response back.? And working in isolation kinda sucks too.? So I think what you gotta balance there is, how much do you value physical presence versus, the virtual working world of being on Skype, and instant messaging and things like that.? Now Joel, you probably don't have any remote employees at Fog Creek, right?? Everybody works in your office.Spolsky:? Yeah, it's just banned.? We will never do it.Atwood:? Right, and the place I worked before, that was the model.? And there's a lot to be said for that, because you get a really nice team dynamic.? I mean, don't underestimate the power of physical presence.? It really does help you write — I think — better code to have people that you can talk to and go to and just have [garbled] lunch.Spolsky:? But wait — this is all very interesting, but this wasn't the guy's question exactly, which is, can you do it from Sydney, for example? ?Atwood:? OK, so maybe I interpreted the question a certain way.Spolsky:? Certainly, can you be virtual or not virtual is an interesting question, and we can sort of debate — but that's not exactly what he was asking, he was asking "Do you have to be in a tech hub to make a startup successful?" Atwood:? Oh, like he was founding a startup.Spolsky:? I think so.? Wasn't that his [question]? Atwood:? Maybe I misinterpreted the question, I apologize.Spolsky:? [kidding] Let's play it again! No, let's not.? Lemme just answer that one though.? That's why I was saying, my feeling is, we're in New York, and I feel like we've benefited and lost, and the benefits have outweighed the losses.? And the biggest two benefits that we see directly is: a lack of groupthink, so you're more likely to do something original and different, instead of just making pet food like every else is - pet food on the Internet; and secondly: the lack of competition for the good engineers which is not true everywhere but that really means if your place has a high percentage of engineers or programmers or highly technical people or creative people — maybe Melbourne, more than Sydney, in Australia — relative to the number of startups where they can work you'll have an easier time recruiting, and maintaining, and keeping people around.? And that's the most crucial part.? That said, I should mention that I have never known an Australian company to succeed without an outpost in the United States, to at least do sales in the right time zones.? And it's usually one of the first things that they do, is figure out how to get set up in the States, and get those Qantas Frequent Flyer miles.? Because it is very hard not — and the same thing holds for? Israeli startups, many which I'm familiar with.? And all of them probably set up their US office literally on the first day that they get set up.? That said, there's not as much of an angel or a VC community in places like Australia — although there's some, it's relatively weak compared with California — but then, there's not as much competition. 
Atwood: Right then. That was good we gave you two dimensions to your question. Mine was like "do you want to work for a startup?" and Joel's was more like "are you founding a startup?". Sorry I didn't mean to interpret it in the wrong way. But hey — two for the price of one.
Spolsky: Hey maybe you had it right.
Atwood: [Laughs]
Spolsky: [Garbled] I think the advice is what to do if you're not in a place like Silicon Valley — is this gonna hurt — you know there are certain places where you see a lot of startups coming from.? My... you know our biggest competition in the bug tracking market is a Sydney-based company so that they were certainly successful starting there... and... obviously outside the United States; there are places like Israel.? Skype came from Europe — came from the Netherlands — and a lot of programmers from Estonia and let's see, there are some pretty big companies that came from Czechoslovakia, not from France so much or England — I don't know why — but yeah actually England, there's a lot of UK-based companies that have done great things. So yes, it's definitely — it's possible to be be anywhere — Eric Sink will tell you that it's great being in Champaign, Illinois — little farm town in the middle of nowhere and there are pros and cons.
Atwood: Certainly. Do we have another question?
Spolsky: Yeah, why not. This is taking us back a couple weeks ago.? We were talking about Silverlight, as you remember, and I believe that what we both said is that Silverlight is...
Atwood: Like Flash, but...
Spolsky: Yeah. As long as the model is a rectangle embedded in a web page that's it's own little sandbox - it's gonna go the way of Java and Flash which is, you know, useful for some things but not truly in the... of the grain of the web. That's kinda...
Atwood: Wait Joel — how about a rounded [...] rectangle?
Spolsky: [Laughs] Heck - if you could round it, well that changes everything!
Atwood: Yeah, that's a whole different thing.
Spolsky: Whole different world, yeah...
Stephen Bohlen: Hey guys this is Steve Bohlen calling from New York City, just wanted to let you know I'm really enjoying the podcast hope you keep it up. Joel, I think in Episode 11 you spent a considerable amount of time talking about problems with Silverlight adoption (and ultimately Flash adoption as well), being that it kind of breaks a lot of the web navigation paradigm, in that you can't copy URLs out of the browsers address [bar] and ultimately the [broken] back button kinda destroys the user experience. I was curious how you reconcile some of those statements with a lot of the things that are going on in AJAX enabled websites. It seems to me an awful lot of the same?criticisms can ultimately be leveled at AJAX enabled websites as well. You can visit the site and spend a lot of time on it and not once does the URL in the address bar change. In a lot of cases hitting the back button obviously destroys?your navigation as well. I was curious if you could talk a little but about how you reconcile those two things when AJAX adoption seems to be a positive but something like Flash or?Silverlight?are typically frowned upon as being against the grain. I want to thank you guys again for the podcast I look forward to it every week. Thanks.
Spolsky: Thanks. Okay. So that's a question that I think you almost answered yourself there Stephen, which is "Silverlight vs. AJAX: Does it break the web?". Obviously AJAX is not all good and Silverlight is not all bad. There's no conflict in saying that some aspects of AJAX can be bad and it depends on how you use AJAX. There are basically two approaches to building an AJAX applications that people have taken. One approach, we'll call it the Gmail approach, is the pure Javascript approach; which is that once you get on a page everything is going to be generated by Javascript and all the interaction and everything that happens on the page are going to be entirely within Javascript. There's no history and the browser is not really involved at all.Then there's the hybrid approach; you're still using HTML for most of the navigation - when somebody clicks on an email message, for example, that would navigate to a page that showed that email message. The AJAX is just there to speed up certain interactions within the page. If you ever do something with AJAX that appears to be a navigation, then you use one of many well documented tricks to convince the browser that the history should behave in a certain way so that you can go back. The back button will still work in the way that is expected. That's the approach FogBugz takes. When you use FogBugz it really does feel like HTML navigation but then there's just the rich, rich, rich world with all kinds of AJAX everywhere that makes things fast and spiffy. You can do the broken navigation the AJAX way or you can, if you're doing AJAX you don't have to, you can use the Hybrid model which is more of a classic web navigation with URLs that are meaningful and AJAX to enhance the pages that you are on. That said, there is nothing wrong with the Gmail model. There is nothing wrong with building an application and making it a website. If your application just does a bunch of stuff and doesn't even have a concept of navigation or moving amongst different pages of content then you may be fine building something in a pure AJAX-y way. For example, if it's a stock trading application that's going to show level two quotes with little quotes showing up, stock prices you can click on and do things like trade and all that kind of stuff. I don't know if I would want "back" [button] to work in that situation. It's not really a classic web content situation.If you're doing something where you're displaying content on a bunch of pages and navigating between them - something like news or mail, something that is navigation orientated - I feel like that should be done the HTML way.
Spolsky: Yeah we're pretty close to an hour.? I just want to add one last thing.? What is it? Oh, first of all, I have an announcement which is: if you're in the New York area or you can be in the New York area on July 17th, which I guess is a week from Thursday, we're having an open house here at Fog Creek at the old office, this is your last chance to see our brilliant bionic office designed by a brilliant architect before we move into a far more pedestrian but plenty cooler office, but just not as neat.? So any way, 5 p.m. July 17th in New York look on Joel on Software in the upper right hand corner and it's got the address there or just go to fogcreek.com and we're at 535 8th Ave and there'll be wine and cheese and you can meet our summer interns and it'll be a lot of fun. So that's the open house.
Atwood: And you're going to check to see if people know C like at the door.
Spolsky: Yes, you'll be required to copy a string in the C programming language.
Atwood: Before you can enter you must know C. I just want to warn any potential visitors to the Fog Creek offices.
Spolsky: Do I have any other announcements? Blog talk radio is the way to, oh okay yeah, you know what we need to set up? I've noticed about half the callers are actually using blog talk radio which is... 
Atwood: Really?
Spolsky: ... actually it's not if you go to blogtalkradio.com you'll never find it, it's a thing at blogtalkradio.com/cinch [sic - try http://cinch.blogtalkradio.com/].
Atwood: And it's linked on our blog as well.
Spolsky: It's always linked on our blog at blog.stackoverflow.com.? But, it's an easy way to record an MP3 and I really wish we could set up a phone number that just went right into an MP3 and to e-mail so somebody probably knows how to do that. I guess we could probably do it with Skype or something but we'd have to leave it running. Anyway if somebody could suggest a way where we can get a phone number for the show that people could call into and would show up as an MP3 in my inbox so it's basically an email, like a voicemail to inbox MP3 recording phone number service.
Atwood: Well Joel, since you're so passionate about this feature does that mean you want to own it?
Spolsky: I will own it. 
Atwood: I'm just kidding, you don't have to own it.
Spolsky: I'll do it. Cause, I noticed that an awful lot of people are recording questions that way and they're good questions and I like them, so we wanted to just have a phone number that's a little easier than blog talk radio.? If we could use blog talk radio and there was a way to do this I would pay them, but [there] probably isn't. If you have any suggestions for how to do that and you know that it's easy to setup, easy use and doesn't cost too much, send a voice recording to podcast@stackoverflow.com and we'll play it on the air.? 
Other announcements as usual there's a transcript of the site maintained by volunteers like you for the benefit of the hearing-impaired and people that just want to read the contents of the show and so if you have a couple minutes, it's done as a cooperative wiki so basically everybody goes in there and they just all transcribe one or two sentences from the show, one or two minutes from the show and it's a great service and they are getting transcribed which is great so... 
Atwood:?And if you want to be in the stackoverflow beta: do a little bit of transcription and I will be happy to add you to the beta list.
Spolsky: And currently only way to get in to StackOverflow beta is to do a little bit of transcription and then ask?Jeff.
Atwood:?Yes.
Spolsky: That's about it so I guess we'll see you next week.
Atwood:?Yep, see you next week.
Spolsky: Bye.
[1:05:47 ends]
Outro, advertising
[1:06:44]
[01:06]
Atwood: Hey Joel.
Spolsky: Hey Jeff. What er, what day is it?
Atwood: Today is Tuesday.
Spolsky: Is it podcast day?
Atwood: It's podcast?day.? It's always a very exciting day.
Spolsky: [laughing] Let's do a podcast
Atwood: Yes. Let us.
Spolsky: Ok. Erm...
Atwood: So today is, well, Tuesday is, you know why else Tuesday is awesome...
Spolsky: No
Atwood: 'Cause, every Tuesday there's new songs for Rock Band and this week is epic because it's The Best of The Who.
Spolsky: Oh... really? They have The Who?
Atwood: Yeah, so I guess, well there was one?Who song in Guitar Hero 3 called "the Seeker", I don't know if you know it, it's really fun to play, but this is the "best of" so it has stuff like "Baba O'Riley", "Eminence Front", "Behind Blue Eyes",?pretty big hits so it was really?fun, I was just playing it outside actually.
Spolsky: Does it have "Who Are You"?
Atwood: It does have that, I played that as well.
Spolsky: God!
Atwood: Yeah.
Spolsky: I may have to buy this game.
Atwood: You know what I learned the other day, so the song "Baba O'Riley", there's some guru, some Indian guru that, I guess back in the sixties, one out of those, Pete Townsend or some member of The Who (Roger Daltrey maybe) was under the influence of this guru and the song "Baba O'Riley" is named for that guru the first name Baba something, but I, he, there's some like church for him down the street from our house, very California, there's like a little, you know, little, there's a little strip-mall and in this strip-mall there's this place that you go and there's all these pictures of this guy on the wall.? There was like an art-stroll which was why we were in there and I was like "What is this place?" and my wife figured it out, she said "Oh this is that guru, Baba" and I don't even know his name I'll have to look it up, but that is from the song "Baba O'Riley" as well so there's your random pointless trivia of the day.
Spolsky: So, I'm, I'm intrigued by this.? You're saying that they have gurus in India, too?
Atwood: [laughter] I always associated gurus with India, but maybe there's other places that they're from.? Is that not true?
Spolsky: I don't know.? I thought it - I thought it was like a code... thing.
Atwood: Oh, no no no.? It's traditional religion.? But yeah. 
Spolsky: [grunts acknowledgment]
[pause]
Spolsky: Uhhh, usually you have something to talk about. 
Atwood: I do, but I want- this time I want to do something a little different.? The reason I was being quiet was cause we had some stuff from last time that you wanted to talk about. In particular, you had a blog entry about disabling menu items, that we were gonna discuss.
Spolsky:? That's a good idea.? Let's talk about the disabling of menu items.
[pause]
Spolsky:? I'm not actually- This is a meta-conversation.? I didn't really want to talk about the disabling of menu items.? Umm, I was sort of thinking about Twitter and how people are now writing these one line blog posts, and I used to waste all this time writing these thirteen page blog posts.? And, as time went on, people got whinier and whinier the more words you put in your post.? And, uh, I sort of came up with a list of five or six things that I thought were good, you know, two paragraph posts?
Atwood: [grunts encouragement]
Spolsky: Five, six, seven sentences.? And, uh, I thought I would post them and just sort of knock 'em out, and I'd put one up just to see what would happen.? And, uhh, the trouble is if you put something up without writing a long enough post to actually make your full case, uhmm, you just get misunderstood, was sort of what I concluded.
Atwood: Well I think you took it too far, though.? I mean, my impression was there's there's some in-between between thirteen pages and like one- Was your post even one paragraph?? It was rea- 
Spolsky: [laughter] It was almost three paragraphs.
Atwood: It was really absurdly short, and I thought you could've done, like, five paragraphs, maybe ten paragraphs?? That would've, I think, done it some justice.? I felt like maybe there's-
Spolsky: Three! There's three paragraphs there.
Atwood: Really?
Spolsky: It's very short for something I would post, and uhhh.? So here's, you know, what the post said is, uh, don't disable menu items that aren't available.? Uh, instead, leave them enabled, and that gives you an opportunity to tell people why that particular item was not gonna work.
And so there's really a lot of things I kind of learned from this.? None of them have to do with menu items.? Um, the first is that as soon as you have something that's this short -- for me at least -- as soon as I write something that's this short- You know, I don't really plant my foundations well enough; I don't explain the situation; I don't frame the question; what kind of menu item these are, what kind of application you're writing.? I didn't write defensively like I usually have to, qualifying it with every possible e-mail response I could ever get.? And so, it actually led to quite a lot of people saying, "No, that's wrong!? You should not- You should disable, or hide, menu items that do not apply!"? And, usually, they went a lot further than that.? And so this is somewhat useful because, you know, there's some discussion of the subject in the blogosphere, and that discussion itself, and just, you know, thinking about this issue is more valuable than if I hadn't brought it up and nobody had thought about it. 
Um, what I did see, actually, in about 85 to 90 percent of the responses that I got via e-mail, or that I saw people post on their own blogs or in discussion groups, is that what people tended to do is just think of a use case that's interest- that, that- just one use case that's on their mind, for some reason.? And then, evaluate whether or not you should disable menu items based on that particular use case that they happen to have in their mind.? So, for example, I saw one person who said "Well, here I am in my email program, and I don't have a message open, and this particular menu item that has all these message commands, all of them are grayed out.? So are you telling me that those should all be enabled?"? And, actually, yes, I was.? I was saying they should be enabled, and if you're trying to forward a message, and you don't actually have one open, then you have a misunderstanding as a user, and you need that to be clarified.? Somebody needs to explain that to you, and that's one of the jobs of the application, to make it easier for you to understand how to use it, is to correct your misunderstandings about how the program works.? But what I actually got is a lot of people that were kind of upset, they imagined that they would be clicking on all these menu items, hoping that they would work, and then they would have to dismiss an annoying dialog box.? And that's fine, and there's obviously a great middle ground here, where you try to disable the menu item somehow, but you still provide some indication as to what would have to be done to enable it, or why it doesn't work.? You need to find some kind of UI metaphor, which nobody really has a great suggestion for, and it's not very common, but some kind of UI metaphor, where the thing looks disabled, but you still know that you can find out what to do to get it to work.? In the web it may be easier, where you can still make something, like, linkable but grey, or have a little info button next to it.? A typical GUI application programming, the standard menus that the come with just don't give you that as an option.? So that would be the optimum strategy, obviously, is to disable the things and then provide some kind of a little indicator as to why they're disabled.? But if you're not going to provide that indicator, I would still argue firmly not to disable them.? And I was thinking of a different use-case.? So, the use-case I was thinking of was, you had mentioned that in the Windows Media Player, you can play things faster when you're listening to podcasts and so forth, and it'll speed them up.? And when I looked in there, that was disabled.? And I couldn't figure out how to enable it.? And obviously the help file is no help--not that anybody reads help files, but even if you did you couldn't find the answer to that.? And that was kind of frustrating, and I'd rather have that menu item be enabled and have it just tell me "I'm not going to do this right now because of the following reason.? I refuse to do this."? Because I didn't think--
Atwood:? As an experiment, I think it's kind of strange because the outcome is not really--is pretty predictable, I think.? And particularly in your case, because you don't really allow comments.? I know there's a link to, like, the Joel-on-Software sort of discussion, but it's not really in-line.? So sometimes when I--the way I view this is, when I write something and people misunderstand it, I have really failed as a writer--
Spolsky:? Oh, yeah.
Atwood:? --to communicate what I was trying to communicate.? So setting out with that intent is a little weird. But sometimes--
Spolsky:? I didn't set out with the intent to fail!? I just wanted to see how short I could take it before it failed, and I went beyond the shortness, and ... yeah.? Yes, I have failed.
Atwood:? But you're also lacking the context of course-correction comments.? Like in comments, a lot of times people will tell me, they look for my orange--I have a little Javascript that highlights my comments--and they'll scroll though and just read my comments, particularly if there's a lot of comments, just to get a sense if I did any course-corrections, trying to clarify.? Because sometimes, even if you're trying really hard to communicate, people just won't get it for some reason--a few people.? And what you can do is clarify in the comments.? And that is tacked on directly on the bottom so it's just right below the fold.? So it's not an additional click, and sort of a different area.? And also, with regards to Twitter, usually those are conversational.? Like, you'll say something, and then people will go "Oh, you meant this!" and you'll go "No, no, no, I meant this."??
Spolsky:? Actually, part of that is a problem that I'm fighting.? I mean, yeah, you're right: it's the conversational-ness that is, I think, leading to the demise of blogs.? I hate to say this, but as soon as you get people--I mean really, when it was harder to publish a blog, and to write full length essays on a topic, and people worked on them and spent more time on their essays and put more thought into them and didn't want to kind of embarrass themselves by putting out, effectively, kind of a paper or an essay on a subject that they hadn't really thought about, and that they didn't want to defend.? And there was a brief period like that, and we got some pretty good blog posts.? And now, where there's this world of just sort of everybody being a blogger, and it's just your opinion and blah-blah-blah, you have an enormous number of people who are actually not qualified to provide some input into something.? And that's OK, I'm not saying they shouldn't blog just because their not qualified, I'm saying that what they're doing is their having a conversation.? It's like if they were kind of hanging out with their friends, talking about some particular topic, this is what they would say.? They wouldn't go research it before they open their mouth, they would just say it.? And posting on a blog nowadays is easy enough that you can do that.? And unfortunately, that means that the signal-to-noise on blogs has gone substantially for the worse.? It's sort of turned into the permanent September.? Remember the permanent September?Atwood:? Yeah, that's when they let the AOL users on Usenet.Spolsky:? Yeah, and one of the things that I noticed--for a while there was a period when Usenet had deteriorated to just all noise and no signal, or basically the noise was drowning out any useful signal that had been there previously.? And then there was the switch to the web, and creating a website was so much harder than posting on Usenet, that for a while it required sort of a more elite kind of software developer, effectively.? Because it was software developers who were posting on the Internet, because they were the only ones who could figure out how to do it.? And the quality went up for a while, and as the tools got easier and easier and easier, and we got these great blogging tools that are absolutely trivial to use, you actually get a lot of teenagers who have interesting things to say to their friends - and that's what they're doing there, and that's OK - but the net result is that there's a whole bunch of articles that look a whole lot like your blog posts, or my blog posts, which are either relatively well-researched and relatively edited, and thought-about, I guess, compared to the kinds of other things that people say as if they were having a conversation.? And again, I should emphasize, not that there's anything wrong with that--it's just that there is something about the blog world, where if you take twenty articles on programming topics, nowadays fifteen of them are written by people who really don't have very much experience in the things that they're blogging about, and are actually giving you life advice based on one particular thing that happened to them in their career--which is their first job out of school, or maybe they're still in school, or whatever--and it is indistinguishable, actually, from something from somebody with a lot more credibility. 
Atwood:? Is it really?? It's not indistinguishable, I don't think.
Spolsky: Well how does it look different than something that Paul Graham posts or that you post?? Ah, if somebody posts their opinion based on, you know, nothing?
Atwood: Well it's all about effective communication.? I mean if you have somebody who happens to be a young programmer, who's a really effective communicator, then I think they deserve to be read, and they will be read.
Spolsky: No but fine, they deserve to be read, but they're wrong!? They're saying wrong things!
Atwood: Well, I think that's very relative.? How do you define wrong?? I mean like what, like..
Spolsky: Wrong meaning if you say this is a good idea I'm gonna do that, then you'll have bad results.? I don't think that it's a relative, I think that there's just wrong things you can say.
Atwood: Well I think the audience should learn to read critically, and should learn to ask for data.? I mean if someone has an opinion it's like "Okay you have an opinion that's great but what data are you basing this on?" That's really the job of the reader, to be critical, you know of that stuff, and then on top of that you have this meta-layer of like Reddit and Digg and Hacker News and all these other filtering mechanisms that are designed to bring the good stuff out and filter it and move it to the top of the list.
Spolsky: And do they really do that?? It seems like Reddit brings out the stuff that sounds like there's a conspiracy theory and we're about to invade Iran.? That stuff is the first stuff that will come up. So I don't even know if that's, I don't know if these things...? They'll post things that match their world-view which sometimes is real, and sometimes is just wacky.? But I don't really think they're doing a great job of evaluating whether the people that say the things should be qualified to say them.
Atwood: Well i know when my stuff happens to go up, I do read the comments that come up on Reddit and there's certainly no shortage of criticism.? I mean people are very, very critical.? So in that sense I - and of your stuff as well.? Particularly the last thing you did with the menus, there was a lot of criticism.? So there's no shortage of criticism, I guess my point... people are saying, you know "Ooooh" this, you know accepting what you say at face value.
Spolsky: Right and I don't want them to.? I do want them to read things critically.? That's, that's important otherwise they would have believed me and, and maybe done the wrong thing.? More importantly, the trouble is a lot of these areas that we're writing about and that a lot of people are writing about are not measurable or quantifiable.? Should you do code reviews this way or that way.? Should you have this kind of schedule or that kind of schedule.? Should you talk about your competitors by name or not talk about your competitors by name.? Uhh.. there isn't, unfortunately.. uhh... these are not the kinds of thing for which scientific experiments have been devised and anybody has any data.? What they have is their own personal anecdotes.? What happens is that there's different kinds of people in the world and there are people that just don't have a lot of experience and therefore have not been exposed to a lot of anecdotes and they've seen, maybe, one kind of thing and they've said "you know that one time in this particular case, so I'm going to go make a general rule out of that thing."? And the trouble is it... to me it becomes enormously frustrating because if, for example, lets say that you wanted to read a pretty good  news - community news aggregator which is, Hacker News at news.ycombinator.com which is set up by Paul Graham at Y Combinator and is populated by basically a lot of kids starting software companies or internet companies.? And, if you were to just take the top post every single day that, that rises to the top and jot down the advice that it allegedly gives you, within about three months you would have seen completely contradictory advice in every possible dimension.? Do this-
Atwood: How is that different than all these business books that come out?
Spolsky: They're exactly the same.? Exactly.
Atwood: They're exactly the same.? I mean there's no difference.
Spolsky: Well, it depends.? The business books - and that is actually another frustrating thing - some of these business books - and a good example is "Good to Great" - are written, actually, with enormous amounts of research. Literally dozens of researchers working for years and years and years, gathering tons and tons of data, doing all kinds of crazy statistical analysis, and actually coming to some conclusions which are rather interesting.? So in Good to Great there's this interesting conclusion that the most successful lasting companies were the ones where management or the CEO and/or founder actually show the least ego - amount of ego, which is actually an interesting conclusion.? And this is numerical data, this is actually based on ...
Atwood: Wait, wait.. how do you measure ego???
Spolsky: I know!? 
Atwood: What was that data?
Spolsky: They count things like how many times he uses the word "I" when describing the company, or whether he says "we" when describing the company.? Bizarre things like that, that do correlate.? So anyways - I think this is the right book Good to Great, I should double check on that - but there are actually books that are out there that are the result of enormous amounts of research, or enormous amounts of scientific data, I mean books based on loads and loads of actual findings of academic research that was done... exist, and you're right it's very hard to distinguish between those things, and Seth Godin just giving you his opinion.? Because both of those books, Seth Godin writes better, and his books are more interesting, and I happen to think he's "righter" in some way, you know; he's more right.? But it's just his opinion.
Atwood:? But if you can tell a story, right, and provide at least some anecdotes, and maybe allude, or ideally present some data along with that, that's just basically effective writing.? In general, effective persuasive writing.? So if you can do that, you can persuade people that "okay, maybe they should try this."
Spolsky: Yeah.
Atwood: How is that a net negative?
Spolsky: Isn't that very dangerous, isn't that saying that the person who's most persuasive should decide what we do?
Atwood: But that's what actually happens anyway.
Spolsky: Right, and that's what I'm complaining about.
Atwood: [laughs] I actually don't mind that.? I think that if you're persuasive and I think that there are other persuasive people who see that you're wrong-
Spolsky: Yeah.
Atwood: -will have that conversation about, "Hey this guy's misleading you for these reasons."
Spolsky: I'm very persuasive, so if I get into an argument here at FogCreek, mysteriously, I tend to win.? I don't know why.
Atwood: Well, you're also the boss, right.? That must have something to do with it.
Spolsky: I know, and as much as I try to train them to do what they are going to do anyway, and I do that very actively.? A developer who has been here for a year or two knows to talk back to me.
Atwood: Right.
Spolsky: But they don't for a while.? This actually sometimes concerns me, 'cause I do like to be persuasive in an argument, and to have things my way.
Atwood: You wouldn't want to win all the time; that's boring.
Spolsky: Well, I don't know, I could go for all the time! [laughs]? But that doesn't mean the right thing will happen.? So I have to be really careful to recuse myself.? And one of the things, so were does this all lead, I'm not really sure.? One of the things that...? Here are two things that are indistinguishable.? We may have talked about this before, I don't? remember if it was on the podcast or not--so, at some point, dear listeners, this podcast will start to repeat itself.
Atwood: [Chuckles] Just like real people.
Spolsky: Just like real people.? I mean Rush Limbaugh must have said the same, must have done two shows that were indistinguishable, almost identical.? Must be two shows you can find there where he just says the same thing.? Anyway, the thing that I want to say for the eighteenth time is it's really hard, when you write, when a journalist writes a business story, let's say Business Week magazine, were he's writing a story about, let's say the story's about foreclosures.? In Business Week, if there's a story about foreclosures, there's going to be a picture of an overweight family standing in front of a house and they're going to looking kind of sad and they're going to have bad complexions.? It's just guaranteed.? And the house used to be theirs but it's going to have a foreclosed sign in front of it.? For some reason they are no longer allowed to live in this house, so they're sad.? And that's guaranteed.? And the first paragraph, of this story in Business Week about foreclosures, is going to be about a particular family.? Absolutely guaranteed.? Now, what's interesting, that's there style.? That's just the way they do things, and they tell you an anecdote.? Now a good journalist who has to produce a story like this for Business Week, what they're going to do is they're going to research foreclosures, they're going to see who it's affecting, they're going to see generally what's going on here, how many foreclosures are there, what kind of people are losing there houses etc, etc, what parts of the country.? And they're going to write this story and they're going to say, "Now I've got to find an example of an almost typical family in order to give a personal picture here of what's going on.? I'm going to find the most typical family and that's who's going to be in the picture, that's who the story is going to be about, and that's going to illustrate my point in a way which conveys more truth than what the original article did because it bring it home to you."? And this is the kind of thing we say is good in writing.? And that's fine, I'm not really criticizing that in particular.? Unfortunately, that is indistinguishable from a typical story that you'll read in the style section of The New York Times which is one of these stories which is full of weasel words.? So it says "more and more such and such is happening."? So "more and more Ivy League women who graduate are opting to raise families instead of joining the workforce."? The word "more" doesn't mean very much, and it's not a very strong word, but sometimes they have even more ways of weaseling out of actually making a statement.? And so you'll have this story that is completely made up and it has no statistical evidence and no actual basis of fact in it, but it also starts with one of these anecdotes, and the anecdote is a story about some family or some person and that particular person is a friend of the journalist, and the journalist was obviously desperate for a story and asked their friend, "Hey, can I write about you?", and then the editor said, "Well this isn't interesting: this is just a story about your friend going to the Hamptons." and you say well, "Well, I guess I gotta make a story about it.? As summer months enter, more and more young people are choosing to share houses in the Hamptons."? And there's no actual statement being made here.? There's an implication that there's some trend and that this is a trend story, but thought there's enough weasel words in the article, but there's no actual truths being asserted, and then there's a fun interesting anecdote which I like.? I love the anecdotes: they're great.? But the whole thing is being disguised as news and it's done in a way which is indistinguishable from Business Week, where the journalist has actually tried to find a particular example that best illustrates a story that otherwise would be dry and boring.
Atwood: Right.
Spolsky: So the use of anecdotes is very dangerous here I think.
Atwood: Well, the anecdote was not associated with data.? I think that anecdotes plus data is actually very effective.? But again, this is where you have to be a critical reader.? I mean, are they giving you one data point, which is their friend?? Are they giving you no data points, or are they using just random words to simulate the idea that they have some data when it's really just a general impression that they have of something?? So really, I guess, just, demand data where you can get it, and if you can't get data... I mean, let me use my recent post as an example.? So I was talking about normalization of data.? And I didn't really say, "Do normalize" or "Don't normalize," but "measure your queries, and figure out what works based on the data that you're getting through your system."? And this is something... The reason I wrote that post was because on Stack Overflow, one of the very first things we did was say, "okay" - and I do this on all of the projects that I work on - "I want to know how long every query is taking.? I want to know how many there are, and I want to know how long they are taking."? Not that I'm going to, maybe, obsess over every little query. Maybe I will. But I just want to know, right? I want to see the data.? So when I make decisions about, oh, let's change the database, it's not because I feel like it's better Feng Shui of having a database, but because it'll actually make the database faster.? To me, response time is really really important.? So if I can shave 40-50 milliseconds off a page load, to me, that's worth it.? So even though I can't tell you, I'm basing it off a very limited experience.? I haven't worked on every project in the world; I'm not, like, a database expert or anything.? But you can measure your own stuff, right?? This is easy for programmers to do.? And then you can make a decision based on it, rather than, "Oh, I was taught that everything has to be normalized."
Spolsky: But now you're just teaching people that everything has to be measured.
Atwood: Well, how is that bad? That's science. Isn't that science in a nutshell? Science is pretty much measuring.
Spolsky: Because you don't measure things until you have a problem. I would say don't bother even measuring that until you start to see that the response time doesn't feel snappy. And then say, "Why doesn't the response time feel snappy?"
Atwood: Well, but, that's relative. Have you ever... Okay, so if you're a gamer, you'll notice this form where some people go into a forum and say, "Oh my God, this game is so slow.? It's unbelievably slow, I can barely even play it."? And other people are like, "Oh, fine. Works fine for me."? Because the two people's relative impression of what's slow and what's not is totally not even the same.
Spolsky: So you may have... it's okay to say, like... that's fine.? So you want to say, "I have an acceptance criterion for this type of application. I want 100 millisecond response time.? Therefore ... we'll test against that.? And only then will we actually measure how long the queries are taking, or how many queries there are in a page."
Atwood: I don't know.? I think it makes sense to always measure, particularly in a world of, you know, computers, where everything is really pretty easy to measure.? Is there anything on the computer that is really that hard to measure?? I mean, everything is just ones and zeros.
Spolsky: Well, for example, we have an internal app that we use that shows us how much commission is due to the sales people that I just wrote.? Should I be measuring how long those queries take?
Spolsky: Alright, so there are cases where you measure and cases where you don't.
Atwood: Yeah.? Well, I would still measure it, because you might want to... But you might throw away that data.? But the advantage of having it outweighs the advantages of not having it, I think.
?
Atwood: Right. But...
?
Spolsky: That was the end of that, and I moved on.
?
Atwood: These data access layers tend to have that built in.? At least ours does.
?
Spolsky: Like, I should be able to just turn this on and look at it and ignore it, or look at it.
?
Atwood: Yeah, exactly, that's what I'm saying.
?
Spolsky: Well, back to the original thought, whether or not that's germane... The anecdotes are very useful, because actually, hearing a lot of anecdotes, even if, no: the author doesn't have an agenda, he's not trying to convince you of anything, he's just telling you a story... The more of these stories you hear, the more you'll start to learn "Oh, wait a minute this is a recurring refrain," or maybe there is a particular solution.
Atwood: But your post didn't even have one anecdote.
Spolsky: Oh, I know, that was short.
Atwood: Before, you told me... so it was based on the [Windows] Media Player. Even having that one example would have made it a much much stronger version.
Spolsky: Oh, yeah yeah yeah.? That article would have been great what I had said is, "I was listening to Jeff Atwood the other day, and he said that I could speed up podcasts, and I wanted to speed up the podcasts playing in Windows Media Player.? And I went there, and it was grayed out. So how the hell am I supposed to do this?"? And then I could have said, "Guys, don't gray out things unless you're gonna give me some kind of clue what I'm supposed to do."
Atwood: But you know what's funny about that?? I guarantee you it'll turn into a hate fest of Windows Media Player.? I guarantee it.? That's hilarious.
Spolsky: So I think we agree, we always do end up agreeing on everything, which is something that there is some criticism -- we've been receiving criticism for agreeing too much.? I think we agree that an anecdote would have been much more powerful and wouldn't have been making as strong a claim, and yet it would have been one of those things that would accumulate, would allow everybody to gain the wisdom of a lot of different experiences. So they would be thinking up a lot of use cases when they design things.? They would be thinking of -- when they disable that thing, you know, it would just give them a story that would remind them that when they're disabling that menu item, "Am I leaving my user without recourse or with no way of figuring out how to ever get this capability if they can't get it right now?"
?
Atwood: Well, actually I don't agree that we agree [chuckles].? I don't--
Spolsky: Yes we do!
Atwood: The post, as you put it up--
Spolsky: [laughing]? I [hate?] this guy! What the-- [Spolsky and Atwood try to interrupt each other] Don't I have a button to [mute?] you?
?
Atwood: Well, seriously, the post as you put it up was just really ineffectual.? Like, I wouldn't -- definitely wouldn't have published anything like that.? Because, I mean-- [experiment] and all
Spolsky: I agree, it was an experiment which proved that you can't do this.? It was a failure.
Atwood: But you're also sort of gaming the audience a little bit, which I think is a little -- a little dishonest if that was your goal.
Spolsky: No, no, it wasn't my goal, my goal was to see... I thought, actually, that it would work, to post some simpler, shorter posts, um...
Atwood: But it was too short.? I mean it's--
Spolsky: OK.
Atwood: Again you... I don't know.
Spolsky: But how do you know it if you don't measure?? The only way to measure is to try posting something that's too short and see that it doesn't work.
Atwood: Well there wasn't even like one example, I mean like -- plus you didn't cover any of like, "Here's some other ways apps do this."? It could have been like -- you could have -- made it three times as long, which is still pretty short by your standards.? It would have been a much stronger article.? It wouldn't have been misinterpreted as much.
Spolsky: Oh, we learned that, didn't we.
Atwood: It wouldn't have taken that long either. [chuckles]
Spolsky: We learned that. 
Atwood: Yes.
Spolsky: We have a couple more examples of, er- I do think that there is something about anecdotes, which is that they don't really prove a point.? If I had given one anecdote and then said, "This proves that you should never disable menu items", I-- In other words, we got two- we got three possible things that I could've done.? One is that I could've posted what I did, which is "Do this, don't do that."? Uh, number two: I could've given some examples or anecdotes. So it would've been, you know, "Do this, don't do that because 'A', 'B', 'C'." 
Atwood: Right.
Spolsky: And that's what I've done for years, actually, if you haven't noticed.? And I've been feeling kind of guilty about it. 
Atwood: Well, but, you also put tons and tons of words in-between. I think you could've just said, <the stuff you want to say>,? <example>,? <sentence>, <example>, <sentence>, <example>, <sentence>.
Spolsky: So I could've done this like one of those design patterns. 
Atwood: Yes.
Spolsky: Like, shown a couple good examples, a couple bad examples, and just done it like a design pattern.? Yeah.
Atwood: Yes.
Spolsky: That's a page of- Yeah, um- Now, the other thing I could've done -- which is something I'm going to be experimenting with increasingly -- and I'm doing this as much as my editor lets me get away with it in Inc. Magazine, where I have a monthly column- Which is, you know- And it's part of just getting to the age in my life where I don't feel like I know anything. [laughter] [Where is that nothing is helpful.]
Atwood: [laughs] Wait, wait. You're going backwards!? You're going backwards!? So as you get older you feel like you know less and less?? Is that what I'm hearing?
Spolsky: Yeah, you're on the other side of that hump.? You learn - know - more and more and more until you get to a certain age and then you know less and less and less.? Um, anyway... [laughs]? Did you ever learn a second language, Jeff?
Atwood: No, I did not actually... well, no, I know Spanish.? Took a lot of years of Spanish in high school and middle school.
Spolsky: Okay, so, you can translate things to Spanish, right?
Atwood: I know enough to be a little bit dangerous in Spanish, that's about it.
Spolsky: Like you can say things like, um, "Excuse me, is the cow on your table?"
Atwood: Yeah.? I could get by in Mexico if I was stranded, barely.
Spolsky: So, like, how do you say "table" in Spanish?
Atwood: Uh... I don't know. [laughs]
Spolsky: Probably-
Atwood: I know enough of... really basic words.? It would be like speaking to a child, really.
Spolsky: Okay.? Uh, well, what happens as you're learning a language is you go through a few phases.? In the first phase you can't say anything, because you don't know enough words.? And in the second phase it's just real easy, you know all the words, you've learned the vocabulary, you're like "blah blah blah blah blah."? The third phase you start having -- in the third phase you start to have all these doubts.? Because you try to translate a word, and you know about all the shades of grey and the way this word is not exactly like that word in this particular language, and dialects and... you know.? Yeah, you could translate that, that would be the same thing, but it wouldn't convey the same sense of existential angst that that conveys in the original German.? And so, as you become a better and better translator, you actually get worse at simultaneous translation.? Because you start to get confused about the various synonyms and shades of meanings and the cases where the words don't exactly overlap. 
And so, training people to be translators, actually -- or simultaneous translators -- is in part training them to get to that next level of skill, which is above and beyond just knowing both languages, where you can actually translate quickly, because you don't -- you've removed all this kind of doubt that you gained in the phase where you were learning all the shades of grey and all the details and the minuscule.? And I think that's something that happens a lot, I think that you start your career out saying, "You know, I don't know anything about this software development process, but I'm eager to learn," and you read a lot and you read a lot of blogs and you listen to people and you talk to people and you go to conferences and whatever it is that helps you learn your field, and you just practice.? And you learn more and more and more and more. 
And as you start to get those first anecdotes and the second anecdotes and that particular story about the way a particular manager in your first job did a particular thing and it worked, or didn't work, you start to form rules from very little information.? And you start to say things like "never throw away all your code, you can't throw away all your code and start over.? Think of how far behind that will put you in the competitive world if you throw away your code and start over." 
?
Atwood:? And you have said that.
Spolsky:? Yeah, you will say things like that, and that was based on a decision--partially it was based on a few anecdotes which are mentioned in that story, of companies that did that and failed, and so I think it's correct, and that that is where the overwhelming evidence is: that once you have shipping code you probably shouldn't throw it all out and start over--in a large system, not in a small system.? You can throw out pieces of it and start over.? 
Atwood:? Well, people kind of gloss over, too, that, first of all, it took a long, long time.? It was, like, five plus years.? Also, the business model totally changed.? Where does Mozilla get their money from now?? It's a totally different world -- they get it from Google, basically, right?? Through the fact that Google is integrated into the application.? Every time somebody searches in Firefox using Ctrl-E, the search box, they get, like, a penny (or whatever).
Spolsky:? I still think that was right.? Anyway, the point is that you get to this point in your career where you start to feel like you actually do have all the information about a lot of things.? And that was the grand old halsee... halcy... halcyon--there's a word I can't pronounce--
Atwood:? HAL-see-yahn, I think, is correct.
Spolsky:? --days of Joel on Software.
Atwood:? I'm really not the person to ask on pronunciation, but go ahead.
Spolsky:? The halcyon days of Joel on Software.? I sort of had that confidence, I'd sort of come of a really--ten years of working in software development, and reading a lot, and talking to a lot of smart people, and working in some places where they really knew what they were doing.? And I basically just sort of dumped down the knowledge that I had learned in those ten years as quickly as I could.? But over time you start to realize that there are actually all kinds of weird shades of grey, and slightly different variations on things, and it becomes harder and harder to make absolute statements that are interesting.? Because, if I were to write an intellectually honest blog post now, it would be like, "63% of the time--you're probably in a situation, where, 63% of the time, you should do A, and the rest of the time you should do B.? Here's some cases where you would do A, and some cases where you should do B," and the whole thing would just be too mushy.? Nobody would wanna read it, it would be all full of--for example, one thing that I was pretty absolute about is the idea that programmers should have private offices.? Which I still believe, that programmers are much more productive with private offices, and they're more willing to work for you if you give them private offices, because the conditions are better.? 
However, since I have said these things, I've learned that a lot of programmers actually prefer to socialize, and not have private offices, because they think of it as being more sociable and more fun.? And they are less productive for it, and they're not going to admit that, they'll tell you "Oh, well, we're having accidental productivity," or whatever.? But it's just more fun for them.? And so one of the reasons that there isn't as strong of a movement towards private offices as I think there should be based on the productivity gains and the recruiting gains that you could get, is that a lot of programmers imagine private offices as being lonely compared to their very, very social workspace where they're laughing and chatting and joking and talking about the bar they went to the night before, pretty much all day long.? But that's just a big old caveat, and am I supposed to put that caveat on everything that I say?? I still think that private offices are the way to go, it's just that as I've learned more about the shades of grey, the kinds of things I might be able to say about particular topics become more muddled and more boring.
And so, what I'm going to do, and what I'm doing in Inc and what I will do on my blog I guess is I'm making a real strong push towards anecdote only.? In other words, my whole job is just to tell you stories.? And whether or not they're relevant to your life is your problem to figure out and if they have a moral they have a moral and if they don't, they don't and maybe there's a little plot there and maybe there isn't a plot there and maybe you can figure out the moral.? But I don't have any kind of agenda in the stories that I'm telling.? That's what you'll see increasingly -- you'll see me doing increasingly in Inc Magazine.? And on my blog.
Atwood: Well, I think storytelling is very fundamental.? And I think, also, if you want to include some data, I think that you could kinda have it both ways.? But you don't have to.? Like for example on the private offices thing: I think the most radical form of that is when you actually take a small group inside a company and say "look, you guys can configure your workspace how you want it to be."? Because there are certain developers that just want the private offices.? They just like to be isolated.? They don't like to have people all up in their grill all day.? And those people will be more effective if they work in an office.? Whereas, if they were at some workplace where, okay, everybody does X or everybody does Y... why not let the group configure the workspace the way that they want to?
?
Spolsky: Well, because they don't want to be productive.? They want to have a good time at work.? That's not what the bosses want though, the people that are paying them, so why not let the people who are paying them decide how they...?
Atwood: Well I think that for the type of people you're hiring to do software -- can you really even know what they're doing?? On some fundamental level, it's really difficult to judge or even really tell if a program is correct, right?? Does it really even do what we want it to do?? These are very hard things to judge.? So for the type of people that you're hiring to do programming -- not to, again, put us on a pedestal or anything -- I think these are the type of people that really can self-organize, to some degree, their working organization.? With some degree of trust.? Versus, say, factory line workers or janitors or, I don't know... maybe I'm completely wrong.? But I feel like that's a more flexible situation than "hey, everybody gets an office" or "hey, everybody gets these incredibly depressing little cubicles" like the one you were telling about last week downtown.
Spolsky: Oh, yeah, they're not that [depressing?].? You know, it's actually... I don't know if it's ever possible.? Usually the development team has no say whatsoever on what kind of offices they get.? These leases, commercial leases, they're ten year leases traditionally.? You're in a place, it's been built, it is what it is.? Changing it is ridic-- it's just beyond impossible.? These decisions are made very very rarely, and when they're made, they're usually made by some office manager's second assistant who is in charge of figuring out where the programmers would sit.? Who, possibly, if you're very lucky, got to work with an architect, and the architect knows nothing about what spaces are right for programming. And architects have all their crazy metaphors like, well, [pretentious voice] "an open space fosters open communication."? Which is not true [laughs] and is not actually what's happening in the space, but sounds good, and might be something he might have read in an architecture magazine somewhere.? So nobody knows what they're doing when they're planning these spaces, and they make terrible spaces.? And there are a few examples I like -- I think Microsoft had some flexible workspaces at one point, where they actually come in, they raise the floors so that you can rearrange the ductwork.? Which is the main reason you raise the floors, so that the ductwork can be rearranged well.? And because you have to have ventilation in every room.? And then instead of drywall walls they use these furniture systems that go all the way up to the ceiling.? So it looks like a wall but it's actually a part of a furniture system, much like a cubicle system.? And that allows them to rearrange things kind of at will, very rapidly, according to what the team wants to do.? So there are a couple of workspaces like that at Microsoft and that seems to be the new trend, and I've heard of them at Microsoft Research specifically.? There's a really good video that Scoble did, I think, somewhere. 
Atwood: Now I'll have to track that down.? You've added work to my list.
Spolsky: I'm sorry.? Don't do it!? Just don't do it!? There's somewhere among--
Atwood: No, I have to do it.
Spolsky: --videos that, I believe it was Scoble, maybe it wasn't Scoble, anyway.? It's about an hour at Microsoft Research, following around some guy, looking at their office base and how they did everything and how they collaborate and how they can rearrange their space at will.? And I think what's interesting is that people probably won't rearrange it very much. 
Even though they can. 
How did we get on to that?
?
Spolsky: I'm sorry.? Don't do it!? Just don't do it!? There's somewhere among--
Spolsky: By the way, you should never SELECT *. You know that right?
Atwood: [Jokingly] What?? Oh, I'll have to write that down, we've been doing that.? No, I'm just kidding.? Yeah, of course, you should only select the data that you need, obviously.
Spolsky: Yeah, because somebody is going to add some long column there, and it is going to make your whole SELECT statement slower, even though you are not using that column.
Atwood: Right.? There's also the art of putting your columns in the right order, so the long stuff is at the end, and the optional stuff is at the end.? That actually helps performance a little.? There's a whole theory of that.? So you could write your application that way, where you just query stuff out of the database, and you are just directly working on these essentially arrays that come back from the database, but it is kind of awkward.? Particularly in a strongly typed language, where you are constantly casting things back and forth.? And just the code just to update the database is very redundant.? You end up with a lot of the same code in a lot of the same different places.? So, what most people eventually arrive at is what is known as Object Relational Mapping, where you take the user table, and through unspecified magic that happens, it turns into a user object.? So this is nice, instead of having an array of rows.? You have user objects.? You go "Oh user.name!", "Oh user.id!", and then in the optimum case you do something like.? Give me user. Give me this particular user.? Change username equals O'Reilly, or whatever we are going to change it to and then user dot, err, database.commit.? So you've written no SQL code at all.? It's just object magic.? There's just a whole set of systems that do this.? Object Relational Mappers, and they work generally pretty well.? The one we're using in particular is C#, I think it was 3.0 or 3.5.? I get a little squirrelly on the versions.? They've become very "dynamic" in the way that they number the frameworks.? To put it charitably... 
Spolsky: It's based on whatever their checkin, their last checkin to source code repository. What ever that number is, that's the version number. 
Atwood: So there's this thing called LINQ, and what LINQ does, is it basically lets the language be aware of SQL-like constructs, like WHERE clauses, basically set type operations that you would do in SQL, cause SQL's kind of a set based language, which sets it at odds with sort of your typically procedural code, just looping through.? But in LINQ, and in particularly LINQ to SQL - see there's all these different flavors of LINQ, because it can't be Microsoft unless there's 10,000 versions of the same thing, right so there's LINQ to object, and LINQ to all, any number of LINQ to whatevers - but the LINQ to whatever that we're using is LINQ to SQL, and it's actually pretty slick because, you take a database, and you drag it on this design surface and it sort of infers all the classes, sort of automagically.?? So this is where you get the user object, the invoice object, and all those other things, and they know about each other - this is the key thing - based on the foreign keys that you set in the indexes, they figure it out ...
Spolsky: [laughs] Assuming that you do that.
Atwood: Well, assuming that you set your database up properly...
Spolsky: I've yet to have a reason to create a foreign key, so this might be my first reason to actually set up one.
Atwood: yeah, without those relationships it would be tough.? But, I've gotta say, it really is neat, because the other thing about LINQ to SQL that I personally like a lot, is that you can do ad-hoc SQL that can then be cast to the correct object types.? In other words, I can do this random query that gives me a list of 5 customers that have some totally unique set of criteria, that nobody else would come up with, and then in the line of code that I do that, say "just cast this to user."? And I end up with an array of users.? And actually not even an array, it's actually set based so I can do LINQ stuff on it, like I can take that set of users and get it back and do dot-where and then add a clause, and it's all typed code.? So the other problem with SQL is that it's strings.? Your compiler doesn't know anything about the SQL, it's just a string.? So you could have syntax errors, you could have completely incorrect SQL in there.? But with LINQ to SQL, since you're using language constructs to manipulate the tables for the most part, so if I remove a field from the user table, I immediately get compile errors-
Spolsky: That's cool.
Atwood: -on all the LINQ clauses.? Yeah on all the LINQ clauses that use that field.? Whereas the traditionally app you would be able to build, you could deploy the app, and it would blow up on production because "hey, you deleted the social security number field from the user table" and we didn't figure that out until later.
Spolsky: So the trouble that you're is, that by the time they, uh, they finally solved this problem of object-relational mapping... well, I don't want to say they've solved it, because there have been so many proposals...
Atwood: Oh, it's not solved.? It's not solved.? This is very lightweight though.? What I like about LINQ SQL: flexible, very lightweight, and built into the language.? Those are really the key things that make it workable for me, 'cause, I've gotta be honest with you, I do not like--my feeling on object-relational mapping is, it's called the Viet Nam of computer science for a reason, 'cause there's really no good way to do it, in my opinion, that solves all the problems that you're inevitably gonna have.? You just sort of pick some pros and cons and run with it.
Spolsky: Yeah. 
Atwood: I lean heavily towards the data side of that.? 'Cause you don't have a problem if you do away with either the database or the objects.? Then you just have one thing.? It's kind of radical.? Right?? To say, hey, we don't even have a database, we just have a bunch of objects that we persist to disk, y'know, just magically.? Right?
Spolsky: No, but that's really irritating, because the code that you would use -- [exasperated exhale] --because there's things you would do in a database, like selecting a single column, that to do, if you just had a bunch of objects, would be enormously wasteful.
Atwood: Oh, totally!
Spolsky: Let's say, for example, that all I'm doing is persisting a bunch of telephone numbers to a database.? I've got the C user-with-telephone object, it's got 47 fields, for their billing address, and their last-payment-due, and all kinds of stuff, 'cause I'm the phone company and I'm listing every telephone number.? And now I wanna do a query which is like, you know, "What area code has the most phone numbers?" or something.? So I don't need any of the extra data, I don't need to load and instantiate all these objects, I just need to do a SQL query, a very basic underlying SQL query, and the entities would just get in my way, or just be a really inefficient way of getting that particular thing.? Y'know, I just want to do "SELECT count(*) FROM blah-blah-blah WHERE blah-blah-blah AND blah-blah-blah AND blah-blah-blah;", and the database is gonna look at that, and in a millionth of a second, it's gonna tell me, "37".? I don't wanna have to create a million objects and then filter them, and so forth.? Ah, so, there's these whole classes of things that ORM doesn't really solve, that relational databases do solve.? Or, I don't wanna say ORM in general, but just mapping objects, just pretending that all I'm doing is taking an object and freezing it, persisting it, or pickling it and throwing it in the database.
Atwood: Right, right, no no and actually I agree with you because on the continuum of ok, pure objects versus pure database where you don't, literally don't have a problem because the other thing doesn't exist.? I lean heavily toward the database side, like I've always viewed the data as the model.? Which this is this is heresy to a lot of people so I apologize, but what I find is -
Spolsky: I think you're right, yeah you're right.
Atwood: - LINQ SQL is the lightest possible layer of object you can put over that and get away with it and not have people complain, which is what I like about it.? Plus I can still do raw SQL and cast it to whatever object I want, if I want to.
Spolsky: Now here's the other problem, here's the other reason I haven't even started using LINQ, and the first reason I didn't start using it is that I saw immediately that for various IntelliSense reasons, it has an upside-down syntax, where you say, "FROM blah-blah-blah SELECT...", et cetera, and it has taken me--aw, how old am I? -- forty... three years to learn SQL as well as I know it now, and just the idea of, like, coming back and learning, uh, some kind of a backwards, upside-down SQL [laughs] after all that effort I went into learning exactly how to do it... is very frustrating.? So I was frustrated that it couldn't just be SQL.
Atwood: Right?-- it is aggravating, but the advantage of learning it is that it's applicable to any circumstance, not just the data circumstance.? Say you have an array: you can apply LINQ methods to the array to get the data back out of it, or some just class -- some random class that's like a data structure that you have.? Any fundamental data type, you can use these constructs so the power of having sort of semi set-based logic built into the language-
Spolsky: So you're good with LINQ -- have you done that yet? Have you done that yet?
Atwood: Have I done what?
Spolsky: Used LINQ on something other than a SQL database.
Atwood: Uhh... not currently.? I, like you I'm still struggling, I mean there's definitely a learning curve.? I don't wanna, [Joel Laughing] I don't wanna underestimate it, seriously, I'm not kidding.
Spolsky: I believe this may be an over-sold feature that you may wind up not actually needing in daily application development. [garbled as Joel and Jeff talk over one another]? I think the ability to do queries on in-memory things like arrays -- why do you even have an array?? Who has an array anymore? [Jeff chuckles]? No seriously!? It's a table!
Atwood: Hold on, hold on.? I actually, in my HTML... so I have two sets of code.? One that does HTML tag balance, and one that does sanitizing HTML.? And for the tag balance, I have an array of regular expression matches -- so it's an array, but it's not an array of like integers, it's an array of some kind of object, which you use generics for that, right?? Like array of type whatever... so yeah, no I definitely use it.? And I was playing with using a stack, I think some of these fundamental data structures are still used...
Spolsky: Right right, well alright.? So I'm looking at the world a little bit from the perspective of people who are building data driven kind of CRUD-type applications basically.? Which is who LINQ is designed for really, it's not designed for the people who are building operating systems and need an array of memory allocations or something.? You don't really use arrays that much... I'm trying to remember the last time I met an array in any of the database code that I've been writing... So wait, so, here's the second, uh, here's my second thing about LINQ -- or ORM in general -- is like you say it's the Vietnam, it's the unsolved problem of um... Vietnam, I think, was solved, I guess [Jeff laughs] might want to find a different metaphor.? Um the uh... nobody really solved the ORM problem completely, LINQ is a nice lightweight way of doing it.? Actually, Microsoft, especially in the development tools group has a pretty good track record of going into problems that have been big thorny hairy problems and not really solving them but doing something kind of lightweight that gets you a lot of the way there.? And I'm thinking of MFC as a great example: trying to create these big highfalutin object-oriented graphical development environments just failed again and again and again and again, and MFC they just finally just said, "let's just do some lightweight wrappers around the Windows API to make it a little more object-oriented and we won't be too ambitious but we'll still save everyone a lot of work" and they weren't and they did.? But think about this: I've got a database, and it has a customer record, and it has first_name, last_name, address, dot dot dot, it's got a bunch of stuff in there.? So it's got address_first_line, address_second_line, suite, apartment, ummm... city, state, zip, country, phone_number, billing_address, shipping_address... it's got all that.? Suddenly you have 23 fields to keep track of a customer that everybody else has -- which is annoying which is why the hell doesn't the SQL Server team yet have a first class address data type that knows about addresses all over the world, we have to keep writing this code again and again but I'll move on -- I won't complain for now.
Atwood: It's a good point.
Spolsky: It's just ridiculous there's all kinds of stuff.? You know what?? There's weird stuff about addresses: in Yugoslavia you put uh... well, sorry Serbia, you put the country name first, and then the city, and then the street, and then the guy's name.? And you know what, Microsoft Word knows that and when it does mail merge it will do that for that address in Serbia.? And it's not impossible to have this knowledge and to wrap it up and it should be done by... you know?? There's a great feature for SQL Server 2008, and there's a great feature for the next version of HTML giving an address editor that is just universal, you know? And yes I know: it would have to know about all sorts of weird addresses in Serbia, but it's not the end of the world, it is possible to write that code and having it in one place would be a great thing... um... so wait.? That was just a crazy distraction.? You've got these 27 fields, street_address, city_name, etc, and what the object relational mappers do is they get those things into properly typed variables in your source code.
Atwood: Right.
Spolsky: And that's great, And that eliminates a lot of these big blocks of code that you used to have where you'd have 22 lines of copying out individual fields, casting them to the appropriate type, and setting them to variables which had the same name as the column name in SQL.
Atwood: Yes -- it definitely saves time.
Spolsky: 22 lines, pssht, gone.? That's great.? The next problem is now I need to put it into my HTML page and I have all these HTML controls that need all their text values assigned. [gasps]? And what LINQ doesn't do is it doesn't go that step for you, yet.? In fact, it was actually, it seemed to have been written, and I might be missing something gigantic here, but there seemed to have been two big things that we got in Visual Studio 2008:? 
The first was this ability to embed our SQL right in the HTML page, and have these data bindings, and have it all happen in a declarative fashion, so those variables never stop in your code, they're never seen in your code, so you don't need variable names for them, they go literally directly from the database column, and all you've got to do is map a database column to a particular ASP.NET control that's on a web page;? 
 And then there was the LINQ guys that were doing something completely different, which is they were getting that stuff into C# land (or VB.NET land) and you can sort of do one or the other and they each solve half the problem, so it's kind of -- there's kind of a new impedance mismatch which is we have finally solved the problem of getting all of these columns into our programming language, but we don't even want them in our programming language, we want them on our HTML page.
Atwood: Even in Rails land, where they have the flexibility of essentially redefining the language at will, to solve all these problems -- at a steep performance cost, obviously, but still, the productivity is worth it -- they still, if you look at the HTML that they emit, it's still a mishmash it's basically tag soup.? It's like HTML tag, and then a left-begin tag -
Spolsky: That they emit, or they write?
Atwood: Well, no no no, these are just template files, these are files on disk that are essentially mail-merge forms, right?? There's little holes where you push in the data, and--
Spolsky: Right, yeah, the programmer creates these.
Atwood: Yeah, you have to, but the mishmash of tags is still very painful, the tag soup, because it's really hard to read, because sometimes you'll have conditional logic in the view page, like "oh, if you're not an administrator, you shouldn't see this administrator menu on every item," right?
[57:05]
Atwood: Well, that's logic that has to be in your template somewhere.? And it's really difficult to read, and we have the same problem in ASP.NET MVC, because it follows the MVC pattern, and I don't know, the tag soup problem to me is still very much unsolved, it's like that stuff is so hard to read once you start getting a lot of variables and a lot of logic, and, uh, it's a challenge.
Spolsky: I've actually found that if you use some of the, er, you know what?? For me in ASP.NET programming, probably one of the best and most underused features is user controls which allow you to take a little blob of HTML and make your own control out of that, and this basically gives you the ability to take some HTML presentation like a small piece of the HTML template, and collapse it down to effectively one tag.? It lets you create an abstraction basically and it can have its own code and you can use it in lots of different places.
Atwood: Yeah we do that.
Spolsky: Yeah, and that's just a fantastic way to avoid large and convoluted and messy files.? It just basically lets you use the same tools as you had for the programming of subroutines and lets you extend that capability of creating a simple abstraction to code that has some HTML piece as well or some tag piece.
Atwood: Right, I have a blog post I'm gonna write about that and I think cover some of it but I think the tag soup problem is very much alive and well in even the most advanced and radically new, you know, web, the fanciest web programming environments you can think of.
Atwood: Before we go too much further, I know we're close to the end.? I want to get to at least one question.? Because I always feel guilty if we don't. 
Spolsky: Okay, I have a question. [laughs] Oh, you mean one of our listeners?
Atwood: Yes.
Spolsky: Let's do... We have a really good question, but it's kind of long.? They're all kind of long. I'm trying to find... Oh, here is a short question:
Paul D. Waite: Hi Jeff and Joel. I'm Paul D. Waite from Croydon, South London, England.? I'm an aspiring Mac programmer, but my experience so far is mainly with web development; Javascript, and Python.? I'm looking to learn C as a foundation for working with Objective C on the Mac, and to hope to receiving an approving nod from Joel.? My question is: Where should I start?? Although most programmers don't read books anymore, I really like a comprehensive language book when I'm starting out: to give me an overview of the language, to teach me the nuts and bolts, and to hopefully give me a good common idea of good programming practices and idioms.? If you've got any book recommendations, or any other suggestions of good resources for learning C, it would be great to hear them.
Spolsky: This is a question we can answer in seconds. [pause]
Atwood: Take it away Joel.
Spolsky: The C Programming Language by Kernighan and Ritchie.? Otherwise known as K&R.? And it is one of the best books about programming that you will find out there.? The clearest and most concise.? It's a simple language and it's a very clear book.? It has a way of teaching you things with just little winks in the problems at the end of each chapter.? So that is the book I would recommend.? There really is no other decent C programming book that's even worth looking at.? So The C Programming Language, Kernighan and Ritchie, is worth learning C just to have an opportunity to read that book.? So I took that question because it was unbelievably easy. [laughs]
Atwood: Right.? Well, can I warn this asker away from learning C?? [phone rings]? Is that possible?
Spolsky: Ahh... Sure!
Atwood: [laughs] Well, yeah, I would question... I mean, I wonder if you would really need to learn C or not.? I mean, I don't know.? This is the classic argument we always have [Joel Laughs].? But if you are hell bent on learning C then sure, K&R is the book, but are there any other languages that you could learn that would, sort of, give you the experience of learning C without actually learning C?? Is there anything close enough... Okay... Here is my question to you Joel: Is there anything close enough to C that gives you the C experience while being a little bit modern?? Like, say, Objective C, or C++, or any variance of C that you consider consider acceptable? 
Spolsky: [A firm, quick] No.
Atwood: No... It has to be the real C or nothing?
Spolsky: Yeah, I mean, if you want... You know what would be a good thing to learn? 68000 Assembler. 
Atwood: [laughs] We are going in the wrong direction... [both laugh]
Spolsky: That's because you're trying to find a programming language that eliminates something from C, which is exactly the thing that I want you to learn.? Also Objective C, before you learn it, it is a very good idea to learn C.? As a foundation for that.? If you wanted to Cocoa programming, C is a great way to... It's only going to add a couple of days at the beginning, and it's going to make your life so much better.? You know, I used to find these C++ programmers that had never learned C, and it was just sort of astonishing to watch them basically hit the wall again and again and again and again and again because they were missing some of the early concepts that nobody cared to explain to them.
Atwood: So do you learn C before learning C, you think? 
Spolsky: Um... [both laugh] Learn C before learning C?? No.? But like I said, 68000 assembler is a very good assembler.? It is one of the last assemblers that was designed to be written by a human being.? Because, there for a while people did actually write in assembler, and the chip manufacturers would give them useful features that were helpful to programming.? At some point they stopped doing that and they just said, "You know what, it's only compilers that are talking to us, so, why bother?"? The Motorola 68000, which was a very, very similar to the PDP-11 assembler, which was entirely designed to be written by humans, probably designed before they thought there would be very many compilers.? So. 
Atwood: Right. 
Spolsky: You don't have to learn Fortran.? You don't have to learn COBOL.? It's not C because it's old, it's C because of the pointers.? And stuff like that.? Anyway. 
Atwood: The nasty bits, right? 
Spolsky: Yes.? The nasty bits.? We have some good questions for next week. 
Atwood: We'll do those first. 
Spolsky: Sure.? We'll do those first.? And... Do we have any other announcements?
Atwood: Do you want to talk about the open house you guys are doing?
Spolsky: Yeah.? There is an open house at Fog Creek and if you get this and it's, and you're listening to this on time... I know it takes people a while before podcasts wind their way down into your ears.? But if you're in New York, and you're listening to this, and it is not yet Thursday July 17th at 5:00 P.M. then on Thursday July 17th at 5:00 P.M. we would like to invite you to the Fog Creek office: New York NY 535 8th Ave. That is in between 36th and 37th street, kinda on a shmutzy [dirty] street here in the middle of the shmata [garment] district.? And we are going to be having an open house with, apparently... I was chastised for claiming on my website that there would only be gold fish.? There will actually be... wine and cheese, or something.? And you'll get to meet the Fog Creek interns, and the software management trainees, and our new sales department, and a whole bunch of other interesting people, and of course the programmers who bring you FogBugz and Copilot.? So if you're in New York, please come to that.? I promise it will be terrible, but you can leave at anytime.? I also want to thank a lot of people, you know, Jeff, I don't know if you've been looking at a lot of the transcripts, but they pop up in a matter of a couple of days.? Which is really awesome.? People, whenever we post these things, we make available a wiki for typing in the transcripts, and a bunch of volunteers all over the world, most of whom I know only by their IP address, come up to that wiki and write down everything that Jeff and I say word for word, including every nervous giggle, not-so nervous giggle, there is a lot of editorializing going on there. It's a barrel of laughs.? And it's very useful actually to people who can't listen to this for various reasons, or don't want to listen to this.? And, also, it allows everything we say to show up in Google searches, to be machine readable, basically, so people can find this.? Otherwise, it's just audio.? It's just bits.? Lost.? Forever. 
Atwood: Yeah.? Why can't Google index audio yet?? They are really slacking off.
Spolsky: They... You know what?? They probably could do for the purpose of searching audio, you don't have very good voice recognition just to search.
Atwood: I don't know.? A listener wrote in with some machine transcription, and I was kind of appalled. 
Spolsky: Yeah, it was appalling, but if you were searching for specific things they might have been in there.? You see what I'm saying?? Yeah, the machine translation is appalling, and I think, my personal experience has been the machine transcriptions are harder to edit than to just type it in right in the first place.? But, anyway.? So I do want to thank some of the people that have been coming in and contributing.? There is 70.56.88.179... [both laugh] Just kidding.? Some of the people who identified themselves deserve a special call out; Josh Parris, Bernard Dy, Justin Standard, Jan Ives, Jeff Atoot... Atood?? I can't pronounce anything these days: A. T. W. O. O. D, I don't know who that is... Justin Standard...
Atwood: Yes, nice...
Spolsky: And user 126. user 143. 71.10.161... et cetera. Thank you very much for the transcriptions.? It's really very much appreciated.? And a lot of people have been sending in great questions, I didn't get to.? There are about a dozen of them.? But I didn't get to any of them today.? Except for the one easy one.
Atwood: How about next call: all questions.
Spolsky: Okay.? But come up with something interesting.? The questions.? Let's see.? What would you consider interesting?? We want to get controversial things. 
Atwood: Just whatever people send in.? I don't have any specific guidance.? Whatever they think would be interesting to hear about. 
Spolsky: When I'm listening to them, you know what I'm doing right now?? I'm sort of? de-emphasizing the questions where somebody says, "Hey, will StackOverflow have this, that, or the other feature," or "How will you do this in StackOverflow?"? The reason is that people haven't seen it yet.? And so those questions are like, "Just hold on a second. Just look at it and you'll have lots of great questions."? So hold off on the questions about StackOverflow because it's a little bit theoretical now.? But anything we've discussed on the podcast is obviously fair play. 
Atwood: Well, Joel, assign those to me and what I'll do is I'll do a blog entry on our blog summarizing those.? So at least their questions get answered.? You know what I mean? 
Spolsky: Yep.? Yeah, that's a good idea. 
Atwood: Because I don't want to feel like we're throwing away their questions.? They took the time to record them and send them in, so I do want to answer them. 
Spolsky: So if you do want to ask a question.? Everybody recommended that I get Grand Central.? That was the #1 recommendation.? I tried to sign up for that, but it's like a waiting list or something.? I might as well... [sighs]? It's like the iPhone 3G, except, at least the iPhone 3G if you wait in line for six hours you can get it.? Where as Grand Central, you put your name in a box and they ignore you.? So if any of you work on Grand Central, or know anybody there, could you please approve my application to become a member of Grand Central?? And that way we could set up a phone number to take questions.? Failing that, there are some other services that were available, but the real thing that we will do is get our Asterisk server hooked up to do it.? Unfortunately for that we need another direct-inward-dial number, and unfortunately we don't have that in this office, but we will have that in the new office.? So we may not have a phone number for you to call in to ask those questions until September, when we move into the new Fog Creek office, and then I'll set that up.? In the mean time, you've got two choices: 
1) is you can record an MP3 or OGG vorbis file using your computer's microphone and recording software, and e-mail it to podcast@stackoverflow.com; Or 
you can go to cinch.blogtalkradio.com. 
And as usual, Jeff will link it in the show notes.? And that's a little service that lets you call a phone number and get an MP3 that you can then send us.? And a lot of people have been doing that, too.? It's very easy.
Atwood: So, Joel, were you just asking for preferential treatment?? Is that what I heard?
Spolsky: Yes.? I would like some preferential treatment.? I would like my friggin Grand Central account please. 
Atwood: [laughs]
Spolsky: I'll pay for it!
Atwood: I'm just kidding.
Spolsky: You know.? All these things get acquired by Google and then they shut down.? Because they can't take as much traffic as the Google audience will bring them.? So they rebuild the whole thing in Python, or whatever it is that Google likes to rebuild everything in, and in the mean time they are closed for a year or two.? I think that's where Grand Central is at right now. 
Atwood: I see.? It's probably written in C.? They have to rewrite it now.
Spolsky: [laughs]
Atwood: So I think that's probably it for this week. 
Spolsky: Yeah!? Sorry I was so grumpy at the beginning there.? 
Atwood: That's alright.? Not a problem. 
Spolsky: Let's just delete this whole show and do it again next week.? 
Atwood: [laughs] Nah, I think it was a reasonably good show.? We can probably ship it.? Just like software: it doesn't always come out the way you want. [both laugh]
Spolsky: Alright.? Ship it! 
[1:10:08 - ends]
Advertising, outro
[1:11:07]
Spolsky: OK, yeah, yeah I feel like you know what, I feel like that robot in WALL-E at the end where he gets reset and he just becomes a,[minor spoiler obfuscated, highlight to reveal] I don't want to spoil it.
Atwood: Yeah, you're gonna... Spoilers man, what are you doing?
Spolsky: Sorry, sorry. That was a great movie.? Go see it.
Atwood: Ok.? Well hey, we can disagree!? You said we agree too much.? I was actually disappointed with Wall-E, I really was.
Spolsky: What?!? Are you kidding?
Atwood: I really found it disappointing.? It was by no means bad.? Pixar is kind of like Blizzard, I don't really think they can do anything that's really bad.? But it was pretty low on my list of favorite Pixar movies.? It was probably barely in my top four...
Spolsky: I thought it was fantastic!
Atwood: Ehhh, it didn't really work for me on a couple levels.? It was by no means bad, I liked it, but uh.... there you go, we can disagree.
Spolsky: Yeah, because you're a moron.
Atwood: [Chuckles] It's a minority opinion, man.
Spolsky: You know what today is?
Atwood: Uh, what? Tuesday?
Spolsky: Today is all questions day.
Atwood: Oh that's right, it is all questions day. Ooh, I do have a tiny bit of business before we start though, I promise today is all questions day, I wanna be clear about that, which is good because we've been lackadaisical about getting to the questions. [laughs]
Spolsky: Just format your business as a question.
Atwood: Yes, so.. Question: when are we going to beta? [Spolsky laughs] So, so, minus editing, um, it's actually looking like we're gonna start letting people in... What I'm doing this week is ah, we finally have an authentication method in, which is awkward for us because normally everything is public, so we have to actually add authentication which is code that will never be in production.? We've added that, and I'm letting a few designery-type people in, to look at the site and sort of help us clean up our crufty... the fact that we're using tables instead of DIVs in a lot of places...
Spolsky: No, keep the tables, tables are great!
Atwood: (laughs) Well, where they make sense, I mean I just want people who are good at CSS to come... I'm OK at CSS... you know we've been writing a lot of code.? So that's really the short-term goal, it's to clean it up.? It's getting close to being ready for some kind of human consumption.? And we have I think over four hundred people on the beta list, so I think I'm gonna start trickling people in, probably before the end of the month now, so a little ahead of schedule.? Which is good.
Spolsky: A little bit ahead of the late schedule.
Atwood: Yeah, a little bit ahead of our late schedule.? Yes because an additional two weeks is gonna, you know, kill people.? The first software project in the history of time that's been even slightly late.? Then on logistics, just so we're clear, I don't know that people know how... what's the right word for this?? I don't wanna use the word "shoestring", but this is, we're on a very limited budget in terms of what we're doing, in terms of manpower and time and things like that.? Cause, we have one full time person which is me.? We have two people that I recruited that I used to work with, that are very much part time.? I pay them what you might call "slave wages."
Spolsky: So you give them some money to buy cigarettes?
Atwood: [Laughs] Yeah, they can buy liquor and cigarettes and things like that; you know things that programmers need.
Spolsky: Things that 15-year-olds can't get... on their allowance. Yup.
Atwood: And to their credit these guys are doing this largely out of - I don't want to say the goodness of their heart - but because they know me and they believe in the project so they are sort of contributing some sort of basic sweat equity to the project so it's not like we have this giant pool of venture capital.? I mean, this is basically self-funded to this point by: me [laughs].? Um, so, it's sort of a minimalistic endeavour, I mean what I think what we're going to end up with is going to be pretty cool.? And it's going to be kind of community effort too where I've been posting on the blog about what we're doing and trying to solicit input and things like that.? Eventually we might open source the code as well.? But it's not like we have this giant pool of venture capital money like some companies, it's very much a small endeavour that we're taking on.? But that said, people will start trickling into the beta before, before the end of the month now so that's where we are because people keep asking and I just wanted to address that.
Spolsky: I noticed one of the questions you asked on the blog was how should you handle maintenance recurring tasks in general?
Atwood: Yes.
Spolsky: Is that a fair?characterization?? Every website has some tasks that you don't want to execute at the time a web page is loading, but you want to execute with some?recurrence of some sort.
Atwood: Ya, background tasks sort of thing.
Spolsky: Ya, so what did you figure out?
Atwood:?Well, I?originally?asked on Twitter, because I just wanted something light?weight. ?I really didn't want to like write a windows service.? I felt like that was out of band code. Plus the code that?actually?does the work is a web page in fact, because to me that is a logical unit of work on a website is a web page. ?So, it really is like we are calling back into the web site, it's just like another request in the website, so I viewed it as something that should stay inline, and the little?approach?that we came up that was?recommended?to me on Twitter was to?essentially?to add something to the?application?cache with a fixed?expiration, then you have a call back so when that expires it calls a certain function which does the work then you add it back in to the cache with the same?expiration. ?So, it's a little bit, maybe "ghetto" is the right word.
Spolsky: Well it is kind of?ghetto.
Atwood: But it works really well.
Spolsky: It not going to work if it's a long request.
Atwood: Well it will. ?It's just the timing will be off. ?Say it takes 60 seconds for this thing to run then the intervals are going to be screwy.
Spolsky: Doesn't that mean that some guy comes and hits our web page and some random one of his requests will take will suddenly take 60 seconds because it has to update this thing in the application cache which is going off and doing your maintenance tasks.
Atwood: You could, I mean it's security by obscurity right?
Spolsky:? No, I'm not talking about security here.? I am talking about some guy has one of his pages take longer than expected because that random page is required to do some work.
Atwood: I don't think so because one the big strengths of web apps is they are really parallelizable, because every web page is a unit of work and the only shared resource is what?? The database, the CPU?? So as long as you are not monopolizing one of those two things I would expect other incoming requests to be essentially unaffected, they are not going to block...
Spolsky: I'm not talking about the other request, I'm talking about that particular request. Some random person comes in and his request... Let me see if I can understand this mechanism here. So there's a whole bunch of people all over the world hitting our website and at some point 10 minutes have elapsed and some maintenance task has to execute. And so some random unlucky person, just hits a random unlucky web page, and the cache is now expired and that causes that random unlucky person to now have to wait, while we now do that maintenance task.
Atwood: No I think it'll happen in parallel.
Spolsky: How will it happen in parallel?
Atwood: The same way that when you and I go to FogBugz, we both retrieve a web page at the same time. I mean this is just a thread on the server internally.
Spolsky: I know but it's the thread that he was trying to use to see the homepage.
Atwood: I don't think it's the same thread, I think this is something that happens on a different thread. I could be wrong about that, but certainly I don't ever see...
Spolsky: [Garbled] me see this mechanism here.
Atwood: Yeah. Well, you know, if people are concerned, I mean, we certainly can move this out, I mean, part of what we're doing is getting things up for the beta so that, again, all the functionality is there so people can actually comment on the functionality and not what they imagine the functionality to be.
Spolsky: Well, well let me, in in the spirit of anecdotes, let me tell you how we do this in FogBugz.? Because FogBugz has a lot of tasks, and indeed we don't want to rely on anybody hitting the web page to cause these tasks to happen.? Or to trigger them to occur because, somebody might have a FogBugz account and just not log on all night.? And in the meantime FogBugz is for example receiving an incoming email and it needs to reply to it, and it needs to be doing all this stuff, even though nobody is hitting the web pages, and we also don't want that stuff to have to happen at the same time as a request.? I don't mean in a different thread, I mean actually in the thread with the person's request which it sounds what you're planning to do would have that effect - unless I'm misunderstanding something.? So here's how FogBugz does it, we wanted all that code to live in the same code with the rest of FogBugz because if you want all the same libraries to be available, like you said, it's gotta be a web page, it's gotta be in the same app-space.? Not some separate process that does separate things and needs its own database connection or anything like that.? We just wanted it to be as if it were a web page, except it's doing background tasks.? So what we have is a special page that's called heartbeat.asp.? Heartbeat because FogBugz started out as ASP.? 
I won't go into the story as to what it really is.
Atwood: [chuckles]
Spolsky: So we have this special page called heartbeat.asp.? And that page, whenever you hit it, and anybody can hit it at anytime: doesn't hurt.? But when that page runs it checks a queue of waiting tasks to see if there's anything that needs to be done.? And if there's anything that needs to be done, it does one thing and then looks in that queue again and if there's anything else to be done it returns a plus, and the entire web page that it returns is just a single character with a plus in it.? And if there's nothing else to be done, the queue is now empty, it returns a minus.? So, anybody can call this and hit it as many times, you can load up heartbeat.asp in your web browser you hit Ctrl-R Ctrl-R Ctrl-R Ctrl-R until you start getting minuses instead of pluses.? And when you've done that FogBugz will have completed all of its maintenance work that it needs to do.? So that's the first part, and the second part is a very, very simple Windows service which runs, and its whole job is to call heartbeat.asp and if it gets a plus, call it again soon, and if it gets a minus call it again, but not for a while.? So basically there's this Windows service that's always running, that has a very, very, very simple task of just hitting a URL, and looking to see if it gets a plus or a minus and, and then scheduling when it runs again based on whether it got a plus or a minus.? And obviously you can do any kind of variation you want on this theme, like for example, uh you could actually, instead of returning just a plus or minus you could say "Okay call me back in 60 seconds" or "Call me back right away I have more work to be done."? And that's how it works... so that maintenance service it just runs, you know, it's like, you know, a half page of code that runs that maintenance service, and it never has to change, and it doesn't have any of the logic in there, it just contains the tickling that causes these web pages to get called with a certain guaranteed frequency. ?And inside that web page at heartbeat.asp there's code that maintains a queue of tasks that need to be done and looks at how much time has elapsed and does, you know, late-night maintenance and every seven days delete all the older messages that have been marked as spam and all kinds of just maintenance background tasks.? And uh, that's how that does that.
Atwood: Right.? No, I don't think that the approach we are using actually intersects with the regular loading of pages.? I think it happens in the app domain. ?So, there's basically some pool of threads that the server has, that the .NET core process that's running the site has.? But that said, if people are certainly concerned, we can certainly move it out too.
Spolsky: It's very confusing.? You see because it's a cached application thing... but when the cache expires, it's not going to recalculate that thing, until somebody reads it.
[12:37]
Atwood: No, it will.? It will do it if nobody will... I can watch it happening on my own box.? I can just set a breakpoint on a line and it just happens even if I am not hitting the website.
Spolsky: Oh, I didn't get that.? I was missing that whole part.
Atwood: If the app domain is not spun up, I do think that it will not run. In other words, say nobody was hitting the site at all.? I do believe that to be true, that it actually will never spin up this thread which is actually okay.? But, to me this is fine because eventually we may move it out of band to a scheduled task or something or a cron job or something like that.? But, having the unit be the web page is the core concept and I think you did the same thing on FogBugz and I would agree that that's the right way to do it.? Because then we have the flexibility if want to move it out and schedule it externally, it's really trivial to do that.? You just do a HTTP request from some URL retrieval executable.? So that's fine.
Spolsky: Now, it's still a little bit ghetto in the sense that: you better not time out anything because if you time out anything then IIS will be like 'this page is taking too long' and it will shut you down.
Atwood: Yeah, no. There is a bunch of caveats around it.? But, it's good enough for beta.? Again, hoping... I want people to see the site as it's supposed to work and comment on that functionality and not the imaginary functionality that we are promising.
Spolsky: So, this is the "all questions" day.
Atwood: Where we spent fifteen minutes talking about our own stuff again.
Spolsky: [laughs] So, how have you been? [laughs]
Atwood: [laughs]
Spolsky: I have a whole bunch of questions queued up.? I am just going to do them in random order.? Here is a question from Gordon Milne.
[14:11]
Spolsky: Sometimes. [laughs]? Sometimes.? Although sometimes not.? I mean, sometimes they're just bad at both.? In economic terms, somebody's going to have competitive advantages as being a manager.? It's going to be the person who is most relatively best at motivational issues, understanding what people want and what motivates them and what they're going to think when tell them x, y, or z and so on.
Atwood: So, you have to move from being a compiler person or an interpreter person (I guess) to being a people person.? So, you are saying that the people transition is the most important. It's not how much technical but, you must have enough technical ability to know when people are lying to you.? That's the way I look at this. [laughs]
Spolsky: That's true. 
Atwood: The developer says, "we are going to frim-fram the blim-blam" and the manager says, "Oh okay - go do that". [laughs] Right.? Are you really capable of doing your job at that point of time if people can just lie to you?
Spolsky: You need a couple of things in terms of technical chops.? One is you need to be able to throughly understand of what's going on and call people out on their bullshit.? Because, believe me: they will try.? Number two, you need to have their respect.? Which means technical respect.? Often to technical people, if they don't respect you from a technical level, it's going to be very hard to get things done.? Although, that shouldn't necessarily be true.? I mean, you could imagine somebody comes from a business background and maybe the developers understand that he is really good from a business background and understand that and are willing to give him or her that respect.? It doesn't really matter. Because, most of the time to pull it off you are going to need to have some serious technical chops I think. And it really is just sort of a different kind of a career and there is ways... and I mean I guess I could point to a couple of real no-nos which I think that people I know might have done, maybe including myself.? Number one is when you are a developer and you are not so clear on dealing with human resources or personnel issues or that particular aspect of management, there is a real tendency just to say, "you know I am not really starting out as a full-time lead. I am still going to wanna write code."? And, thats a valuable thing to say.? And you say maybe I am going to spend 50% or 80% of my time writing code and I will try to keep that human resources aspect of my job down to a day a week or a couple of hours a day.? And that's fine.? You can and you should do this.? Especially at the first level team leads should certainly still be writing code a lot of the time and even sort of the head of a very, very large team should still be able to find 5-10% of their time to write code.? But, the trouble is when you do a 100% of your time writing code and you sort of say, "I'm not so good at this human resources thing so I'm going to keep doing what I was good at which is writing code and I'm just kinda going to ignore those human resource problems and let them resolve themselves." And you tell yourself a very nice story that you are being a very hands-off manager and you are in the trenches with your team and you are working on the code with them everyday and you are not really a manager so much as just another member of the team. You can say that, but that's not going to be all that successful for you because there are things that somebody just has to do in management and if you don't do them because you are not so good at them bad things will happen and you will discover why it was that they needed a team lead in the first place.
Atwood: Right, so it's sort of a paradox. You can't really write code but you have to write a tiny bit of the code.? So, you probably will have to let go of the code more than the average developer I would say.? Because the whole reason people... it's like as you said why promote someone who is your best coder.? I think that's probably the pathology here.? Take your best coder and say that you should be a manager because you are so good at coding and not to look for people that are sort of good at both and maybe not the best coders but really better at the people thing and willing to devote the time to it.? And then of course we got to bring up our favourite book Peopleware.? This was one of my complaints with people that were managing me as a developer.? It's like they didn't really put any effort... how did they learn to do their job?? They just sort of came in and did whatever popped in their head.? I got really frustrated.? You know there are those books about what you are supposed to be doing and maybe you could read them. [laughs]? Figure that out because once you are a people person you get the idea that I can just talk to people to do my job, it's like well... a little bit more than that.? I mean there are some technical things to it.? So again I would just point to Peopleware and if you want to be a manager that's absolutely required reading at that point and even more than it was before.? You should like live it, love it, learn it, right? [chuckles] ... book.
Spolsky: Yeah.? And there are books about sort of becoming a manager.? Actually, you know, Rands, Michael Lopp, who uses the name Rands on the Internet, has a book called, I think it's called "Becoming A Manager".? Uh, is that right?
Atwood: "Managing Humans", or something like that.
Spolsky: "Managing Humans", thank you.? "Managing Humans"...? and a lot of it is on his website, Rands in Repose, on the subject and he's got kind of an interesting take on it that comes from working at a rather large company (at Apple) where I believe secretly, I don't know if I'm allowed to reveal this, I think he works on the server team for people that use it, y'know, Apple boxes as their servers if I'm not mistaken.? But anyway, he's got this very interesting kind of what it... how to be a middle manager in a larger organization perspective.
Atwood: [grunts encouragement]
Spolsky: Where there's a certain amount of managing upwards that you have to do as managing expectations.? Some people would call it playing politics but playing politics is just a nasty name for doing interpersonal things where you talk to people and you try to affect things that you want to affect.? We actually screwed it up for a while at Fog Creek and we didn't have any kind of middle management at all and we thought we would get away without middle management for a long time, and it didn't work out so well and the full story of that, I won't tell it now, but the full story of what happened and how we realized we needed to have managers is going to be in my next column in Inc. Magazine.? I think it's the September, the upcoming Inc. magazine.? I'll link to that from my website when it finally comes out, but if you look for the Inc. 500 issue, I think that'll be in there.
Atwood: Oh, cool.? Well, that was a good question.? I enjoyed that one.? And definitely, the Rands book is very good, as is Peopleware.
Spolsky: Right.? Okay, Jason...
[22:37]
Jason Zimpelmann: Hey Jeff and Joel, this is Jason Zimpelmann from North Carolina.? Love the show, keep up the good work.? I was wondering what sorts of time management strategies you guys both use?? I know with you Joel running an entire business you are obviously busy.? Jeff you’re fairly prolific in your blog posting, plus working full time on StackOverflow, I am wondering what sorts of time management issues you guys run into?Spolsky: There is another part of this question which I will play in a minute, but it’s completely unrelated, so let’s talk about time management.? First.Atwood: I am the wrong person to ask...Spolsky: [Laughs]Atwood: for time management.? If you are asking me for time management, you’re in deep, deep trouble.? Really bad.? It’s not good.Spolsky: [Laughs] So what you do …Atwood: So I will let Joel take this question, let me just…Spolsky: is if you have a lot of email, you want to go to your video game console. [Laughs]? And first you want to clear your head by playing some kind of a video game.
Atwood: I think it's more like shiny object problem that I have where I'll get distracted.? Here's a really dumb example: so I'm working on StackOverflow, which I do actually work on StackOverflow-
Spolsky: [laughs] 
Atwood: and I'm looking up something and it'll remind me of a music video or I'll get a music video result in the search and go 'Oh I remember that music video' and just have to watch the video which relates to the term that I was working on.? It was actually 'Popular' this video by Nada Surf.? I was like 'Oh I remember that song' of course I had to go watch it, then I had to look up the band and see what they're doing.? Like I said, I'm the wrong person to ask.
I think what works in my favor is that when it comes to writing and some of the stuff I feel driven. I feel like I haven't produced anything until it's visible to the public.? So that ends up being the thing that drives me.? It's like I've seen the positive feedback loop you get of posting things publicly, not only in terms of personal satisfaction, but also in terms of your career, getting answers to your questions.? Living in public, I've started to really believe in, and I feel like if a day goes by, and I haven't dome something that was publicly visible to someone in the world, then I get really nervous. [Joel chuckles]? I feel like I haven't done anything that day. So that become the thing that drives me, having these public artifacts, but it's, you know, again... 
Spolsky: That's like a Milan Kundera short story about some guy who doesn't want to live unless he's in the public.
Atwood: [Laughs] Well I don't mean it in the negative, I mean it works on so many levels.? It sounds selfish, maybe it is, but I like to feel like I'm producing things that somebody would find, and it would actually help them too.? You know, there's this great communal work going on that we're all doing and I like to participate in it and on some level I kind of get off on it obviously so that's the way I do it - but I don't run a company.? Joel, you should totally take this because you have so many more demands on your time than I do.
Spolsky: Right.? I don't have a great answer and my answer is going to start a little bit boring, which is to say that I'm a big fan of Getting Things Done not that I could read that book, in fact I was able to save a lot of time [both laugh] and manage my time very well....
Atwood: [Still Laughing] You saved time by not reading that book?? That's awesome!
Spolsky: ...by just skipping the actual reading of Getting Things Done.? Let me tell you a little about it, there's some philosophy there and there's some methods, and certainly for the geeks, Getting Things Done, that book is just an excellent method of organizing your life and getting things done and actually being productive with your time.? I'll give you a couple of insights.? One is an insight that I actually learned from the book before I realised that I was wasting time by reading it, and that was the insight that if you don't have a kind of to-do list system where you look at something and put it on a list of things to get done, if you don't have a system for that then you've got all these nagging little things that you have to do in the back of your head that are going to cause stress and make you unhappy.? The basic philosophy is just when something comes in whether through the inbox or you just decide you want to do something and I think the rule is that if you can do it in two or three minutes, you just do it immediately, it's like not even worth the time to put it on a list, you just do it.? You concentrate on getting it done and get rid of it.? Just knock out that e-mail and get rid of it and get it out of your inbox as fast as possible.? If it's going to take any longer than that, don't let it stay in your inbox or in your front queue whatever that may be, you gotta move it like on to a calendar or onto a long-term to-do list or on to some other list of things to look at when you have some spare time.? You just have to get it out of your brain where it's nagging you and causing stress and onto a piece of paper or a to-do list on your computer or a task list or a FogBugz database or someplace where it's going to remind you that you have to do it later and you don't have to have it permanently causing stress... [pause]
[27:33]
Atwood: Have you been to Merlin Mann's site, the 43 Folders?
Spolsky: Uhh no, but that seems like another excellent way to waste time instead of getting things done trying to learn about how to get things done. [chuckles]
Atwood: Well it becomes pornography at some level [Joel laughs].? It's info about how to do things, you're not actually doing things but reading about how to do them if you were - in theory - to do them.? This is the most optimal way to do it.? I think a certain amount of that is good.? Certainly, there's some great tips on handling email.? I think you touched on one of them which was if you have small things come in, and I've actually started to do this too if I get small emails, I love small emails.? If you're going to email me, make it like a twitter message. Make it really short, something I can answer immediately - no research - and you will get a really fast response.? If it's like a 3-page business proposal, it's gonna sit in my inbox for weeks [Joel mutters something about requiring a decision] because, I mean, the amount of thinking I have to do is just way disproportionate to the email.? I think there's some good basic lessons you can get out of sites like that I think are helpful.? I think Merlin Mann, who runs that site, is a very funny guy.? You listen to his podcast right?
Spolsky: [grunts acknowledgment]
Atwood: Has some really good insights on this problem and he's a great person to listen to. I'm also going to... there's this little conference called the Start Conference in August for startups - which I am now: a startup - and Merlin Mann is gonna be there so I'm looking forward to
Spolsky: Cool.
Atwood: meeting him and saying hello to him and seeing what he has to say about that. But yeah that's another site to turn to and I think he started with Getting Things Done as well, I think that was sort of the gem of his idea and he just basically built a website around that - that's my understanding.
Spolsky: Now following with that I want to point out another thing, you mentioned the hypothetical email that sits in your inbox for a long time because there's some complicated decision to be made and fortunately we've hired a person here at Fog Creek, Rich, who is kind of a Getting Things Done expert and aficionado and really has some good understanding about all this stuff and how to be productive and also sane and keep calm in the face of lots and lots of demands coming in from different directions.? And one thing he pointed out is 'don't cherry pick' and what he meant is don't go into your inbox and cherry pick the things that you can do now.? If you have an inbox, you gotta do it in order.? You can't pick out the things that are easy that you can just knock out of the way and cherry pick those and here's why, if I'm understanding it correctly: the theory is if you leave all the complicated stuff that requires a decision in your inbox, every time you go into the inbox to try to find something to work on, you're going to open up every one of those emails and you're going to be thinking about those things and trying to decide those.? You're going to be spinning up and basically you're going to be task switching into thinking about this email that you're not even going to deal with.? So if something stays in your inbox for 2 months while you try to figure out what the answer is going to be or whether you're going to hire this person who sent you a resume or whatever the case may be and that keeps coming back again and again, then every time you go to your inbox that distraction is going to be there and you're going to have to spend time and mental energy on something that you're not even going to solve.? That's why it's really important to just get it the heck out of there until you can work on it.? Just get it out of your inbox and put it on your calendar or put it on your to-do list with some kind of prioritization.? Whatever those things are in your inbox, your to-do list, or your calendar, you just do things in order.? You just pick one and work on it till it's done, you don't allow it to come back again later and consume more mental energy and create more stress at some later point in time.? So I've been doing that and that kind of helps a little bit.? I've been doing that lately.? There's a couple of other things I do.? Sometimes if I really need to get stuff done, I won't even look at my inbox until after lunch.? That kind of helps, I'll just pick some actual project to work on.Okay, so enough about time management.? There's another question that Jason had.? This is the second part of his recording:
[31:29]
Jason Zimpelmann: Jeff, in response to your recent posting about the region blocks in .NET, I was wondering if the same attitude towards collapsing individual functions also applied, since that is hiding code. Or is it more or less hiding groups of functions that you have an issue with?? Again thanks for the time and keep up the good work!
[31:57]
Spolsky:? Yeah.
Atwood:? I guess I could talk a lot about that but I'll try to be concise.? It frustrates me a little that the region directive even exists.? Because I think, historically, if you look at why Microsoft had that - and people at Microsoft have sort of implied as much - that before Microsoft had partial classes, so you could have two classes that are really the same class, but in two different files.? 
Spolsky:? [grunts acknowledgment]
Atwood:? Right, you could have sort of the autogenerated cruft in one file that you never have to look at and really why would you want to look at it.? It's autogenerated, you shouldn't change it.? If you change it that's a pathology.? You just never need to see it. ? From your perspective it's just magic that happens. 
Spolsky:? Right.
Atwood:? And you have another file, which is the partial class, which is like, "Oh here's the stuff that actually matters.? Here's my code, that does my things, that I care about."? But they didn't always have that.? Partial classes were new to I think .NET 2.0, so Visual Studio 2005 era. So they had to have some way of putting the stuff in the same file and I'm sure some product manager at Microsoft saw that auto-generated code and said, "Why does the developer even have to look at this code?"? He or she was right, but what they came up with was the Region directive so they could collapse all that auto-generated code and say, "Don't touch this code, it's auto-generated, warning, warning, here be dragons, etc, etc."? But now that we have partial classes, I would argue that Regions now are horribly abused.? It had a very specific meaning I think early on for Microsoft and now I've never met a developer that didn't love coming up with ten thousand different categorizations, like a huge forest of trees, and just carefully deciding were every little thing needs to go. If you look at the way, for example, a web page works.? Imagine the CNN homepage, if every article was collapsed.? Or, every time if you wanted to see something you had to click on it.
Spolsky: Oh, this would look like just Scripting News. 
Atwood: This is not really the way things were meant to work, this is what search is about.? You scroll down to the thing you want.? I use Ctrl+I, which is incremental search.? I use that all the time and Ctrl+Shift+F, which is find in project.? Essentially, search is my metaphor of choice for finding things in code.? I don't spend a lot of time mousing around looking for code.? I think of some keyword that I know is going to be there.? The world is full of tokens, unique tokens that identify things.? Just like search keywords, unique search keywords that identify things.? I Ctrl+Shift+F and I hit F8 to navigate to the search that I want or Ctrl+I to get there pretty much instantly.
[34:26]
Spolsky: In Visual Studio 2008, does that expand if you search into something that's hidden in a Region?
Atwood: It does now.? In earlier versions they screwed that up.? You're right - that was a huge problem.
Spolsky: Yeah.
Atwood: was that you couldn't find things in Regions.? But they did fix that.? I don't know? which version of Visual Studio that got fixed in, but as of 2008 for sure it does work.? My attitude towards Regions is if you're hiding code you gotta really think, "Why I am I hiding the thing that I am supposed to be writing?"? That's a little disturbing to me.? They way we do it on StackOverflow is - I am not totally religious about it - my guidance to the team is please use as few Regions as you possibly can.? There are places where we have Regions to be fair, I'm not gonna quit the team if I see a Region or anything ridiculous like that.? Just think about why you're using it.? It's kind of like goto.? You should never really use goto without a good reason, but there are still good reasons to use goto occasionally.? You've just gotta have good reasons.
Spolsky: I think a lot of times is where people are using a Region because they don't wanna organize a bunch of their functions behind a page, that's probably a good use of my favorite thing, a user control. Maybe this is an abstraction that you just wanna pull out into its own class and have it sort of isolated and localized and stuff like that...
Atwood: Right, right, no I totally agree. I think anytime you use a Region it's like there is other ways like Partial classes as two separate files.? That's a much better solution then to have this silly little Region tag that doesn't really do anything.
Spolsky: Or even just actual classes.
Atwood: Plus it's an actual line of code!? This drives me bonkers: it's like a line of code for the editor.
Spolsky: Yeah.[giggle]
Atwood: I mean, what's wrong with this picture.? Even a comment is useful to the humans.? Regions, enough said on that.
Spolsky: Let see what else we got here. Let's go to Aviv Ben Yousef.
[36:20]
Aviv Ben-Yosef:Hello Jeff and Joel.? This is Aviv from Israel and I wanted to ask you about code review and how you think it should be done.? In my workplace we have an argument whether it should be done alone - after someone checks in his code, I check out review it and place some comments or send him an email with my comments and then check it back in and he reviews it again.? Or (and this is a new approach) whether about once a day we come to the person.? He shows you what he has done lately, interactively.? Or are we missing it at all and you have a better way?? Thanks.? Keep doing this podcast.? It's really cool.? Bye.
Spolsky: So are you doing any kind of code reviews over there?
Atwood: We do actually do some form of code review, so I have an opinion about this.? I think code reviews is one of the most powerful things you can do on a project. Just having two pairs of eyes - say you have - it depends how you want to do it.? There's many ways to accomplish this.? But let's say for the sake of argument we have a rule that says every time you check something in, you can't check it in until you have another developer sit down with you and look at it.? Explain it to that developer, show it off, that sort of thing.? I actually first got into this at my previous employer.? At first I viewed it as a tax.? Oh great, now every time I check something in, I have to go justify what I've done.? But assuming you have a rational workplace - this is kind of a key thing - where your coworkers enjoy working with you and on some basic professional level.? It's actually fun to sit down with another developer and see their code and understand how they work and have them explain to you why they made the decisions they made.? And not in like a "I have to justify my decisions to you" way but a "let me show you this cool thing that I did" way.? I learned so many things, just little things like the way that developers use their IDE.? Tricks, coding tricks that they would do.? You will learn an astonishing number of things that have nothing to do with the code that is being checked in, just by interacting with your fellow developers on a regular basis.? And then two - the two eyes in terms of protecting you from weird code or architectural decisions that turn out to be bad, you sort of double your value in the code that goes in.? So I'm a big, big believer in this and I believe it has to be done interactively.? I do not believe that emailing someone after the fact or instant messaging them.? Because then it might seem like an interrogation, you know?? I think if you sit down with someone, you are not going to have that animosity of "Oh, why did you do it this way?"? It just prevents a lot of miscommunications and I think when it comes to code review that's really really important.? So I would strongly urge anyone listening to this to really consider: Don't do any kind of offline review - do it interactively.? We do it through Skype, like we're doing now and sometimes screen sharing, but we'll just talk about which line of code and stuff.? I love it and that's my recommendation.? Just make sure you do it face to face, or as close to face to face as you can. 
Spolsky: Yeah I absolutely agree.? End of story.? It's weird Aviv where you mention you were having an argument about that.? That implies that there is someone there who actually thinks it is better to not do code reviews in person and just to send a little email.? I hate to extrapolate from no information whatsoever but it sure sounds like it's a person who doesn't really like the human communication part of the job so much for whatever reason or maybe they're not so good at it.? But there's nothing you can do.? You really learn too much from sitting down with a person and talking and when you stand up after an in-person code review, 90% of the things that you learned are not directly related to the formal part of the code review.? Like, we sat down to talk about whatever and it's just even, as Jeff mentioned, watching how you use keyboard shortcuts or your IDE or whatever it is.? That's the way that teams transmit knowledge of how things should be done.? That's your chance to see people doing things other than just the pure writing lines of code.? So it's pretty important.
?[40:32]
Atwood: Yeah. And I think programming really, to me, is a very social activity.? I mentioned on an earlier podcast that I was working on StackOverflow and my other team members (even though we have a distributed team) were just unavailable, they were on vacation or some other way.? It just felt very isolated.? It, to me, felt a very incomplete way to write code.? Again, getting back to my attitude that I have to product something public to feel like I've accomplished something in a given day.? If I write code that one of my fellow developers hasn't seen or I haven't explained it to them, did I really do it?? Did I really get all the benefit out of writing that code?? Maybe that's a minority position, but I feel like writing the code and then the explaining and sharing the code part is just as important if not more important, to me, as an activity. 
[41:25]
Spolsky: Cool.? OK, so that was an unambiguous answer.? Here's David McGraw:
David McGraw: Hi guys.? My name is David McGraw and I'm from Manhattan, Kansas.? What advice would you give to college students who are about to start interviewing these days, and could you give any thoughts to common areas that they always seem to be weak in?? Thanks a lot guys, keep up the great work.
[pause]
Spolsky: Jeeeeeefffffff????
Atwood: Well, I've done a limited amount of interviewing at some various jobs that I've had, and I think my general advice over time evolved into "have a portfolio," right?
Spolsky: Oh!
Atwood: Yeah, "Show me what you've done", in some meaningful way, like either screenshots, or actually code samples, even, are fun to look at.? Taken to an extreme, I view it as "Give me a mini presentation."? Sell me on what you've done.? Explain it in a way where you give a presentation like you would to a group of random programmers, and make me:? 
a) understand what it is you did; 
b) understand why it was cool or good; and 
c) what you actually learned from it.? 
I actually had an old blog post on this and people kind of freaked out a little bit when I posted it. It was like, "Oh my God, you want me to stand up and give a presentation?"? For a lot of developers that's like the worst possible thing they could do that you could ask someone to do -- to give a presentation -- because it is kind of stressful.? But it doesn't have to be that way, I think at the very least just view it as "build a portfolio of your work that you can point to" and again, I think, the more public the better.? If you've worked on an open source project that's huge, because you can easily point to that, the more public artifacts you can generate from your work, I think ultimately the better position you will be later in your career.? So that's what I arrived at, so those are very general, broad things, and Joel you do a ton of interviewing, so I'm sure you have a lot to say on this.
[43:24]
Spolsky: Well I have a couple of things, the main thing I wanted to say is: you just have to be yourself.? If you're attempting to prove that you know something that you don't know or you're attempting to act like a hypothetical person that's not really you, it's going to show and you're going to be nervous and it's not going to work very well.? If you've never worn a suit in your life, I would have to say don't wear a suit to the interview [laughs] unless, I guess you have to wear a suit to certain interviews, but if you've never worn a suit in your life you probably don't want one of those jobs where you have to wear a suit, so seriously consider coming in dressed in business casual and if that freaks them out maybe that's not the job that you want.? Mostly it's about just being yourself so the interviewer has the best chance to judge you as a person but I think actually Jeff's advice is even better than mine.? Let me tell you why.? You know I've written these books about how to conduct interviews and everybody at FogCreek when they interview somebody comes into that interview with a direct agenda of what's going to be talked about and if you come and sit through some FogCreek interviews you're not going to have that much opportunity - at the end, we'll let you ask questions - but we're going to dictate pretty much what happens during the interview, we're going to tell you to write this code and write that code and show us you can do this and show us you can do that and that works really well for us, the employer, determining if your able to do your job.? If you're a programmer and you're applying for jobs I would bet that three out of four of the interviews that you go to are not really going to do this and those interviewers who are interviewing you are not really going to be prepared to ask you a whole hour's worth of questions or however long they have on on the calendar and they're not really going to know what to talk about and they're not going to ask the right questions and they're just gonna hope that... I don't know what they're thinking.? I'm not really sure what they're thinking.? They won't have a plan for their interview.
Atwood: Shocking! You're saying that people don't have a plan out there in the world? There's someone who doesn't have a plan?
Spolsky: Yes. They go in there and they're like, "What should I talk about?"? And you know what, you can tell because they're going to start going over your resume in chronological order, and they'll just... big waste of time.? What you need to do to prepare yourself against this contingency is say, "alright, if I have an hour with a person and the person just sits there and nods, what is the information I want to get across about why they should hire me?? What are the things that I want that person to understand by the end of this interview and I don't want to leave the room without the person knowing that I've done these things, that I can do these things, that I'm good at those things, and maybe I'm not so good at those other things, maybe."? You should have a plan of what you want to illustrate and why you're pretty good at it and maybe an explicit plan if there's something on your resume, if your grades are kinda low, but maybe not major, or if your grades were low freshman year but they got better after that and you want to explain that stuff, make sure that you know that when you go into that interview, "I need to get across to the interviewer in this hour these facts: this is why I got bad grades in freshman year;" or "I really love programming but I'm not so good at interpersonal skills;" or "I would really love a job where I could just hack all night long;" or "I've worked on this project and that project, or I built this thing."? Make a list of those things that you want to make sure you get across.? Practice with some friends and family.? Call up your grandmother (I know she'd love to hear from you) and say, "Grandma, pretend you are a really bad interviewer. Just say, [high voice] 'So tell me about yourself,' [/high voice] and I'll do the rest."? Just practice talking about yourself for an hour in a way which portrays yourself in a positive light and which highlights the accomplishments that you think will be relevant to that employer.
[46:30]
Atwood: You know, you bring up a really good distinction there. Which is there's maybe two different kinds of interviewers.? One's where the person being interviewed gets to drive and the other being the kind where the interviewer is driving. 
Spolsky: Yeah.
Atwood: I've read, of course, Steve Yegge and we can't go a podcast without talking about Steve Yegge.? He wrote a really good interview post, that was one of the key bits that I got out of it that was fascinating.? Don't let the person you are interviewing drive the interview.? It is your job.? That's true.? If you are doing your job as an interviewer, you're going to come in with an agenda.? You're going to jump through hoops, for lack of a better term.? You're going to do these things; I'm going to ask these questions; I'm going to totally drive.
Spolsky: We will at Fog Creek because we have read my book.? That's not true at all places, of course.
[47:48]
Atwood: For those kind of interviews, I do think it's a different kind of preparation.? I think you want to do this anyway.? Say I was interviewing with Fog Creek.? I would go to the Fog Creek website.? I would read your blog.? I would do all this research about what Fog Creek is, what kind of interview I can expect to get there.? Basically, prepare for the interview.? Both in the sense of studying for a test, and I find this unfortunate because I don't enjoy the pure testy whiteboard interviews, but you do have to study.? Writing code on a whiteboard is really difficult.? I write with all these crutches of Visual Studio and still I kinda suck at it. [chuckles]? Writing on a whiteboard: wow!? You would have to practice that.? If people are going to ask you puzzle questions, which I hate, hate, hate, hate puzzle questions.? I was looking up Michael, your partner, and has a whole website of puzzle questions.
Spolsky: techinterview.org. It's also a column in Inc. Magazine.
Atwood: They're fun to a certain type of person.? I am the type of person that those are totally nails on a chalkboard to me.? When I get puzzle questions, I want to gouge the interviewer's eyes out. [laughs]? I wouldn't really do that.? I have a hard time rationalizing how puzzle questions really help me as a developer.? I know opinions vary.? The point being, you have to study.? If you're going into an interview where you know they love to ask puzzle questions or they love to have you write code on a whiteboard, you have to prepare for that.? 
[49:17]
[51:14]
Atwood: Right.? But I do think you really need to know sort of roughly what kind of stuff they're gonna ask of you, 'cause... Let me give you another example.? I think this is a good interview practice -- actually, I like it much more than, say, the random puzzle questions.At my previous employer, you'd actually sit down and write a mini app, so you're using Visual Studio, you're using SQL Server, you're using all the things that you're gonna use there anyway; for the most part.? It's not like some imaginary, arbitrary compiler you're writing code for: it's the actual tools.? Say you got the job -- you would need to use them anyway.And it's a very simple app, it's not hard to write or anything, but it's shocking how many people sit down and like really can't produce anything. [laughs]Spolsky: Yeah.Atwood: So I do believe in that, because that's just, you know, where's the stick shift, you know, where's the gas pedal, can you drive the truck - right?? And then you can have a conversation about architecture.? Oh, for this little app, why would you decide to do this? And... it's a great interview practice.? It is stressful like all interviews cause you're being asked to perform.? But they're really cool about it in that they say, you know, look, this isn't a production level app, we just want something simple, it doesn't have to be super complicated.? But it's a great interview practice, and I much prefer that to say, lots of puzzles, and writing code on the whiteboard, and things like that.? But again, it's a situation where you'd want to prepare.? When I went in for that interview, I brushed up on my SQL Server because, although I've used SQL Server, I didn't want to sit down with the tool, and then have it, you know, have to refresh my memory, do a bunch of Google searches on really basic things.? So it is nice to be able to prepare a little bit for what you're going to see in the interview, I will say that.
Spolsky: Right. One way to prepare if you know you're going to a place like Microsoft/Google, that relies heavily on puzzle questions: there's a book called "How Would You Move Mount Fuji?", all about puzzle questions. William Poundstone.
Atwood: Yep. That's a great question.
[53:00]
Spolsky: And, let's see... shall we take another question, or shall we talk more about interviews?
Atwood: No no no, absolutely more questions.? This is what this show is about.
Spolsky: Alright, here's a question from Adam:
Adam Haile: Hi Jeff and Joel my name is Adam Haile, I'm a long time C, C++ and .NET developer and I have a pure programming question for the two of you regarding a C++ technique that I never quite found a corollary to in .NET.? I often in lieu of having to create some large complex switch statement that I'll have to maintain to call differing functions depending upon the function that I desire, I will simply create multiple functions with the same prototype and then create and array of pointers to those functions which I can then simply index later cutting code down for you know hundreds of lines of switch statement to a simple for loop or something of the like, but as .NET does not have pointers I've not been able to find a way to do basically the same thing in .NET.? I'm sure there is a way to do it but I just haven't found it.? If you guys know that'd be great.
Spolsky: Ah, this is such an easy question.? This is like 59 seconds asking, the answer is going to take one second.? Do you want to ?
Atwood: No you go ahead.
Spolsky: Delegates.? It's called delegates.? That's it.? The end.? They're function pointers.? The end.? Next question. [giggle]? A really easy one.
Atwood: Well also... aren't... Isn't sort of kind of what lambdas are as well?? Kind of passing a function as an argument?
Spolsky: Uh... You could do it... Well okay, there is a thing called delegates that's really the first class native .NET way of doing it.? A delegate is just a pointer to a method member function in a class.? There was a cheesy way which was more common in object oriented programming, especially in Java, I don't know if Java has delegates 'cause I'm so out of it, but there is this concept called a functor, where what you do is create a class that only has one method called "Do"... "It"... or whatever, and all you got to do is instantiate this class object?and you put those in array, and now you gotten the same effect as function pointers except what you actually have is an object and the only thing this object has of any interest whatsoever is a single method that always has the same name that you can then call, and if all the functor classes that you create all inherit from the same abstract virtual base class, then you will be able to do that in any object oriented programming language.
Now, a lambda is kind of a way to inline a function, especially a very short function.? So instead of actually having like an array of functions where you define all the functions, and then you create an array and?you?refer them all by?name, a lambda allows you to have those functions be anonymous, never have a name because?you actually inlined the actual code for the function right where you're using it or putting it in an array, or whatever it is you're doing.? And lambdas, to be honest, are really more useful with very very very short, like one- two-liners and can be a big uh... Well, I mean, it certainly doesn't make your code clean or easy to follow if they were long.? So, if you gonna have, you know an array of a hundred things, and you're just gonna put those in lambdas, you might as well make a switch statement, 'cause the code is gonna have the exact same structure as a switch statement.
Atwood: Well, there's also anonymous functions in C#, I believe 3.0, so there's that as well.? I think there are several techniques, so maybe I will try to create links to both for Adam.
Spolsky: Yeah, delegates are really the traditional original way of doing this specific thing.? That would be the real classic old school... Boy; I remember when I never used to understand function pointers at all, until my friend Jason.? We had to make a DOS application, literally a DOS application and we wanted to have a menu, and I don't know if you remember menus in those days but they weren't pull down menus.? It was like the screen would come up and it would have 1, 2, 3, 4, 5, 6, 7, 8 things you could do, and you would press number 4 and it would do the fourth one.? And, I remember just setting up to make, what the heck did they call switch statements?? What where we using?? I'm guess it was Turbo Pascal.? And I remember - no it was Turbo C, it was actually Turbo C - and I remember getting ready to make the switch statement.? It's like "no, no that's not how you do it."? And he would just sort of declare the eight functions there and then made an array of eight function pointers to the eight things.? And then the menu executing code was just a simple matter of just indexing into that array and calling whatever function one found there.? And once you had this array you could hang other things on it besides the function pointer like the menu text or the help text that is associated with the menu text or whatever stuff you wanted.
Atwood: Right. To me it's about sometimes you want to pass in a function as a parameter.? You don't really know what you want to do.? So you want to pass in the actual function or method itself that you want to be able to do.? So, that to me is-
Spolsky: This is incidentally one of the things that strikes me as sort of strange about Ruby, and one reason I like Python a little bit better is that Ruby inherits from Smalltalk in that it has the idea of a block.? And a block is a function that you are passing in, to another function as if it were an argument.? You know it's a block of text - I'm sorry a block of code - that you are passing in as if it were an argument, in your call.? And then inside the function that you call passing in the block, anytime that code executes the "yield" statement, it calls the function that was passed in, which comes straight from Smalltalk.? And I always thought it was strange that it had this special method for making one argument be a lambda effectively, or an anonymous function or a block.? It just seemed, sort of a little bit, like a little bit of a wart on a language.? Why can't you have an arbitrary number of functions be lambdas?? Why is there only one?? Why are you limited to exactly one?? It's sort of one of those things that I never quite... sort of strange about Ruby.
Now, in practice very very rarely do you ever need more than one, in fact possibly never, [laughs] so it's not that big of a deal.
Atwood:?I think that was a good question.? We could do maybe one other very very short question, if we have one that's easy and short.? I don't know if we do.
[59:24]

Matías A. Bellone:? Hello Joel and Jeff my name is Matías and I am from Cordoba, Argentina and I have a question for you.? I am a computer science student and as I cannot apply for Joel’s internships I have been working for a Voice Over IP company overseas.? Outsourcing is quite popular and common now-a-days and with its advantages and disadvantages has been putting food on my table for the past two years.? What is your opinion and experiences on the matter?? Thanks for your time and congratulations on StackOverflow.
Spolsky:? Ahh see that’s a short question right?? There's nothing to talk about here. 
Atwood:? Yes.? Nice pick of a short question.? That’s great. 
Spolsky:? [grunts acknowledgment]
Atwood: Ahh.. I’m sure you don’t do any outsourcing, right or... I mean you don’t outsource anything at… programming-wise I mean since that’s your core competency of your business you wouldn’t outsource your core competency would you?
Spolsky: We really try not to.
Atwood: Yeah.? So to me outsourcing is about recognizing that programming is not your core competency, software development isn’t.? So it’s going to be more cost effective for you to have professionals do it somewhere else… 
Spolsky:? [grunts agreement]
Atwood: uhh... and I think my personal perspective is, and I’m sure it’s one you agree, is I wouldn’t want to work for a company that was doing that anyway because what I love to do is not really considered a part of their core business sort-of by definition at that point. Now maybe if you were working for a company that did this... in other words you were outsourcing and you’re the professional that small companies would turn to when they need, you know, programming work done, I think that’s fine.? But working for a company that’s doing that is just really kind of depressing 'cause it means what you love to do they don’t consider really that valuable anymore…
Spolsky:? Wait so let’s, wait, wait, I’m confused here about all these different companies.? So you’ve got the company - let’s give them names.? We’ve got some hypothetical company I’ll call it Disney…
Atwood: No No: ACME.
Spolsky: No No. Okay.? ACME.? They make widgets.
Atwood: Yes.
Spolsky: And they have needs for IT Development of some sort.
Atwood: Right.
Spolsky: But if you’re going to be an IT developer at ACME you’re not treated very well; you’re a typist.? Nobody understands what it is that you do or why it is that you’re good and for various reasons they hire all kinds of idiots to work with you in the same department because they just have no idea what a good programmer is and you’re never going to work your way up to CEO and you’re never going to be at those all important executive retreats where the important decisions about whether to play golf in the morning or the afternoon are made and... because you’re just not important to their core business which is making widgets.? And dynamite, I think.
Atwood: Right. [chuckles]? Explosive widgets.
Spolsky: So, all else being equal it might even be better if ACME just outsources all their work to, let’s call it "Coders-R-Us" where there’s a gang of cool programmers and they’re real careful about hiring the great programmers ‘cause that’s what they do all day long.? And they just sort of move around from ACME to Zenith visiting different companies and solving their code problems and then moving on to the next one.
Atwood: Right.. and ideally you’d quit working at ACME and start working at Code-R-Us and become a small business person, right?? And probably make more money anyway. [laughs]
Spolsky:? Oh yeah.? The way these things often get started is that somebody is making whatever the maximum possible salary that can be paid to an individual is at a given company and that is less than the market rate for a good programmer.? So for example you know with a certain level of experience.? I remember at some point I was working at Viacom and for complicated reasons there was no possible way they could ever pay me more that the equivalent of about… let me see what I can remember... this was about ten years ago… it was about forty dollars an hour - and the market rate for programmers in my area was closer eighty dollars an hour - and so for them to pay me anything like the market rate, they pretty much had to hire me as a contractor instead of as an employee.? Which meant that I was Joel Spolsky incorporated, or whatever the case may be.? Joel Spolsky sole proprietor and I pretended to have a "consulting business" and I just sold my time to them at the higher rate and they were able to do that and it just sounds like a legal fiction but that’s the way these big companies are.? And these are actually how a lot of these companies get started and you know you sort of bring in a friend and you bring in another friend and you start taking a couple of extra gigs on, and if you’re lucky pretty soon you have a bunch of clients. 
Atwood: Right.? I think my general advice here is life is really too short to do things that you don’t enjoy doing, I mean, you spend eight hours a day at work - why not do things that you love with people that appreciate the things that you do?? So that’s sort of the perspective from which I view the off-shoring and outsourcing thing.? I mean you can be on the receiving end of it and it could be a net-positive, or you could end up on the short end of the stick in which case it’s not so good.
Spolsky: Now but then... I do want to follow this to its logical extreme and so let’s say that you’re working as an individual consultant and then you bring on a couple other people and pretty soon you’ve got a team of your 20 guys. Guys and girls.? Your 20 professional, technical, developer type people and you’ve got some sales people and you’ve got a whole bunch of clients lined up and you’re doing all these gigs for these clients and then all of a sudden what you’re going to start to notice is that you’re charging by the hour and you're paying people by the hour and therefore the total maximum amount of profit that you can make in this business is just a function of how many people you can hire, in other words with 20 employees then you can imagine making two million dollars a year in profit (although that’s kind of pushing it, but that’s like based on sort of New York rates) and in order to have four million dollars you have to get up to forty employees and now all of a sudden it’s just a game to see how many employees you can get and at some point you start kind of reducing the quality of the employees a little bit and it just becomes this gigantic recruiting exercise where whoever can recruit the best makes the most profit and in fact I hate to say this but Fog Creek actually started out with this as our initial goal.? As the first thing we were going to do as a part of boot-strapping was to create this consulting firm and one of the reasons that we have such great conditions for programmers is that we thought that would allow us to win that recruiting war and be able to recruit the most people and treat them the best have them stay with us the longest and therefore be the most profitable in that kind of "body-shop" business or that consulting business where you’re basically just providing people with some where you’re providing your customers with a human being with brains for a fixed number of hours.? 
But compare that momentarily now, to the software business.? Because in the software business, as soon as you've written some code, you can license it or sell it again and again and again and again and again, without writing it again and again and again.? Which is very different from a typical IT consulting kind of arrangement.? That means (among other things) that you can make a lot more profit, because the profit is no longer constrained by the number of employees you can hire, it's just based on how many sales you can make, which is a function of how good your code is.? So if you write good code, you probably want to start getting into basically the licensed or hosted software business, where there's some kind of scale, there's this scaling that you can do that doesn't require you to bring on more warm bodies.? And that's really the long-term goal.? 
In the early days of Fog Creek when I was trying to evangelize this idea to people, I would always draw two charts.? One was showing a line going up linearly and saying "Your profits are a function of the number of people and that's the consulting business, but we also want to build a software business," and a software business you sort of superimpose a hockey stick on that line, so it takes a while to start up, but when it does, it goes up a lot faster than the number of people and pretty soon the core of the business is in selling software licenses or in hosting software that you provide for other people.? And it scales a lot better and you can make a lot more money, faster.
Atwood: Right.
[1:07:08]
Spolsky: And one thing, which really surprises me, and this is the only way I’m gonna touch on the offshoring question of people in Argentina and Eastern Europe and India, that are doing this kind of offshoring.? Is they are all looking at Hyderabad and Bangalore as their model.? Which is they wanna be, they wanna do the drudge work for cheap for American companies that don’t wanna this stuff instead of looking at Israel as their model.? And the Israeli model is not offshoring, or outsourcing or taking the drudge  work, or taking the programming work and just dumping it in some country where the wages are lower.? The Israeli model is: "we're gonna make some companies and these companies are gonna do highly innovative things and they gonna sell software, and they're gonna make big profits," instead of just providing kinda warm bodies that are neatly bundled for you to use in packs of ten with a program manager and two testers.? So one thing that’s always a little depressing to me about much of the offshoring world is that they're just not ambitious enough, you know they’re not ambitious enough to make real software companies and to make product companies.? They are still, they are still trying to do this kind of low wage programming kinda thing.? Which to me is, you know, a quick way to make a buck and to get started, but in the long run you really wanna be selling something where what you’re selling is intellectual property, because it can be sold again and again and again and eventually becomes much much more profitable.
Atwood: Right. And I think that falls under the umbrella of “just try to be good at your job”.? I mean everyone that I’ve ever worked with that’s really the only thing that I really ask of them, or I really ask of the company that I’m working for.? Just be really good at what you’re doing, or try to be really good.? And you’re right, if you set the bars like all what we’re gonna do – basic drudge work, it’s like… Again you probably wouldn’t wanna work for a company like that.? Would you, really?? So, you’re right, they are not aiming high enough, they should be trying to do…
Spolsky: Yeah.
Atwood: …you know, boutique development at very least, right?? If your model’s by the hour, then do really good development by the hour, that you’re really proud of.? And that’s the kind of company that I would, I think, attract developers that I would wanna work with personally.? So.
[1:09:11]
Spolsky: Right.
Atwood: So.? We should probably cut it off here, cause we are a little long.
Spolsky: Okay.? Well, I've got some deleting to do.? In the meantime, let's see.? Do we have any announcements for this week?? We had a great - by the way, we had an open house here at Fog Creek last week.? 
Atwood: How did that go?
Spolsky: It was pretty good.? It was mostly your people that came.
Atwood: Are you serious?
Spolsky: Na, I'm just kidding.? I was surprised, actually, at how many people came and heard about it from the podcast, as opposed to the web site.? And, a lot them of actually in turn had never heard of me before they went to Coding Horror, and you started making this podcast-type thing with this other character.? And that's how they found... about...
Atwood: Well, I want to renegotiate our contract now.
Spolsky: Well, not everybody, also I had to tie down the Tumblr team.? The whole Tumblr team came out.? So, I had to calm them down.
Atwood: Did you wag your finger at them?? I want finger wagging.
Spolsky: [laughing] There was finger wagging.? And actually, that was a lot of fun: the Fog Creek open house.? We'll probably have another one as soon as we move into the new office.? I'm thinking 2014 right now.
Atwood: Is the schedule really off?
Spolsky: No, there's just no way to know.? I just can't tell.? And you know what, they know and?they won't tell me. [laughter]
Atwood: You can't get them to use FogBugz.? It's just like me,?they won't use FogBugz.? That's the problem, isn't it?
Spolsky: Yeah.? Well what it is, is that, you know, I can see that they're making progress every week, but it's really hard for me to tell what's not done here.? Sometimes, I'll go back two weeks in a row, and it doesn't look like anything's happened.? Sometimes, it'll look like a lot of stuff has happened.? There is a lot of activity going on there, and one thing, which I'm relieved about, is when you're doing construction there is all this stuff that can delay you which is usually caused by long lead time items, like you ordered a very special light fixture and it's going to take twelve weeks to get, but the nice thing about those long lead time items is once they arrive you just snap them in place, it takes no time at all to install them, and?a lot of times this can be done after you've moved in.? The stuff that takes a lot of time is putting up all the walls, and the electrician doing all the wiring, and?the ceiling grid, and ventilation and stuff, and that stuff has no lead time at all because it's just common building materials that are readily available so that never really slows you down, and the long lead time items never really slow you down because that stuff eventually arrives and they just throw it all in in one or two days.? So, I'm not entirely, completely, really worried about it -?yet.? So anyway, there will be another Fog Creek open-house, you will be able check out our nice new office downtown.? In the meantime, as usual, there is an online wiki, where our listeners provide transcripts of this program, and you can find the links there from blog.stackoverflow.com, or you could just go to stackoverflow.fogbugz.com and look for the wikis.
Atwood: And, I had a thought.? People who have sent in questions about StackOverflow that we haven't gotten into, or haven't gotten to play: please e-mail me.? And, again, you know how to figure out my e-mail address.? I will add you to the beta.? E-mail me (Jeff) directly, and I will definitely add you to the beta as a way of compensating you for a question that we didn't get to.? And, I think honestly you will have better questions once you have actually seen the site anyway.? So, I view your question recording as your pass to get into the beta.? And, additionally people who edit, let's say two minutes on the wiki, e-mail me and I'll hook you up for the StackOverflow beta, as well.
Spolsky: Right, so that's the easiest way to get into the beta and see it before everybody else.? Also, if you want to... we do welcome your questions, we did a whole show of questions today, but we'll always try to play at least one to three questions, so do keep sending them in.? To send in a question you can record an mp3 or Ogg Vorbis sound file and e-mail it to podcast@stackoverflow.com.? If you don't have a way of recording it handily with your computer, go to cinch.blogtalkradio.com, there's a link on the website, and there's a phone number you can call which will record an mp3 for you, which you can then send us.? That's it, see you next week.
Atwood: Bye.
[1:13:48]
music, outro.
[Incomplete]
Advertising, intro
[01:01]
Atwood: So I think we should start by you apologizing to all our listeners for last week.
Spolsky: Ummm.....
Atwood: You've forgotten completely already, haven't you?
Spolsky: What did I do last week?
Atwood: Well you opened with like a spoiler - like you started the show with a spoiler. 
Spolsky: [whining] It wasn't a spoiler.
Atwood: From WALL-E. It was kind of a spoiler.? There were some complaints and I think it was justified.
Spolsky: But...but...but...but...but...but if you knew the thing I said about that show that wouldn't really ruin your enjoyment.? It wasn't like it was some big twist in the plot or something.
Atwood: Uh, a little... it was a little bit.
Spolsky: Alright, alright.
Atwood: I think you should end the show with a spoiler, not start it.? That's really the flaw here it's to open with that just gets off on the wrong foot.
Spolsky: You know what I am going to do, I'm just going to spoil the hell out of Dark Knight right now. 
Atwood: Oh.
Spolsky: Because I'm mad at that movie.
Atwood: You didn't like Dark Knight?
Spolsky: I did not, especially considering how much I liked Batman Begins. 
Atwood:? Really, you didn't like, wow, now we have the opposite.? I didn't like WALL-E, you did.
Spolsky: Yeah.
Atwood:? I liked Dark Knight.? It's not my favorite.? It's not the number one movie of all time, per IMDB.
Spolsky: Right, right.?
Atwood:? But it was, I think, very solid.? What didn't you like about it?
Spolsky: There was too much stuff going on, there were too many different scenes, too many sets and like a million subplots and plots and sometimes three of them were going on at once it was just like stuffed... overstuffed....
Atwood:? It was a very, very long movie.? It was almost like two movies in one because they brought out the other villain.? I'm not going to say who it was because I don't want to get in trouble like you.? But it's like, "wow, they are going to have another villain," all of a sudden, it's like two hours in, it's like how many hours of movie are left?
Spolsky: It was really... exactly... yeah...
Atwood: It was a very, very long, but I thought good, you know, but definitely too long.? I think that's a completely legitimate complaint.? A lot of movies that I walk out of with no substantive complaints, the one complaint I can almost always make is that they were too long.? Either a little bit or a lot, right?? And this is the thing with like blog posts, e-mails, anything you do: no one is really ever going to complain that was too short.? Even a presentation it was like "it was too short, it should have been much much longer."? Nobody ever says this.
Spolsky: There's the old joke:
"The food was awful"
"Yeah, and such small portions"
Atwood: [Chuckles] That's right, so maybe that's a lesson to take away from this is: when in doubt, err on the side of making small [Inaudible]
Spolsky: Ok, well I'm really, really sorry if I spoiled Wall-e for y'all.
Atwood: Yeah.? There were a few people that were, kinda upset about it so, I just wanted to mention it.?
Spolsky: I don't feel like it's that kind of movie, I really, it's the kind of movie you can go see twice or three times and not lose anything, I don't feel like there was a bit twistiness to it.
Atwood: Yeah, yeah that's fair. So the big news this week on StackOverflow is design.
Spolsky: Yeah we have a homepage.
Atwood: So, I wanna, yeah we have a design that doesn't actually suck now, not like programmer, design, it's actually designer design, which is a big difference.
Spolsky: Who who who who. . What?? Where's the where, Who's this designer?
Atwood: So the person that I got his name is Jeremy Kratz, and he'd actually emailed me on something unrelated, some something related to Coding Horror, and I went to his site and I was actually very impressed, I was like "wow this actually looks good", ya know?
Spolsky: [grunts agreement]
Atwood: and he had done a neat little site, it was a system builder recommendation site where, if you wanna build hardware, it would get the current bestsellers off newegg, and synthesize, yeah it was a really cool site, I thought he had a good idea, and he implemented it well, and it looked good and it felt, ya know kinda cool to use, and I was like "wow this is the kind of person that I might wanna have us help with StackOverflow" and he did offer to help, I am paying him to be fair but the usual slave wages that I pay, 'cause everything is, sort of self funded at the moment, and he's also gonna get site credited he'll be the official designer on the site, so he'll be listed next to us with a picture and stuff, so he'll be part of the "team" at that point.? But yeah I'm very pleased with what we have, not that it can't be improved of course.
Spolsky: [agreeingly] no
Atwood: and I did.
Spolsky: it looks really good actually, yeah.
Atwood: yeah I posted it on the blog, and got mostly good feedback and just so you guys know, so feedback is a weird thing, particularly feedback on "design-y issues", you tend to get a lot of noise, more noise that usual 'cause, you know enter into the realm of preference, at some level with design right? I mean there's certainly things you can pull out of it, but I did pull some things out of it from the comments like, I reduced the number of colours on the page, I started to agree with people that there was just too much colour on the page, it's a little bit more monochrome, and I agree too it's a little Digg like, which, and I don't wanna sound like one of those people who's like "I don't even watch television", but I really don't go to Digg very often, like at all, so I don't have on the tip of my brain what that looks like, so we are aware of that.? The front page is actually gonna be recent stuff not top, so what's on there is a little bit divergent from what we actually have, it's in the ballpark -
Spolsky: Wait, is there a difference between recent stuff and top?? The front page is going to be the hot stuff.? It's going to be both recent and highly rated.
Atwood: Well no, we might have a tab that takes you to "hot stuff."? This is such a weird turn of phrase. [laughs]? But for now it's going to be things that happened recently.? So if you post a new question or new answer, it'll show up on the home page as, you know, as recent activity.? Because one of the focuses of the site is answering things.? So we want people to see things that are currently active, that just came out, and actually have a way to answer those really quickly.? That's one of the focuses of the site.? But we could definitely have a tab for hot or you know highly ranked things.
Spolsky: You could show both, you could show like three of four things that need an answer, and a bunch of things that are hot right now.
Atwood: Yeah, sure, sure yeah the homepage is pretty fluid at the moment, I mean it's one of the things that's going to change probably the most as we go through the beta.? But I was very pleased to have that.? And I want to also mention some other people that helped me with the design.? Tim Almond was very nice in helping me get through some CSS issues with the old bad layout and I really appreciated that, he went through I think two iterations with me on email which was very nice.? Also Rob Allen again tried to pitch in with some CSS.? And I'm also taking with another designer Nathan Bowers who I may bring in later on just top navigation issues and some other and just get a second opinion on some stuff that I'm not sure we have right yet.? But I want to give a lot of these people beta accounts because its so hard to design without actually experiencing the site.? Static screen shots - that's the other problem with comments on a static screen shot, is people aren't seeing the rest of the site and I'm not explaining it adequately so they're not able to give the right kind of feedback sometimes.? So as we get into the beta I'm gonna start taking the feedback a lot more seriously, obviously, because people will be using the site and will say "based on my usage of the site you should do X or Y", those are usually pretty good reasons to do things.? But it feels really good to have a site that looks kinda nice and modern. 
[8:09]
Spolsky: Yup.
Atwood: And it's fully integrated now, I think it took like three or four days to get everything integrated.
Spolsky: Cool, it stopped me when I tried to logon again, but that's okay.
Atwood: Oh you lost your cookie?
Spolsky: Yeah, no no, I mean, when I logged on I didn't have any questions, did you reset the database?
Atwood: It's not syncing to your account, oh we reset the database all the time.
Spolsky: Ok, that's why.
Atwood: During development, yeah, we reset the database quite a bit. ?So one thing we can talk about, and I got some feedback on the podcast that people want a bit more technical issues to dig into.? And one we can definitely dig into that cuts to the heart of how our site works is identity.? So one thing that is different for us, compared to a lot of other sites is, we will never make you log in and create an account to do things.? That's one of the things we sort of took out of Wikipedia was that we wanted to make it sort of egalitarian. ?Another sort of subtle difference is, on every page when you're viewing say a question page, there's a box at the bottom inviting you to participate.? You don't have to click through to another page or do some other thing.? There's just a text input box, well actually it's a Markdown input box, a WYSIWYG kinda thing.
Spolsky: Hmm, mmm
Atwood: Or WYSIWYM, what you see is what you mark up [laughs], and it's inviting you to participate-
Spolsky: By answering a question.
Atwood: By answering a question, that's right, that is the unit of work on our site, asking and answering questions. ?And to do this, and I think this is one of the things, Marco when he criticized the site, didn't get, and it's probably my fault for not explaining it.? You can log in one of two ways, either with an OpenID, right, so you have an existing set of credentials on OpenID which protects your password and so forth, and your identity. ?Or, there's your traditional, like in traditional blog comments, Name, Email, Homepage, ok?? So, you can just type in whatever you want there and post an answer. ?Ah, and, you haven't created an account.? And one thing we do that's kinda cool at that point, is, even though you haven't created an account, we will have a record in the database for you so we'll track your reputation score, you can earn badges, you can participate pretty fully on the site.? I think we might put a cap on reputation as a non-authenticated user, in other words you have not associated an OpenID with your account yet.
Spolsky: Are you?
Atwood: So anyone could really steal your identity at that point.
Spolsky: Even, I mean, it's not even protected with a cookie?
Atwood: Well it is protected with a cookie, what I mean by that is, anyone could type in Joel Spolsky, right? ?That doesn't mean they're Joel Spolsky.
Spolsky: Yeah, but then you...
Atwood: Yeah, but once you attach an OpenID there's sort of an additional layer of security around that. ?And, as you pointed out - and this is the technical discussion I wanted to get to is - it's pretty much all centered around cookies at that point, because what other way do we have to track what people are doing?
Spolsky: Right.
Atwood: It's pretty much all cookies. ?For example, you managed to clear your cookies. Um, there's no effective way for me to get your identity back.? Say you have reputation and badges, you could probably email me and I could somehow give you the cookie.
Spolsky: Don't even suggest this, because they will. [laughs]
Atwood: Yeah that's true I guess. ?But the site is gonna kinda warn you.? We have sort of a nav-bar at the top, that'll pop up that'll say "hey stuff happened", um, and one of those things it'll remind you of is if you start to get reputation and badges of a certain amount and you have not associated an OpenID with your account, we'll remind you that, "hey look, until you associate an OpenID, we have no way, you could potentially lose all this stuff you've earned on the site, if you don't associate an OpenID with your account."? So that's the only nagginess there will be and it's only once you get enough reputation.? 'Cause certainly there's going to be a lot of users that just drive by, maybe give one response ever, 
Spolsky: [grunts agreement]
Atwood: And eventually those people will be cleaned out of the database.? We do have a way to de-normalise and attach just name, email and homepage to the records.? Then of course users who never post an answer or a question, don't actually... nothing is created in the database for those users.? That's one of the architectural changes we're making.? Initially we were creating a record for every user that came to the site. ?Then I got really nervous about that, because I thought about 'bots and I thought about all the other people who come to our site anonymously maybe one time and never come back.
Spolsky: It's also a big hit on the database.
Atwood: Yeah, huge hit on the database.
Spolsky: Yup.
Atwood: So that's what Jarrod's working on actually at the moment.? And I think that's actually the only blocking element on the beta at the moment, is getting the anonymous stuff working.
Spolsky: You may wanna ultimately set it up so that many of the things on the home page are cached as static files that the web server can serve quickly without going to the database.
Spolsky: Yeah.
Atwood: So, that's what we're also going to do during the beta, is figure out where we can cache, and how we can cache and all those sort of things.? But, the place I got this advice on the smooth ramp to accounts - where there's like no forced login - we put off forced login as long as humanly possible.? Is?Jan Miksovsky - he used to work at Microsoft - he has a blog called "Flowstate", I'll have to link it.? And he had a great post on this that I really believed in, he really convinced me this was the right thing to do, was to let people do stuff on your site, and have this tenuous relationship early on where they don't have like a login, they just type in just a few tiny little things and remember their preferences, and remember who they are, as long as you can.? And then just sorta roll them over, it's almost like a single or double click affair.? For us it's like "oh 'OpenID', type in your OpenID, do the OpenID auth" and then bam, you're done.? And then you get to, of course, fill out your profile if you want to, but at minimum we'll have your name and email, because those fields are required to do anything on our site.? But I really enjoyed his perspective on that.? And I think a lot of sites get this wrong, they have the "login wall".? You hit the login wall really early.
Spolsky: Well, one of the things, much as I love OpenID - and the only OpenID provider I've tested is MyOpenID (obviously) - but much as I love them, there is one problem there which is: that seems to, that makes the wall higher, because actually signing up for an OpenID, it's a little bit complicated and there are sort of too many steps.
Atwood: Yeah.? I think that's something that's just going to have to get better over time.? I think that the ecosystem around OpenID is just going to have to improve.
Spolsky: It's never going to get as good as if you just, if we had our own native accounts, and you gave somebody that had all this collected, basically they have the cookie, and they've provided a name and email address, and a web site, and they've started to earn reputation and you could give them a button that just said "Wanna to make an Account? Just give me a password".? And that's it, you know, even better: "e-mail me a password": a button that you push and it e-mails you a password.? And you can go in there and you can change it, or.
Atwood: Right.
Spolsky: And, um, that's always going to be less friction than creating an OpenID account somewhere.? And so we may have a problem for people who don't want to convert because of the OpenID barrier being higher.? They don't want to convert to being logged in [garbled] real members.
Atwood: Right.? Well, hopefully that's the kind of stuff we'll get out of the private beta, is that there's a lot of pain around OpenID, like people being confused, they can't create accounts, a lot of push-back, then we'll see.? I mean I certainly leave that open.? But that is, to me, one of the attractions of OpenID (both from the user's perspective and from the coder's perspective): if you can amortize this cost of the OpenID across 10 sites or 20 sites, or however many sites use it, it's really not that bad.? But you're right; if the only thing you ever do for OpenID is StackOverflow then sure, it's a bummer.? It's just another stupid thing you have to do, but it's the amortization of that across 10-20 sites that makes it worthwhile.? Then from a coding perspective it's great, because we don't have to store passwords.? If you can get out of the business of storing passwords, everyone's life is so much better, right?? And you get choice right?? There's a third party there.? But part of the complexity is: there is a third party.? In a traditional site, there's only two parties--you and the site.? The site gives you a password, and you--you know.? Granted, there's a third entity here so there's going to be a tiny bit more complexity.? But it's the kind of thing I want us to grow towards as well.? I think it's ultimately a better medium- to long-term solution for the world, so I want to push it a little, but not to the point that there's a lot of complaints and a lot of push back.? And, of course, I'll consider having the traditional password stored locally as well, so we'll see.? It's not written in stone by any means at this point.? That is one of the things that Marco did not get unfortunately, that there are two ways to log in, so if you say, "Hey, you know what?? I don't ever want to create an account," you're fine.? Just don't expect to get a huge reputation number, and you'll be fine. And that's how your old discussion site worked right?? Well you can create accounts on your old site, right?
Spolsky: For the longest time, you couldn't create accounts, it was just all based on whatever name you typed in.? There was no way to own your identity.? As soon as we switched over to FogBugz 6, that gave you the ability to make an account and basically claim an identity.? Then you got a little orange checky-box next to your name that said, "this is a known person" as opposed to an anonymous person.
Atwood: Yeah, I have that data.? And another thing people were concerned about--and I think you were right to bring this up earlier--was that if people see our site has tons and tons of .NET content, they're going to assume it's a .NET site.? So I do think that's a risk, because I got that feedback just off the design that I posted.
Spolsky: They already think that we're just .NET people.
Atwood: [Chuckles] But I think that there's actually a number of programmers that will be drawn in that aren't .NET.
Spolsky: Yeah.
Atwood: So in practice, I don't think that's actually true even thought that may be the perception.? I think there's a lot of other programmers from other backgrounds that are going to hopefully participate in StackOverflow. ?It's meant to be non-denominational. ?Are we going to start out then with just the content from the beta?? Is the outcome of the beta then to generate "seed data"?
Spolsky: Uh, makes sense to me.? You know what, I was talking to some people about this at lunch today, and I talked about, when I opened up that site, the .NET Questions site a long time ago, it was the same day that I opened I think four other sites if I'm not mistaken, I mean I think there were just a whole bunch of... I had Java, no Python Questions. I had .NET Questions and Python Questions.? No, it wasn't Python, I take it back.? What's that object Pascal thing that Borland does?? Delphi, that's right.? We had .NET questions and Delphi Questions.? Nobody came to Delphi Questions, but .NET Questions filled up, like, right away; people started asking questions, and I don't think it was that many people--I think it was probably on the order of hundreds of people that were visiting it--but it was enough, it was a critical mass to make it a place where you could ask questions and get answers.? So, I'm pretty convinced that, if you just open up the beta with, you know, even 50 or a hundred people initially, from that list that you have, and then you let more people in as it proves itself to be more stable, we'll get questions and they'll get answered, and it'll be good.
Atwood: No, I've been working on this thing, banging on it, long enough that I actually want to expose it to the world a little, you know.? The whole point of the exercise of writing software is so that people will ultimately use it.? And we discussed this, but not in a podcast: one of the saddest things that happens to a programmer is when you end up writing code that very very few people ultimately use.
Spolsky: Yes.
Atwood: That bothers me.? It's like, you know, being an architect building a house, that nobody really ultimately lives in, is (I think) really depressing as a programmer.
Spolsky: I think architects probably design about twice as many buildings as actually get built, so [laughing] they're real used to that.
Atwood: Right, but it's very rewarding.? Like, to me, the whole end state of programming was hearing users use your program and actually have some useful outcome from it, right?
Spolsky: [grunts agreement] For sure.
Atwood: Like, if you write a program, and nobody ultimately uses it, what did you really accomplish.? I mean what change in the world as a result of that action?? Um, so that's one reason I kind of like the, sort of the new Web economy, where people (software developers) can put code on the Web, and even if it gets a small audience, it's guaranteed to be a much larger audience than you would get at, say, some internal IT job somewhere, right?? Because the user base is the world, right?? So even if you have this incredibly niche focused little app, you are going to have so many more users use it and be affected by it in some way than you would in the old-world ecosystem of, you know, distributing floppy disks like America Online or, you know, however we used to do things before the Internet.? It's like the Stone Ages.? It's hard to even imagine how that was.? I mean, shipping software to a store?? No, that's very very old school.
[21:55]
Spolsky: You know, I have this memory that I keep going back to which is, when I was in college, I had to build an application that somebody wanted to sell.? And I was going to develop it as a contractor for them when I was in school to pay for my tuition.? And it was a DOS application, but we wanted to find a sort of a simple character-oriented windowing library that we could use under DOS to create simple pull-down menus and pop-up dialog boxes and that kind of stuff, because, obviously, DOS doesn't have all that stuff, it was just character mode.? But there were a lot of companies that made these libraries that provided some kind of windowing system for DOS or some kind of a... you know, basically a... sort of like curses, for those of you that are familiar with UNIX.? And, anyway the point of this story is that, I evaluated about ten of these different libraries.? And I remember, at the time thinking... you know, for a long time, my memory of how I evaluated these libraries was: "you know, I downloaded this sample code off the Internet and tried it out, and then picked the one I liked best, and sent in my credit-card number."? But, after I had this memory a few times, it occurred to me that the Internet didn't have the Web yet; the World Wide Web did not exist at the time that I went to college [laughing].
Atwood: [Laughs] You actually changed your memory, that's...
Spolsky: Yeah, and in retrospect, I was having a lot of trouble thinking, "how the heck did I find these ten libraries without the Internet?? How did I even know what the options were to write to these companies, which I must have?"? And I do now have a vague memory that they sent me floppy disks in the mail when I asked them for a demo disk; they all sent me floppy disks to try it out, and I tried them all out.? And I'm pretty sure I just went to the library and looked at, like, programmer magazines in the back--and looked at the ads in the programmer magazines in the back.? But it's weird that I can't even remember how I... I can't even remember what life was like without being able to look up things on the Internet, or to research things on the Internet.? So much so, that I'm actually having these false memories of having researched things on the Internet that I obviously didn't.
Atwood: [Chuckles] Well, that's right.? And, you know it wasn't that long ago, right?? I remember the first time I had... do you remember the first time you used Google?? There's a moment for you.
Spolsky: Uh, yes.
Atwood: The first time?on Google.? When was that roughly?
Spolsky: Larry Page gave a little talk (tech talk) at Stanford University, And those tech talks were actually broadcast--the video of those tech talks was broadcast on the Internet, which is surprising--but that was probably 1999 or something.? And..
Atwood: Oh wow.
Spolsky: And the URL was at stanford.edu; it was like...
Atwood: Oh yeah, that was the whole Backrub era.
Spolsky: ... google.stanford.edu. I think they called it Google already. And they were actually, in the little tech talk, they actually had two algorithms that they were talking about.? The one was PageRank, and that was obviously what worked.? But they had another algorithm that had to do with finding pages that appeared to be similar and assuming that if, you know, three--ten, pages are all the same except for these things, that this might be a database, and each one of those pages might be generated from a database, and there might be some kind of relationship between those pages that are all the same except for this one thing.? So, that was a slightly a less useful result that they had.? And I think, um, it wasn't that long thereafter that I linked to it on my blog, so if you can find the earliest mention of Google on Joel on Software, that would prob...
Atwood: So wow, 1999 that's, that's very early.? I think I found it around the year 2000.? And I found it like linked on this, this,?gaming site ShackNews which I've read for a long, long?time.? It's a long time like Quake, back when Quake was really big,?and Doom.? It's a sort of a news page for that game.? But it became very influential in the gamer community.? And?I remember seeing a link to Google and saying "What the heck is Google?"? 'Cause I was using AltaVista, at the time which is, I think, what a lot of people did use.? But AltaVista is starting to really decline.? I think there are two things that happened and people forget this. But AltaVista wasn't really that fast.
Spolsky: [grunts agreement]
Atwood: So to me the first reaction I had from using Google was like "Wow!? This is incredibly fast!"
Spolsky: [grunts agreement]
Atwood: You know?? And that to me was like enough to get me to switch because I could search just, seemingly, instantly.? And then two,?a lack of noise.? So.? In addition to speed AltaVista had started, you know, it got?"portal-itis", right,?where it starts to develop all these cancerous little lumps of, you know, "daily weather",?and "news" and, like... ?They want to make it as a destination where you go there just to?visit their site when all you really care about is the search results.? And clearly Google did not have "portal-litis", and still amazingly, I mean to their credit, you go to the Google home page, I mean, does it really look that different than it did seven years ago?
Spolsky: Nope.
Atwood: That's pretty amazing.
Spolsky: Yeah!
Atwood: To have that level of restraint.? I mean I wish more companies had that?kind of restraint. [chuckles]? Actually..
Spolsky: I was sure that Google was going to eventually change their logo 'cause it's just so ugly [laughs]
Atwood: Yeah, it's kind of an ugly logo.? They changed their favorite icon
Spolsky: Aha?
Atwood: to that weird "g", like it's now a lowercase stylised "g".? Lot of people were like freaking out about this favicon.
Spolsky: Just wait 'till you start,?'till?StackOverflow goes public and you change some dark blue to light blue somewhere, you get like?347 negative comments.? I notice that every time I change like the font on my homepage or something I get huge, huge, huge amounts of?angry email because you only hear from the people that are upset by the new way of things, you don't hear from the people who are happy about the new way of things.
[27:25]
Atwood: Right, yeah I'm, we'll see what happens, I expect things - another reason to have this private beta, we mentioned one of the outcomes is going to have some seed data to get out of the beta and the other reason it's a private beta is to remove all the sucking.? Right?? There's probably mistakes that we've made that we can't see, until a certain number of people come in and start poking us and say "Why are you doing this? Why are you doing this?" and we'll see that we've made mistakes so hopefully we'll be able to iron those mistakes out before we throw it over the wall, but you're right beyond that, I mean, I don't know how fluid the site's gonna be over time.? I mean I don't know how, are we going to have it push every week?? Every day?? I don't know, but?certainly hopefully we can get?a lot of the changes ironed out in the beta so we're not constantly changing the site.
Spolsky: Ah but that's ok.? A lesson to learn is just ignore feedback that you get on graphic design after the first, you know once people have got used to a particular design you pretty much have to ignore what they say.? You know if they say something useful they say this is not as good because I used to be able to do such and such and now I can't do such and such, I used to be able to read this and now it's too small or this doesn't work on Opera or something, the Nokia Symbian browser, that's fine and then you go fix that but if they're just telling you like "I used to like the old one better," that's what people always say and that's what they always will say.
Atwood: Right.? You know what's really impressive is that the iPhone actually runs our site including the jQuery stuff and the Markdown editor which really impressed me.
Spolsky: Wait I'm going to try it right now on my new Nokia E71.
Atwood: I can not guarantee any other browser, but to me the iPhone is a browser platform.? It's got an awesome browser that's almost like a desktop browser, and that's amazing.? I mean I can't give Apple enough credit for that.? I think that's a huge step forward.? And actually the v2 of the browser that came with the new iPhone, and the new firmware and stuff, is even better and faster.
Spolsky: Ehh wait I'm looking... I'm loading it up in my cellphone.? You know what, it's going to be asking me if there is some kind of logon, isn't it?
Atwood: You know what the logon is.? Don't say it, Mr. Spoiler.
Spolsky: [Laughs] The logon is... WALL-E?? I did something wrong now and I can't get back to where I was.? Okay, I obviously can't do two things at once, trying to type http-slash-slash on?a phone.
Atwood: You'll just have to take my word for it, because both of the members of my team, Jared and Jeff, both have iPhones and I don't yet.
Spolsky: Cool.
Atwood: I'm encouraging my wife to get an iPhone, though, 'cause her phone's really bad, so hopefully she'll get one of the newer iPhones.
Spolsky: I gave up and I should not waste this now and blog about it but I just gave up on the iPhone because all the things I thought I was going to use it for turned out to be problematic so, em, like, for example: I didn't think I'd have to wait in line six hours to get one...
Atwood: But you already had one!
Spolsky: No, no, I don't have one.
Atwood: Oh,?you don't have one?? So this will be the first iPhone for you.
Spolsky: Yeah, but I'm not getting one, I got a Nokia E71.? It's much better than an iPhone in every way.? It's got a brilliant keyboard...
Atwood: Well, how could you say that unless you've really used the iPhone?? Surely you...
Spolsky: No, I've used them, my colleagues here have them, I've played with them.
Atwood: Yeah, your colleagues, yeah, sure, you've experienced the iPhone.
Spolsky: Um.
Atwood: Yeah.
Spolsky: I'm basically really happy with all the... with the features and the keyboard... it's the keyboard, because for me it's all about being able to answer e-mail and get it out of my Inbox before I ever, never have to see it again.
Atwood: Right.
Spolsky: Um, so the keyboard is ... is, er, kind of key and it is just amazing how much easier it is to type on this Nokia than it is to type on an iPhone screen, 'cause the keyboard's beautiful.
Atwood: I have seen feedback like that from a number of people [...] whose opinions I respect, like Miguel - the Mono guy ...
Spolsky: Yeah.
Atwood: ... said that he eventually had to go back ... just 'cause, he felt like, efficiency out-rules cute and pretty.
Spolsky: I mean, that's the thing if you're getting an iPhone for... if you're getting a phone for somebody who's not so technical or if you're recommending a phone and they're not really going to be like the power users then an iPhone is definitely very easier to use, but the kind of power-user I am, I've already, I've got this Nokia phone for two days and I've already downloaded two third-party applications to replace the built-in applications.? The first was the built-in map application that Nokia ships with seems to crash a lot, but there's Google Maps and it's much better and it in fact can even use [...] GPS data from more sources than just the GPS, so I just download it Google Maps and believe it or not the Exchange connector that Nokia ships with for connecting to Exchange server is kind of weak and it doesn't allow you to move messages into a different folder, which for me is really critical, so I actually, there's a company called Dataviz and they make a third-party Exchange synchronizer that connects this phone to an Exchange server and it's 30 bucks and, it's brilliant and it does a much better job and it lets me move things to a folder... so that's like, it seems like a power-user feature but it's really really important to me and I'm willing to suffer from some lack of coolness in user interface and a little bit of set-up and configuration pain to get that to work right.
Atwood: Yeah, no I think that's totally fair.? I mean I think that people who have used both... their opinions are totally legitimate.
Spolsky: Yeah.
Atwood: If you've had experience with both and prefer the thing that's on a iPhone, I don't think it's like "hyper fanboyism" at that point it's just ...
Spolsky: Yeah, it's just the power-user phone as opposed to the easy-to-use and elegant and cool phone.
Atwood: But...? I've gotta give Apple credit for going in the right direction with the product, though, because, you know, Apple can be so resistant about, you know, "we don't think that this is the right way to use our product, so you can't use it that way."? They've actually been somewhat open to least, you know, to having the Exchange connector at all.
Spolsky: [grunts encouragement]
Atwood: And, and moving the device forward for business people, and you know getting the 3G in there 'cause Steve Jobs made this whole to-do about how 3G is you know, is gonna drain the battery too fast, we don't want to include that: "It's for your own good that you don't have 3G."? The whole reality distortion field.
Spolsky: Well, I have an interesting question if any of you are in the Apple Developer Program, maybe you can answer this question for me but, the third-party application that I installed here?on this Nokia device is, it does synchronisation with Exchange, so it synchronises with the phone contacts, and it synchronises with the phone e-mail, and the phone calendar.? And, I get the feeling that if you're writing an app for the iPhone, that you are in a sandbox that doesn't have the right to do those things.? Now I maybe wrong here, but I would not be surprised if it was simply not possible to, you know, read and write and edit contacts, as an app, for users' alleged own alleged protection.
[34:05]
Atwood: Right.? Well there is that big to-do that you can't be a background app.? There is no concept of background apps.
Spolsky: Yeah, well that's another thing because I do that all the time.? I mean, I'm literally, like,?waiting for a picture to upload in the background while I'm doing something else in the foreground - ooh - this is a cool thing that I got working this weekend with this Nokia phone, which I really like and I'm pretty sure you could find a way to set this up on the iPhone too.? So it's got a GPS, and it's got a 3 mega-pixel camera and when I take a snap-shot of something, it geo-tags it (automatically), and then I push another button and it uploads it to Flickr, and on Flickr it's all geo-tagged and stuff so now I have?on Flickr, this series of pictures with dates and places, automatically.
Atwood: Cool.? 
Spolsky: I thought that was really cool. 
Atwood: Yeah, that is very very cool.? 
Spolsky: Ah
Atwood: Erm, so, slightly different topic I do want to mention because I haven't had a chance to?follow up my blog?so this is as good a place as any so, I went through all that research?about chairs, like, programming chairs, and I have an Aeron from 1998, so I've had the Aeron for ten years now and although I like the Aeron I'd kinda over time?grown dissatisfied with, sorta?the seating experience.? I mean, for better or worse, as a programmer you spend a lot of time sitting, so, and although Jason Calacanis had a whole set of advice - and I know you disagree vehemently with a lot of his advice but there was one little part of it I want to talk about - it was advice for new startups on how to keep your overhead low and how not to spend a lot of money and just buy the?things that really matter.? And I liked that part of the message but one of his points I really appreciated was that he said "buy folding tables - don't buy fancy desks - buy folding tables and the nicest chairs you can afford."? And I thought, "he really gets it." Like if forgetting all the other advice....
Spolsky: I agree about the folding tables. Nobody cares about what their desk looks like. It does not have to be mahogany.
Atwood: But he gets the fact that the chair is like hugely important to a software developer.? Big thumbs up, I mean I think he does kinda get it, love him or hate him.? I think he is on the ball with a lot of the stuff that he says and this is another example of that. So I felt like I could do better than the Aeron, although it is a classic and all that stuff.
Spolsky: Well you could get the uh.....
Spolsky: Well you could get the uh.....
Atwood: So I went on this rampage of research. I posted on the blog all the research, all these different chairs I looked at and I found places locally.? Luckily I live in the Bay Area so there is a lot of options for these high end chairs.? Not everybody has these high end chairs. You are talking chairs that are like 500 plus dollars.? So they are not going to be like home depot ....
Spolsky: No no...?
Atwood: You have to go to? back stores or design stores like: Design Within Reach.
Spolsky: Or you can order them on the Internet. Sit4Less is kinda famous for selling Aerons.
Atwood: And I believe that is where I got my original Aeron way back in '98.? I would swear I bought it from them.
Spolsky: Probably [chuckle] 
Atwood: Yeah.? I ultimately decided on another Herman Miller chair: the Mira.? I was initially concerned because I figured: how different could it be than the Aeron?? Siting in them side by side.? Literally, I went to Design Within Reach and they have both of those chairs, the Aeron and the Mira.? It was a totally different seating experience.? When you are spending that much on a chair you certainly want to try them out or buy from some place that has a really great return policy.? If you live in Hawaii like this guy Rob I was talking to, his options are pretty limited.
[37:25]
Spolsky: That is interesting because the Mira was originally intended to be sort of a low cost entry level Aeron.? I?think that the price has crept up to about the same zone as the Aeron.
Atwood: They have another chair called the Cella. ?I can not remember the exact name.? That is the truly cheaper chair and that gets really bad reviews.? It did not even consider that on my list.? I do like the mesh chairs. ?There were a couple of preferences I had. ?I like one I like the mesh. ?It is open and you are floating. If it gets hot you have less to worry about.? The Mira had that for me. ?I think design wise this is Aeron V5. ?I think they have... a lot of the things I did not like about the Aeron, like, it's got that hard edge on the front, because it's, like, a mesh bottom, but if you tend to sit forward in your seat... let me give you an example so on the Mira, the front is actually adjustable, there's a little thing I can grab right here, and pull down the front, and actually curve the front of the chair, which is huge, I mean, that's a major design tweak.? Probably based on all those complaints?from the Aeron about the front edge being kind of hard and unforgiving. ?I find it to be very comfortable. ?The lesson to take away from all this is: I think as a programmer, really invest in your chair. ?Take Jason's advice, take my advice. ?I'm sure Joel... what chairs did you guys get for the new office? ?Do you guys have Aerons?
Spolsky:?Yeah, we're pretty much Aerons everywhere, but we don't have to even get them for the new office, because we're just going to bring them with us.?
Atwood: Right.? So, yeah, you guys are living the dream because you all have Aerons and the Aeron is a great chair, don't get me wrong.
Spolsky: There is a chair that I've never heard anybody try out, which is the Chadwick chair, by Knoll. After Don Chadwick designed the Aeron chair for Herman Miller, he went over to their competitor, Knoll, and designed this chair that they called the Don Chadwick chair, and it's supposed to be, sort of, you know, it's?what he considers to be his second generation, or his next generation chair, after the Aeron.
Atwood: You know, they had that, at Design Within Reach and I hadn't heard of it so I didn't even try it. I was like "Oh, I've never heard of that, it can't be any good." ?I really regret that now, because they actually had that, at Design Within Reach and I should've tried it. ?It's another mesh chair which is great. ?Yeah, and the thing I loved about that, I wrote about that back in 2005 and that blog entry kept getting these really good, really knowledgeable?comments from people that would find it and were doing all this research on chairs, so I wanted to re-visit it and sort-of fold in all the commentary that I had read and also the links people had found for me on all these really cool chairs. ?So there's a lot of really good options.
[40:00]
Spolsky: It's also really important when you get a chair to get the right size.? The Aeron, for example, comes in three sizes: A, B and C.? A lot of people who say "Oh, I hated my Aeron, it was really uncomfortable," were just sitting in the wrong sized chair.
Atwood: I think the Mira - that's one of the concessions for the Mira - I don't think it comes in different sizes, I think there's pretty much one-size-fits-all.? But the Aeron does come in different sizes: A, B and C.
Spolsky: Anyway. 
Atwood: Something to think about.
Spolsky: Yep. 
Atwood: I mentioned that I pay slave wages (which is kind of depressing).? But I do buy my colleagues nice equipment: both people working on StackOverflow now have 30 inch monitors (which is nice)
Spolsky: Cool
Atwood: And I just bough Jarrod a Mira chair in terracotta and grey.? He was complaining that his La-Z-Boy wasn't comfortable, and I was like: "Why are you programming in a La-Z-Boy?? I can't imagine how that's actually ergonomic."
Spolsky: Was he also using a WebTV keyboard and his old 19 inch Sony colour Trinitron TV for a monitor? 
Atwood: Exactly.? I know I've talked about this before, but environmental things are so easy to fix.? It's not like what Joel talks about where he has to build an entire office.? These just things you can buy.? Like, you just go to the store and buy them and bring them back and plug them in or unpack them.? These are so easy to fix that it's irresponsible - if you know anything about software developers - it's irresponsible not to address these things immediately as soon as you hire someone.? And we talked about The Joel List, and when I walk into places and I see programmers working, I go through a mental Joel List of just equipment [laughs]? If they don't care enough to get good equipment for these people that they're paying sixty to a hundred thousand dollars a year - or more
Spolsky: Yeah.
Atwood: Then they don't really know what their priorities are, they don't really understand what they're doing on some level.
 
Spolsky: So by the (way)... So the new thing for our, I don't know if we've already talked about this, but height adjustable tables, which is one reason I would actually not recommend going with the Staples folding-leg tables, those are actually a couple of inches high, and so, your arm is going to angled at kind-of an uncomfortable angle if you're typing?on a keyboard on one of those standard, folding-leg cheap-o tables that you get at Staples.
[41:48]
Atwood: Leg height is supposed to be a straight angle.? You're not supposed to have your knees bend too much.
Atwood: Yeah. The monitor's not supposed to be really high. 
Spolsky: OK.
Atwood: I mean, that's just the ergonomic advice, you don't have to follow it.
Spolsky: No, that's what I've been doing because that's as high as my monitor goes. But I thought it was too low.Atwood: [laughs] Yeah, that's how it's supposed to work.Spolsky: Shall we take a question ?Atwood: Yes, lets take a question.
Spolsky: No, that's what I've been doing because that's as high as my monitor goes. But I thought it was too low.
Atwood: [laughs] Yeah, that's how it's supposed to work.
Spolsky: Shall we take a question ?
Atwood: Yes, lets take a question.
Spolsky: We have a really good?question that Josh Parris,
Atwood: Oh, that's right,
Spolsky: It's kind of long, he's actually gone and he's collected snippets of previous calls to, erm, hold our feet to the fire. So here's Josh.
Josh Parris: Hey, Josh Parris here.
Spolsky: Think of something controversial for us to debate for next week.? If you've got a controversial thing that you think me and Jeff will disagree on, then that's what I'm going to play.
Parris: Remember this from podcast number five?
Atwood: So that puts it at, lets see, what is it? It's the middle of May now, so, end of June - early July.
Spolsky: So how do you get this 6 to 8 weeks? What's this based on? Did you like make?a list of?tasks that you want to complete?
Atwood: uh no, I er.. That's just sort of... err... off the top of my head
Spolsky: [laughs] Well okay, you're doomed Jeff. There's some controversy. You, sir, are doomed, because you don't know what things you have to do.
Parris: A fortnight ago:
Atwood: The private beta is still scheduled for this month, it's looking like it's going to be more towards the end of this month. [nervous giggle]
Parris: And now this?last week:
Atwood: So, just so everybody knows where we are, the original plan was to have the beta this month. We might be able to do that, maybe at the very, very end of the month, but I think it's looking more realistic that it's going to be slightly into next month, maybe 2 weeks?
Parris: So that could be construed as quite a blow out, maybe six weeks, or double. I want to know why this blow out seems to have surprised Joel - isn't there some measurement of progress against a task list, or at least some on-going reassurance that the completion date was still looking good?? Why has the schedule slipped on a weekly basis - first the end of July, then mid August? Why didn't Jeff listen to Joel?
Why was the blow out so substantial?, and could FogBugz have helped? Was it due to poor estimation - FogBugz does estimation, right???
Spolsky: Ok, Ok Josh we get the idea, that was Josh Parris.? Excellent question, then he goes for about forty-five more seconds of hatin'.? So Jeff,
Atwood: Right
Spolsky: First of all I was not surprised personally, I said you were doomed, so I don't know why he was saying? that I was surprised.
Atwood: Right. We'll, I mean the level of doom was pretty low in the scheme of things. Does it really matter if its two-three weeks beyond what I said it would be?? I don't know.? First of all, to come clean: when we started the project, I would say after I left my previous job and started working on this.? It's not that I wasn't working, but I spent my entire adult life and I don't think I've ever taken a vacation longer than two weeks other than for my honeymoon.? I kind-of did want some time where - I don't want to say I wasn't working, because obviously I was doing the blog, and was certainly following up, you were still getting the domain name and all that stuff - but I wanted some low-impact time where I wasn't really pushing it really hard. [laughs]? And, kind-of just relaxing a little bit.
So I will say that I could've been more aggressive early on in assembling the team and just getting the infrastructure in place to do everything we needed to do.? So some of that is probably attributable to me not being as aggressive as I should've been early on, but once we had the team together once I brought Jeff on, Jarrod, we started with Jarrod and Jeff and I brought in designers, I think there's a certain amount of variability and McConnell talks about the Cone of Uncertainty I don't know if you guys have seen this but its like a graph that goes from left to right and its just like a cone, as you go further in, you have a better picture of how close you are to the end.
Spolsky: [grunts acknowledgment]
Atwood: And I feel that the reason early on I was giving these "Oh, well umm 6-8 weeks," it's was like one of those Polaroid cameras that has the auto-developing film.? It's like you can't see the picture just yet, its developing over time, it might be a chair, it might be a dog [laughter], it might be a ball.? You know, in a couple of minutes you can see very clearly what it is and where you are.? And I think thats now why we're saying we're actually going to beta essentially this week, or by the end of this month.? So it's a bit forward of what we thought because -
Spolsky:? Oh no no wait a minute, this is podcast number sixteen, and it was podcast number one that we said six to eight weeks.? So even if you were generous and took eight weeks that's about double.? It's about four months instead of two months.? Thats okay - it's not killing me, but let's call it what it is.? I think that we slipped by about 100% but I don't even think that we slipped, I feel like what we did wrong - and I don't think it has any consequence - but... we never had a list of features that we were going to have, and a list of tasks. 
[48:33]
Atwood: Wait a minute, hold on, because in podcast number five I said that the target date was July, like early July.? And it's the end of July, and it's not that much off, I don't know I don't think that it's a massive blowout of schedule. 
A: Because it doesn't really matter, in the big scheme of things; and 
B: I wasn't that far off.
I don't know
Spolsky: Okay, but the reason I say you were doomed on whichever episode I said that you were doomed - and I didn't explain it then really was: given we didn't have a list of things that were going to be done it was, it is, impossible to make an estimate.? All you can say is, [laughing] "I've done StackOverflow before and the last time I did StackOverflow it took me four months."? You can't really say that.? The only estimate you can do without any kind of information is, we have the following constraints: we have to ship something in six months (let's say) and we will cut features until we are shipping in six months, so therefore you can say "we are going to do it in six months," with some reasonable-ness.? What you can't say is what you will do in six months. 
But I don't even feel like - I feel like that there's a mistake and I kind-of want to leave it standing just because I thought it would be a fun, teachable moment for our audience, and forgive me for being didactic prick - but the point I want to make all the time is that: if you don't know what you're going to do then you don't know how long it's going to take.? Even if you know in the vaguest terms what you're going to do, if you don't have an individual list of the specific things, the specific tasks, the specific functions you're going to write, the screens you're going to design, the domain names you're going to register and all that kind of stuff.? If you don't have that specific list of tasks it's just impossible to know how long something is going to take in our field.? This stuff isn't done that often, every time somebody goes to build a website their doing something that has never been done before. Or goes to build a software program.
Atwood: Right.
Spolsky: So, without a list of tasks, I feel like that sort of is the beginning, and once you have a list of tasks then you can try to estimate how long each of them will take, and even then they should be really short tasks, say 1-2 days.? You have to have that level of granularity to be able to estimate.
Atwood: Right, I mean, all that is absolutely true.? I think the thing that works against me is: let me ask you this.? When you went to college, were you a note taker?? Would you take...
Spolsky: Ummm yeah.
Atwood: So you would take like volumes and volumes of notes about the courses that you were in and stuff like that?
Spolsky: Ummmm except for senior year.? After three years of taking notes that I never looked at, I realized it was a waste of time [laughs].? No, actually, you know what?? I finally realized that most of... that the taking of notes helped me to remember things because it allowed me to organize a second way, and I never had to look at them again -- if I didn't take the notes I wouldn't remember the things.
Atwood: Right, right, and what we're talking about is a little different than taking notes, but I am not a note taker, like at all, almost like pathologically so.? Like, I really don't like to take notes.? 
One because I don't really look at them; and 
second because I just... there's something about me where I can't deal with taking notes.? 
But that said, I mean, creating a to-do list is obviously a great way to organize your life.? We talked about "Getting things done" like last week?? I mean, how would you even begin to get things done if you have no list of what you're supposed to be doing.? So that, obviously, I do agree with, and I think there's just a pathology in my case where I'm just "Mr. I Really Don't Like To Write Things Down".
Spolsky: Now, I should say that despite the fact that this is an instructive moment, I didn't really make a stink about it at the time because I don't think it matters in our case, and I think that sometimes you just don't have dependencies, you don't have people that are depending on you, its okay to be two months late -- well we do have a bunch of people that are sitting around waiting for this awesome product that we're gonna ship, but, you know, none of them is holding their breath, and um....
Atwood: But also, think about visibility, so really the problem with schedule is when you have no visibility, so you have no idea, I mean, not only from a development level the people building it have no idea, but the people on the outside have no visibility.? I do not think that's true in our case: like the whole thing about what we're doing is like its very public, very visible, I've been posting on the blog, right?? You've had access from day one to the site.
[52:48]
Spolsky: Okay, well, yes that's true but, but also don't forget, I think there's a common human mistake, there's a common perception...? I wonder if I've talked about this in the podcast?? Well, like I said this podcast is just me repeating myself so I'll repeat it one more time.? There's a common mistake that people make which is to think that they know more, that they have a bigger picture than they actually have.? And the reason is that all of your senses are fairly limited, like especially your sense of vision, it's limited to a very, very small area where you can actually see, and your eye just dashes around and fills in and answers questions that your brain has.? So you're looking at something and you know what looks like that and you wonder what's going on over there because something just moved and all you know is that something moved and so your eyeball turns and you fill that information in.? And you've been doing this for however many years you've been alive on this planet and so you brain's gotten really good at this and the brain is filling in this appearance, you get the illusion of having this high resolution picture of everything around you even though you only have a very small picture and the other parts can be filled in just by moving your eyeballs.? So that's just the way the eyeball works.? And there's probably some technical terms that I could be using there but I don't know what they are.
Atwood: Okay
Spolsky: And so, wait
Atwood: That's a really good point, so
[53:57]
Spolsky: So because you're so used to your eyes working this way and things in general, you have a real tendency when you think about, like "I'm going to build a Q&A website for developers," you have a tendency to say "I know how this is going to work, I know all these [...] answers."? And then when you actually go to build it all the sudden you realize, you know, "We never thought about how people will log on," or "we never thought about what would be on the home page."? We went for a long time without thinking about that at all, and yet we sort of felt, we both felt this illusion of having a complete picture of how this site would work.? And, the reason I told that whole story is because this particular illusion that you know what's going on when you don't is what dooms software schedules because you think that what you are doing is straight forward but that's only because you haven't thought about it at any level of detail, and when you think about it at that level of detail you uncover all sorts of things and maybe some of the architecture decision you made early on don't jive with what happens when you think about the detail later on down the line.? And maybe you spend a lot of time building something that when you get to the, you know, it didn't happen to us but sometimes you could have spent a lot of time building something and then suddenly get to the point, where all of your tables depend on the particular other table being available and you suddenly realize you just don't ever want to have that table.? Or, you know, some architectural change you never explored the business of what's going on the homepage and when you suddenly do go to the homepage, you know, some earlier technical decisions that you made turned out to be wrong.? I don't think that really happened.
Atwood: Well this is why...? This is why I, we had timing framework in very early, so we could tell exactly how long A) the page was taking to load and B) all the queries that were flowing through the system.? But I do agree with what you're saying, I think this is a really good point, is that your mind's eye tends to fill, you imagine the app as you want it to be.? It's like "Oh how hard can it be, we're just going to plug in a login-thing here and I've done this a hundred times and it will take no time at all."? So I think that's an excellent point, but I think it's the job of more than one person on the team to keep you honest.? Right, like you're there to keep me honest.? Jeff and Jarrod, my teammates, are there to keep me honest.? Our designer Jeremy is there to keep me honest.? You have, you have a consensus opinion, based on a real world artifact, right, we're not imagining it, we actually have a dev site that you can go to right now and see exactly where we are and exactly what works and what doesn't.? So there is an objective reality there, and there's more than one person involved, so I think that's the important thing to take out of that.? And then also that: don't procrastinate.? And I think you again, excellent point that you always imagine that it's going to be easier than it is, and you can't think through all the details that are going to go wrong, and all the weird things you're going to have to think about until you actually start to do it so the worst thing you can do on a project is procrastinate.? And I know this is very painful to hear, because I'm also like a world class procrastinator.? And like I said with the schedule, I probably should have started a month earlier than I did, honestly.? And I attribute that entirely to my own procrastination.? But the sooner you start, the sooner you'll know all the things you need to know about what you're doing.? That's when the imagining hurts you, so start immediately.
[56:53]Spolsky: I feel like when I get into this debate with people that I always say to design or write specs or creating drawings and stuff.? And they usually say something along the lines of what you just said a minute ago, which is there is a million details that you couldn't possible foresee so just start and see what they are.? I would say "yes, there are a million details, you can't foresee some of them, but you can foresee a lot of them."? If you try to foresee all of them in advance then you will save yourself some time down the line because you may notice that you are designing something in a direction that you aren't going to use or that it's not going to make sense further along the line.? This matters a lot less for a small startup like what we're doing here, building a simple little site using state-of-the-art tools.? I can imagine that there's an awful lot of business situations where you're building software and shipping on time is a really really business-critical thing to do.? So for example: think about just how bad the iPhone 3G software was on the day that they launched and that's probably because they had these huge commitments to get this thing out on a certain date.? And they pretty much had to ship it when it was unready, they had to rush something out and now they're suffering from meltdown as a result and the software is as buggy as heck.? But hey they'll get it patched up but think about if you were working at that Apple development team shipping some piece of software: you don't have the option of being eight weeks late.? You just don't.? You're going to get fired, and then [sarcastically] you're going to get cut into little pieces and then the pieces are going to be thrown on fires - separate fires [laughing] so there's no hope.? That's what going to happen if you're late.? Another example might be a game studio developing a game that has a tie-in with a big movie with a release date.? If your game isn't ready on that release date then your going to lose 90% of your potential customers for your game. 
[58:50]
Atwood: I wasn't really advocating that there be no upfront design.? I was really advocating that there should be just enough - where "enough" is debatable obviously.? Enough design so that you're not just randomly doing things.? Have a plan, but then start on the plan like as soon as possible.? And then just the whole iterative nature of, you know, keep building, then plan some more, then build, then plan, I think is the way to go.
Spolsky: I think actually for a lot of new applications people are developing the first spec you may want to write and the first schedule you may want to make is for version 2.0, or the first big upgrade. 
Atwood: Really?
Spolsky: Yeah, I can imagine a lot of things - think of like Twitter, for example - where just getting the first version out there, you have no idea how people are going to use it, you have no idea of what it is going to evolve into.
Atwood: That's true.
Spolsky: Just do a 1.0, that's small, you build it in eight weeks.? Nobody is about to starve because they're going to run out of money - although you may be in that situation, but we're not. [laughter]? If it takes a little longer and you know there's going to be a major change in direction, but if 2.0 is where you say: "Ah yes, we need SMS," or we need whatever it is that they want to have for 2.0 and it's very clear what thing you're going to do.? It's just the one thing so you can sit, you can stop and you can design it and you can schedule it. 
The other business reason why it's often important to schedule things is that when you sit down and design and then estimate how long they're going to take you get some surprises like: "this is really going to take a lot longer than we thought," or "this is going to take a lot less time than we thought."? It's pretty important - I think that everybody agrees - at any given time you are working on a feature that is going to get you the most bang for the buck, or increased sales, or increased customers, or increased eyeballs or increased whatever it is that you are trying to get, for the least amount of development work.? And those are the features you want to do first.? But if you don't have schedules and estimates you don't really know which features get you the most bang for your buck.? You don't have any information to feed into that equation.? So you do some random thing that sounds fun and maybe it takes two years instead of four days and you suddenly realize "that thing would've been worth four days and sure-as-heck wasn't worth two years."
[1:01:01]Atwood: Right.? I think that continually revisiting those decisions is the important thing and in the previous podcast I talked about the desire to create public artifacts.? I don't have a getting things done, I do like to create public artifacts, I believe that's really important.? The fact that Josh was able to call me on this is because I have been in public talking about this stuff, so this is the flip side of doing stuff in public, is people will hold you to your claims, and they will also look critically at what you're doing and I think this is hugely important.? Whereas is if I was just in isolation, like I went totally dark, you wouldn't know where I was, I wouldn't be making these proclamations, "I don't know when it'll be done, I'm not going to tell you anything."? Just the fact that it is being done in public and is being shared helps you get thing done on some level even if you are totally an amateur, which I essentially am. The value of other people looking at it will help you finish (I think).? As long as you are somewhat rational about the way you approach feedback.? It's a great question and so thank-you Josh for putting that together, I think it's a totally legitimate claim to make.
Spolsky: Cool, alright, that was an interesting conversation.? Thanks Josh for the question. Josh, also while we also have you on the line, thanks for all the transcripts that you've done, and all the editing of transcripts on the wiki. 
By the way, if this is your first time listening we do have a large team of volunteers around the world who are all contributing to the transcript website which you can get to at blog.stackoverflow.com and there are transcripts that are provided for the benefit of search engines like Google and also for the benefit of the hearing impaired who can't listen to our podcast.? So thank-you to all those volunteers who contribute those: thank-you very much. 
If you have a question or something you want to debate or something interesting or something that'll cause an argument between me and Jeff here, because we don't argue enough.? Please record it in the form of an MP3 or Ogg Vorbis and e-mail it to podcast@stackoverflow.com.
Atwood: However it cannot be about learning C.? That's my rule.? It can't.
Spolsky: That's done.? Hey wait: are you the one who did a blog post about how you need to build your own computer so you know how computers work?
Atwood: Yeah, I did write that.
Spolsky: Yeah.? But you don't need to learn to write C because that doesn't have anything to do with how computers work, but uhh.? Anyhow. 
Atwood: Ugh, Next show, next show.
Spolsky: I think we'll talk about C in the next show. Thank-you for listening and we'll see you next week.
Atwood: Bye.
[1:03:45 ends]
Outro, advertising
[1:04:49]
Ads, intro
[1:00]
Atwood: So, we are in a call now with the development team for StackOverflow. That means with me, Jeff Atwood, Jarrod Dixon, and Geoff Dalgas. So this is Podcast, I believe number 17. It technically should be 18, but Joel Spolsky is on a jet-setting international vacation all around the world, so he is not available. When I posted that we wouldn't have two podcasts for two weeks, one of the suggestions we got in the comments was, "How about a developer podcast?"? I thought that was a great idea, because I remember when Jarrod was visiting with me in California, I talked about actually having Jarrod on one of the podcast calls but the timing didn't work out.? But I think it's exciting to have a call with the people who are really doing the work, because we know Joel doesn't really do anything, right? 
I'm only kidding: Joel does a lot of stuff.? But these are literally the people building the site so that's why it's exciting to have an opportunity to give them a voice.? You guys can see what we're doing and how we're doing it.? So I thought we would start by introducing ourselves, everyone knows me, probably, so I'm not gonna bother introducing myself, so Geoff, do you wanna take it away and introduce yourself?
Dalgas : Sure, yeah, you bet.? My name is Geoff Dalgas and I've been working with Jeff Atwood on StackOverflow. I was one of the late members that was added to the team.? I've been happy, it's been great, it's been a lot of fun.? I got to know Jeff back in Denver, Colorado working with him through a small software development company there. And ah got to sit through a lot of his beratement [sic] and as a result of it, I think I'm a better developer, I'm not really sure though, so we'll find out when the bugs come my way.
Atwood : So Geoff, you got a lot of the rants, that I think would become blog entries later in my life, so that's... 
Dalgas : Yes, before blogging was hip, I got to hear the majority of the rants as in, "Don't touch my monitor!" and a few of those. [laughing]
Atwood : Yes, exactly.? That was Denver and I think the time we worked together was, I wanna say '96... yeah, '96?was when I first met you and we worked together till like gosh '98 or '99?? It was a couple years.? It was a couple good years,?but it was a lot of fun. 
Dalgas : Long years, long years. [laughing]
Atwood : Thats right. And how about you, Jarrod?? You want to introduce yourself to the group?
Dixon: Yeah, my name is Jarrod Dixon and I've been working with Jeff now on StackOverflow I guess the past four months now.? I got to know him back in Raleigh, North Carolina.? We worked together for a large pharmaceutical organization that just loved overcharging people I guess.? No not really.? But I guess I've been a developer for about? seven years, and really enjoy the opportunity that Jeff has given me to work with him.
[4:00]
Atwood: Now both of you guys, I think - and I've written about this in my blog before - you guys kind of grew up with computers like I did.? Because I remember, Jared, you telling me that one book, what was it - Computer Monsters?? That you used to read and type in programs.? At what age would you say you guys started getting into computers?? Like Jarrod, what would you say?
Dixon: Oh man. I guess my parents, they got an old Apple II+ when I was three or four years old, so I was messing around from that early of an age, you know with BASIC and stuff.? Just messing, playing around.? It wasn't like--I look back at how ignorant I? was--
Atwood: --Well everybody--
Dixon: --It was a real young age.
Atwood: Yeah, and what about you, Geoff?
Dalgas: I remember quite well.? Commodore 64. ?And a good friend of mine, Ethan, had one.? We didn't have one; we couldn't afford one as a young chap.? I still barely can afford one now.? But we used to sit up nights, pounding in the BASIC programming, just right out of those magazines like you're referring to, and trying to get it to compile.? Trying to get it to run.? We'd get it going for a while and hit a bug, or hit a breakpoint, and spend the next 12 hours trying to figure it out so.? [laughs]
Atwood: Right.? And when I met you guys, I think I was drawn to you guys because we had that shared background.? We both, at an early age, had been really fascinated by computers and programming, and I feel like programmers who started out that way can sort of recognize each other.? I don't know what it is; there's some innate love of the craft that you have.? There's a lot of different kinds of good programmers.? I don't mean to say anything negative about people who don't do it this way, but I think we can recognize each other. [laughs]? And you have that common bond, which is kind of fun.
[6:00]Atwood:?So let's talk a little bit about the logistics, of where we are in beta.? So we've been in beta since last Thursday, so it hasn't.... has it even been a week?? It's been over a week now.? 
Dalgas: Hah!
Atwood: It feels like months now right? 
Dixon: It does
Atwood: But the beta is going really well, I was very pleased.? I didn't know what to expect honestly.? And I think when we came into private beta I think I was a little scared, just because you have been working on this thing for a while and you want to show it to people, but on the other hand it's like, its like your baby and you feel like people are going to abuse it and do means things to it, say mean things to you: all that stuff.? But the response have been great!? And by that I mean when people are exposed to the site - and maybe it's just as Geoff said he calls this the "honeymoon phase", when we are drawing in people that were interested in the project from an early date - but I feel like they are using it the way I envisioned people would use it, the way I wanted people to use it.? Which to me is very gratifying.? In other words: 
There was an article Robert Scoble (Scobleizer — Tech geek blogger » Blog Archive PR-less launch kicks off a stack overflow of praise «) wrote completely on his own, I didn't contact him or anything: very positive.? And a number of blog entries that we've seen from various people that are getting into StackOverflow. And then there's the "CrackOverflow", which was very amusing. 
Dixon: [laughing] Yes, that was...
Atwood: They made a logo, and started calling it "CrackOverflow", and stuff like that.? I think that's obviously a compliment if people are comparing your site with something that's addictive, and hopefully addictive in a good way, right.? 
Dixon: Crack for programmers.
Atwood: People are learning stuff, and seeing stuff, and getting answers to their questions.? So people have also compared it with Digg.? I'm ambivalent about that, because on one hand I like Digg, Digg's okay.? I feel like Digg is the daytime television of the Internet.? Like, does anything really good come from visiting the links on Digg?? What do you really learn from going to Digg?? You might learn something, I'm not saying it's totally without value, but it's not like PBS right.? Whereas on StackOverflow, I think participating in StackOverflow - sure it's fun and time sink - but hopefully you are learning stuff about our craft of what we do, how we do and how other people do it and that was always sort of the goal when we started StackOverflow, was to take all the stuff I have learnt, from all the years being on the Internet, like CompuServe before that and just running my blog and seeing, okay if a blog entry gets 200 comments, who's going to read all the 200 of those comments, right?? So there are certain issues of scale around blog I was trying address, and to have a forum and a place for people to go, do things like that, in a way that's more scalable.? StackOverflow is kinda to me CodingHorror 2.0 - its Coding Horror so that you guys can be in charge of it and run it and get stuff back out of it.? And to that end another observation I want to make is that StackOverflow is supposed to be run by you guys - and by you guys I mean not us the moderators, but the people participating in it - and that's one of the big reasons why we have the reputation system.? The system learns to trust you.? And as it learns to trust you it basically lets you run it.? You will be able to edit other people's stuff - that's probably the biggest feature, maybe even delete stuff, certainly re-tag things, shift things around on the site, you know mark things down that are bad, mark things up that are good, obviously with voting.? And also our spam flag.? Somebody is spamming and you can flag it and it will get deleted.? My view is if it takes us, if we have to intervene a lot in the site - me, Geoff and Jarrod, then the site is basically failing - it's not gonna scale, because we don't scale.? So it very much is a community site run by the people participating in it.? So that was a very long-winded answer, but I wanted to get it out of the way because I've been very very pleased with the way the beta is going so far.? And with that, I think, let's go ahead and get into the questions; I don't want to take up too much time with my "jibba-jabba."
I do want to start with one question I think was kind of funny. This is from Stefan--I'm the king of mispronunciation, so—Stefan C-I-O-B-A-C-A, I can't pronounce that, I apologize. But I thought this was a funny question, 'cause—let me just read it. "Number one, how many people stopped following StackOverflow because Joel insisted on allowing audio-only questions in the podcast?? Does he admit it was a mistake?? Do you think this was a decisive case of the podcast becoming boring?" This is great, because this is like, "Have you stopped beating your wife?" [Laughter] No! I love beating my wife.? It's great.? Number two, which is more directed to us: "What took so long to develop it?? It seems to me that the first version of such a simple site would take a week, maybe.? Is it because you used Windows, which takes more time to set up as a server?? Or is it the stack, which makes it more difficult to create stuff that seems easy?? Or is the product really complex?" [Laughter] So, basically, "Why do we suck?"? I don't know.? That's a tough question.? It's like, why do we suck so much?? I think we should have hired Stefan, because I think Stefan could—
Dalgas: Definitely.
Atwood: —could have written this in a week using some unknown tool that, y'know… yeah.
Dixon: It's my rampant alcoholism that's holding me back, that's what I'm saying. [Laughter] Coulda been done a long time ago.
Atwood: So let's get to the real questions here—no, let me take that back: Questions that can actually be answered.
[11:46] 
Atwood: One question that I enjoyed, and since you guys are - and just to be clear - I'm in El Cerrito, California, Jarrod is in North Carolina, and Geoff is in Oregon, so we are in three different areas, and a three hour time difference for Jarrod as well.? And somebody asked a question about how do you manage the planning and the team-work when you are so far apart.? And certainly using with Skype and sitting down side by side and things like that.? So I wanted to comment on that a little bit, and let you guys comment on that as well.? I think one of the reason this worked is because Geoff and Jarrod sort of have very flexible work arrangements currently.? I mean like they're not going in 9 to 5 to a traditional job, I don't think that this would work in that scenario at all.? I guess I got lucky because Geoff and Jarrod - in addition to being some of the best programmers I've ever worked with - happen to be kind of available in the sense that they have very flexible job-schedules.? So I would say; number one - you have to have a very flexible schedule for that to work, because - you know - people being in different time zones, and being distributed, things just don't always happen in perfect sync, like - you know - ten in the morning, or nine in the morning when people arrive at work.? It's gonna happen in a more distributed fashion throughout the day, so I think flexibility in schedule is really important.? And also, I got to give props to Skype.? We're using Skype to recording this call now, and Skype has been great.? With Skype - you know - we can call each other any time we want; there's no long-distance charge; it's right on our computers so it's always just one click away; so I would say Skype has been a really huge factor in our team work.? We also try to have at least one team meeting per week, where we sort of have a day - and currently it's Wednesday, which is tomorrow - where we kind of try to be available throughout the day to just work on StackOverflow stuff, and message each other and call each other at any time.? So we do have a little tiny bit of coordination that goes on, and then most of it - honestly- is just very ad-hoc.? And I think another thing that works in out favor is that Geoff and Jarrod are like me in that they're addicted to the computer, so they are like always on the computer.? [laughter] 
Dalgas: That's true.
Atwood: They are like kind of always available. ?Ah so, there are some unique things about our situation that make it work.? But certainly, Geoff, you worked from home for a while, and you work with other guys not on StackOverflow, but on other stuff, and what are you thoughts on working remotely?
Dalgas: Yeah, I mean, working remotely is actually what landed me here in this nice little town Corvallis, because there's not really a whole lot of tech around me, and I don't go in on a daily basis to work, and sit down at a desk and code away, even though I do miss a lot of that, I actually miss being around co-workers and such, but the physical presence is one piece that I do miss, but having the Skype-calls and having a dialog on a regular basis really helps a lot. The technology is so good now that i think it's even easy to do - it's easy to work collaboratively with the team members that are all throughout the United States.
Atwood: Well, also, Geoff, talk a little bit about—you set up the Cruise Control integration for us - which has been huge - because when you do a check-in, I see the e-mail and things like that.Dalgas: To be clear, I set it up, and Jarrod refined it for me. [Laughter] ?Cruise Control has been great. ?We do have a nightly build—well, not nightly, an "every check-in" build process, right now—where, once we find something, after we've added a little bit more awesome to it, we check it in, and it goes through a series of unit tests we have also coded. ?And [it] sends us all an e-mail with the comment that was made attached to that check-in.? So we're all kind of able to watch each other's work as it gets checked in to our server.? It's kind of neat to watch the whole thing evolve, and hopefully I continue to add more awesome and not more crap. [Laughter]Atwood: Right. ?And sometimes what I'll do, if it's a check-in I'm particularly interested in, I'll just do the diff right there. ?We use Beyond Compare—I'm still hooking up the licenses for you guys on that, the formal ones—and also VisualSVN, which gives us the integration with Visual Studio. ?So it's like a one-click operation, to see the differences when we get latest—they don't call it "get latest," but when you get the current list of changes—I'll sometimes diff it just to see what happened there. ?Jarrod, what about you? ?Have you worked remotely before, Jarrod?
Dixon: Not really, they kinda frowned upon it at our previous employer.? They wanted warm bodies in the cubes.
Atwood: So this is your first time?
Dixon: Yeah, it really is, and I can say that I personally loathe the nine-to-five.? I can't stand it, so this has been kinda a wake-up call that I want to write software from the comfort of my own home.
Atwood: Right, in your lazyboy. [Laughs]
Dixon: Right. Exactly!? Kick back... [Laughs]
Atwood: Yeah.? I was very excited Jarrod finally let me buy him a Herman Miller Mirra chair. Because he was still coding in his lazy boy, which he was, "happy" with. (Laughs).? But I finally talked him into it so we are looking forward to...
Dalgas: That's another fun thing working with Jeff, is those perks.
Dixon: Yeah.
Atwood: Yes.? Well I figure I can't pay you guys very well, so I want to at least get you the best equipment.? So I have gotten them both 30 inch monitors - and I've talked about this on my blog.? I am really just living the things I am talking about on my blog.? Having good equipment is so easy relative to how much people really cost, that it's a no-brainer.? So 30 inch monitors.? I bought Geoff some hardware to upgrade his PC; the chair.? You know, little things like that.? And of course: real money as well.? There is some - not a lot - but some.? So I think that covers working remotely.? And it's also a little bit of an experiment for me.? I don't think that I've done it to the degree that I'm doing it now.? But I think flexibility is the order of the day.? You have to have people that are really flexible with their schedule, their time, to even remotely work at all.
[17:50]
The second part of this question I thought was pretty good: it's about code ownership, like when you write code do you like, own it?? If something has to be changed or bug fixed, do you prefer to send it to the other person?? You know basically, about code ownership and I think that goes hand in hand with working on a team.??And I think the way I've looked at this is - now that Jarrod did a tremendous job, and I want to give Jarrod a lot of credit because initially on this project Jarrod pretty much did all the lifting in terms of setting things up and getting it started.? So Jarrod really laid the foundation for the project in terms of the technology and all the initial code that we wrote... and he did a great job because we're still building on that framework - but I feel that everybody should be able to go in and edit any part of the code.? But the question that this particular person brought up, he pointed out that sometimes it is more?convenient?for the last person, like say... some feature like Geoff did a lot of work around paging, so there's currently a bug in paging that he's working on, so I could pick up that bug.? Uh, but it's a low priority bug, it's not like broken or anything, it's just a little off.? I just think it's easier for Geoff to go in and do it, because he originally wrote it.? But I think the core parts of the code, like certainly on our site, the core would be question-ask and question-answer, I've gone over that code a dozen times, so I?definitely?know that part inside and out. ?So my answer would be, as you get towards the edges of the code, I think it's okay to have some stuff on the edges that has semi-ownership around it that people, you know, indirectly own it because they wrote most of it. ?I think that's okay.? But the closer you get into the core, the more you want to have just total shared ownership - everybody should be comfortable changing that stuff. And did you guys have any reactions on that, Jarrod, Geoff?? About who owns what?
Dixon: I sort of felt the same way that y'know at first I had some things that I kinda like "owned" or whatever, but now it's willy nilly... edit, do?whatever, beat it up, change it.? I?don't have, y'know,?a care any longer. [Chuckles]
Atwood: Right, what about you Geoff?
Dixon: Complete apathy... complete apathy on the code base.? That's what I feel now. [Chuckle]
Dalgas: Yeah, I feel the same way.? Well, if you break something, fix it.? That's kind of a little thing there... [Laughs] which I'm learning on paging right now.? So that's part of that.? But as far as the code ownership goes, there's this whole sense when you write some code that you really are like, "That's mine!"? There is [sic]?a lot of attitudes I've seen like that, and I think that with this particular project?with us working in three different corners of the world, I've been able to detach myself from the actual code itself and think about it more as, "we're building something together. We're building something that's pretty awesome, and I don't really care who changes my code or what it looks like in the end." In fact, I learn more from people's changes to my code than I would [have] ever?learned from just trying to do it myself.
Atwood: Yeah, I think the only time it gets, I think, annoying is when somebody changes your code and breaks it in a way that breaks the site.? And I don't think this has really even happened. ?I mean, because everybody makes mistakes, right, so... I think it's a question of (I think) trust with your teammates and basically just competency.? And you guys are so good that, I mean, if some little thing is broken it's not malice or incompetence.? It's just an oversight like I would make.? And Geoff, I remember, I was a little annoyed at Geoff because he had gone and actually deleted a bunch of code that I had written [Laughs] I was like, "Grrr", and I was a little annoyed, but then at the end it's like "I don't even care" because I just, y'know, I got the part that I needed back out of the source control and put it back in, and it was just a trust issue at that point.? It's like Geoff was trying to clean up... this was a like big refactoring we went through with implementing the first design, and I appreciate that Geoff had a ton of work to do around that, and he didn't want to deal with looking at this big blob of code I had written, so he just y'know essentially deleted it for the time being. ?And that's fine?because that was such a big unit of work that I just went in and later added it back in.? It wasn't essential or anything.? 
So Jarrod, did you have anything to follow up on that?
Dixon: Oh there's just... since there's really no possibility of physical altercations, there's no use getting... I'll just go in and change all your stuff.? Just wait.
[22:08] [Group laughter]
Dalgas: Awesome.
Dixon: That's right... that's right.
Atwood: Well that was a great question because I do like talking about how the team works, and I would prefer it if we actually - it's impossible obviously but - I really enjoyed it when Jarrod came out to visit to California, because Jarrod had never been out to California even, and we spent at least one day working on StackOverflow very early on.? This was in the OpenID phase when, remember Jarrod when we were getting all the OpenID stuff [working]?
Dixon: Yeah yeah yeah.
Atwood: That was fun too because we had decided on OpenID and Jarrod had written like a ton of like login code already- 
Dixon: ugh!
Atwood: -so you had to go in and like throw out all that code. [Laughs]
Dixon: Oh... it was... Actually, that saved... I'm sure that has saved so many headaches. Even dealing with OpenID.
Dalgas: Oh yeah.
Atwood: And to be clear, and maybe this is a good segue into the UserVoice stuff, because people are asking like how do we prioritize stuff... and to me it's all about UserVoice.? It's like what issues are people actually running into that they feel strongly enough to comment on in UserVoice.? And I want to also say, to people that are putting a lot of stuff into UserVoice and... and if you see me declining a lot of that stuff and being a little, shall we say, "ruthless" about declining: I don't mean to be rude.? The reason I do that is because we have basically 3.2 people on this project, right, that are actually writing code.? Me: I'm the only full time person.??Geoff and Jarrod and then designer Jeremy who works very, very, very part time.? So we have a really limited amount of time that we can look at this stuff, and I have to be realistic about what we can do.? And if I decline something, it doesn't mean that we're never gonna do it.? It just means that I don't want to think about it for the next... four weeks.? Right?? Like this is a project we're gonna grow.? This is one of these things where we're not building?this to flip it and make some massive amount of money.? I'm building it because I genuinely think it's something useful that belongs on the Internet and that we can all own, and like I can be proud of and Geoff and Jarrod can be proud of - and Joel as well - can be proud of participating in this thing, and building something useful for everybody.? So, we want to grow this.? It's like gardening or farming.? So six months from now,?four months from now, we might very well go back in and implement a lot of this stuff that you're asking for.
But getting more specifically, now that I've got all the disclaimers about me being a bastard on UserVoice and declining everybody's requests, how do we prioritize fixes that?we're?putting in?
[24:25]
So, I think initially we had a set of core features, that were mostly in, and I think we looked at... There have to be enough features for people to understand what the site is and how it works, and we're almost there. I think the only piece that's really missing at this point is rollbacks, which Jarrod is working on. So, the reason that's important, to be specific in the example that I'm using, is that makes it very easy, if someone makes an edit to your post you don't like, rather than freaking out about "OK, somebody touched my stuff, and somebody edited my thing, and I don't like that", there needs to be tools in place where it's very easy, like, literally one click for you to go "You know what? I don't like your edit. I'm gonna rollback to the last version that I owned, OK, because I own the post". There's a concept of post ownership at that point, and it's totally legitimate for you to do that, and then the flip side is, you should have a page where you can see edits the people have made to your stuff, and we currently don't have that, right. So these are missing pieces of the system, so I tend to prioritize those a little bit higher than "X is bust" or "Y is bust", depending on how busticated it is, because without that feature in there, people don't really get to understand the system, so they'll be making requests and complaints that don't reflect the final system at that point, cause the system isn't there. So I want to put that caveat in, as that we have to build out the missing limbs. In a previous podcast Joel talked about how "Software can be missing limbs." I was like "Well, it can, but people will think you're a monster if you're missing limbs", right? like they don't see the person or the thing, they see "Oh, this is a monster, it's got three arms and it's missing a leg, and it's disgusting", right?
You have to able to see the outline of what it is to understand it and use it, so those kind of requests go first. The other thing that I look at is request people keep opening over and over. Currently paging would be one of those things. Geoff? 
Dalgas: Thank you, thank you.
Atwood: And for a while, like, the user page was just kind of busted, like it wasn't showing the correct information on the user page, like the questions and answers you participated in. And I kept getting, like every day there would be two or three UserVoice requests on that, and I bumped that up and actually told Jarrod "Jarrod, look, we have to have this in, because every day I have to deny or duplicate three request on the same darn thing." So, if I'm getting lots of requests for something, than I'll definitely bump it up. So, I wanna be clear that, on UserVoice we really do listen, and I read everything that goes in there. So, do use that.? And that's actually how we prioritize everything. So the more noise we hear around a feature, certainly the more we bump it up on the list.
Now, the other part of that question is testing. It's, like, how do we test? So, let's talk, and I know Jarrod did some great work early on, basically single-handedly giving us unit testing, and I wanna talk about that a little bit. So, our current development structure, we have, obviously we can run the solution on our local machines with local databases and all that stuff. We have a development tier, which is currently hosted on the same server as beta. So, the normal process is: we would make a change, test it locally, make sure it doesn't break?anything locally, check it in, at this point it triggers the CruiseControl which does the build on dev, so that forces an integration point at that juncture. Then we go and sort of play with it on dev, and make sure it works, and unit tests run, which I'm gonna?come back to, and finally if that looks good, we deploy what's on dev to beta. So, there's sort of a three tier thing we do there, not that we don't make mistakes, cause we definitely do. Now, the unit tests that we have in, are pretty incomplete and I blame me for that, because I've really been pushing, like new features over going back and adding a lot of tests for features. But, I was very pleased that Jarrod set up a test project for us, and it does run on every build. So, if we do really heinous, that breaks tons of stuff, we will see that in unit test, and it will block the deployment on dev, so we can't even deploy, until we fix the unit tests. But, Jarrod, did you wanna talk a little bit about just setting up the unit tests, some of the decisions you made, cause... all that stuff?
Dixon: Well, at first, y'know, it started out with Microsoft's testing, like the Test Project, but I was kinda running into issues that, you know, you have to, in order to get MSBuild to run those test, you basically have to install like a full blown Visual Studio on your server and that's kind of a big no-no. You have to sort of, frankenstein up some dlls just to get it to be able to push databases through MSBuild.
Atwood: Right.
Dixon: So, I went to, y'know, switched back out, I've had, y'know, lots of experience with NUnit, so, I was comfortable with that, and I guess a lot of the stuff, if there are, y'know, some pretty intricate business logic, like the stuff around reputation, how reputation changes happen. Like, we had unit tests for that, but NUnit is one of the best open source projects out there. I can't recommend that enough. So other than that, hopefully , as we give more time, as we fix some of the more glaring bugs, we'll be able to add test for, like, the controllers. Cause right now, really, our unit tests only touch the models, and, y'know, I guess, I'm to blame for that too.
Atwood: No, no, no. That's all me, because I made that judgment call. It's like, we have to plow forward. And, y'know, the interesting thing to me about not having enough unit tests, which is where we are, we have, like, ridiculously small test coverage, is: your community ends up being your de facto unit test. Like, when your unit test failure is somebody opening a ticket on UserVoice, which is very traditional, and it would be nice to block, not block that, but to short circuit that, and actually be able to fix the bug before people even see it. Obviously, that would be ideal. But on the other hand, being able to deploy all the time and add new features without, y'know, doubling or however much additional work there is to add a test, not that we won't circle back and add this stuff in later, because I definitely plan to. But it certainly makes you a little more agile, I think, with responding to people's requests for features and things like that. I mean, if I had to go in and add, y'know, five new unit tests for this feature, y'know, would I really get it done in the same amount of time. And again, I gotta to be careful here, cause I'm by no m... I'd love... Testing is a very, very good thing. I just think it's a question of limited resources on a small team and where you apply them. And I certainly look forward, like, Jarrod, where would you like to see, give me some examples of... I can think of some examples of stuff I would like to add testing around. But, give me some examples of things you would like to add unit tests around.
Dixon: Well basically, like, around the badges, y'know, whenever certain criteria are met where you receive a new badge, we should actually have a unit test that would first the criteria to a user and run the badges, y'know, the function that grants badges and see if that badges are actually granted. That's one area that we could have. Around messages, when you get new badges, or when system messages occur. Editing, when revisions should happen. But we do have them on a lot of a core functionality, we do, like creating a question and answer, a new user, we do have good unit tests there, so, it's more bells 'n whistles of the site, that's where we need some more tests.
Atwood: Geoff, what about you? I mean, have you done a lot of unit testing on your previous projects, cause I know one thing you mentioned to, which I thought was very funny, by the way, and deserves to be repeated is that when working with us it's like "Wow! You guys actually know what you're doing!" [Laughter] I guess you worked with some unsophisticated clients.
Dalgas: Oh, yeah, oh, yeah. It seems that this is, this is really the first project I've seen where it has some structure, some well formed organization. I mean it's a tribute to the, obviously, team we have. It's great working with you guys. But, yeah, previous projects, where I go into a corporate environment, those are hardly ever thought of, at least in the places I have worked, and of course they're not developing mission critical type of applications, but even it seems when they are, they're just... there are a lot of weaknesses around testing.
Atwood: They're just, pretty much just randomly typing on the keyboard...?[Laughter]
Dalgas: Yeah, yeah. So, it's nice to see a good framework around what we have now. It's good.
Atwood: Right. Great. So, I definitely wanted to cover testing, so, that's good. So, lets see here. 
"What was the biggest single technical challenge you had to overcome?"
This is from Michael. He is one of the biggest StackOverflow users actually. So I want to answer his question. Hum ...
Dixon: How did he get so much reputation ?
Atwood: He is asking questions and providing good answers. It's all.... Remember, reputation is all about other people voting your stuff up.
Dixon: That's right, Wow.
Atwood: So coming back to his question, Jarrod what would you say was the biggest hurdle on the project so far ?
Dixon: I'm gonna have to stick with the build, I mean that has been probably the most frustrating aspect. You know, just working with MS Build, trying to get certain things working on the server, they work perfectly locally but then trying to get them to work on the server that doesn't have everything installed, like a full blown Visual Studio installed. I think that Microsoft is actually, for the next version, they're actually going to try to make it so that MS Build can be stand alone and can run unit tests and can do database deployments, I'd say that right now that's given me the most heartache and angst it's just getting automated builds up and running correctly.
Atwood: Right, actually in my previous job I would talk a lot about Team System and Build is a big part of Team System, and I used to realize that Build Engineering is almost like a full time job, I mean it is like almost, depending on the size of your team you want somebody that it's almost all they do, is think about like "how do we make the build?", "what should the build do?", "where should the build servers be?" There is a lot of engineering that goes into the build and it is legitimate software engineering it's not dummy grunt work, it's real software development. ?So I totally concur there.? And it's so important, right--I mean what do we use everyday? We check in it goes to the build and the build ... This is a core part of the development process; it's hugely important.
Dixon: Yeah and mad props to Dalgas for getting Cruise Control up and running, he said something about Cruise Control and I thought it was something for pay, like you had to buy it or something. I did not even know it was open source and it is an excellent product. And I am amazed at everything it can do! I could even get rid of some of the MSBuild tasks in favor of just using Cruise Control tasks, so that was really nice. 
Atwood: So I think build you would point out as the biggest challenge. What about you Geoff? Because you came in a little bit later, what would you view as the biggest challenge?
Dalgas: This was kinda a personal endeavour for me, because there's a few technology stacks that I had never worked in before. ?One being MVC obviously which is just now kinda hitting mainstream. ?Or it's been around now? -- what are we on, preview 3 now?
Atwood: They have a preview 4 but it's not as official as 3.
Dalgas: Yeah, so currently using 3.? So there was that learning curve.? Picking up the new concepts of using models, views, and controllers.? Along with using LINQ.? It's really my first endeavor into LINQ as well.? It's kind of a new paradigm for me.? It's one I really embrace and really enjoyed getting to learn, but all three of those new technologies right out of the gate was probably one of the more challenging, and again, more rewarding experiences for me. 
Atwood: Right, so you would say the three would be LINQ, MVC, and ... what?? What is the third one.? 
Dalgas: Uh, I don't know.? Being awesome? (laughs)
Atwood: Working with losers.? That would be the third one.
Dalgas: Yeah. (laughs)
Atwood: But I concur, and my answer would be a little like Geoff's, in that I had a vision of what this would be, but I felt pretty strongly that I was just kinda fed up with the whole Web Forms model; I had done several apps with Web Forms before in ASP.net and I just felt "there has to be a better way".? And I have been pretty pleased with MVC; there was a little bit of a learning curve, but I think I know it pretty well now.? But I think the bigger learning curve, honestly, is around LINQ.? I'm still... struggling... I think you guys have done a better job than I have.. these guys will go in and I will write a bunch of crappy SQL and they will be like "oh, you can just do it in LINQ" and they will just magically turn it into LINQ and I will be like "oh, that's how you do it".? It's been a challenge to kinda convert that, and I think the principle of least resistance, like I know SQL very well, so it's really tempting for me to just go in and do everything in SQL, but on the other hand, for really simple queries, the LINQ is not hard, so its actually simpler to do it in LINQ because you can get your intellisense and just start typing.? So I have been really pleased with our technology choices.? I know there have been some criticism in some corners like, "why did you pick all this crazy experimental stuff for stackoverflow.? Why didn't you use proven technologies?"? What are we going to use?? COBOL? Punch cards?? [All Laugh]? Part of the fun of developing is picking things that are a little bit on the cutting edge.? I mean if you were really on the cutting edge you would be using Scala or Ruby, or something crazy like that.? So I don't really view these choices as really that controversial.? We are still in the Microsoft stack, we are still using Visual Studio, and it's kinda fun to be a little bit on the cutting edge.? Even though it can be a painful, but certainly we have run into some edge conditions with LINQ and MVC that were a little weird we have gotten past all of them.
Dixon: The interesting thing to me is it seems with this new MVC that Microsoft has done a lot of work putting together the Web Forms technology where you're really abstracted away from the - what really takes place behind the scenes, where in MVC you're writing the nuts and bolts of it, your URLs mean things; you can watch the code path, there's not this magic of view state that just happens for you, automatically You have to really pay attention to what's going on. So, it's good.
Atwood: Yeah, I agree and I think that LINQ is fantastic, I much prefer LINQ to any other Object-Relational mapper that I've used in terms of it's simplicity and in being linked to the language.? MVC as well, I think MVC, once you get it, seems so logical, like "Why weren't we all doing it this way?"? Also, I want to comment that Guy left this comment: "How are we going to stop Michael from hitting a bazillion rep points by the end of the month?"? I don't know.? We're going to have to code in like a limiter so that he doesn't get billion points by then.
Dixon: Let's make a special badge for billion?? I don't know.
Atwood: So somebody's asking about surprises, things that happened that you did not anticipate. ?And I think to me one of the most gratifying things about StackOverflow is it has played out fairly close to the way I hoped it would, in that people are using it for good not evil. ?One thing that has surprised me is early on we talked about one of the key things about a system like this because it's so low friction anybody can come in and leave comments we don't have this huge login barrier behind 20 walls of iron doors that slam closed how do you deal with spam, right? So from the very first day we'll have an offensive link we didn't know what to call it we went back and forth on a couple different names, but like a flag that people applied that said this stuff is evil, we might as well just call it evil right, evil!? This is evil. ?And then if enough people mark something as evil, then it would disappear, poof!? Like if magical fairy dust had been applied to it or whatever, like "I'm melting," like holy water was poured on it or something. And what really surprised me that people were using, we called it offensive, Jarrod what did we call it first, like something else.
Dixon: It's... I don't remember.? We started with "offensive", but you changed it to something else.? It didn't have quite the power of "offensive"; it was kinda like fluffy.
Atwood: Right, and what surprises me is, people are using it on things which are clearly not "evil".? So either our messaging is bad, around what this function is for, or people just like tagging other people's stuff "evil".? And there is actually some user unrest around this, and I think understandably so, because people don't really like their stuff to be tagged "evil" when it's clearly not "evil".? My thing about the "evil" tag is, maybe the reason "offensive" isn't working too well, is because the system is like a bio-dome, we're too protected from the outside world at the moment, all we have is people who know what they're doing in here, and good people.? So hopefully--well not hopefully but--sadly, maybe once people come from the outside, you'll see more "evil", people try to really game the system.? But that is what the function is for, I would say that has been the most surprising thing to me, is that users are willing to tag other people's stuff with "offensive".
[42:01]Because I wouldn't ... I mean it wouldn't have even occurred to me to do that. Because, you're supposed to ... there's two axis here. One is 'up vote, down vote'. And the other is the evil axis. Right? And these are very independent things. And you would think if you disagreed with something or think it's stupid or dumb or you just hate that person, fine, whatever, just down vote it. Right? And another adjustment we made was that 'down votes' used to be worth, uh, -5 to a person's rep. That went down to -2. And then finally -2 to the receiver and -1 to you (laughs) to really discourage people from doing this just blindly, um, and down voting people's stuff. And that seems to be working well. I've been pleased with the use of voting so far. But what about you guys? What have you found surprising? Like, Jarrod, what have you found surprising about the way people have used StackOverflow?
Dixon: Well, I guess in in hindsight. It really wasn't ... well, just exactly what you said ... it really, but, in hindsight, it wasn't surprising that people would, you know, tag other people's posts as offensive or down vote. Simply. But it was, it was really the users that had you know, accrued the most reputation that were being targeted. You know, in sort of like a petty competition. You know how, some users were jealous of all the rep that certain users had.
Atwood: Well, okay, we do have to clarify a little, because this is partially Leon Bambrick's fault—and I have no problem calling him out by name.? He intentionally—and I know Leon, I mean I've never met him but I know him through his blog and I feel like I know him, so he's kind of a "friend" —I think he was just playing with the system and trying to see what would happen if he did this, and he went around and actually downvoted other people's stuff to try to get ahead of them in reputation as sort of a game, and I think he was also tagging people's stuff "offensive."? In a way, this is good.? This is what the beta's about, right?? If everybody follows all the rules and doesn't do anything weird, then it's not a very good beta.? So I encourage this.? I think this is good.? But one downside of that was that I think certain people got really upset about that behavior, and I think Leon should have been more clear that, "hey, I'm testing the system," or whatever.? Just to give some background to what you're saying there.? So I think there was one specific person and one specific event… [laughter] … that triggered some of this.? And I want to put some of that blame on Leon's doorstep.? But go ahead.[43:15]
Dixon: Right, well I'm sure that, you know, once, everything, you know, we go, fully public, that that would, happen anyway.Atwood: Oh totally, I mean I agree and that's why it's good ultimately to have it happen I just wish he had been more open about the background of what he was doing, that's all.Dixon: I guess, ah, another surprising aspect is the performance of the site. I've been very pleased with um, I mean, granted we don't have a lot of data and we don't really have that many users, but, you know, the, the server is holding up pretty well, you know, with everything that we're doing.Atwood: Right.Dixon: I'm very pleased with LINQ, you know, the, the queries that LINQ generates, you know um, LINQ to SQL has, has been very, a pleasant surprise, you know, just how well it's performing.Atwood: Right. Right, we also had a question, and this might answer that question, it's like "You guys went with a WISA stack (Windows, IIS, SQL, ASP.NET). ?Do you think WISA will scale?" And I think, actually, compared to LAMP, and I think the funny thing here is, Windows scales like crazy!? I don't know why it gets a bad rap, because honestly, if we had built this in PHP I can tell you first hand PHP is a dog for performance. [laughs]? I mean there are ways to get around it and I don't want to offend anybody that writes PHP, but PHP is an interpreted language, right, I mean you can add some stuff onto it, like bolt-on these compiler things and stuff, but it is not a very high-performing stack dude, I mean, like, our stack, ah because it's compiled and you know, it's been through three iterations so far. I mean, our, we have a ok so, our server box is 8 CPUs. I, I don't think I've, it's rare we see any spike at all, even with all the users we have now and granted, we have a limited set of users etcetera etcetera but, I mean, but I don't think you can measure our load, at the moment, and, and we're not totally optimal either, I mean we're doing things that I think could be further optimized, so we're very much in a, a mode where we're giving up performance and it doesn't matter. So I want to say that: gosh, for Windows and ASP.NET you're going to get really high performing stack, I think much better than a LAMP stack actually. On, on, coz, if you look at Facebook and well, granted Facebook is a ridiculous example because they have like a billion servers but their scaling model and I also talked to Ted Dziuba of PressFlip and they, they used Amazons' ah, EC, like server-cloud stuff, and they have like 12 servers to do their stuff, and we're doing everything on one server and granted, I, I don't know that we'll offer scale to those levels, but I don't, it's going to take us a while to outgrow even this one server I think based on what I've seen so far, so, anyway, I want to give a shout out there. What about you Geoff, what have you been surprised about with the way people have been using the site or anything like that?
Dalgas : Well, I've actually kind of been watching the more social aspect of the site. And this is kind of one of those endeavors into a social realm where we're hitting people that are really smart really talented developers. But, just, I'm kind of, I'm interested in what they're, what they're asking as far as questions and what answers they're giving and how this reputation system's being played out, um, it's really interesting to me to see how, how people will be motivated by this. I thought before, that, well, what's the point? You know? Badges and points, it just doesn't make a whole lot of sense, so what? But, as I see more and more people get into this, they're really, they're really motivating the use of this site. And that to me is very interesting, very fascinating.Atwood: Right. And, well, I think that's great, too,? because, the reason, all this stuff is there for a reason. Nothing on StackOverflow is there because, 'Oh, I thought it would be fun to have some stupid feature that is fun'. I mean, we actually put a lot of thought into how we build the site. And, Jarrod being involved earlier on and Joel as well. I mean, we went through several cycles with Joel, with Jarrod, um, and Jarrod, Jarrod and I spent, what was it? Like two weeks? Just like looking at all the 'Q&A' sites on the Internet, like all, all, the one, we signed up for all of 'em.
Dixon: I now consider myself, dumber for having done that.
Atwood: It's a running joke that Yahoo answers is just kinda a black hole of, of stupidity honestly.
Dixon: How do I get my baby's daddy to pay?
Atwood: Yeah, that's the classic.? Then in some email newsletter, they sent out recently their, their featured question was like "I don't read and write too good, how do I get edumacated?"? Pretty much.
Dixon: Yeah.
Atwood: So, and I think what works for us on StackOverflow is one, programmers.? Programmers, and I know I'm preaching to the choir here. Programmers are smarter than the average person I think, because you have to be, because it's a really difficult field, because everything goes wrong all the time. Anyway, I do believe that programmers are cut from a slightly better cloth then the average person, the good programmers and I think Joel and I, having large audiences of very good programmers, again that honeymoon, honeymoon phase we enjoy the benefits of having a really talented audience basically.? And the site is about those people showing off how good they are and sharing that with, with the other developers so they can become better.? So it's very much to be a virtuous cycle, that we get into here.? Um and, and hopefully that will continue.? Going back to the answers thing as the audience gets wider and wider, does it get dumbed down?? I don't know.? Um, my hope is that StackOverflow will attract, the really good developers who are interested in sharing, um and letting other developers get better, through, through posts and questions and answers in a very low friction way that's easy.
So, Alan Le, who I used to work with at Vertigo, had a question. He's asking about the API for StackOverflow. I think it's too early to think about APIs at the moment. Certainly RSS is huge on our feature list. I think it's the next thing Geoff is gonna work on. Getting a feed of stuff that's coming in and your stuff and all that. So, I think for now, when you say API, think RSS for now, I know it's not really an API, but I'm gonna pretend like that answers the question. Then Alan asked how are we dealing with mischievous, he says "mischievous," users, spammers, griefers, marketers, etc. So, we talked earlier about the "offensive" link, which, that's really what that's about. And that's what that's supposed to be used for. So, hopefully people will use that. Also, we are gonna implement a CAPTCHA, that's another thing Geoff is working on. We're gonna have a jQuery JavaScript CAPTCHA, just sort of a basically force whoever is sending request to us to use JavaScript, and we're still debating the fall-back path, cause it is possible to use StackOverflow with JavaScript disabled. It's not a great experience, but it does work. And it's really tricky to come up with a CAPTCHA that works well with JavaScript disabled, that's not annoying to you. So, we're still debating that internally. So, my hope is... Oh and, then the third tier, that... I think, Jarrod, this is on your plate still: throttling. Like, I believe throttling is really central to any "mischievous" user, or evil users. Throttling is huge. If you can throttle people from doing N actions per minute, that disabuses you of so many possible problems. So, the beta is gonna run, I think,? for the full month of August, and by the time we come out of beta, I wanna be hardened, I'm gonna use security word "hardened", where there is not much you can do to us. Barring, like some international distributed denial of service. There's always something. I'm not gonna come out and say...
Someone: [through laughter] You don't wanna dare.
Atwood: I'm not daring anyone to attack us, cause I don't want you to want to attack us. All I want is, and I think this has come up too, we will not tolerate abusive users. I wanna be very a 100%, 1000% clear on that. If there are members of our community that are abusive, we will ban them, we will block them, we're gonna do all the things, and hopefully again, you guys will be able some of this, right? Like, you're not gonna have to call a moderator. You yourselves will be able to do this. One thing I've thought about, and we may have to end up doing, is, I think there should be ways you can vote against a user, right? Cause if you look at... Achievements are modeled on Xbox 360. One thing you can also do on Xbox 360 is you can essentially vote on a person. Like, say you are in a multiplayer game and somebody griefs you and does a bunch of stuff. You then vote against that person. So, I think we might need basically an "offensive" flag that you're gonna apply to users account. That's a little bit off in the distance, but again the goal is for people participating in this site to run it to some pretty high degree with very minimal moderator input, because moderators? don't scale, but the community does. So, that's pretty much my thought on that.
So, did you guys have anything, any particular questions you wanted to get to. I know, here's a funny one for you, Jarrod: "What is Jarrod looking at, and why is it making in so happy?" in the picture that I posted on the blog. 
Dixon: [laughs]
Atwood: That's my fault. I told you to look maje..., I think the world I used was majestic. I was like "Jarrod, look majestic!". So, I was taunting. 
Dixon: That was great, what's that called, Lookout hill, Lookout point? What's the name of that?
Atwood: Oh gosh, some point, some place in San Francisco, some tourist...
Dixon: ...and I was so amazed at how chilly it was there in San Francisco
Atwood: Dude, it is freezing here. It's almost May. It gets really really cold in San Francisco. If you ever travel to San Francisco, bring like your heavy jacket. I know you may feel ridiculous, but you'll probably need it, and you always have that conversation with people that are visiting "Bring you heavy jacket, even though it's the middle of summer". So, Jarrod, any other questions you wanna get to?
Dixon: One thing I wanted to... well, I wanted to say what a pleasure it's been working with ASP.NET MVC. I mean, I was so fed up with the Web Forms, y'know, having to deal with that. Some of the last projects I've been working on, I was actually writing HTTP handlers, just to render out the straight HTML, just so I wouldn't have to deal with all those stuff that goes along with Web Forms. And it's been such a pleasure, I guess... Is it Phil Haack, he's the project lead on that?
Atwood: He's one of... there's like twenty people involved.
Dixon: Big shout out to him and his team. So, it's been wonderful, I really enjoy, especially the changes they made from preview 2 to 3. Like, the controller actions returning an action result. That's been great, and it's been so great for doing AJAX, so now our controller actions, they can just easily render JSON back to the browser, they don't have to go through like any, intermediary steps, intermediate steps. So, just, that's what I wanted to say... I've been hoping we get a question about MVC.? It's great.
Atwood: Yeah, I agree completely. MVC maps much better to my mental model of how I want web stuff to work by far. It's not even close. To me it makes Web Forms totally obsolete, to the point I don't wanna touch it any more.
What about you Geoff? Any final questions you wanna get to?
Dalgas: To kinda put a step on top of that, RSS feeds are gonna be basically just another View on top of the... on the Models, Views and Controllers. So, that's gonna be an easy task because of MVC.
Atwood: Oh, Geoff, you always say it's gonna be easy.
Dalgas: It's beautiful. Simple. Just simple.
Atwood: So, Geoff, any last questions you wanna get to? Anything we didn't cover? Comments you wanna make?
Dalgas: Umm, let's see. No, I'm just really pleased to see the developer turnout for this, and continue on a...y'know, wanna have them keep on keeping on. There's a lot of questions here, I really wanted to know the answer to, and I never asked it. And so, I'm learning a lot of things, just by reading question here. It's been great.
Atwood: One question that was funny, kinda funny "How do we come to a consensus on decisions? Is it a democracy?" And these guys are laughing, cause they know, it's, I pretend that it's a democracy,? I pretend to listen to their feelings and thoughts and then I overrule them with, y'know, impunity...? "This is how we will..."
Dalgas: Then I go and cry, I go sob in the corner... 
Atwood: It is probably a little like... I know, I apologize, but I do... I can be convinced. I think it's the whole "strong opinions, weakly held" thing. Like, I pick a direction "No, we're gonna go this way", but you can really... you can talk me out of that, but you have to, like, convince me, you have to convince me, you have to talk me out of that and make me believe. You have to make me believe what you're saying is the better choice. But, it does happen. I don't wanna sound like a total jerk, or anything [laughs]
Dalgas: To have to justify why you're making a choice, verbally or technically or whatever, is actually really good exercise to go through. If people don't challenge you, then why are doing that you're doing?
Atwood: Oh, yeah. Great. I do want people to challenge me. I enjoy working with people that are like "Y'know, Jeff, I think this is really the wrong way, I think this is not a good solution, and step up a little bit and take a different direction." And defend it! I think it's great. I like that style of communication, and I think, obviously, I tend to pick people that are comfortable with that style of interaction over time. 
And, then so, as we get closer to the end of the podcast here, I just have a final note to say how, I know people joke that it's called CrackOverflow. It's been really addictive for me to, like, work on the project now. As people start to use it more, like, I wanna work on it more. I feel like, as you put changes into production and stuff, you're impacting all the people that are using it, and you're satisfying their requests, and making it better, and growing an improved site. And, it's actually, hurting my other, my CodingHorror blog a little, because I'm actually really enjoying working on StackOverflow with Geoff and Jarrod. I'm a little bit addicted... if you guys are addicted to using it, I'm kinda addicted to building it, a little bit, and that's really all I have to say about that. 
So, any final comments, you two guys, before we cut off the podcast here?
Dixon: No.
Dalgas: No. We can continue on...
Atwood: Speaking of continuing on, one of my goals... people ask about money and stuff. One of my big goals for money on this project is - I would love to make enough with StackOverflow to pay Geoff and Jarrod, so that they could legitimately work on this as a job. I would love that. So when you look at the site thinking "Jeff's gonna get a gold plated Hummer", I mean, I might get a gold plate[laughter]... but really, what I would like to do more than anything else is to be able to pay Geoff and Jarrod to work on the site, part time if not full time. I would love that, that would be wonderful, that's one of my major goals for this thing to be sustainable, and to grow it, and to have people that are attached to it, that love it, and care for it, and are into the community, right, and part of the community as well. So that's one of my long term goals for the site.
I would like to say thanks to Jarrod and Geoff for participating. I know it them puts on the spot a little bit, but hopefully you guys enjoyed this, people asked for it.
Dixon: Yeah, man.
Atwood: And I know I enjoyed it, and, y'know, maybe we'll do this again sometime in the future.
Dalgas: Was it good for you, Jeff?
Atwood: It was very good. So, thanks to everybody for listening. I do wanna cover... we do have a wiki of transcriptions of this podcasts, and if you participate in the wiki, and do like say one or two minutes of transcription, I will bump you in the beta list tonight. Cause, right now we have a backlog of about three thousand people, and I'm sending like hundred and fifty per night, so if you wanna get in on the beta like today or tomorrow or whenever you're hearing this, do a little bit of transcription work and then email me directly. And that's at stackoverflow.fogbugz.com. And then for future podcasts, as we always say, email your audio questions to podcast@stackoverflow.com if you want to answer them in future, and I think that's it. Thanks everybody for listening, and thanks Geoff and Jarrod for doing this. 
Dalgas: Thank you guys.
Dixon: Thank you.
Atwood: Alright. Goodbye.
[1:00:30]Outro, Advertising
Ads, intro
[1:00]
Atwood: Hi, Joel.
Spolsky:?Hey, it's Jeff.
Atwood:?Yes, you're back.
Pryor:?You're back.
Atwood:?Oh, and Michael's on the line, nice.
Pryor: Yes, it's me.
Spolsky: Today we got two Fog Creekians, for those of you who don't know Michael Pryor is the co-founder of fog creek software, and...
Atwood:?Yes, well welcome to the call, it's good to finally meet you.
Pryor: Thank you. ?Are you going to the business of software conference?
Atwood: I am not.?
Pryor:?Oh [disappointedly], I thought you were.
Atwood: No, I'm not in the business of software.
Spolsky: We should get you as a speaker next year.
Atwood: [laughter], Ha ha ha. ?Well, I'm gonna have to start my own conference, man, and I'm gonna compete with you... Like right across the street from where your conference is, that'll be my conference. ?Be like the business of software by Jeff.
Spolsky: It could be like the business of software camp.
Atwood: Yes, that's right. ?A competing conference.
Spolsky: So we've got a big week today, 'cause I've been away for weeks and weeks.?
Atwood: Yes. ?How was your trip by the way?
Spolsky: Well there were two trips involved. ? The first trip was... The first week I couldn't do it because I had to go up to Boston to talk to the Y-Combinator startups and tell them how venture capital was bad and that Paul Graham was setting them on a course of self-destruction and conflict with venture capitalists, which is something that he always likes me to talk about. ?And uh, uh, the last week was just my vacation. ?I was off in Israel where it is hot.
Atwood: Right, you mentioned that.
Spolsky: But, I do want to say that the Opera Mini is an excellent browser for looking at StackOverflow.
Atwood:?Well good. ?What kind of success did you have browsing StackOverflow with Opera Mini?
Spolsky: Uh, well first of all it worked great. Well, I guess the main thing I want to say, and this is sort of initial feedback, is that I am shocked how good StackOverflow is.?
Atwood: Well that's good to hear. I was curious, I was actually dying to talk to you this whole time because I was curious. ?We were just never able to schedule a face to, not even face to face, a phone a call for you to look at the site and give me your initial feedback. ?Literally you guys are hearing the first thing I've ever heard from Joel, specifically directly on StackOverflow, the actual site.
Pryor: I heard him exclaim, he said it was awesome.
Spolsky: It really is. ?I mean, the first thing I noticed is that like the minute that you open it up, people sort of floated in and started asking questions, and they were getting answers, like right away. ?Even with a very small number, you know, even with a very small community of people.?
Atwood: Right.
Spolsky: And uh, so that was pretty awesome. ?That was a sign that it was going to work, really. ?But then you know I asked two questions, and the first one I got an answer in 30 minutes and the second one you had answered an hour previously, coincidentally, [laughter] and the search worked great, so as soon as I typed the subject, and hit tab, it found the answer to my question.?
Atwood:?Cool.
Spolsky: It's really amazing. ?I was trying to make.. What was I trying to do? I was trying to make, oh, one of those [uh], oh, I needed a regex for a URL, that excluded trailing punctuation. ?
Atwood:?Uh huh.
Spolsky: Is that the one you answered? Everybody knows about that problem right? You're trying to make regular expression for a URL, and dots and commas and question marks are all legitimate and common in URLs, but if you're trying to take some text that somebody typed, and make the URLs into hyperlinks, they will often write a URL and then a period or a question mark or a comma, that they didn't mean to be a part of URL.
Atwood:?Right. ?Well actually to be fair, I copied that. ?I used a great tool, RegexBuddy, which I still think is by far the best tool on the market. ?And it has a library of common functions.
Spolsky: Oh so this is actually a tool not a web site?
Atwood: Well, RegexBuddy is a tool, and it has a corresponding website. ?If you do a search on regular expressions it has pretty much the highest page rank of all the sites on just regex information, and for good reason.? This guy pretty much kinda wrote the book on, I mean he wrote his own regex parser because it can... ?There's differences in the flavors of regular expressions on different platforms. ?This is an engine that's flexible enough that it can actually emulate other libraries.?
Spolsky: [laughter]. ?So it's like. ?It reminds me of Borland when they wrote Turbo Assembler, there was a command-line argument that that emulated the bugs from Microsoft Macro Assembler.
Atwood: Right [laughter]
[5:18]
Atwood: And some of them are pretty common, like in JavaScript regex for example you can't do backwards references, like backwards matching. ?When looking for things that precede the match you can't really do that.
Spolsky: Oh. ?
Atwood: For example. ?I mean there's all these little quirky little differences. ?I mean the core functions are all the same in most JavaScript libraries. ?
Spolsky: I have to say, once you get to anything more complicated than, like, you know, "Is this a number?" kind of regex, it always looks to me like... ?I don't even want to say a?hieroglyphics. ?It looks to me like a puzzle, like one of those puzzles you find in the back of Make magazine.
Atwood: I've been, since I'm at home a lot more, I've been trying to explain to my wife Betsy, just show her some of the things we're working on. ?And it's interesting because she really loves puzzles, she does crosswords and all these kind of puzzle things and I have no patience for puzzles like that, but a regex, or coding stuff--
Pryor: I need a puzzle.
Atwood: That's right, you're a puzzler. ?You're a puzzle guy.
Pryor: Yeah, I have to write an article like today, so if you have any good puzzles tell me.
Atwood: But to me a regex, a regex to me is a puzzle that's actually fascinating. ?Not to an absurd degree, I don't want to create something that's actually hard for other programmers to maintain.
Spolsky: Oh, but it always is. ?It's like those Guardian cryptic crossword puzzles.
Atwood: It can be. ?I mean it's definitely a trade-off there, but I think you made the same argument about like lisp for example where it just looks like this?indecipherable?jumble of parens, you know? But to some people that's fascinating, and they really enjoy that, and there's sort of a puzzle factor to code that I think there's an interesting cross-over there. ?But I'm glad you got an answer to your question. And I did see that you posted.
Spolsky: Yeah, um, I posted, not on that one, I asked a question on something else I think. ?I thought I would go in and answer a bunch of questions but they were all too hard for me.
Atwood: [laughter]
Spolsky: I don't know any of the answers.
Atwood:?Yeah, the community has been great. ?I think it's really a testament to how the quality of the audience we've been attracting, you know, it's about them really, it's about them having a place to go to do stuff that's, you know, it's easy and it's fast and it's simple and clean.
Spolsky: Yeah.
Atwood: It's really a very simple proposition to me, that we're doing.
Spolsky: Yeah really, this is going to sound, and our listeners are going to think we're the most self-self-smug-self-satisfied people that have ever blessed the world, but I mean it really is clean and it works, and it's so simple and clean, and works. ?I dunno. ?It looks clean, it doesn't have, uhh... Maybe that's just like every new website starts out looks clean and there's all these people always trying to think [good?] things.
Pryor: I have a question about StackOverflow, Jeff, for you. ?So, when I was playing around with it, and I know there's already a topic about this, but, what are you planning to do for the discussion versus answer issue when somebody's like coming on and they start having a discussion and it's not clear the?chronology?about the discussion and it screws up the... You know what I'm talking about, right?
Spolsky: The discussion gets all chopped up because the voting.
Atwood: Yeah, well I think the central problem is, and it was a little disconcerting, it's partially understandable because [sigh], it's a new site so people are trying to figure out how it works, but it was a little disconcerting that the first week, almost the highest number number of tags, as high as any other topic in the system, was the system itself. ?So, I was a little disturbed that we've built a system for discussing the system, you know?
Spolsky: [Laughter] That'll, well that'll wear off.
Atwood: Yeah, that'll wear off, that's my hope that that will all wear off as I actually need to codify a lot of that stuff in the FAQ, and the reason I haven't is honestly that I've been changing the rules about how stuff works, like pretty rapidly as people start doing things. ?But one of the core issues that does come up a lot -- and Joel, I know you and I talked about this a lot when we were setting up, initially talking about doing anything like this -- was: This is not?necessarily?a place for programmers to just come discuss random topics. It's supposed to be focused around questions. And when I say questions, and when I say questions, I mean a question that actually has some kind of objective answer. ?Not, you know, what's your favorite? Like here's one I saw: "What's your favorite RSS feed on Java? What's your favorite Java blog?"? I mean, this isn't really a question that can be objectively answered. ?I mean, it's an okay question, but it's technically not what we built the system to do.
Spolsky: Well you know, umm, that would work... That particular question would work well if everybody answered with one particular answer, and they just voted, and then it becomes a vote on you know the favorite Java RSS feeds.
Atwood: Some of them can work, but there's even more discussy type topics coming up, and I think the less focused the question is, the more you're going to have this intra-answer discussion, that I think people kind of get confused and understandably, because you're having all these - there should be only one conversation that matters. To me it's kind of like, this is where StackOverflow is kind of like my blog. When I post a blog entry you are going to discuss my blog entry, not because I am the most important person in the world, but because that is the topic at hand that's the thing we are discussing that's why you came there, right in the first place, was: "oh here's a topic that I'm kind of interested in, interested enough to leave a comment." Now, it's true that even in a long focused blog entry you'll get people that are discussing amongst themselves, but if it becomes really dominant then, you know that's where I think the problem is where you have a blog post topic or a question if you will, that's just not focused enough for people to really directly address it.
[10:55]
Pryor: Well, you... you end up with a lot of cruft on your... on your blog post then at the bottom, you know. So, like it... like, it's hard to keep people from discussing these things. I don't know if you're gonna change the system so that it prevents people from... Like, it sounds like you're saying the system isn't designed really for that type of thing - that's not what you made it for - but the people are gonna discuss regardless. You know what I mean? They're going in there and they're doing it now. And there's no sort of outlet to keep that discussion somewhere else so it's not cluttering up... Like if you're a person who's just come and you're like, "How does this work?", you know you can read the FAQ but even if you come in you're just gonna starting talking about things.
Spolsky: What I've seen... [interruption]... happen is somebody asked the question and you need a bit of clarification and the obvious thing to do is put in the answer. You know, could you clarify it? Or sometimes you'll see somebody will provide half of an answer and somebody else will say, "Well, you know, that's not right because such and such" and, um, it might be... I mean one possibility might be to move that into the talk. Another possibility, you know like have a separate talk page for every question where you can carry on any kind of discussion you want about the answering of the question. Or another thing is, I think just over time people will develop standards where they just learn to edit things rather than to discuss, where they realise that if they try to have a conversation that their answer...
Pryor: You can't edit things, though. That... that, like that's... that's like I asked a question I had, like I had a couple different answers. Yeah, you have to get to a certain point. But like, when the new people come that don't really understand how it works, it's even worse because they're the ones that are going to be talking because they can't go and edit something, so there's a small critique or a small change that they want to make in the answer, they can't really do it for a while. Like, I still can't do it and, I mean, I don't, I... I haven't used it that much but I don't know if, [um]...
[12:44]
Spolsky: Yeah, how many, [uh]... how many karmas do you need before you're allowed to edit stuff?
Atwood: Well, by "stuff"... really, you can edit your own stuff immediately as soon as you associated an OpenID with your account so we can actually tell who you are.
Spolsky: Because I was thinking it totally made sense to me when it said you need to earn a certain amount of karma to edit other people's posts or to change the tags on them. [um] But then it also occurred to me that there's going to be a lot of people that want to make, like their first dipping of their toes in the pool, so to speak, maybe just to make little syntax corrections or grammatical corrections or just slightly, you know to reorganise things. Like, they may not have that much to contribute in terms of answers and questions but they just see something spelled wrong or they know a slight improvement that they can make to a particular question or they notice a tag that was wrong and therefore it's not coming up in the right place and they want to make those corrections. Like, I know that... you know for me probably I've made hundreds of corrections in Wikipedia where I'll just see a spelling mistake and I'll go correct it. And there's also only one real article I've contributed to.
[13:42]
Atwood: Right. Yeah, I think that's where... okay, so I think the issue we get into is we're sort of in a weird, somewhat unique place that we're, we're building what is essentially a hybrid of a discussion board type system which is what it looks like at first glance, [uh] and a wiki-type system where once you get to a certain level? of reputation, once the system learns to trust you a little bit you can edit literally anything. [Um], you can't delete stuff; we do draw the line there because deleting is like making things disappear... just disappearing things, which I think is a totally different concept. But revisions are always visible, so any time something is edited we do have full revision support in now. We have... and [uh] Jarrod checked in our rollback support as well.
[14:25]
Spolsky: Oh.? So once that's there, it doesn't hurt to let anyone edit anything.
Atwood: Yeah.? I mean we could reduce the bar.? I'm a little worried though, because it does require people who, somebody to be watching all the edits.? Right.? That's where I get a little nervous about that.
Spolsky: That's true.? Wikipedia has lots of people watching everything.
Atwood: Yeah.? I don't think there's going to be quite as many people watching our stuff, cause the questions are so focused and so tiny.? So, I think you'll have to invest.? The current thresholds are: you need 750 reputation to edit tags, to just retag things.? And then 2000 to edit anybody's anything.
Pryor: Oh geez.? I'm never going to do it.? I'm never going to make it.? I'm at like 80.? I'm like looking for questions I can answer, and I'm just like coming up blanks.? All the unanswered questions are really hard.
Spolsky: That's, so that's a problem, Jeff.? Cause, like?Michael would be able to, or even me, like I don't have that many points.? I think you might have done something magical on the backend to let me be able to edit things.
[Garble]
Atwood: And Michael I could do the same thing for you cause you are technically a founder, so.
Pryor:?But, don't.? Cause then I won't be experiencing it like a new person would.
Spolsky: But I mean a lot of times I'll go into a question and I won't have anything to, that I want answered myself.? Like, let's say that question where I was trying to find out that URL thingamajiggy, and you put an answer there that was just here, use this string, and I had to then?go kinda?research it, because you had a backslash B at the beginning there, and I didn't know what backslash B did in a regex, so I went and looked up what backslash B did and I was thinking you know I could go and edit this now and say that backslash B is a word boundary, it does such and such.? And then that would make that little answer just that much better.
Atwood: Right.
Spolsky: And that's?a contribution I could make really early on in my stackoverflow career.? So I don't know, I?have a suspicion that, I kinda suspect that maybe we want to kind of err in favor of more editing so that the, it's really a question of like?how to make old questions get better and better and better and always be up to date.? And part of making them better might even be taking you know three or four answers and combining them into one meta answer that really covers all the topics very elegantly.? And I want to sort of?see more of that than just people adding on their own tags saying you know Michael you got that wrong, it's?actually 27, not 36.
[16:51]
Pryor: Right, but there's not, right now there's no way to do that because you can't, those people can't, like I asked a question about the best way to loop over a record set in C#. It was just like a generic question I thought somebody could... and somebody posted a good answer, and then somebody posted another good answer which was different, and then somebody posted an answer using LINQ, and I was like, OK, these are all good and all three should be part of the answer but I can't go in and edit it and... I mean, I guess it's not, like I'm not going to be able to do that for a long time because I'm only at 82.[17:22]
Spolsky: And that particular question, like how to iterate over a recordset in C# is... first of all I mean it's excellently phrased, like you can just say, "How do you iterate over a recordset in C#?" And secondly, you know this, the stackoverflow in three weeks that is going to be the canonical site on the Internet for learning how to iterate over a recordset in C#. It just will, it will come out you know, we'll have the pagerank, everybody will point to it, it's gonna be the canonical answer. And the more, it is like the Wikipedia page on how to iterate over a recordset in C#. So like the better that article gets and the better the results get, and you know the more people contribute to just like editing and tweaking and like slightly formatting it a little bit better and so forth. That's what I really want to happen, I want that to be like a live encyclopedia entry in the Wikipedia sense.
Pryor: Well Jeff how did you come up with the, uh, the limits because I know they changed. Like I remember at one point I could down-vote things and then all of the sudden I couldn't because the threshold got set higher or something like that so I know you changed that a little bit. How did you come up with those levels and tweak them? Like what's driving that?
Atwood: Right. So what we're doing is we're... I'm letting people in, it started at like a hundred people per day, it was up to two hundred now I'm kind of tentatively going to three hundred per day now that we're kind of getting the system working the way we want. And a lot of those initial tunings were done based on watching peoples' behavior and watching the interactions they had with each other. And I mean there were definitely some ruffled feathers around things being marked down, marked negative, things being flagged as offensive that shouldn't have been. Um, also around editing, once people got to the editing threshold there was definitely some "youthful experimentation" I guess you would say [laughs] around editing other peoples' posts and I had to deal with some direct emails and some people who were pretty unhappy with the way things were going. Um, so I think we're just watching the system and we're just seeing how people are using it. And there are a number of people at the edit threshold, although I doubled it to 2,000. It started at 1,000 although I realized after the fact that that was just like way way too low. Um, I've increased that to 2,000.
But Michael I want to get back to one of your original questions which was OK say you don't understand how any of this stuff works and you just want the answer. Which is gonna be honestly 95 percent, more, probably 99 percent of our audience. So, you would type something into Google, right? You would end up on this page you've created, which I'm actually looking at: "How do I connect to a database and loop over a recordset?" You're gonna see two things: you're gonna see the question and then directly under it you're gonna see the accepted answer because those two things sort of always dock to each other, right? Now if nobody has accepted, like you own that question so you went back and you said oh this is the best answer that I think is the best answer. Well say the community disagrees with you, they say well that's a dumb answer. They would down-vote your answer. It wouldn't affect the docking, but the answer directly under it would be the answer the community thought was best. Now, if you're the type of person that does a drive-by question, like you ask the question and you never close the loop and say OK this is the best answer that I found.
[20:42]
Pryor: Cause there is a bunch ... that happens ... it's happening kind of frequently too.? That type of thing.
Atwood: Sure.
Pryor: That type of thing.
Atwood:? No.? I would expect that to the norm.
Pryor: So you're saying is that the community answer is the one that appears at the top.
Atwood: It's all based on [score?] ordering, so voting. And, and, the reason we have a limit around voting is we found that down votes were very unpopular.? People did not like having their stuff down voted just on principle.? Like, it doesn't bother me, like if I see negative on my thing, I mean it's a little bit of a bummer, but you know, it's minor.? But people really objected to it.? So we made the karma cost for that ... we did something interesting that where it's negative ... so if I down-vote this question I'm looking at, if I click down right here, your reputation will go down two points but my reputation will go down one point.
Spolsky: That one's cool.
Atwood: So there's a cost to me to down-vote you.? And that helped tremendously.? And we also have visibility, like if I click on your username, I can see that you have given forty-three up-votes and eight down-votes, so you can see if it's the type of person that's like a lot of down-votes kind of person.? Then maybe that's just how they are.? I also noticed, it was really kind of touching, some people like only give up-votes.? They will not down-vote anybody.? Like it's just all up-votes.? They have never given a down-vote.? They'll give hundreds, well not hundreds, but at least a hundred up-votes.? I think there is going to be a badge around that, actually, at some point.
Spolsky: Nice.
[21:59]
Spolsky: [Interrupting] But, being nice is not necessarily being honest.? I mean, there may be somebody who literally provides a wrong or misleading answer to a question, who gives you the answer that is subject to SQL injection attacks, you know, and then you really do want people to down-vote.
Atwood: I do think down-votes are necessary.? There was the argument that you should take them out.? I think the way to do it is the way were doing where and up-vote counts way more.? So, Michael, if I click up right now on your post you get plus ten.? Right, now compare that to the minus two I could give you.? So, it's worth fives times as much and it costs me a little, and we think that's the right social formula.? Because sorting down to zero is good but I think you should be able to sort a little bit below zero to indicate that the community kinda is dissatisfied with your answer.? It's not that they hate you personally.
Spolsky: [Evil laugh]
Atwood: [Inaudible]
Atwood: People really do take it personally.? Like, I've gotten emails from people that are like, you know, "I'm missing a badge.? You need to look into this."? They've already started to really... The reputation and badge system is really working... to a scary degree.
Pryor: Well, especially since you've actually tied... I mean initially... I don't know if this was the initial goal, but you've tied the reputation and the badge system all together so that there's actually things you can't do.? You know, so like getting a badge.. it's different than raising your reputation, but a lot of the times they're intertwined, and so there's stuff that you actually can't do on the site until you do that. So, it encourages people to go that direction.
Atwood: Right, well, I think that the end state of the system is that we don't run it. The community runs it.? Because, we don't scale.? Like, I can't sit here and see.. there's no way.? I can't even read every post that's not on the system.? It's ridiculously impossible for me.? Even if Jared and the other two guys that are doing this with me, that's all we did all day long, we still couldn't do it.? So, as the system learns to trust you, you can do things in the system that you would consider very moderator-like, very much like Wikipedia.? But we do have thresholds around that.? Like, we talked about it takes 15 reputation to even up-vote, because we don't want people creating, like, shell accounts and just up-voting their own stuff, like puppet accounts.? So, you have to actually get some reputation. And the only way you earn reputation, let me be very clear on this point, the only way you ever get reputation is from other people voting your stuff up.? Um, there's one minor exception to that, which is, if you accept an answer, like, Michael, when you accepted the answer to your question, you actually got plus two rep.? It's a very minor rep boost.? That's probably why you have 82 rep, actually
[24:25]Pryor: Oh, it just went up, since we were recording this. That was good. I'm 107 now, so...Spolsky: Hey Jeff, I had an idea for a badge.Atwood: Wow, impressive.Atwood: What's you idea?Spolsky: Uhm, `founding members' that you give to all the beta-testers. [Garble]Atwood: Oh yeah, yeah, we're gonna get that. There was some resistance on the comments, but I think I'm gonna overrule the people. 'Cause the people participating in the beta are really... I mean.. Beta testing is not that fun, in my opinion.Spolsky: Yeah.Atwood: So I think they are giving me some of their time, and I think they deserve a little something for that.Spolsky: It's also recognition that they where here at the beginning, and it motivates people to get in an get there accounts set up by, whenever the beta test ends. You know, 'cause otherwise they're never, ever gonna have an opportunity too earn that badge again.Atwood: Right. Yeah, and it's interesting having a community of programmers test your site. Let me tell you, they really test the crap out of this. [Laughter] I've seen the weirdest things happen, that I'm just sure, on a typical user site I wouldn't have gone to a year, or maybe even never... So it can be kind of fun.Spolsky: This is... Jeff, is this the most heavily used site that you've ever worked on?Atwood: Oh, probably. I mean, I'm sure. I mean, just yeah. Let's say, probably without a doubt.Pryor: And it's still in beta.Atwood: Yeah.Spolsky: Yeah, and it must have--Atwood: We have a pretty constrained audience already.Spolsky: How many, [uhm]. How many people have you approved for the beta?Atwood: I think we're at 3000 now, but that doesn't mean they have all joined. Uh, the interesting thing about the badge system, and I think Michael brought this up. You can sort of see... You know, this is the MySpace game. "We have a hundred million users." Right? Spolsky: Yeah. [laughs]Atwood: You really have a hundred million active users? I don't think so. Well, if you go to the badge-page... you can see how many people have done certain things. That is actual activity, that is measurable activity in the system, right?[Garble]Spolsky: That means 1009 people have answered a question?Atwood: With at least one up vote. That's right. Yes, absolutely.Atwood: The badges, in addition to being fun, actually tell you stuff about the system and also the user, right. Like how well do they know the system. If they have 10 bronze badges then they know it pretty well. So all this stuff is there for a reason. None of this stuff is there because I thought it would be, like fun to have a game. Uh, the end-state of this, is producing useful information that goes out into the world...
Pryor: What's the colored dot, next to the badge?Atwood: Oh, so we have... Oh, it's the Olympics thing we have, it's very convenient. It's gold, silver and bronze.Spolsky: Which is bronze and which is gold?[Laughter]Atwood: The yellowish ones. I mean, I can adjust the colors if you really... if that's a serious question.[Garble]Spolsky: Yellow is gold?Atwood: Yes.Spolsky: Ok.Atwood: I can't make the colors metallic on your monitors. I'm sorry, I can't. We don't have that technology yet.? But I should have a legend...Pryor: Doesn't Java do that?[Laughter]Spolsky: No SQL Server, you need SQL Server.Pryor: Oh, right.Spolsky: Yeah, SQL Server.Atwood: So, let me talk about... real... I don't know if we've monopolized a lot of time. But it's exciting, 'cause this is honestly, everybody listening, this is really the first time I've talked to Joel about the actual live site.Spolsky: It's actually, let me just conclude... my initial feedback. I've got two more things. They're kind of small.Spolsky: One is... to me like... The only thing that we really need here, you probalily know... you're probabily a lot more involved... But the only thing I really wish we had is RSS.Atwood: We have it.Spolsky: Oh we do?Atwood: Yes, bottom of the page.Spolsky: Can I subscribe to a tag?Atwood: Yes, you can.Spolsky: Ok, done. Never mind, we don't need that.Atwood: Right, you can also do tag combinations, which is not very discoverable, I need to work on that. It's space-delimited at the moment, because we allow "+" in C++, which I'm kind of regretting now.Spolsky: [Laughs]Atwood: Cause the standard convention is, you sorta use "+", that's sort of the typical tag combination in the Web 2.0 world, but we use space for that reason.Spolsky: Wait, so how do I do this? Tell me how to subscribe to 2 tags.Atwood: Well, go to a tag... tag browser... Type in whatever tag your looking at, or just click on it. And then scroll down to the very bottom of the page, you should see a little RSS-icon.Spolsky: Oh, yeah.Atwood: Uh, it's also in the auto-discovery, there's a link in the header. So just point your software at the page.Spolsky: So, you were saying space, so I can just change this URL to be like feeds/tags/ruby+python for example?Atwood: Yes.Spolsky: Oh not... but you said is was not +, it's space.Atwood: It's space.Spolsky: Wait, wait, wait, sir. Space is + in URLs, isn't it?Atwood: Uh, it can be.Pryor: You can also use %20.Spolsky: Uh, well I tried that, but it's not getting... OR it's doing AND. Alright, we'll debug that later.Atwood: Oh, it's doing AND, it's definitely doing AND, did you want OR?Spolsky: So I type /tags/ and then what do I do?Atwood: Well, what I always use as the example is HTML space CSS.Spolsky: So there is a space in the... No, I'm not getting any questions that are tagged that. I put a space in the URL?Atwood: Oh sorry, it's /questions/tagged/html%20css Yeah, that works.Spolsky: Huh.Atwood: That was something Jarrod insisted on, he believed that... to be "questions tagged"... I blame Jarrod.Spolsky: Ok, pretend I'm retarded.Atwood: Ok.Spolsky: I can figure out how to subscribe, to like 'Windows'. 'Cause there's a tag feed for that. I see /questions/tagged/ ok, so I say Windows and then I put a space, right there in the address bar and I say like C# for example.Atwood: Yeah, well C# you have to escape the pound. So it'd be like %23. It's easier if you use my preferred example of HTML and CSS, plus it makes sense.Spolsky: CSS?Atwood: And you can extend it to work with whatever keywords you want later.Spolsky: Hmm... this is really doing AND, it's not doing OR.Atwood: Yeah, it's doing AND.Spolsky: It's doing all things that are HTML AND CSS?Atwood: Yes.Spolsky: But I want OR.Atwood: Ok, well that's something... We should but that on the feature request list. I mean, we can do it.Spolsky: It's not that important. I was just thinking, I may want to subscribe to an RSS feed that gets the seven things that I'm interested in. Atwood: Right. No that's fair.Spolsky: That's really small, because other than that, I really think that it's like ready to go live, other than just scaling issues.Atwood: Well we're not gonna... yeah we're gonna go to the end of the month for sure. 'Cause there's still some things I wanna implement and some other testing I wanna do.Spolsky: [Approves]? Mm-hmm.Atwood: So, continue with your feedback list.Spolsky: Well, nothing. I just wanna say... you know what? I... like this morning, it suddenly occurred to me that this is gonna be huge. I mean, you've actually, like now built this thing that most programmers are gonna know about. In the same way that most programmers know about... I don't know...Atwood: Slashdot?
[31:38]
Spolsky:? Digg.? Flash.? Yeah,? this is gonna be... I think this is gonna be bigger than, um, the competition that will go unnamed.?? I think it's going to be Wikipedia big, for programmers.? In the world of programmers.?? It's just going to be like a standard part of everyone's toolset.
Atwood:? Wow.? Really?? Wow.? That's a little scary actually.? 
Spolsky:? I know.? Because it's just like look how fast it lit up.? The whole thing is lit up like a Christmas tree.? In, you know, a millionth of a second with like nobody.? And, you've got, um.? You said you had 3,000 people or something queued up for the beta test just based on, you know, our stupid little podcast here that six people listen too?
Atwood: Right.
Spolsky: And obsivously there are people clamoring to get in and it's not even coming up in Google search results yet, right?? Because it's all cloaked from Google, so to speak, because it's private, still.
Atwood: Right.
Spolsky: So as soon as Google starts finding these things, Oh my god it's going to be huge.
Atwood:? Well, I hope so.? I mean I hope huge in the sense that it actually works.? And I agree with you, from what I've seen, I've been very pleased because I feel like it is working.? Um, with some minor caviats around some of the behavior I did not anticipate which, I kind uh, I knew that was going to inevitably happen.? People are very unpredictable.? But, um, it is producing pretty good information, and people enjoy the system and the work they are putting into it is resulting in I think useful stuff that other people will find.
Spolsky: [Approves]? Mm-hmm.
Atwood: And that's really the root of all my blogging as well is I just want to leave this trail of breadcrumbs of helpful information, right?
Spolsky: Yeah.
Atwood: And relevant information that other people can benefit from.? So, yeah, it's exciting.? I mean, I love working, it's very addictive.? Like my blog has really suffered because,
Spolsky: [chuckle]
[33:14]
Atwood: One because there's a lot of work to do and two because it's really addictive, I love working on it. You get this feedback loop of people ask for features, and they're programmers just like you, right? So they're happy when you're working on it, I'm happy working for them, 'cause they're filling it with all this great information. It's this really nice loop, and I really enjoy it. And I think Geoff and Jarrod have done a tremendeous job, first of all... Particularly based on the fact that I don't really pay them, in any real sense of the word... but they have done a tremendeous job. Uhm, and also the community, I mean, we've gotta say that, having the audiences that we have, and very high quality audiences, were able to seed it with this great information. So it's also a testament, I think, to the power of the audience.Spolsky: Is there something on... Which is... Of the various tabs on the homepage. We got 'newest', 'votes', 'popular', 'unanswered' and 'recent'.Atwood: Yes.Spolsky: This is a little confusing, what's the difference between 'newest' and 'recent'?Atwood: 'Newest' is by the actual time the question was asked. 'Recent' is based on any activity in that question.Spolsky: Oh, got it. So it might be recently edited?Atwood: That's right.Spolsky: Ok, got it... and uhm... oh I see. Which one... is there one of them that acts like reddit, where the really highly voted thinks stay on the top longer?Atwood: Right now that's just the homepage, under popular and it's not really working the way it's supposed to. Right now it's all time popular and it's based on... there is no real algorithm, there should be a more sophisticated algorithm that determines... Right now it's simply sorting by number of views.Spolsky: Oh, that's weird, 'cause that's gonna become a self-fulling prophecy.Atwood: Yeah, exactly. No, it needs to be a more sophisticated algorithm there and it needs to also be like, top last 24 hours, top last 48 hours, top--Spolsky: You could do it... I mean if you do it... The reddit algorithm is like five lines of code and it's been figured out and I can just get Steve to disgorge it under pain of death if you can't figure it out, but it's a fairly simple thing where... There's a very simple function of age and votes, that gives you, uhmm... It's actually based on a physical formula, which is kind of weird, it's based on gravity.Atwood: We have a couple of more variables, we have number of answers, we have number of views, date, number of votes. I think we can have a more sophisticated algorithm there--Spolsky: But the one on reddit works really well. It gets... what happens is that things that are super popular, sort of just zoom up and stay for a while. Things which are less popular don't quit make it as high. Atwood: Right.Spolsky: That said, maybe it's not like reddit, I mean maybe the goal isn't to see the thing that everybody else is seeing, maybe the goal is to see the thing that most desperately needs an answer, or... I don't know.
[36:10]
Atwood: Right. So let me briefly talk about a couple key features I think we need that people are kinda clambering for, and I think Michael so of the things you were bringing up I think will be addressed by what I cover.? 
Pryor: Excellent.
Atwood: Right off the top of my head - people want to be able to bar certain tags from appearing.? For example, a lot of people were really annoyed by the meta discussion around StackOverflow and I can't really blame them.? So they wanna essentially blacklist that tag and say, "you know what?? For my page, don't show that tag."? So, that's sort of in the works, and also along the same lines, like, "these are my favorite tags.? These are the tags I really wanna know any time something happens."? Consider the home page.? There's a Ruby question.? I don't really know anything about Ruby.? I might get a kick out of reading through it, but I can't really answer it, can I?? 
Pryor: Right.
Atwood:? So this is really about filtering essentially the home page and maybe your user page.? So, that's in the works, probably.? 
Spolsky:? I think a lot of people will wanna just go and choose the ten or twenty tags that are technologies that they work on.
Atwood: Right.? And we'd also talked about having this sorta be self-learning.? So if you look at your profile, for example, my profile.? If I look at the number of tags, I have 48 StackOverflow tags, ha ha ha.? 
Spolsky:? Oh!? So, you might see those.
Atwood: Which means, yeah, I've been replying to a lot of StackOverflow threads.? So, I might wanna see those.? I have C# and regex, which is actually pretty accurate.? Ha Ha.
Spolsky: [Laughs]
Atwood:? So, if you took the top three tags, uh, and hacking, which is great, 'cause I am totally a hack, so, the top four tags would be perfect.? The system could just filter for me on that. The other thing that's come up, because again we're sitting in the middle of a confluence of sorta like a wiki-type no ownership, and a discussion forum, where there's clearly ownership.? And not only that, but you're getting reputation.? If you're getting reputation from something, clearly you own it.? 
Spolsky: Yeah.
[38:01]
Atwood: These systems don't really match.
Spolsky: There's a weird thing which is you feel like, you know, if I wanna go edit somebody's question, I don't wanna take away from their, you know, ownership, from their moral, you know, moral rights, it's called in copyright law, basically, they wrote it, they should get some credit for that if nothing else.
Atwood: That's right, that's right.? So--
Spolsky: But I still wanna enhance what they wrote.
Atwood: Yes. So I've done, I've thought a lot about this, there's been a lot of meta-discussion on StackOverflow on this topic, and I think people were concerned for good reason. One is, they don't want people to edit their stuff. Certain people just may not buy into the whole concept of the Wikipedia-style editing anyway. But I want to make it very clear when they come to the site that's kind of the goal here. So if you're totally are against that, you're like, "OK this is my content and nobody will ever touch it", this probably is not the site for you, right? But, that said, I do understand that, say, Joel, you enter a post, I go in and edit a significant percentage of it, and you have to sort of have to do the math to figure out how much of it had actually changed, which we have, uhm, and then Michael you go in and then change that even further. Does it really still belong to Joel at that point? So we're going to have a threshold, which is basically number of people and size of the edits, that will push a post into what we call "community mode". In community mode, you can still vote on it, but nobody gets reputation from it. And there's no signature block on it. There's just a revision history, like it'll show the last editor.
Spolsky: So you can say like--
Atwood: But that takes away the concern, I think. And there's two ways you can go, two ways this can happen. One, automatically, because I don't want to, it's gotta happen automatically for the system to be sustaining. So once you reach the threshold, you're in this community mode, uhm, although you can, if, Joel as the owner of the post, if you wanted to reassert ownership, you could. That's possible as well. Uh, the other thing you could do is, Joel, when you ask a question, you could opt-out. You could say "You know what? I don't even wanna own this post. This is not going to be a Joel post. This is going to be, anybody can do whatever they want with this post. I'm gonna opt-out, of ownership at that point."
Spolsky: Mh-hm.
Atwood: So, it's the kind of thing where you can kind of opt-in initially, it happens automatically, and then you can also revert it, like, if you if, say, somebody say griefs you and kicks your stuff into community mode by continually editing it like a pack of roving dogs, or something, you could actually opt back in and revert ownership of your stuff if you want.
Spolsky: Maybe under those circumstances you don't require as much, uhm, aah, reputation to edit.
Atwood: Reputation to edit, yes. And that also solves that problem you guys were talking about. And I do agree with that, there's a little bit of a disconnect between those two models. But I think that's what makes our system really interesting, is that we're trying to sit in the middle there, and do something I think relatively unique that hasn't been tried in quite this way before. 
Spolsky: Yeah.
Atwood: So I'm a little comfortable pushing the boundaries a little bit. Although I do want to disclose, so people know when they come to the site, they're not like "Oh my God," you know, "nobody told me that people could edit my stuff!" I don't want people to have that reaction.
[41:01]
Spolsky: Hey I just thought of something,? uhm, 
Atwood: What?
Spolsky: You were talking about I can't keep the FAQ up to date.? Why don't you.. You got that FAQ link at the bottom.? That just needs to go to, uhm, slash questions slash tags slash stackoverflow.
Atwood: Right.
Spolsky: In popularity mode. Done.
Atwood: Right.? I have thought about that.? There's one or two other things I need to implement before I can do that.? But yeah, that definitely has come up.
Spolsky: No, just change the URL.
Atwood: Even the user voice system that we use. 
Spolsky: Mh-hm.
Atwood: You could almost use StackOverflow.? The system itself could be used to track its own bugs almost, right?? You can vote on them, there's a history, you can put tags on them...? It's weird, you can almost use it as a meta-system to describe itself.? So I do agree with that.? That eventually we will get there.? And the third thing before we get too sidetracked um so the issue of discussion within the answers.
Spolsky: Mh-hm.
Atwood: I agree it does come up, but I don't want to create like a full blown message board.? I want people to have a focus on answering the freaking question.? Right? Like I don't want... There is gonna be some discussion, but I don't want to encourage it.? I don't want to have all these things in place where people can have these long drawn out discussions where people can go back and forth in the answers.? But, at the same time it would be nice to add annotations to somebody's answer, right?
Spolsky: Mh-hm.
Atwood:? So what we're thinking is were going to add another table, and it's almost going to be like Twitter where we are gonna say "Look, you can't write a whole long diatribe here."? All you can do is add like 200 characters and say "This is wrong because you forgot in your regex, you know, that this character does this." Right?? So you can add an annotation that's attached to the answer.? Because that's sort of little meta-discussion.
Spolsky: But wait wait wait.? Shouldn't that be just go and edit it?? I don't know, but the Wikipedia way would be "this is wrong and I'm just going to go edit it."
Spolsky: What you're saying is that if I have low reputation, I add it to the bottom and then somebody else has to come along and decide whether or not to accept my comments and incorporate it and edit it into the original answer, or just delete it and hide it, or just to ignore it.? Why not skip all that work and just go straight to the immediate phase of if they think it is wrong, go in there and edit it?? And then if worse comes to worst, they get into a Wikipedia-style edit war, but honestly it's worked well for Wikipedia.
Atwood: It has, but what you have to realise is that we're not quite the same thing as Wikipedia - 1) we don't really have the broad ... our questions are narrow even by Wikipedia standards where there's like a Wikipedia entry for every comic book character ever.? We're even more narrow than that. 
Spolsky: Do they have little dot?
Atwood: I'm sure.? Oh, I guarantee you it's out there.? So there's not as many eyes on this stuff, so it needs to be a little more self-healing than Wikipedia is, I think.? But I have definitely thought about what you're proposing, which is having a low rep. edit mode which only lets you add, like, 100 characters to the bottom as an edit... right, so there's no new code required for that solution, right?? I just go in, and I grab the current revision, add some stuff to the bottom of it and then publish it as the current revision with that guy's signature on it.
Spolsky: Mhmm
Atwood: I've thought about that and we might end up doing that, I'm not sure. But the goal is pretty much to reduce ... I don't want to have too much discussion in the comments - in the answers, rather.? But I do also want to at the same time acknowledge that people really have a desire to markup without full-blown editting - a desire to slightly markup some of the answer's that they're seeing.
Spolsky: You know what, here's another possibility is to give people two options - add an answer or comment on this - and if they add an answer it shows up like it does now.? If they, say, comment on this , it shows up on the bottom and can't be voted on.
Atwood: Right.
Spolsky: So it just stays in chronological order and then they can have their conversation at the bottom - below all the answers.
Atwood: Well, the conversation would occur under the answer that they're discussing.? 
Spolsky: Oh, you mean it would be per answer?
Atwood: Yeah, it would be per answer for sure... but as I said, they would get no rep. for this.? There's not a whole lot of incentive to do it - except just if you want to comment on somebody's answer for some reason.
Spolsky: You know, I'm sure we're gonna get great answers from the community about how to do this - and actually that might be a good opportunity to invite people to, if they have a suggestion, or some logical reason they want to disagree with us, this might be a good opportunity to, say, record it as an MP3 or OGG Vorbis file and email it to podcast@stackoverflow.com
Atwood: Right.? Well I feel like we've done.... I know Joel, before you left on your trip, you'd said you'd had some reservations about discussing a site that most people can't see.
Spolsky: Ah, but they can in two weeks right?
Atwood: Yes.
Spolsky: In fact, they can even-- OK, so what's the way you can get on the ...uh... the beta list is you to www.stackoverflow.com, right...
Atwood: ...no...
Spolsky: ...and then you click on uhh... no... how do you sign up for the beta?
??? Sign up here! 
Atwood: It's only a blog entry at the moment.? I don't have like a formal signup link - but it's the August 1st blog post has the direct link to the signup.
Spolsky: Ok, so that's under.... blog.stackoverflow.com?
Atwood: Yes [Talking over each other] I don't remember the title...
Spolsky: [Visiting the website] ok... private beta... [hums]... wait, where does it say how you sign up?
Atwood: It's sort of near the bottom.? It's not super obvious.
Spolsky: Direct email. They're just emailing you?
Atwood: No, no, no - there's a signup link.? Are you gonna actually make me go to the post?????
Spolsky: I'm confused....Oh, "click here to sign up for the beta"....ok I see-ohhh it's just got all kinds of letters... spreadsheets.google.com... ok it's a big mess.? So what you want to do is go to blog.stackoverflow.com for our listeners who want to sign up, and look for the thing that says "Bad News/Good News" and it's got like a little toilet paper mascot there...
Atwood: [chuckles]
Spolsky: ...and then in that post there is a magical link that you can use to sign up for the beta and all our listeners should do that and get signed up with a real account and stuff like that because that's the only way... even if you don't plan to use it, it's the only way you're ever going to get that beta tester badge, which will never again be available.
Atwood: That's right.
Spolsky: So hopefully that will cause a flood of people to show up.... uh what else did I want to say?? So you thought the beta was pretty much just to the end of this month - so that's what, 9 more days?? Really?
Atwood: Yeah, well it's a little bit more than that - it's a long month, it's like 31 days, so...
Spolsky: Ok, cool - because really there's sort of several phases to this whole building of StackOverflow and the first phase was building the first minimal version that people could see.? The second phase was the controlled beta to get it good enough to release in the world.? And then the third phase, which we're about to go into, is just try to build the audience as fast as possible, to as many people as possible.
Atwood: Yes, that's right.? Now, I talked about taking some listener calls, but I feel bad we've had Michael on the call and we haven't given him...minutes to tell his story, have we?
Pryor: What story?
Atwood/Spolsky: [laughs]
Atwood: The early Fog Creek story.
Pryor: Do we have time for that? How much longer is this... umm..
Spolsky: ... we got at least 10 minutes.
Atwood: So how do you know Joel? How did you meet Joel?
Pryor: Ok, so I was working at Juno as an intern.. actually D-Shaw's(?) hedge fund in New York decided to start this company, Juno, and it was like a free email provider back in the day when everyone had to dial up to the internet - and you would run their application and it would dial up and check your email and show you ads at the same time.? And I was their first intern, and right about the time that I was interning, Joel started working there fulltime - and so I worked there for the summer, came back fulltime and he and I worked on the same team - on the client team - working on that code, so that's how we met.
Atwood: Very cool.? And then... so did Joel sort of suck you into his vortex of this Fog Creek...
Pryor: Well yeah, this was like 8 years ago...I think he was kinda unhappy at Juno, and he left before I did, and I mean a couple of people had been leaving ... this is sort of the market tank that ...[laughing/fumbling for words]... we were one of the first broken IPOs (Initial Public Offering)... you know when they come out... lower than... the day that they go IPO, the stock closes lower than the opening price - they call it a broken IPO.
Atwood: [laughs] The backwards IPO.
Pryor: So you know, we were all sitting around counting our chickens... our golden chickens before they'd hatched and I think after that happened in the market tank then some of our friends started leaving; I don't think Joel was very happy there... this was my first job, so I had nothing to compare it to, but he left and was just sort of.... I guess you were freelancing, right? You were working for Google and other companies, writing code?
Spolsky: Umm, I was doing something [laughs], but mostly I was on vacation I think.
Atwood: Your first post was like "let's take a sabatical" if I recall.
Spolsky: Yeah, that was then and I was taking a sabbatical - although I think I had at least two consulting gigs, which pretty much got me half busy, and then I was writing kinda the first version of joelonsoftware... uh, you know a lot of those early articles were written when I was just sitting at the beach.
Atwood: Right.
Spolsky: I did a consulting gig for Google for about four weeks that was the most money anyone has made for four weeks [laughs] in the history of the universe, probably, because it was paid in stock.
Atwood: Oh wow, nice.? So Joel - what drew you to Michael? When you started a company, what made you say Michael was the man?
Spolsky: Umm, I couldn't get anyone else to go along with it 
Atwood: [laughs] You picked the uh... vulnerable intern, didn't you?
Spolsky: [laughs] I think so...
Atwood: He just didn't know any better - you had a car, he was just impressed that you had a car.
Spolsky: [laughs] He didn't know any people...
Pryor: I think we were just friends first; we were hanging out a bunch, I mean when we started the company I had this grandiose idea that I was gonna start a different company before we started Fog Creek... um that was kinda ridiculous...
Spolsky: Oh yeah, Docido(?).
Pryor: Yeah, I had this idea that you could... um... you would send in your old CDs to us and then you would say, like, which CDs you had and which CDs you wanted, and then we would find links between people and we would just send you an email, and say ok - you send this CD to that person; and then they'll send a CD to another person, and then eventually you'll get the CD you want back... um, there's actually a site that does that now... um, but it was kind of a ridiculous idea at the time... and um, it was kinda cool, but at that particular time it was a little late to the party; I think if had that same idea, like, two years before that... you know I could have... [changing topics]... but I guess we were just kinda hanging out, he thought that instead of doing consulting on our own we should team up together and... uh... so we did.
Atwood: Right, and so those early days - how long was it just you two?
Spolsky: Not so long actually, I think we started... boy were we stupid, because I definitely remember saying, "Let's hire four more people right away..." [laughs]
Atwood: Wow, really?
Spolsky: So we started calling people up and putting up [ads]... oh yeah, that's how stupid we were [laughs] like, without knowing where the money would come from, now we did have this ...
Atwood: Where can we find the bones of these people you hired... where are they buried now?
Spolsky: Two of them are now working for us full-time. Uh, one of them is not. Um, but, uh, we did have to lay them all off... let's see ... we hired three people really. Two-and-a-half, because Jillian was sort of like a consultant. So, uh, we hired these people because we were doing consulting in the early days, we weren't developing software. And in fact our business model -- and I think I've talked about this somewhere -- was to copy exactly what Phil Greenspun was doing with Ars Digita, because that was clearly working. And we were going to have two changes: one big change and one small change. The small change was that he was just, uh, allergic to Microsoft, in a way that was beyond just like, uh, rational aversion to Microsoft tools and deep in the just, you know, visceral hatred. And we sort of thought if we did the same thing, but not with any particular hatred of Windows, we could do desktop applications that might be pretty cool. And that was the small change from the Ars Digita business plan. The other thing is that the Ars Digita business plan said that they were going to build the software and they were going to open-source it and that was, uh -- what was it called -- the Ars Digita Community System (ACS). Our idea was to do the same thing and not open-source it. To license it, to actually make a profit by doing that. So we sort of thought that they (Ars Digita) would permanently be a consulting business that could only make money to the extent that they had warm bodies that they could rent out to other companies. And we would also have this software licensing revenue, which you can just make copies of, and then sell to more people without doing additional work. So it was sort of a tweak on their business model. But [the business] really was inspired -- and this is kinda how I talked Michael into it at the time -- by mostly people like Phil Greenspun just kinda documenting on the web everything they were doing. And you could see what they were doing and why it was working. And for a moment, we actually believed that if we did the same thing, it would have the same results. 
Atwood: Right.
Spolsky: And so we took that leap.
Atwood: Cool.
Spolsky: And then the market collapsed. Ars Digita closed. Um [laughs], they fired everyone. 
Michael:? [inaudible] Fired everyone, and started over.
Spolsky: We fired all the consultants (people that we hired that were permanently doing consulting work) because we just had no money. Um, but we did have FogBugz, and we started selling that and that provided enough money for us to kinda survive for a few years while we built it up into a real business.
[56:15]
Atwood: Right, now you're like a mega corp, you're like the Walmart of bug tracking.
Spolsky: [laughs] Exactly.
Pryor: It still doesn't even feel like we're running a real company.
Spolsky: We're more like the Haliburton of bug tracking.
Atwood: I see.
Spolsky: Ah, hey, yesterday um, you know we take a picture once a year of all the people and put it up on our website and yesterday I updated it and it's ah, if you go to fogcreek.com and click on about the company, scroll down, you see a picture of most of the company and it's just getting huge. I mean, there's like "look at all dem people!"
Atwood: Right.
Spolsky: One, two, three, four... Like, we have more redheads at Fog Creek than we used to have...
Atwood: [exclaims] Oh! Nice, wow! That's a bunch of, that is a bunch of people!
Spolsky: Yeah, that's what I find to be really really weird. I always remember, for some reason these weird things stick in my brain, and, in the old days I used to read Dave Winer a lot, who wrote scripting news, and once he had a post really really early on, he said "Where are all the 40 person software companies?" And, um I guess his point was that for the longest time there were dozens of 40 person software companies, WordPerfect was 40 people and Lotus was 40 people, and, suddenly the world became Microsoft and Oracle and they were like the 30,000 person software companies and then there were a couple of half a person trying to struggle to do it in their spare time. But he wasn't noticing any of the 40 person software companies and over the years I've discovered quite a lot of 40 person software companies, it's just a huge number of them, they're all a little bit below the radar, you don't hear about them. The business press doesn't write about them because they're not public companies and so they have no interest in covering things whose stock you can't buy. But there are really like an outlandish number of software companies around our size.
Atwood: Joel, I'm reading here, did you realize that you are a globally recognized expert on the software development process. Did you realize that?
Spolsky: [chuckles] I think the technical term is "rock star."
Atwood: Yes.
Spolsky: Yes.
Atwood: Joel Spol... you should just write "Joel Spolsky is totally awesome, period." That's it, that's I mean.
Pryor: He's says that every morning he comes in the office, he says [Atwood laughs]?"I am awesome!"
Spolsky: I'm gonna, I'm gonna disconnect you guys from this call.
[Pryor and Atwood laugh]
Atwood: No, that's cool, I really, no I really...
Spolsky: [interrupts] I'm sorry, we're having technical problems here getting Jeff's...
Atwood: No, no, I really admire what you guys have done in, my previous job was a small software company, I think?it had a lot of the same vibe, you know, they just loved software engineering right, it was all about the process of creating great software and hiring really smart people to do it and, you know, not becoming mega corp where you lose all your direction so, you know, I think you've acheived the terminus of what I view as a very logical evolution for extremely talented developers, is to build something that, you know, furthers the craft in some way, in some meaningful way so, no, I really do admire that, I think that's great. I'm always happy to talk about Fog Creek.
Spolsky: Well, I think that StackOverflow will do the same thing, honestly.
Pryor: Yeah, I was just going to say I think we admire what you're building here, it's a really great system so I'm really psyched about it.?
[59:10]
Atwood:? Yea. Now I'm scared. You guys are making me think that we're going to have all these scaling problems.? So now I'm kinda worried...
Spolsky:? I actually do think that we're...(laughs) 
Pryor: Actually, I just had a... I was posting something and some ASP.NET error came up of lock contention on some row somewhere.
Atwood:? Yes, yes. Deadlocks.? We have a deadlock issue.
Pryor: Yea.
Atwood:? Which we'll talk about after.? Well, we could talk about it on the call but it's going to go really long if we do that...
Pryor:? Hey, how come the badges aren't....
Atwood: ...uh but...
Pryor: ...oh, go ahead.? Go ahead.
Atwood: ...well, before we end, 'cause it's getting close to the hour mark, uh, I did want to mention, Joel, uh, I met Merlin Mann at the start conference.? Which was, like, a week and a half ago.
Spolsky: Oh.
Atwood:? And I made a point of meeting him.
Spolsky:? Yea.
Atwood: Because I wanted to tell him that, first, I'm a fan.? I think he does a great thing with his 43 folders and he's a really smart guy.
Spolsky: Yea.
Atwood: Um.? He was much less... I pictured him as older and grouchier for some reason.? He was like a terrier.? He like ... He actually hugged me...
Spolsky: (laughs)
Atwood: ...when he saw ... he was like "Ohhhh! You're that guy!" He's like, he hugged me!
Spolsky: Really!?? Wow!? He's hilarious.? I love Merlin Mann.
Atwood: I know! He's great! And he told me to tell you that he's a big fan of your -- obviously -- your stuff and he said he's uses one of your quotes in, like, a key slide in his presentation that he gives.? So, He's a big fan of yours as well. And I told him -- I told him that...
Spolsky: I saw that presentation, and I'm like "Oh look! 'The Zero Inbox' " or something.? Is that what it's called? 'The Empty Inbox'?...
Atwood: Yes.
Spolsky: ...presentation.? I'm like "This is what I need to do."? And actually, I've started doing that since seeing his presentation.? So, I watch it, and all of a sudden he's quoting me. (laughs) 
Atwood: Yes!
Spolsky:? And there's this really weird circular... So Merlin Mann and I are just going to go a room and just sell each other rocks for the rest of our lives.? And get rich selling each other rocks.? We don't need the rest of you other people.
Atwood: And I told him you're also a big fan of his, uh, his podcast 'You Look...'
Spolsky: 'You Look Nice Today' is hilarious...
Atwood: And did relate to him that...the joke that you subjected me to...
Spolsky: (laughs)
Atwood: And started laughing, because he finished the joke, he knew exactly what I was talking about.? He did.? He was like "And the L stands for..."
Spolsky: (laughs)? That was hilarious.? That is.? That is the funniest podcast.? And they really do a... I mean they... I wish that we could put as much work into it.? I think they probably record several hours and spend a couple of days editing, to put that together as, with as high quality as they do.
Atwood: Right.? No, I'll definitely link it in the show notes.? But I just want to mention that for you and...
Spolsky: 'You Look Nice Today', definitely not safe for work.? I'll say that in advance.? But, definitely the best -- probably my favorite podcast of all time.
Atwood: Yes. Well any other final notes before we...
Spolsky: No we spent a lot of time talking about StackOverflow, but it really did... Like the Beta launch, and there is so much to talk about.
Atwood: There's a lot to talk about.
Spolsky: In future weeks we maybe we'll hopefully get back towards more of? a combination of talking about software development.? There's a bunch of stuff, I have a bunch of questions queued up about software development? issues that are relevant to StackOverflow and not. And to our listeners, if you have any questions. Let's see I guess we should do some quick announcments at the end. Again a reminder to sign up for the beta of StackOverflow, it's your last chance to get that badge and... That was the first thing, now what's the second thing? Oh we got this conference coming up, "The business of software conference" which we mentioned early on. Jeff is not coming but I'll be there. And ahhh just google for "Business of Software" and you'll find that. It's a couple of days with some great speakers like Seth Godin and uhh, me, Eric Sink.
Pryor: Jason Fried.
Spolsky: Jason Fried. Who else do we have?
Pryor: Richard Stallman.
Spolsky: Richard Stallman. Ooh it's gonna be interesting, talking about the business of software. So that's in Boston in a couple of weeks. 
Pryor: Use "Fog Creek" as your coupon code.
Spolsky: Really?
Pryor: Yes, hundred dollars off.
Spolsky: And finally if you have any questions for StackOverflow or comments or feedback or anything you want to what you gotta do for the podcast is record it as an audio file and email it to podcast@stackoverflow.com and if we got time we'll play your question and maybe even answer it. So I think that's it, thanks for coming. Any last words ?or promotions or side comments.
Atwood: No, thanks Michael for being in the call it's nice to finally meet you.
Pryor: Yes, it was good to meet you too, I hope we meet in person some time soon.
Atwood: We will.
Pryor: Ok.
Spolsky: Alright, thanks a lot everyone and I'll see you next week.
[1:03:30]
Outro
Ads, intro
[1:00]
Spolsky: Let's talk about, umm, that thing with the thing with uh, oh what did we want to talk about? Oh! Voting, voting on questions. The StackOverflow UI...
Atwood: Right.
Spolsky: The StackOverflow UI issue.
Atwood: Right.
Spolsky: So...
Atwood: Do you want to give contexts? Because, you know,? not everyone can see the site yet. You wanna explain the situation?
Spolsky: Yeah so, uh, so uh StackOverflow lets you, it's a Q&A site, people ask questions and then other people produce answers. Sometimes other people [produce answers]. And, err, you can vote on the questions and you can vote on the answers. Umm now voting on the answers everybody seems to have figured out that's pretty obvious, you vote on the best answer. And that seems to be like already working, like even on an obscure question with only three votes total, the good answer has the more votes and the bad answer has, you know, negative votes, and the idea of what a good answer is, and what a correct answer is, uh, seems to be pretty canonical, but, but how do you vote on questions? Like what should be the rule for when to vote a question up?
Atwood: Right. Well, I agree there's some confusion around the feature and one thing people have proposed that I don't entirely agree with is; they've said that votes on the questions should simply propagate up to the, to the, [correcting himself] votes on the answers should propagate up to the questions.
Spolsky: Oh.
Atwood: So every time you vote on an answer, every time you vote it up, that votes the question up, and every time you vote the answer down, that votes the question down as well.
Spolsky: That umm, that might work. No, I'll tell you when that doesn't work, uh, that doesn't work when, when there's a question - you're like "God, yes, I'd really like to know the answer to this so I'm gonna vote it up, 'cos this is a good question, I'd love to know why this is". But there's no answer there...
Atwood: Right.
Spolsky: so you want to be able to, to ...
Atwood: Right.
Spolsky: Well the real question is, what is, uh you know I was thinking a little about this last weekend and I was thinking - what is the effect of voting on those questions, where does it show up; well, um, the main thing it's going to determine I think is the default homepage. And I think the ideal, what we want the default homepage to do is... give a random person that just arrives, um, a list of interesting questions that changes frequently. So all the questions on there are interesting, uh, whatever that means, because people have said "yes I agree that this is interesting" and they are also changing pretty frequently so you're tempted to keep coming back, so if you're just bored sitting around at your computer and you're like "yeah, I'd like to learn something new about programming", you can go to StackOverflow and see a bunch of new things and two hours later when you're bored again you can go back to StackOverflow and see a bunch of new things. And the next day it'll be all new so there's something of a Reddit or a Digg-like homepage, uh, where, uh, interesting things are constantly being voted on and that's what gets them on the homepage.
Atwood: Right. So one thing people have been clamoring for, and rightfully so, is - they want a way to sort of keep track of what things they looked at, and you pointed out [in] an email to me, 'cos we were, the way this all came up was; we were talking about algorithms to determine what the hot items are; the items people are most interested in right now, and one side-effect of that was thinking about voting on questions and what does it mean. Uh, because it has come up a number of times, and you said that maybe what we should do, rather than voting on the questions is just have a star on the question where you just sort of favorite it. And then it's more like del.icio.us where you just say ok I like this question, this is an interesting question so I'm just gonna put it in my favorites and I can go back to it later, and one side-effect of that is you build this, you know, breadcrumb trail to the things you're actually interested in. Now, I kinda like the system the way it is now, I can see where people are coming from with wanting this access of just tagging things as favorites, I get that, but I think voting on a question is similar to, but not exactly the same thing as, marking something as a favorite. I think it's really closely related, it's not exactly the same thing, I mean you could see yourself voting something up that you're like "Oh I don't know anything about this, but wow, that's a really good question". You know, the person who asks this question really did a lot of research, and has some interesting detail and wrote really well, and it's just a really good question, right, I can identify that even [if] I have no knowledge of the topic really being discussed. [You could] say "This is a really good question, this guy clearly put time in to that, that deserves a vote up, that doesn't mean it's my favorite question, right [laughter]...
[5:28]
Spolsky: Yeah.
Atwood: Uh, but a lot of the time it will, I think things I tend to vote up, are things I a. understand and know about and would click on it anyway, right, like "Oh, that's an interesting topic to me" so I click on it, um...
Spolsky: Mm hm.
Atwood: And I think another point of distinction here, we don't allow people to vote on things until you click through to the actual full detail. And I think that's actually a really big mental shift you have to make from things like Digg and Reddit, 'cos that's just one layer of our system, and for those guys you're browsing a list of topics and you're just mindlessly going click "hate hate it, love it, love it, hate it, hate it, love it"...
Spolsky: Yeah.
Atwood: You know, you're just, it's just totally not the same thing 'cos in our initial, like early in the beta before we went public, we had that in, and Jared said to me - he's like "I really disagree with this, I really don't think we should be letting people vote on things this way...
Spolsky: Until they at least part[icipate]...
Atwood: [Interrupting] Yeah, until they, yeah what are you voting on?! You're voting on the title of the article?! Did you read it? Do you know... [laughter] I mean, it makes total sense and when Jared said that I was like "you're absolutely right, we should not allow this", because until you've clicked through you don't even know enough, you're not equipped to vote, right, you know it's like voting just blindly on, you know, just a ballot just checking boxes that's based on somebody's name...
Spolsky: Mm hm.
Atwood: Uh, so there's a lot of subtlety to these decisions, and I'm not saying we're making all the right decisions, but I do understand the need to have that breadcrumb trail of stuff you've voted on. So one thing we currently are working on, and will have in the next few days, is a private page, 'cos voting is another one of those things where we can't really tell other people what their votes are because, it would just get really weird, do you know what I mean? [laughter]
Spolsky: Mm hm.
Atwood: Like, if people knew you had voted their stuff down [laughter], or I had voted their stuff down they would probably get pissed right?
Spolsky: Do you even, do you even track that?
Atwood: Oh yeah we track it all, we know, I mean I don't look at it, I don't care frankly, but, oh yeah we track it all.
Spolsky: So it's not just like a, you're not just incrementing a number?...
Atwood: No, no no there's data of actual...
Spolsky: You're actually recording a vote of [garbled]
Atwood: That's right. And uh it's funny, Geoff Dalgas, we were working on this the other day [laughter], and of course we're constantly changing all the rules and redefining everything that we're doing and Geoff remarked that in uh, in the Skype window he's like "man", he's like "I'm glad we don't make voting machines" [laughter], it would just be a disaster right? It's like, our current system, because we're currently recalibrating a bunch of things and I think we're about to piss off a bunch of our audience 'cos we're going to put in a whole bunch of reputation caps which they're not going to like! And I've also been clearing out a lot of the old meta-StackOverflow discussion that is a) old and b) resulted in a lot of reputation gain for, like, topics that don't really have much to do with actual programming questions.
Spolsky: Well that should, um, yeah, I mean, if the system is designed right, it shouldn't hurt to have, I mean the system was designed so old things could stick around, even when they weren't relevant any more...
Atwood: Well, well [Garbled]
Spolsky: And there was a reason to, uh...
Atwood: ...stuff in the beta though, that's not even there...
Spolsky: But that's the whole point, StackOverflow is supposed to work for like, like this is the question you were already asked on that podcast, what was the other podcast called? Hard?...
Atwood: Herding Code. Herding Code [emphasis].
Spolsky: Herding, Code.
Atwood: Yes.
Spolsky: Herd. Herding.
Atwood: [laughter]
Spolsky: [Garbled: giving?] Is it, uh, is it a sheep? A metaphor to do with sheep?
Atwood: Well it's like herding, herding cats right? The whole herding cats metaphor. It's a pun, it's punny, you know herding cats, herding code, you know.
Spolsky: Ok. So, uh, [laughter]...
Atwood: I see you do not approve but uh, let's proceed [laughter].
Spolsky: [laughter], I'm sorry. What, what were you ask[ed]... you were asked something about, like, y'know the problem, and this was something we recognized when we built this, the problem with a lot of those websites is you go, y'know even to the official Microsoft discussion forum on some particular technology, and you ask some particular question, and you find a bunch of people talking about the beta of three versions ago, and the information that's there is, is no longer, uh, correct or up-to-date and...
Atwood: Right.
Spolsky: What's worse is that particular question now has, like, the PageRank, so that's locked at the top of the Google results, you're stuck...
Atwood: Right.
Spolsky: With this old rotten question, that's much higher in the Google results than maybe somewhere somebody else on the internet who actually has up-to-date information. Just because Google tends to give, uh, a lot of, uh, just both the way PageRank works and the way Google works in general, you know the old, the longer something's been there the more cred it has, the higher it's going to show up in the ranks, so, uh, um, so that's the reason we built in this wiki capability, we wanted these questions to stay up-to-date, and if someone went in to the question and found it was old, they could go in and say "Well", you know, they could at least edit it to reflect that it was no longer the case, and hopefully, uh,?put in the new data and that's what I'm kinda hoping, uh, will happen, it'll certainly happen with the very canonical questions, the ones that are, uh, very very commonly looked up - how do I iterate over row sets in C#, that's gonna be, that's gonna come up all the time, people are always gonna ask it, people are always gonna look at the answer, and if the way you do those changes, um, people will edit the answers I think. So, um, given...
[10:37]
Atwood: I agree with all of that.
Spolsky: Yeh - So why do we need to delete old irrelevant StackOverflow questions?
Atwood: I think there's a little bit of a special case like as you're launching a site. Right. Because we're like desperately busy actually writing the site so, but then we also have to participate in the site and see what's happening and gauge what impact the changes are making and make sure people aren't going to kill eachother... and make sure things are working the way they're supposed to. So we sort of dip our toes in the water but i think in this early phase we weren't providing a lot of guidance about like what is this site i didn't have a FAQ together of any significance so they just had to figure it out. They had to like guess and try and that's great and that was creating a huge bunch of questions about StackOverflow and for a long time StackOverflow was the second largest topic of discussion at the site. This has changed and also I've cleaned up some of the old stuff and you would expect that to change over time... but some of those old posts were just you know basically after birth... not really useful... I'm using that in a very intentional way... I do not view those as useful things... a lot of the other questions that are great questions and even the ones that I don't really care for sometimes - are too discussy - I'm not going to go in a delete them - I'm not going to be that guy - that goes in and just deletes other people's crap - but I think I have to be on some sort of level because you've just gotta cleanup... the act of creating the site creates some unnecessary complications that you should just remove later - like warts - and after - if people want to create new threads on this - that's fine - within a certain limit right. I'm looking at the overall ratio of questions on the site and trying make sure that there's not too much naval gazing - because I have had - I've actually gotten to the point where I don't like it any more - honestly - I think there's too much discussion of the site - almost ad nauseam.
[12:30]
Spolsky: It's um, it'll, uh, first of all it will settle down. ?But secondly, you'll have tools. ?Like you'll, I don't think everybody's always going to be looking at all feeds. ?I think they're going to be looking at technologies that they care about and they'll look at the home page, and the home page will inevitably have one thing about StackOverflow every day from some newbie but they'll just get voted down if it's not interesting to the larger part of the audience. ?I mean, that's what I saw... 
Atwood: The voting is working, the voting is working spectacularly. I mean, I agree there is some question about how effective the question voting is but I think even the question voting it's a less strong effect, but it still works. You still see good questions get voted up. 
Spolsky: So, one of the things I like about Google is that they have this almost fanatic devotion to not, no special cases, like they never go in an just remove a site from the search results. They, they, or tweak the search results in any way, they always try to change the algorithm or do something algorithmic. And uh, it got so bad, there was this incident, do you remember this incident? With the search term for "Jew"? 
Atwood: Vaguely 
Spolsky: It turns out that no one uses the word "Jew" very much. They'll say "Jewish" or "Judaism" or something like that and actually using the word "Jew" is kind of the hallmark of an anti-semite and so if you searched for "Jew" on Google for a long time, until recently, it's been replaced by the Wikipedia article but for the longest time you got "Jew Watch News" which is this huge anti-semitic site. You get, um, a lot of anti-zionism and all that kind of stuff and, um, that was just what was naturally happening and that was not because the world is anti-semitic, it was just because the word is not used that way any more. You know, people always say, "jewish person", or something, they don't say "the jew" and, um, and so, Google was absolutely unwilling to tweak any of their search results no matter how offensive, um, the appearance was there was sort of a lot of conspiracy theories and paranoia among jewish groups that Google was somehow deliberately being anti-semitic or something by high-lighting these anti-semitic sites when you search for "Jew" and um, what they finally did was create a web page explaining why those results are the way they are and they bought an ad on their own site explaining it. So there is an ad, if you search for "Jew" on Google now, you'll see an ad that Google themselves has bought that explains why the search results are what they are and why they're not going to do anything about it. And uh, so I that's something I thought was sort of interesting is like, they've always had this uh, fanatic goal of not doing anything, not really special-casing themselves or just not being willing to have any exceptions but thinking, "well this is a sign that there must be something wrong with the algorithm and I'll go back and tweak the algorithm". So in that spirit, if we're getting a lot of discussion about StackOverflow, maybe there is something about the algorithm we can do, like if it's highly repetitive, then maybe the algorithm isn't doing a good-enough job of directing people to previously asked questions. 
[15:48]
Atwood: Right, and I think there's two usage models here, and I think we're only really seeing one because it's a private beta and, you know, the nature of the audience is that they're highly interactive and very interested, and I think you're going to have vast hordes of sort of vaguely interested people that are going to hit the site, and those are really supposed to be a big big part of our audience. These are the people looking for drive-by answers.
Spolsky: The beta does not in any way solve the people who come to the site, because the beta is invisible to Google, so our most common use case which is gonna be somebody types a question into Google and the answer happens to be on StackOverflow is not even being tested in the beta. We don't even have that kind of audience.
Atwood: That's right. I think that sometimes people forget that thats really ... I don't understate the importance of the people that are highly engaged with the site and want to do it, but thats kinda like ... what is the term they use in the movies? "How will it play in Peoria?" The mainstream audience you're going to get is not really the same as the elite developers that you have attached now. And although people have complained about the quality of the questions, you have yet to see what will happen when we open this up to the real world.
Spolsky: Yeah.
Atwood: Like the offensive flag on the last podcast that we talked about. People were confused about that. I don't think they'll be confused at all what thats for once we open it up to the public.
Spolsky: [Laughter] You mean because there will be truly offensive things will show up very quickly.
Atwood: Oh, Yes.
Spolsky: Is there a tag for "Jew" yet? [Laughter] No, we don't have that.
Atwood: Nice.
Spolsky: Because I personally would be very offended.
Atwood: Way to tie those together.
[17:32]
Atwood: I want to come back to one thing I talked about and I realise I'm meandering and I apologize, there's a lot of stuff here. We do want to show peoples vote history because I feel that there's a strong overlap between the things you've voted up and sort of your trail on the site of things that you're kind of interested in like .. people were complaining its like well if I wanna find something that I've looked at I have to post an answer there and then it shows up on my user page as you know something I've answered but know once this private tag becomes visible we can't show it everybody we can only show it to you because it actually shows your actual voting history you can use it as a trail of breadcrumbs say oh these are the last 50 things I voted up and then you can just walk the list and go back to those. So it is kind of a de facto kind of favorites... as there is a relationship there..
Spolsky: Oh I see here on the... When I look at my profile page it says zero votes is that where thats gonna go? ..[garbled]
Atwood: Oh you haven't voted on anything?
Spolsky: Yes, no I vote on things all the time.
Atwood: Oh well we had lets see [chuckle] let me see
Spolsky: [laughs] OK we still got some kinks to work out I hadn't even noticed.
Atwood: No no no actually I know what happened we actually had, heres some full disclosure. So this is a site for programmers so we have a lot of programmers actually attacking the site and one very determined group actually did make a successful cross-site scripting attack and they were actually able to log in as me and you unfortunately.
Spolsky: Oh
Atwood: Yeah well I learned a lot about this actually I'm going to write a blog entry about this but one of the unfortunate things is that there is this thing called a er, well cookies those aren't complicated. But if you can track someone's cookie if you can basically inject script into the page that takes the cookies via JavaScript and just dumps them out to another website
Spolsky: Yep
Atwood: Then that person essentially becomes you
Spolsky: yeah
[19:27]
Atwood: Right. I mean unless you're... Even with a perfectly encrypted connection this is absolutely possible. ?This is why cross-site scripting is so pernicious and so dangerous. ?And it actually did happen, and I'm actually kind of annoyed at those guys because I've been tolerant of their activities because usually they tell me, and warn me. ?But they've really been skirting the line between just sort of doing things and not telling us. ?Like we had to sort of, see the logs, and sort of figure out this was happening. ?And, uhh.. yeah. ?There may be some penalties.
Spolsky: They should be reporting things as bugs instead of just exploiting them. I mean, we're happy that our beta testers are discovering these things while it's still a beta. 
Atwood: Right.
Spolsky: But it would be...
Atwood: Well, I think these particular two are just showing off. ?I mean, even talking about it is bad because they want attention. ?I mean, it ultimately kind of helps the site but, like he mentioned that he actually tried to delete your account and I think the votes in fact did get deleted and I apologize.
Spolsky: Okay.
Atwood: This is the kind of thing we want to find out you know, before we go public.
Spolsky: Yeah.
Atwood: So, yeah.
Spolsky: Hey, what did you think about, here's something that people who are not paying attention to StackOverflow can relate to...
[silence]
Spolsky: [laughs] I'm sorry. I just got an email from Barack Obama that says, "Did you see Michelle?". And I'm like, "Oh dude. [laughs] Please tell me you didn't just email your whole mailing list because you don't know where your wife is."
[both laugh]
I'm sorry, he needs some email training.? Okay, where was I?? Umm, now I've lost track.? What were we talking about? ?Oh the beta..
Atwood: We were talking about...
Spolsky: Did you see that article that Aaron Swartz wrote about how to go public? Like not the Hollywood Big Bang launch, but like a long, quiet, steadily growing.. Did you see that?
Atwood: I don't think I've seen that.
Spolsky: That was pretty good. I'm going to have to find the link. It showed up on Hacker News. It's just on Aaron Swartz's blog. Let's see...
Atwood: Doesn't he do politics now?
Spolsky: Yeah, he does all kind of stuff.
Atwood: Did you know his page is PageRank 9? Did you know that?
Spolsky: Nah, it's four. ?And umm..
Atwood: [laughs]
Spolsky: I'm looking at it right now, it's four.
Atwood: Okay.
[21:48]
Spolsky: The article is called "How to Launch Software" and he is sort of comparing the Hollywood launch which is is kind of what Apple does really. It's absolute secret and then they throw... impose it on the entire world. That's actually what Cuil did and this was a disaster. They just weren't ready. And the opposite is sort of the quite like the GMail launch where it's invite only. And then you can? send invites to your friends but they very much controlling the speed in which it rolls out.
And the benefit is of course that you get to scale gently rather than suddenly.
Atwood: Right.
Spolsky: Let me tell you. I'm just gone read from his blog post something quickly. "What happens when software developers try the Hollywood Launch, and I've seen this many times, is that users indeed do flood to your site on launch day but first they bring the site down from the load. You scramble to get it back up and succeed by coding like a mad man, only to find they discover some big bug that you never quite noticed before, which makes the whole thing look like embarrassing hackwork. So you're desperately rushing to fix the bug before the traffic dies down, rush-patching things and restarting the server when you bring the site down for everyone because there was a syntax error in your patch that keeps the server from coming back up. You fix it while cursing yourself madly. Finally everything seems to work. You take a breath and decide to see what people are saying about you on the Web, only to discover that everyone misunderstood what your product does because your front page wasn't clear enough. Now they all think it's stupid and wonder aloud how you even know how to breathe. So you reply in all the comment threads and fix your front page to ensure no one could possibly misunderstand what it is you're doing just in time to find that all the traffic is gone." So this is exactly what happened to Cuil [laughs]. And I've seen it actually a few of times. It is kind of interesting point like if you get publicity and you get everybody looking at your website kind of suddenly all at once... you often get a very very large number of people who have a worse impression of you than you deserve.
Atwood: Well there some conversations among the many threads of meta conversations on the site. One that I actually thought was someone insightful was the idea that, and I've often thought this. This is like when you have something good you actually don't want a lot of people to know about it. I mean the fact that [sort of?] only the 'cool people' know about it for a lack of phrasing it.
Spolsky: yeah
Atwood: Is actually a kind of a plus. And you know. Having a sort of the dogs of digg sort of run over and trash your place doesn't necessary help things. 
Spolsky: yeah
Atwood: On the other hand I'm torn because I definitely like you know tight knit communities and I've talk about that many times on this podcast the value of those tight knit communities.But on the other hand I want to be inclusive to were anyone can participate like the whole Wikipedia aspect to it. I feel like how do you balance that. I mean. How do you have. I mean I guess you just not publicize it. Which we could certainly do. I mean I could certainly not write about it. You could not write about it .It's getting plenty traction without us ever even talking about it.
Spolsky: yeah 
Atwood: So it's an option I guess.
[25:00]
Atwood: Yup... I agree. And I've had the same concerns about the "hollywood launch". For one thing I honestly don't even think it's even necessary. I think that people that need to know about StackOverflow kinda know about it... and the people who should know about it will because of the whole "network effect" of the thing were doing. So i guess maybe yeah well have some comments on this podcast that'll maybe give us some advice on the directions that we think we should go. One thing I don't want to do is have like an invite base system ?like google? remember the early days of gmail?
Spolsky: Yup.
Atwood: When you could mail like 100 people and those people could join.
Spolsky: I think you got like 5... you got 5 invites.
Atwood: Well you got more over time.
Spolsky: there was a knob that they turned to adjust it based on the amount of physical hardware that they had and how much they could support ... and they would just increase the number... they would give everybody more invites if they had extra hardware and they would take them away if they didn't.
Spolsky: But, okay, well here's the thing. The truth is, it's not really in our hands right.Because, we're going to blog about it. We have the audience that we have, and that audience already knows about it and a lot of them are listening to this podcast. And they're just hearing about it through our website, and they're going to find about it. And then there's the second tier, next larger audience, which is you know, Scoble already mentioned it. It's likely to get looked by, even if we don't promote it to them, by people like I dunno maybe Tech Crunch, or you know that kind of thing. It will show up on Techmeme for a minute. And when that does finally launch, a lot of tech bloggers will come in and looked at it, and mention it. And that's sort of a medium level of publicity.
But then there's a thing which we probably don't really want to happen which is, front page New York Times [laughs]. That would probably be ah, bad, for us early on. First of all, the traffic would overwhelm us. Secondly, those people wouldn't really know what they were looking at necessarily, or how it's suppose to work. And we would just have this, phenomena of a million newbies running around.
Atwood: Yeah, I think the worst thing that we could do at this point is for you and I to both to both talk about it at the same time in a very public way.
Spolsky: But, we don't have.. I don't think that would be.. I mean.. Our audiences are perfectly a good developer community. They'll be fine. The trouble is, if it kinda goes broader than that for some reason.
Atwood: Right.
Spolsky: I goes to the... if it starts out and people who don't really know how to use, I don't want to say, "don't know how to use the Internet". But, the audience of people that read Coding Horror and the audience of people that read Joel on Software are already fairly elite in the programmers. Because they're the kind of people who are trying to read things in order to better themselves as programmers. And that's already, you know, 5% to 10% of practising programmers. It's not the vast masses of Java monkeys, who were formally VB monkeys, who were formally COBOL monkeys who are just doing you know, large swaths of extremely boring stuff internally somewhere. Ah, who have I not yet offended?
[both laugh]
Atwood: Well I think the Jews. You've offended the Jews for sure.
Spolsky: [laughs]
Atwood: Big trouble, buddy.
Spolsky: I hope. Sorry. Don't bother writing in, I'll just commit suicide. I apologise in advance.
Atwood: Let's talk about the schedule...
Spolsky: Yeah
Atwood: So we did decide... so the only show stopper that we had was the deadlocks; and I actually blogged about that. It turns out for our particular, actually for most web apps, you have this load scenario which is basically like 99% reads and 1% writes. [laughs]
Atwood: And it turns out that SQL server is kind of crappy for that kind of load scenario out of the box, um, But they added this thing called recommitted snapshot which is exactly what it's designed to accommodate - those kind of loads.
Spolsky: Is that the same as row-level locking?
Atwood: Ah, I get so confused, there are so many different features in SQL Server and,honestly, I can't even keep track of them all. The one thing I do know is that every time you read about this thing called read committed snapshot. So, that's exactly what it's designed to accommodate: Is to have unblocking reads, most of the time, like in except for extreme scenarios.
Because, it turns out the locking model in SQL Server out of the box is very conservative.Like, it likes to lock stuff, really longer than it probably should. If you don't, you know your not.. You don't have a bank account you're keeping track of here. It's just some posts on our stupid website that we're creating. So, if it's out of date, that's better than this giant blaring deadlock error.
Spolsky: So basically what we're doing is declaring to SQL Server: "I don't care if the data is slightly out of date, as long as it's consistent. As long as it was correct as some time. If somebody is changing it right now, don't wait for them, I'll take the old data please."
Atwood: Yes, for the most part. I mean, although you can still lock. This is not lock free by any means. This is not.. the lowest level is what they call the dirty reads, which is the no lock stuff. And you know, that's where you get into slippery slope of, that is kinda sketchy. Because you're basically, disavowing all locking at that point. [laugh] So we're not disavowing locking, we are in a consistent state. It just may be out of date at any given time. But I'm really glad that we've resolved that and I've got to thank Geoff Dalgas for really going the extra mile on helping us figure that one out. But, that was the only show-stopper that we had. The rest of it is pure scaling stuff, right. Which we can do. We can figure that stuff out. It's not an unknown.
But for the record, in terms of scaling, I am inviting more and more people in. Sort of, now I'm doing 300 people per day. Trying to get the load up as much as I can. And it still actually looks really good. We have an 8 CPU box with 4 GB of memory and it's humming right along. We don't.. we're not even remotely close to pegging the CPU. The caches are all working. We're not missing any major indexes. I just ran the Database Engine Tuning Advisor right before you called and, have you ever run that thing? It's kinda funny.
Spolsky: Yeah, regularly actually. Yeah.
Atwood: Yeah. But it comes up with the craziest indexes. "Oh yeah, you've got to index these 10 fields! And these 12 fields!"
Spolsky: And you can either try to figure it out or just say "Okay, do it." [laugh].
[33:00]
Atwood: Yeah, exactly. So my strategy with that was, I picked.. it found one index for us that was 19% of our workload, which was really high. And the rest were like, 1%, 2%, it's like, "I don't care". So I created that one particular index, which ironically created some deadlocks while I was creating the index but that's acceptable because I knew that it was going to happen. Of course then people started emailing me, "Your deadlocks are back!"and I'm like, "No no no, I was creating an index. It's okay, no need to panic." [laugh] So yeah, stuff like that.
We actually have yet to implement any kind of caching on our end. In other words, every time you hit a page on StackOverflow you're actually querying the database every time. This is intentional, okay. Because we're trying to optimise the normal state of the system. So that, in a normal page request we're not killing the database, right? We want to be as optimal as we can with no caching. And then we're going to make it even better by adding caching on top of that. That's over the next few days.
And, have we even said the date? We were tentatively thinking September 3rd. Right Joel? Is that what we thought?
Spolsky: Umm.. what day is that? Like right after Labor Day weekend, yeah.
Atwood: 'Cause we figured nothing is going to happen on Labor Day weekend.
Spolsky: Yeah. I was actually thinking, yeah the 3rd. The 2nd and 3rd.
Atwood: Yeah, and I'm comfortable with that based on the features that we have, the fact that we've resolved that annoying deadlock issue, and my comfort level with our current level of load. Now, we could get load like that's so crazy, that who knows [laugh]. But, our ace in the hole is we're going to go back to this caching thing and actually start caching stuff and hopefully that'll buy us some time.
Spolsky: Yeah, you also could certainly add another box and move SQL Server to its own box.
Atwood: I'm a little worried about that because I feel like the advantage to having SQL Server on the same box is that there's no network communication time. It's like a TCP/IP socket to the same machine. Right? There's no.. So I think by the time you...
Spolsky: No, but.. It helps, it helps. Because with gigabit Ethernet, it's faster than the hard drive speed anyway. So..
Atwood: But it's in memory, it's not really touching the hard drive for the most part.
Spolsky: I'm saying that if you have two machines that are hooked up and one of them is SQL Server and one of them is the web server and they are hooked up with a dedicated gigabit Ethernet. All your good servers will have two Ethernet cards. So you can just have a single Ethernet card that all it's doing is letting you talk to your SQL Server. And the speed of that network connection, will not be saturated until you're pumping out data faster than you're reading it from the hard drive, which is impossible.
Atwood: But still there's more latency going over the network than there is going in memory on the same machine. That was my concern, was the latency across..
Spolsky: It's negligible. Yeah, it's negligible. We do that everywhere and everybody says that it's worth it.
Atwood: Okay. That's cool. We do have that path...
Spolsky: I mean, don't forget that, what happens is: I mean you have a lot of CPUs. So..
Atwood: Oh no, we have a ridiculous amount of CPU power, it's absolutely not the bottleneck. Most of our CPU time actually is SQL Server any way.
Spolsky: The other thing, I mean there's going to be a point where you don't want to be down that much and you're going to want to have two web front ends that you can swap in and out and just one SQL Server back end.
Atwood: Right.
Spolsky: That's sort of the standard, you know, slightly higher tolerance system. Where you have a front end load balancer, two web servers. You can bring one down to update the code. And then bring the other one down to update the code. And you don't, for just regular daily, "Oh, I have new code", you don't have to bring the server down.
Atwood: Yeah, this is going to be quite.. I think you were right to be concerned and I was also concerned that, you're right. Once this goes live there could be a really high level of load and I could spend a lot of time not necessarily programming, but doing sys admin type stuff. Which I don't mind actually, I view that as a part of the whole ecosystem of understanding.
Spolsky: Hmm hmm.
Atwood: You know, if you write good code, you understand like how to deploy that code.
Spolsky: Yeah
Atwood: All these things we just talked about are..
Spolsky: It's much more fun when you get to work on both things at once instead of just having to stick to coding or sysadmining. But, what I'm really.. one of my fears actually is we'll suddenly finding ourselves in very reactive mode. Where we spend literally all of our time just putting out the latest fire that is caused by the sheer size of the site and we don't have enough time to do features that we might want to do.
Atwood: Right, and by "your time" you mean "my time".
Spolsky: [laughs]
Atwood: You won't be spending any time doing that, it will be all me. But that's okay. What do I do? I just sit here and blog, right? It's something for me to do, that's good.
Spolsky: Well.. yeah.
Atwood: It's also fun, lets be clear. We talked about puzzles on the previous call, like how I hate to have.. like "How Would You Move Mount Fuji?", I think that's a total load (no pun intended).
Spolsky: Yeah
Atwood: But this kind of problem, I think is awesome. 'Cause I love nothing more than to spend hours working out how we should deploy our server structure, you know? Figuring out this deadlock issue was even kinda fun. Even that cookie hack issue I talked about, that was kinda fun to figure out.
Spolsky: Yeah
Atwood: 'Cause we had to go through the logs. We had to figure out where they were coming from. Where they got the script in the system. This was fun, this was like detective work. I mean, don't get me wrong.
Spolsky: Mmm hmm
Atwood: It's still annoying, they should have told us. And I also, let me give you an example. I learned about, and I think I knew this I just hadn't flipped the bit in my mind to make it significant. There's this thing called the HTTP only cookie, which we weren't doing which was a huge huge mistake. I'm about to write a big blog entry on this. You should pretty much mark all your cookies as "HTTP only". And it's enforced by modern browsers. So if somebody is running on an old browser, yeah, you're hosed. But if your running on a modern browser like Firefox 3 or IE.. even IE 6 actually does this. This is one of those Microsoft innovations, believe it or not. You can tag the cookie with "HTTP only", Javascript cannot get to it. It's enforced by the browser.
Spolsky: Ahh
Atwood: Oh yeah, it's huge. It would have totally protected us in this case, if we had the foresight to have this set.
Spolsky: No but, I mean wait. ?If Javascript can't get to it... Oh, I see, I see.
Atwood: Yeah, because it's the script that's actually doing all the work, that's running in their browser. It's not like, you know, you're there with a sniffer, you know? It's just a Javascript. It's totally lame. What's so lame about, it's like it's such a lame attack, yet it's so effective. It's just scary.
Spolsky: Yeah. Because everything depends on cookies. If you have any kind of persistent login, it's just a cookie.
Atwood: Yeah, it's.. oh yeah. There can never be enough publicity around this. Believe me, I'll be writing the blog entry. So before we get too much deeper on StackOverflow, I feel like we didn't get to any questions last time. Do we have any?
Spolsky: We have bunch of good questions that have been sorta sitting here in my inbox for several weeks.
Atwood: Oh uhh... Let's get to it.
Spolsky: Let's go to Ryan Cox.
[39:51]
Ryan Cox: Hi Joel and Jeff. This is Ryan from Raleigh, North Carolina. I was wondering if you might talk about backups and disaster recovery from the context of Fog Creek as well as StackOverflow. Thanks and keep up the good work.
Spolsky: I can start with Fog Creek. What we did. And it's really ...
Atwood: Let me start with mine. Mine is easier: "We are supposed to doing backups?"
Spolsky: Ya. So you are saying you are not doing anything right now? 
Atwood: We're are actually doing backup of the database every night, but it's not transmitted anywhere. So go ahead.
Spolsky: It's on the same hard drive with all the other .. . You are not even transmitting it anywhere?
Atwood: Of course, why not. We are like Windows users. We don't know any better.
Spolsky: Oh, OK. So, you know it's interesting. While I mention this, because I am a little bit, in Fog Creek ways, way more conservative than that. And I just sort of, you know, for years and years and years, I mean literally the first year we were selling FogBugz, Michael said: "Why don't we just make us available on the web, just like an on-demand-service." And it went through, these things went through three different names, before we find it. First they are called ASPs. And then they were called SAAS's. ?And now they're called on-demands.? And when the third name came around for the same thing, then we finally did it. But the reason that I kept resisting doing it, is that we were a small bootstrap company and at first we literally could not afford a colo facility. We had a T1 to the office. And actually our public facing web server was an old Thinkpad laptop with a broken screen. So, for servers you don't need a screen and I kept that on all the time and it would get kind of hot. So I set it up on a little, like a plastic dish rack, like the thing you put your forks in. What are the things called? A fork holding thing. Just to get some ventilation around this old laptop. And that was our server. And I just could not ... I don't know if many people have done it, but I just did not have, could not with a clear conscience, sell people that as a hosted on-demand service for which I take money, because I knew that if anything happened and I had no recourse, you know, if the T1 went down or the server went down, or whatever, I would feel terrible. And I wouldn't be to deal with all the people calling up saying "where is my data?". So, we didn't actually go live until - and I became kind of more and more scared of this the time went on. And so we didn't finally go live with FogBugz on-demand until we had an infrastructure with almost no single point of failure. It has single points of failure, but they're very rapidly going away. So, our current infrastructure looks like this what we talked earlier about: Two web front ends and a SQL backend. And that makes what you may want to call a cluster. And we have one of those in New York and one of those in Los Angeles. In separate data centers, actually on separate backbones. And, what we do is, we put - both of these are live at all times - and we put half of our customers on New York and half of our customers on Los Angeles. And you sort of get assigned at random, although we probably should be looking on where you are coming from and try to get you to the lower latency data center. But we just assign you at random and then the SQL-Server instance that we have running in each of these data centers is doing regular backups. And it's actually shipping those backups to the other site where they are being restored and made ready as warm standbys. Not quite hot standbys because they are live right away, but they're warm and with one command the become the live site. And the way you do that - and SQL-Server is pretty good about this - is: you do a full backup and then you ship that over (and that's large). And then you load that up and restore that backup in the other data center. And then, with some frequency - and I think we are doing that at least every several hours - you do what's called a transaction log, which is kind of an incremental backup of what has changed since the last full backup. Or since the last any kind of backup. And then you get those very small files and you ship those over the net and it doesn't take any time at all, because it's very small, and you restore those too on top of it. So, basically we got a couple of things going on. One is: we got regular backups happening locally and those backups are also being shipped to whole another datacenter where they're being restored and we are almost ready to switch. And I think if we had a catastrophic failure of an entire data center, the trouble is, it would take us at least a couple of hours to gather enough information to find out that that data center is not coming back. Because if it's gonna come back you don't want to move everybody on to the other data center. Because it can then be expensive to re-partition them later. But if that data center actually blows up, and we know that it's not coming back, probably within a few hours we are up and running on the other data center.
[45:01]
Atwood: Well cool, and that's critical for you guys, because you're doing hosted services.
Spolsky: And yeah, and it's also mission critical data in the sense that, to a software developer. You know, their project schedules, and their list of bugs and list of features that they want to work on. You know, you can do without that for an hour or two, but after that you start to become really ineffective.
Atwood: Right. Well unless you're like me and just keep it all in your head.
Spolsky: Yep.
Atwood: Very effective.
Spolsky: Somewhat.
Spolsky: And with StackOverflow on the other hand, it's kind an optional service, you know. If the service disappears for a day, well: You didn't have it last year, you don't have it this week. Sorry.
Atwood: Yeah. No, I think there's actually an important distinction point there which is that, once customers go in put in data there for creating their own little worlds in there, right. To a limited extent people are doing that on StackOverflow. But we're talking about like what you said, like lists of bugs, you're outsourcing part of your business to Fog Creek.
Spolsky: Uh huh.
Atwood: There's no part of your business that that's going to go onto StackOverflow. Nobody's really in the business of answering questions,? programming questions. ?So, um I think, obviously it's much more critical in you guy's [Fog Creek's] case.
Spolsky: On the other hand..
Atwood: That was a great question.
Spolsky: You would really hate it if the entire StackOverflow database just disappeared.
Atwood: Well yeah, it would be very dreadful.
Spolsky: You'd be struggling to recreate it from the Google cache.
Atwood: Yes
[46:20]
Spolsky: So what I would do in the case of StackOverflow actually if I was you is find some storage somewhere. It can be Amazon, it can be... Well heck, your server is not in your house, right?
Atwood: Well actually, we have, I have access to another hosted server at this vendor. So I can get to it by IP address. I can just copy it to the other server.
Spolsky: No, but if it's the same vendor, it's in the same room. So that doesn't...
Atwood: I guess that's true. You're right.
Spolsky: What I would do is set up SQL Server to do a full backup, a daily full backup, and then like hourly incremental backups. And take those backups and ship them to a somewhere in a different city. Just the files.
Atwood: Right.
Spolsky: That's not real hard work.
Atwood: Yeah, the Amazon EC is actually pretty cost effective in terms of the storage cost per byte over time.
Spolsky: That's one way to do it. Or you could even get a simple shared hosting account or one of those big drive things. Or heck, just email it to your Gmail account.[Both laugh]
Atwood: Now you're talking like a Windows developer. Now you're using words I can understand: "Just email it your self. How about I just fax it to myself?"
Spolsky: "Email it to your Gmail account." Ahh...
[47:35]
Spolsky: Anyway, there's a lot of places to store just bytes. And that would be a good thing. And a very very important thing to remember whenever you're thinking about backups, and I always forget this. I always forget this when I try to design a backup strategy. There's a lot of things that can go wrong, but there are two that are very very different and you have to protect against both of them.Number one is that your data disappears, and you need to get back to the data you had before it disappeared. And in that case, what you really want is something as close as possible to a mirror of the data in a different place. And so, a hard drive fails: Oh good, I've got a mirror in another city. You know, terrorists drove an airplane into my data center. Okay, I've got another one at home right here. And you want that to be as close a mirror as possible. And for that type of backup, obviously you want it to be as fast as possible. Like literally, you couldn't: A backup every minute would be not even enough because you've lost a minute worth of data when thinks go down. So that's the mirroring.But, the other type of thing is that you've screwed something up. You went into the database and you typed a command, deleting a very important table. And you need to be able to get to how the data was in the past. And if you have a really good mirroring system, the mirror also has the table deleted. And you're screwed.
Atwood: Right.
Spolsky: So, you need to take into account both. How do I get back to something that I screwed up, when I screwed something up? You know, I have most of my data but I did something wrong to my data set.
Atwood: Uh huh.
Spolsky: Combined with, what do I do if my hard drive fails, or my server disappears, or blows up, or burns down, or something like that. So you have take both of those into consideration. And then there's all kind of, if you really want to get paranoid, you can go deep into: What happens if I notice at some point that six weeks ago I made a fairly crucial mistake and deleted some stuff, and I no longer have a backup that's old enough to go get that back. You know, you sort of have to... There's all kind of much less common problems. Or, what if you discover suddenly that a hacker got into your system nine weeks ago and has left, who knows what they're corrupted. You can't roll back to the state of the system nine weeks ago, because you'll lose nine weeks of questions and answers. That would be pretty bad.
Atwood: Right, like somebody actually went in and deleted all of your votes. Which actually happened to us. [laughs]
Spolsky: It's not always possible to solve those cases obviously.
[50:00]
Atwood: RightSo one of the reasons I actually started to doing the daily backup in addition to being just obvious
Spolsky: Mh hm
Atwood: was actually well, I've I've been working a lot on StackOverflow like I dream about it like I'll..
Spolsky:? I know
Atwood: It's pretty much consuming my waking life and my sleeping life.
Spolsky:?hehe
Atwood: Uhh, so I have this really strange dreams. ?And I dreamt that somebody had injected and like drop one of our tables.
And I woke up and I was just frantic and I like?run over?to the computer and I like went to the backup plan generator and...
Spolsky: yep
Atwood: ...immediately ran a backup plan. This is like a few days into the beta. So it was like it was just?funny how, yeah.
Spolsky: Ah hm
Atwood: So yeah backups are good.
Spolsky: Backups are good.
Atwood: What's another ah hm.Lets do another
Spolsky: Lets do another question.okay
Atwood: yes
Spolsky: This is a good one this came up on StackOverflow as well.
...
[50:45]
Ryan: Hi Jeff and Joel.? My name is Ryan. I’m a software developer from San Diego, CA.? In developing a database-centric application, designed for hosting multiple clients, I’ve always felt that it was better to use a single database with proper indexing to store the data for every client instead of using a separate database for each client. There are, of course, obvious exceptions to this, such as when you need to give clients direct access to their own database.
Now Joel, I’ve heard you mention that FogBugz uses one database per client instead of a single database for all clients. Why did you choose this structure?? And how do you go about providing updates and enhancements to all databases efficiently?? Thanks.
[51:22]
Spolsky: Yeah… So this is easy and I’m sure that the way we did it is right because what’s interesting is when you go to some of the other on-demand vendors who will remain unnamed who have on-demand products, this whole idea of having a multi-tenant db versus a single-tenant db is something, like, they’re all working very hard to get where we are, where every client has their own private database and they’re trying to basically… and that’s taking a lot of work.? We just started out with that architecture to begin with. 
And the number of reasons is huge. First of all, let’s say that you have a database like in the case of FogBugz you’ve got a whole bunch of tables in there that are kind of top-level tables.? There’s project, bug, bug event—bug event’s not a top level table—but they’re top-level in the sense that they’re not somebody’s foreign key somewhere. And each of these tables would have to have that client ID column in it. So the size of your database would immediately grow dramatically because you would have to have the client ID everywhere, in every single, or you’d have to get it out of some kind of join somewhere to find the client ID. 
And then once you did that, the chances that you could accidentally mistakenly write some SQL that showed one user data that belonged to another user just because you forgot to check the client ID or you forgot to filter appropriately in every single case, that you just constructed some SQL query wrong, is a very real risk. And if every client has their own database there’s zero risk of that happening.
So the clients are much, much happier when they know that their database is completely isolated and that nothing in their database is in any way intermingled with any other customer’s data.
[53:09]
The next is backup.? Clients… when you have an on-demand service… clients will often ask to be able to download backups of their data.? It’s their data and they want to get to it, and they want to make sure that they’ve saved it with whatever precautions they think are worth doing, in case you go out of business or strand them in some other way. Or they may just migrate off of your service and they want to be able to be given their data.So for us to give a customer their data, it’s just a matter of issuing a backup command to SQL Server, taking that backup file and giving it to them. Or… actually I’m not sure if we’re doing that. I mean, the other way to do it is you just detach the whole database, copy the physical file and then reattach it.? And then you have a SQL file you can give them.? And you don’t have to go through and figure out which rows belong to them and which rows belong to other people and correctly filter those out. And run any kind of risk like that.So it’s just monumentally cleaner to do it per client. And I’m not really sure why people think you should have everything co-mingled in one big database, what they call a multi-tenant DB. And I think that probably the reason they think that is that sounds like good data normalization techniques somehow, or that sounds like the kind of thing you do with data normalization.? 
And it really depends on the scenario.? If you’re giving customers their own instance of an application, I think it makes much more sense for them to have their own database.? If you’re giving customers their own account on a larger system where the data needs to interrelate somehow or connect, then maybe it makes more sense to have it combined.So for example: with FogBugz we’re giving people an entire application and it’s their data and it’s totally private. If you had an application that was—I don’t know—maybe it was like an internet calendar, that lots of people on the internet could use to make events and stuff like that and coordinate events with each other, then in that kind of case it might make a lot more sense to have it be a single-tenant…
[55:07]
Do you want to add anything Jeff?
Atwood: No, I think that’s totally a question for you.? I’ve never done it, so you’re the expert.
Spolsky: It's a actually kind of interesting that there are whole classes of things that people don't do anymore. It is actually kind of rare to run a software application for people. What people are doing is they are building websites these days and if they are building an application they are actually building it for their corporation internally and, you know, its like I'm going to do the payroll application and its going to be internal or I'm going to do the vacation tracker application and it is internal and there is just one of them and that's fine and when they are making websites for a lot of people the data that individual customers may have may be relatively shallow.
So, for example, take, for example, uuhhhh... What is an example of shallow data? Tripit. Tripit.com is a website where you forward them emails of the itinerary of your trip like those confirmation e-mails you get from airlines, hotels, and car rentals and stuff. You forward those to Tripit and they see your e-mail address and they build you a nice little web page that has your whole itinerary with everything all neatly sorted out, with little maps of the cities you're going to and its quite cute.
Check it out at Tripit.com and in the case of Tripit they have shallow data because for every customer they have a very small amount of data and they have an awful lot of customers and so it wouldn't be practical for them to create a database for every single customer and it isn't necessary, the need for privacy and security is not there and customers are not likely to call up Tripit and say, I would like to download my database please.
You know, there are just three itineraries in there, what exactly are you downloading? So with something like Tripit the need for customers data to actual intermingle is higher. For example, on Tripit I can go and say, "Hey, show my Dad this itinerary" and then he gets a message and can look at his itinerary next to my itinerary and compare itineraries and that is the sort of thing you need to have everybody in one database to do elegantly.
So, uh, there are different use case scenarios but FogBugz is actually an application we are hosting for a bunch of different people and giving everybody their own database apparently makes everybody the happiest.
Alright, I'm going to move on to one more question here. Here is Phil Howey.
Howey: Hi, Joel and Jeff, it's Phil here from Auckland, New Zealand. Got a question for ya. Do you ever suffer from having to maintain legacy projects with old code that no one wants to update and if so how do you balance that with keeping your programmers interested and using the latest technology? Thanks
[57:51]
Spolsky: [laughter]
Atwood: I think that's another question for you actually. [laughter]? 'Cause we're using all the new stuff -
Spolsky: You are, because you're using the the new MVC, which isn't even shipping.
Atwood: Yeah, that's true, and then the LINQ -
Spolsky: You've got LINQ 
Atwood: .NET 3.5
Spolsky: Very cutting edge
[58:08]
Atwood: Yeah, it's fairly sexy, at least from a code perspective... That won't last.
Spolsky: My whole career, except for this, has been about legacy - crap... and technology. Ahh... And we do sort of struggle with that. Like FogBugz was written in classic ASP, which was VB Script, and it became a very large code base, and there was never any real good motivation to change the language it was written on. And we got to the point where we had to have our own compiler, and I've talked about that in the past. So... Honestly, people like working on compilers.
Atwood: Have you talked about that in the past, I don't know if I've ever heard anything about that... I don't know if I can even keep a straight face while saying that.
Spolsky: [laughter] I won't go into that. Ahh, there are a couple of things - one, I don't think legacy code is necessarily boring, sometimes I think it's a fun little puzzle, especially if I don't have to spend a whole lot of time in there. And sometimes it's more fun to just dive into some like horrible, horrible code base, and try to figure out if you can breath some life into it, or make some small change without getting burned. Umm... that may be kind of a fun project, other than that if you had - 
Atwood: Wait a minute, let me interrupt you just one second here. So I think there's two classes of really horrible code. There's horrible code by good programmers, and there's horrible code by horrible programmers. And these two things are very, very different.
Spolsky: So when you say horrible code by good programmers, you mean good programmers working in some like ancient VB Script type.
Atwood: Yeah, exactly. Like there's just a huge range. The reason I say this is because we have some horrible legacy code ... I'm kind of doubting, at FogCreek, with the kind of programmers you hire, you're ever reallying going to have the kind of horrible code to the point that.
Spolsky: No, it's very clean, it's very clean.
[59:57]
Atwood: It's conceivable that I could go into your code, say okay, it's in Wasabi or some crazy thing I don't understand. But like wow! They actually thought about what they were doing. Because when you look at a lot of the old code that's really bad, it's like programmers who just weren't thinking about what they were doing, like at all. Like you can't even. Like what was going through their minds?
Have you seen that famous picture, well famous now, on the internet, where it's like two pictures of a door for code review? Good CODE REVIEW - WTF, WTF, WTF. Bad CODE REVIEW - it's like 50,000 WTF's. Right? Even the good code is bad, is my point. And there's these huge degrees of bad. Like so, I think it's conceivable that what you're saying is true, at FogCreek you could have legacy code that's reasonable to work with. But I think you have to realize that.
Spolsky: So it's sort of like... The first question is, is the code bad, or good? Secondly, is the technology legacy, or not legacy? Is it an old technology that's just not interesting to work on, or is it restrictive, or very painful? And then there's also like, is this code that lives? Is this your business? Like I think a lot of developers would not want to go work for a company that pretty much sold a product that was written in VB 6, that had no plans to port, and that's all you're going to be doing all day, working on VB 6 code for the rest of your life because that's what their main product is written in, and they're never going to port it. That is hard to get people interested in doing. Now there's a difference between that and "We have this old VB6 app; it's working fine; nobody's ever opened it up, but now we need to change something about the sales tax rules because some new law was passed because some law was passed. Can you go in there and make that one tweak?" And so that can be kind of fun, but if you're really bogged down in some kind of old technology. We aren't, by the way, we just wound up taking over the compiler so that the compiler could be a compiler that we wanted to work with rather than a compiler that we were stuck with. But not everything's like that, and I know certainly a lot of places. A lot of the top investment banks in New York are kind of famous for hiring programmers, and they've got a lot of legacy code and a lot of boring code, and it's not a great working environment in terms of how well programmers are treated, and there's all kind of things that are wrong with wanting to be there as a programmer. But on the other hand, these investment bankers have a lot of money, and they want really really good programmers who went to Harvard. So, what they end up doing is giving their programmers relatively free-reign to mess around with new technologies sometimes, and it's not uncommon to see thees big investment banks. You talk to a programmer at (this has happened to me so many times now), you're talking to a random programmer "Oh, where do you work?" "Lehman Brothers" (the names have been changed to protect the guilty) "What are you working on?" "Well I'm working on this team and we've got all this legacy Linux code and we finally decided to port it to the latest version of .NET and C# 3.5 and my boss wants to do something with F# and so we're on this major 2-year project to re-write everything on this whole new platform." And they're all very excited about that and I don't want to tell them that, that whole Linux thing was a major re-write from the previous version, which was all in, lets say, ASP.NET, or the original ASP; VBScript or something. Which in itself was a huge re-write of some system that was in Java; Which in itself was a huge re-write of a Windows app written in C++ with a user interface created using Visual Basic; which in itself was a re-write of some Excel macros; which itself was, well, that was when the business was invented. So, every two years some new boss comes along and they just decide to re-write the whole thing in some new language. And this costs a great deal of mony and it's just not worth it and it's a complete waste of time, but these investment banks are willing to make this investment in letting people screw around with the fun new technologies because it's the only way they can hire the programmers of the caliber that they want.
[1:04:05]
Atwood: so you're saying there's a balance there, it's like if you're going to ask programmers to do janitorial work give em something else, kinda like google, like the mythical google 20 percent of, OK you have to work on this really boring ad platform that we have and then the other 20 percent of the time you have...
Spolsky:?(interrupting) yeah but nobodies gonna tell you that you can't have a big project to port everything to C#, and then the other thing you see at these investment banks all the time is that they'll constantly, in any one of these investment banks somewhere you can find all the elite programmers working on some kind of an infrastructure project that has nothing to do with finance, it's just pure software engineering. So it might be the 'Universal Login Architecture', it might be the 'Universal Data Transfer Architecture', it might be the 'Universal Risk Management Architecture', its some kind of thing that, that you can buy off the shelf, theres probably an API for it in Windows if you just look hard enough, or an app you can buy, but you're writing your own because that's whats interesting to the top programmers and they have somehow convinced the business people that thats how it has to get done - and er, and er, and it's fun. So they may have you know, the mediocre people get stuck working on some kind of legacy code but all the top people find some way to write a universal login system with umm, that never ends up shipping that they spend 2 years on written in umm, I don't know, Haskell or F# or IronPython or some, you know, something fun - and cool.
Atwood:?oh come on, Ruby.
[1:05:30]
Spolsky: I haven't seen Ruby yet, but it's going to start showing up there in the investment banks. It's not their flavor.
Atwood: You bring up a good point. On previous podcasts people were asking, well, why do Jared and Jeff work for you, for slave wages on StackOverflow? And truly, it's like -
Spolsky: Slave wages.
Atwood: You couldn't even survive on what I pay them. And I think one of the reasons they want to do it is because they know me personally. There's a personal relationship there, hopefully a good one. And second, because this is a really cool thing we're building. I love building this thing, and they love it too. So this is their twenty percent project, they have full time jobs, right? They're at very flexible schedules. But this is their twenty percent project.
[1:06:24]
Spolsky: And you know what? Three years from now, they're gonna be famous. Not that that matters.
Atwood: Possibly, I mean it's... Even if they're not famous, it's like you said, this is the biggest system we've ever worked on, easily. Right? How many people is this system going to touch, vs. anything else, anyone of us on this project has ever worked on? So from that perspective it's exciting.
[1:06:42]
Spolsky: It's just really awesome to bump into people that use your products.? That was one of the best things about when I worked on Excel - yeah, I don't mean famous - it's like, you tell people you were on Excel in the early days - it wasn't even such early days - I worked on Excel 4 and Excel 5.? But they're like "Oh Excel! I use that every day, I love Excel!".
Atwood: Yeah, it's cool.? It's definitely cool.? And we've talked about this before, but it bears repeating - it's like - to me, as a programmer, the biggest complement you can get is for people to use your stuff, man.? I mean, that's the whole reason we do this. So if you can position yourself, it's like, why do people take a job at Microsoft?? It's like, there's a lot of reasons people take jobs at a lot of different places - but at Microsoft you could potentially work on something that a lot of people would get affected by.
Spolsky: That's right.
Atwood: Like if you wrote some stupid bit of code... What about the guy who wrote Notepad?? O.K., notepad sucks, right?? Nobody will argue this.? But I mean, how many people use Notepad ALL THE TIME?
Spolsky: Notepad is just one of those edit controls - and then, lately they had to add like 60,000 lines of character encoding logic to it - but that was very recent - to make it super-uni...
Atwood: Or like, what about the guy who wrote Minesweeper - with his crazy little cheat codes?
Spolsky: I wonder if that's Wes Cherry? (sp?) He wrote - no Wes Cherry wrote Solitaire.
Atwood: Yeah, Solitaire.? I think I saw an article on the Minesweeper guy, but you can be really famous for writing this stuff if you get in the right business.
Spolsky: You know what - I hate to say this - that's definitely a good reason to work for Microsoft, if it's the right team.? On the other hand, sometimes I'm trying to use some feature somewhere in some Microsoft product, and it's just not working, and I'm searching for it on the Internet, and I realize that nobody else in the world uses this feature - 'cause if they did, they would be talking about this - whatever this horrible bug is...? We're way overtime - so if any of you know how to publish Outlook 2007 calendars from public folders in a reasonable way, that's what I'm talking about...? This is obviously a feature that nobody has ever used, 'cause it doesn't even work - and there's nobody even complaining that it doesn't work on the Internet, that's the real problem - the real sign that nobody's using it.
[01:08:44]
Spolsky: Any announcements? Anything else you want to close with?
Atwood: No, just September 3rd is the planned date to launch
Spolsky: I think that honestly, I know that you've got things on your list. But I know we'll be ready. The only thing I don't know about is what's going to happen when the world hits us. I'll try to write something on Joel on Software Jeff, and you should too I hope on Coding Horror explaining at we think at least the site is kinda suppose to work. So that some of the hordes that hit it on the first day will have something that they could possibly read if they are at all interested. And find out a little bit, about how it's suppose to kinda maybe work.
Atwood: Right
Spolsky: And we don't have a bunch of newbies hitting the site, doing the wrong thing.
Atwood: Right. ?So final notes. ?I'll do the final tail-out. ?So, if you want to submit a question for us to answer on the next podcast. ?Do an audio recording, 90 seconds or less and mail it to podcast@stackoverflow.com. ?Also, we have a wiki where we have a transcription of these podcasts. ?And I'll make the same offer I always do. ?If you're desperate to get into the StackOverflow beta, we have a huge waiting list actually. ?If you do a little bit of transcription on the wiki, I will bump you and you'll get in early. ?And you can get your beta badge for being a beta tester as long as you post one question and one answer on the system. ?And beyond that, see you guys next week.
Spolsky: See you guys next week.
[01:10:09]
Outro, advertising
Ads, intro
[1:00]
Spolsky: Today is the day that we did not launch, although we planned to. But then... We'll wait for another week.
Spolsky: Oh, oh, I want to hear, I want to hear, I want to hear.
Spolsky: Oh!
Spolsky: Hm!
Spolsky: Right.
Spolsky: How on Earth do you find things like that?
Spolsky: Yeah!
Spolsky: Aha.
Spolsky: Ha ha, take a dump.
Spolsky: [giggles]
Spolsky: Windbg! Yeah
Spolsky: That's really awesome.
Spolsky:?Yeah, no. ?We're in no rush, we can take another week. ?I thought that the end of August plan was a little bit ambitious. ?I think we're both in the same position of really being on the fence, as to whether, I don't want to say on the fence but it's sort of a close call between we want to do the Hollywood launch, going back to last week talking about Aarons Swartz's thing, whether we want to do the Hollywood launch where everyone hits us at once and the world comes to an end versus the Gmail style launch where we just start taking a thousand people a day or give out invites or something to at least have some kind of control over the rate at which people come in.
Spolsky:?Yeah. We have quite a finite number of people who listen to our podcast and read out blogs anyway, so they're going to find out.
Spolsky:?These people they're going to the backlash state before we even got to the hype stage. Come on you guys! Backlash comes after the hype, that's why it's called backlash.
Spolsky:?blogging-harmful.blogspot.com. Complete waste of time, but you know if we get people to care about us whether it's positive or negative that means people care about us.
Spolsky:?That's the real failure, exactly. ?If you can't get anyone to care one way or another about what you've done. For example, this website blogging-harmful.blogspot.com is going to disappear without a trace. Even though I promoted it on the podcast it's going to make it all the more painful when nobody...
Atwood: -?at the turn of the century. I got these books as a kid and I was totally obsessed with them, because the Great Brain is all about a family. I don't remember the family's name, but there is one central character J.D. who is the Great Brain. Essentially he's always thinking up ways to, essentially social engineering before we had that word in computer circles. Basically getting people to do what you want them to do, completely of their own volition. The Great Brain is basically this genius of a kid, who is using all these social engineering exploits to get away with all this crazy stuff. In that family, if they found out the Great Brain was doing this stuff then of course he would get punished, but the ultimate penalty was what they called the silent treatment. The silent treatment meant that nobody would talk to you or acknowledge you for a certain period of time. They would give you food and stuff, but they wouldn't talk at you. It was just stunning in the book, you don't really think about this stuff as a kid (I was like 10 or so), how desperate it is as a person, as a social being, when nobody will acknowledge you. How profoundly affecting that is, right? Even the Great Brain, as a smart kid, hated the silent treatment and would do anything he could to avoid getting the silent treatment because it was just such a brutal penalty. I remember Jason Kottke talking about an episode of The Simpsons where these animated statues came to life, and the way they got rid of them was they started chanting "Just Don't Look!"
Atwood:?I also try to copy a lot of things I've seen online that have been successful, like conventions. Let me give you a specific example: PHP-BB, and I'm sure there are other web discussion boards that do this too but PHP-BB is the one I know, has this editing convention. When you post you can edit your own posts, and I noticed that when people are using PHP-BB that right after you post something you'll always notice some goofy mistake that you made, like immediately. This happens to me 9 times out of ten I'll post and think "oh, I should have talked about this" or "I missed that word," so you immediately go in and edit. At a certain threshold these are not treated as real edits, they're treated as just going back in time to pretend that it is the post you originally made. It doesn't kick off the whole auditing trail of you having edited it 50 times. One of the first things we did in StackOverflow is actually implement that. I remember talking to?Geoff Dalgas?about that, and he's like "why do we have to have this?" I said, "you don't understand, this feature has to be in there on day 1 otherwise we're going to have so many revisions that are just in the first minute or two after posting and are just silly little things that are being corrected."
[incomplete]
Ads, intro.
[00:54]
Spolsky: Everything is going... falling apart this week. Like, I'm surprised my hair isn't literally falling out.
Atwood: What? Based on your move, I guess?
Spolsky: Yep, so the first problem was that we had to delay the move. So we scheduled Verizon to move the phone lines and that kind of stuff and we delayed the move and so we rescheduled that and then it really cancelled the turning off of various lines so the entire office is now operating off one DSL line.
Atwood: [laughs] Awesome
Spolsky: So that is to explain why we may have lousy sound quality.
Atwood: It's ok at the moment.
Spolsky: They disconnected our fax line. We used to have like five phone lines at the office and now we have four, everybody's always using them and various machines are crashing and the aquarium is falling apart. It's just... The whole place is just gonna be a complete disaster area by the time we leave, it's gonna be totally trashed.
Atwood: Right, well moves can be pretty traumatic. I think that's somewhat normal for a move.
Spolsky: Have you ever done that? You're at your house or your office that you leave behind. When you leave it, you're like: "What a dumpster! How did we ever work there?" Because when you away all the stuff that you use, all that's left is this garbage that was hiding in the corner.
Atwood: Oh, yeah, sure!
Spolsky: And everything you take down,? all the little pictures off the wall and there's a rectangle where the paint's still clean behind the pictures.
[laughs]
Atwood: Well if the leaving part is painful, what about the arriving part? Is the arriving part gonna be as traumatic as the leaving ?
Spolsky: Well, we're supposed to have internet in the new place. In fact, we've had it in the new place on a different floor so they just have to move floors, which shouldn't be so hard and so far we haven't been able to get the people who installed the locks on the doors to agree to come in time. That means like bicycle locks on the doors or something. I don't really know how we're gonna deal with that.
Atwood: Yeah, not being able to get in might be sort of a show stopper.
Spolsky: We could get one of those super strong incredible New York bicycle locks. What are they, kryptonite New York bicycle locks? And then we could issue everyone one of these Bic pens they could use to get in. Do you remember that ?
Atwood: Oh yeah, the pen thing was very controversial because somebody posted a video showing how to break in the lock using something like a standard pen.
Spolsky: You take the cap of a Bic pen and you put it in where the key goes and you turn and the lock pops open! That was all you had to do!
Atwood: I think that was an early example on the power of the internet that was changing the way people designed products. Because in the old days, let's say somebody knew that exploit, right ? How would they get that information out to the world ? They really couldn't...
Spolsky: Right, it would be in these, like, lock picking magazines and stuff, but that wouldn't be readily available.
Atwood: Right, but in the era of YouTube, it's in front of everybody, so...
Spolsky: Yeah, oh and even before YouTube, you could write about it, but nobody could read so they wouldn't care.
Atwood: Yeah, that's a good point, you know it's weird to think about, like, YouTube didn't exist until like, really 2005. I think it existed a little earlier but nobody knew about it. it's like you go back and I remember even going back through my blog entries and you'll say 'why didn't I put a video here', and it's because YouTube didn't really exist then.
Spolsky: (laughs)
Atwood: The landscape has changed so dramatically, it's hard to even imagine and maybe not even YouTube, but just the fact that video can be posted, right.. by a lot of people is really common so, yeah, I think that's a huge step in the evolution of the internet / tv. I mean, it's a big deal, like you said a lot of people don't like to read so the audience just went up by what, a factor of 10? Maybe.. 
Spolsky: You can tell that certainly the people that post comments on YouTube can't read or write.
Atwood: Yeah, very true. Well, I hope things smooth out for your move cause you know we're going to be there.. we did buy tickets and everything so the Stackoverflow team is coming to New York city, I believe the 20th. I'm arriving, I'm taking an overnight flight so I'll arrive really early on the 24th, which is a Wednesday, and we're staying until Sunday.
Spolsky: Well, if you get to the office before any of us do, just bring a Bic pen...
Atwood: (laughs)
Spolsky: And then you'll be able to get in.
Atwood: You know what I'm more concerned about? Is you know, I ordered Fog Creek a whole Rock Band set out of completely selfish interest of course, cause I want to play when I get there and you guys got to have that set up. I mean, even if the doors are locked, just set it up outside in the hallway or something.
Spolsky: Well, we have.. lets see, the projector screen is installed, but needs to be wired by the electrician so that you can cause it to descend. The projector itself has been ordered, the cabling for the projector is already in the ceiling, but might be discovered to be flawed which would be a catastrophe. The receiver has been ordered, and the speakers have been ordered.
Atwood: Good, all that stuff should probably arrive by the 24th, I would think. I mean, it's the 10th, so that would be two weeks.
Spolsky: I ordered an AV rack to rack it all up on, and you know the problem with like this AV gear is, I discovered is the first time you install recievers and DVD players and stuff is that getting around to the back of them to hook up all eight speakers that you have to hook up so that there's like sixteen little screw terminals that you have to screw things on and if you've got this like up in a closet somewhere on a shelf, it's a real pain to reach back there and screw on all these little speaker things.
Atwood: Oh yeah, but it's a one time deal, theoretically.. if you get it set up right.
Spolsky: It is, but the only way to do it that's even half reasonable is to somehow like hold this 75 pound receiver on your knee while you're standing on a stepladder and screw on all the connections on the back and put them up and hope that nothing comes undone. So I ordered this rotating rack, which I hope works out well. It's this rack that you install and it spins around.
Atwood: It's like a lazy susan.
Spolsky: Yeah, in fact, I took a lazy susan, which I didn't like which had been used for cheese, like a marble lazy susan, and I used it for my beach house audio gear. 
Atwood: Very cool. So hopefully the stars will align. We'll see how that goes. And big news for me and other fake plastic rock enthusiasts, Rock Band 2 does come out on Sunday, so I'm not really planning to get anything done except for launching the site I guess.
Spolsky: Ok, as a not-Rock Band enthusiast, what is Rock Band 2 and what...
Spolsky: They had that in the first version, didn't they? 
Spolsky: As you're telling me about this thing, what's going through your head is fun fun fun and what's going through my head is.. do we have a Cat5 drop in the AV closet? (laughs) 
Atwood: (laughs) Well there is a wireless adapter for the Xbox 360, I did not buy that, but we can get it if you want because it's kind of pricey. You know the console world is annoying because they nickel and dime you for every stupid thing an I don't want to get the wifi adapter because it's like ninety dollars for this stupid wifi adapter, but if we need it, absolutely I will get it when I'm there, so if we need to, that's not a problem. And for local play, you don't have to play with people from the internet so that's nice to have. 
Spolsky: They always try to get you to plug your Blu-ray player or your HDTV player into the internet and I'm like 'no way, you're gonna use that to break my HD DVDs that already work, aren't you?'
Spolsky: Well that's literally what it is, so they can revoke things and theoretically upgrade the firmware. But, you know.. the firmware better work the day it comes out, nobody's going to release a new Blu-ray Disc or HD DVD disc. It's Blu-ray, it's all Blu-ray now, right? 
Spolsky: The difference is that we're getting paid for this!?
Atwood: Yes.
Spolsky: We're doing our jobs and they're having fun. [laughs]
Atwood: Yeah. Well, no, it's fun. I enjoy, ... I've said many times on previous podcasts I really enjoy working on StackOverflow and I really enjoy interacting with the community on it. And, by the way we've got another sign of success: there's another StackOverflow hating site that has just popped up. Somebody just told me about it today.
Spolsky: Oh, they just want free publicity; they just want me to mention their URL. So here's how you ... www.disney.com?/?dvorak.org/blog.
Atwood: Yes. [laughs] Well, this one even has a logo, though, which is pretty impressive. It's a "crap overflow", and they made our little springy thing into, like, a toilet, you know, ?with water. [laughs]
Spolsky: How did they get the domain name?
Atwood: I don't know. I guess it was available, crapoverflow.com. But I'm reading this guy Ivan Hamilton who emailed me about it, and actually Ivan had a really negative interaction with the site. He's actually listing specifically - he's very excited to go?on the site - and then he lists the questions that he went to, and he was very very dissatisfied with the answers in each one, so at the end of them he sort of concludes that there's too many incompetent developers, in a nutshell, and the problem is the answers that aren't correct enough for Ivan's taste are getting voted up ...
Spolsky: Yeah
Atwood: ..., and he feels if he puts in answers, they'll just be lost in the noise of the voting at that point.
Spolsky: That's nonsense, ... question after question that's not what happens. And it is true that we are all, as developers we're all hopelessly incompetent and the goal of a site like StackOverflow is to somehow share the correct knowledge wherever it may be as it is scattered throughout the universe, and to cause that to be voted up and to be spread amongst... You know, there's this big universe of dumb programmers, and I'm one of them, and we all have?a little bit of knowledge, like I know how to do this thing in VB6 [laughs] which may be useful to somebody one day?who's trying to maintain some ridiculously old piece of crap, and we all have these little tiny pieces of information and if we can just contribute a little bit, that information gets amplified, and maybe a thousand other dumb developers will benefit from my one little piece of good information. So, it's really an amplifier of the good information in the system, and any other way that anybody else has ever discovered of doing it, other than the StackOverflow way, does not have ... does not filter in any way the good from the bad. It doesn't have any?kind of: this is good material, this is bad material. We're the only site that really has any attempt to in some way flag things. I mean, there's a little bit of "OK I accept this answer" on other sites, and there's a little bit of other sites where claiming that somebody is an expert, not by virtue on these other sites of whether this answer is good, but by virtue of the fact that we kind of like you, because you've had other good answers in the past, we somehow decide that your answer must be good, and I'm pretty sure StackOverflow doesn't have any kind of history like that, other than the fact that you have karma, that doesn't mean that your answers go to the top of the puddle. You have to re-earn your right to have the right answer to a question, every time.
[21:42]
Atwood: You know what we need, Joel, we need a place where experts can go online and exchange information that they're experts on. I think that's what we need. We just need a place for experts to come and exchange information.
Spolsky: You know, Dave Winer used to say, and I doubted him, but I now have discovered that this is relatively true, that whenever you have somebody in the audience who's just basically throwing darts at you, just sort of pissing on everything you do, and making these fake websites that talk about how stupid the whole concept is, and just generally getting angry at the whole thing, nine out of ten times, it's your competitor. ?And I said, "What? That can't be, surely there are people who dislike what you're doing." But the truth is, people that dislike what you're doing, most normal people that just say "This is not going to work" or "I don't like this" or "This is dumb" or "This is not going to benefit me" will not spend any energy. They'll just leave. ?They'll be like, "yeah, whatever, that's real funny" they won't spend any energy on it. The people that are actually actively spending time registering domain names, designing logos, in order to piss on you? Usually, nine out of ten times according to this Dave Winer theory, they're your competitors. They're the people that have some skin in the game and they need for you to fail. It's worth some of their effort for you to fail.
Atwood:?Really, that's interesting. That makes sense, because it does take a lot of effort to really, you know... And this critique by Ivan is really quite long, this is a fairly sizable blog post.
Spolsky:?Well I should say, there are also just insane people. It's not necessary that they...
Atwood: There are also just insane people.
Spolsky: Maybe they just have a stake, maybe he's got ridiculous karma at some other web site that does Q&A.
Atwood:?I do appreciate, though, that he actually was very, very specific. Because so many times, people say that we suck. It's like, they don't really explain why. Ivan actually was very specific, and I do actually appreciate that. I don't entirely agree, because I think there's, like you mentioned, there's sort of the "expert bias" which I think is kind of an illusion. That you have all these experts waiting in the wings to do stuff. There's really just a bunch of amateurs trying to do things together. The people that are truly experts are too busy to even help, right? And if the experts are too busy to help, what difference does it really make if there are experts at all. Because the whole point of this endeavor is helping other developers, and whether you're an expert or not, if you have no time to help, you're not really contributing to the solution.
Spolsky: It's also, when you look at the questions, there are no experts on these particular questions. I'll give you a great example - I've been doing a lot of C# and ASP.NET. And so, I'm good at -I don't know- 5% of the functionality that that class library exposes to you in that framework, 5% that I'm pretty good at. I've got a young programmer here who's doing some development in ASP.NET, and I have to code review him. And he'll come to me with questions like: "I've got multiple forms on a page; how do I make the validator controls only affect the current form instead of all the forms on the page?" I don't know! I just don't know. Somebody does, lots of people do actually. I just don't know. Even if I was an expert, there will be things that I don't know. I remember there was a point in time, where I was really, deeply, the expert on the old Excel macro language programming model, because I was going through every single line of that and trying to find ways to replicate it in Visual Basic. And I never knew as much about it as some of the people who had made careers writing macros in the old Excel macro language thing. And there were areas that those so called experts may not have known about which I knew about, just because I had read and studied all the documentation. You can't be an expert in one particular field, whatever the field may be, because these things have so many facets to them, and they're so convoluted, there's so many little details. There's things that the designer, the person that wrote whatever it may be, the Document Object Model in the web browser. The person that wrote that very code, may not really know how it's going to interact under certain circumstances which happen all the time. And there may be somebody that has studied this on twenty-seven web browsers, and has a good answer for what you should do. So, it's not really about-- I mean, yes, you can be an expert, but your field of expertise is very, very narrow; and you don't have to go very far away from your field of expertise before you're as good as a newbie.
Atwood: I totally agree with that. And the way that I've characterised this in the past, it's kind of like a number in binary. Right? So you start off with a bit--
Spolsky: Mmm hmm
Atwood: --which is, you know, zero or one. And then as you go from left to right, you flip all those bits, and say you have six bits. By the time you've flipped six unique bits, think how many combinations there are of what you're doing. It was always amazing to me as a developer, it didn't take very long at all to get completely off the beaten path, to where, like, virtually nobody is doing what you are doing. And it's not like you're doing anything weird. It's just that you made 6 unique decisions that are all independent of each other, and software development is just kind of like that.
Spolsky: You wind up in a place where nobody's ever been.
[26:52]
Atwood: Yeah, exactly. Totally agree. And a good example of what you're talking about where even if you wrote the code, say you wrote the code: "Well I'm expert. I wrote the code" which actually does not turn out to be true a lot of the time [laughs]. But you would think, the person who wrote the code must really know this. They must be the expert on this.
To go back to my Penny Arcade thing, so the Penny Arcade Expo, they had a panel with Harmonics. And Harmonics is the company that created Guitar Hero, Guitar Hero 2 and of course Rock Band, my favourite game. And the guy who wrote the code for scoring explained that after the game was out for a while people were coming up with ways to get scores that he didn't understand. There were these way to do, it's called squeezing, where you sort of trigger a star power a certain way. Like you get extra points if you sort of nudge the system a very specific way. He had no idea this was even possible and he wrote the code. So I think the community can end up, depending on who it is, can end up smarter than any one expert I think. It just takes an engaged community, and a lot of engaged community to collaboratively build the answers.
And I think what I would tell Ivan in this case, is if he had problems with the answers that people were giving, he should have left comments. We have this comment feature now where you can annotate answers. So if you feel like an answer is truly wrong, definitely leave an annotation on it indicating that. And I think annotations only take 50 rep, so you only need 50 rep to even do this. And other people would see the answer and see your caveat, "Oh wait a minute. There's this huge bug in this algorithm". So again, you're feeding back into the system. And of course, vote it down if you really dislike it. So I think there's ways for this to work and I can't really explain Ivan's reaction to it. I certainly haven't seen that much sort of, wrong or bad information. I think some of it's maybe interpretation, where if you feel there's: You shouldn't have to do any work, the top answer is always 100% correct and you do not have to look at it critically. Maybe that's a misunderstanding of how the system works. I think if you're really into a problem or a question, you'll read pretty much every response there. There's not many responses to a question. I mean, 10 would be a lot. It doesn't take that much to read the question and look at all 10 answers and harvest the best information from each one. I think that's just something you have to do on the internet. There's nothing about our system where we're going to guarantee that every bit of information you're going to see on there is going to be perfect. That isn't true, certainly of Wikipedia or really any website you'd go to. That would be my advice.
Spolsky: Yeah, Ivan just needs a girlfriend.
Atwood: [laughs] Ivan probably has a girlfriend. No, I actually like this post. Because I like the specific criticism, it gives me specific things. I for one appreciate that.
But let's talk about something different. So last night Joel was chatting with me online and one thing we came up with was.. one thing we were thinking about implementing and you had some serious reservations around this, so I want to talk about it. One thing that's happening to us, we do have users that for whatever reason become negative users. In other words, they create accounts for the very purpose of just messing with your system. They have really nothing positive to add to this system. So we need a way to block these users and prevent them from.. I mean, we could just delete their accounts, certainly. But one thing I was envisioning, and I've got to be careful how I say this, is the ability for other users to flag your account as questionable. Sort of like the way "offensive" works now, but we wouldn't call it "offensive" obviously. But the way "offensive" works now in case you don't know, if you're not on StackOverflow is: if 10 people mark something "offensive" that essentially removes it from the website, that's a soft delete. That's one of very few ways that content can be deleted from the system. And it's actually working. I did a query last night, I hadn't been looking at all the deletes, I had just known the ones I had done for various administrative reasons. There are a lot of deleted posts where people had hit this community threshold and they [the messages] had been deleted from the system. So we need something like that but applied to users.
Spolsky: Hah
Atwood: And I think you had some serious reservations about that.
[31:07]
Spolsky: Well, here's my reservation and where I'm coming from. You can either engage with people that want to have a fight, which is what they want. Or you can disengage, and they'll get bored and move on. I never even started thinking this way until a long long time ago when Phil Greenspun wrote that he was having trouble with people, probably on photo.net which is a very early version of Flickr that Phil Greenspun created in probably?1995, and - maybe it was?LUSENET which is?his version of usenet except it was?web-based - and they had?one?visitor who was just a troll, just a problematic person in the quaint old problematic way before "problematic" meant that it was the russian mafia and they were trying to steal people's laptops and take their bank account numbers and so forth. This was quaint where he was trying to talk about recipes on a photography discussion group, and so that was considered bad behavior in those days. He was just a negative person and they wanted to make him go away. But they thought, "Oh gosh, if we?try to?ban him, he's just going to make another account or use a different name or get a different IP address or find some way around the system and he's going to be really angry, so he's going to have the motivation to do this. His anger will motivate him." So instead what they did was configured the web server so when anybody came in from his IP address or maybe his range of IP addresses, the web server would?time out. It would?basically just?not respond. It would just run some 30-second loop and then time out. And the net result was that he just thought that the system sucked. He just decided that the system was slow and badly built and gave up on it and went away. And so Greenspun was bragging about this. Somebody can find the URL, I'm sure, to this story. All you gotta do is find the third thing ever posted on the Internet [laughs] in the entire history of the world, because this was really really early. And we adopted that method in the discussion groups that Joel On Software implements. We did something even simpler which is that when a moderator deletes a post on our discussion group software, which is commercially available, it's the discussion groups from FogBugz. When a moderator deletes a post, the post is still shown as if it were not deleted to the person who posted it, and to all the IP addresses in his range.
Atwood: Oh, that's just sneaky. That's really sneaky.
Spolsky: Yeah, so people think that this is cruel, but the net result is that it's a very pragmatic thing. What happens is if you delete someone's post and say, "We're deleting your post" and they know about it, then they are guaranteed to be angry, and if they're angry then they're going to try to post. They're going to try to find a way around this.?This is just?human nature. When you try to block somebody they get angry and they try to go around. They don't get angry and leave, they get angry and they try to fight and so they try to take down the system. They're going to start attacking your system in various ways and try to look for?ways around your blocking of them, and they'll find them because the Internet is pretty anonymous and it's almost always possible to get?a different?IP address or to get?a different?user account name or something like that.
[35:00]
Atwood: You know what this is like, what you described, really briefly? FriendFeed has this feature where you can do a fake follow. The whole friending process is kind of a social landmine because people want you to follow them and you don't have time to follow them so you don't follow them. So with this fake follow, what you can do is like "Oh, I'll follow you" but it's a fake follow. To them, it looks like you followed them, but on your end you're not following them at all. So what you're describing where you delete it for everyone in the system except for the person who created it, it's very much like a fake follow. For this one person, everything looks normal: "Oh, nothing has happened." But to the rest of the world, nothing is actually going on. So it's interesting that you arrived at that similar technique.
Spolsky: Well, let me tell you, the end result of the similar technique is that sometimes people know that you're doing this and they're angry. But 9 out of 10 times they just don't, and they think that their little troll post that they posted is being ignored. They really feel like it's being ignored. And they'll continue to post and when they see that they're not provoking people, because nobody else is seeing their posts, they'll give up and they'll move on somewhere else because it's just no fun. They're looking for a fight or a conflict because it's fun; it's like a game. Their type of game playing is not the type of game playing that everybody else in the community wants to play. If you give them what they want, they're going to hang around. If you deny them what they want, they're not. I used to see this on IRC all the time in the old days. I'm sure it's still like this, but on IRC, the idea is that you chat, you make friends. The channels I went to, you used to go out on dates. [laughs]
Atwood: Where were you hanging out, man? [laughs]
Spolsky: I think I got like 5 dates in one week at once on a certain channel which will remain nameless [laughs] because that would give it away on IRC. [laughs] You're hanging out to socialize. And then there's a group of people who log on and they're addicted, so they're spenidng 12 hours a day on IRC. And they log on and they see people that are there they don't like and they're kind of bored and they don't feel like chatting anymore. But they're addicted so they need to do something with the system. So they kind of try to raise the ante, they're like "Hmm, maybe I'll try to take over that other channel." The Melbourne people trying to take over the Syndey channel. And you soon discover that you have to find and exploit various bugs in the system to actually take over a channel, but there's almost always a way to do it. Or you can try to take over somebody else's nickname so that their friends can't find them, because you couldn't reserve a nickname in classic IRC. This is exploiting the system basically to play a different game than the game other people in the system want to play. You've got a bunch of people playing chess, but you?want to play "Throw the chess pieces all over the park!" [laughs]
Atwood: [laughs] And that is fun, just throwing the chess pieces, what an enjoyable game.
Spolsky: And then it becomes a wrestling fighting game.
Atwood: [laughs] That's awesome!
Spolsky: It's just a different game that the other people don't want to play. So it's really really important not to fall into the trap of playing the game that the people want to play. So when somebody is being provocative or when they're being obnoxious or when they're trying to abuse the system in some way, for them, they want to have the little "I'm having a fight on the Internet" game, and none of us want have this game on StackOverflow. We'll have that game on your website, just not on ours. [laughs] And so it's really important to have the "Don't feed the trolls" method. You need the people to not be fed and there's always going to be somebody there who is going to have the adrenaline rush of "Oh my God, this guy's being obnoxious. How can I punish him? How can I fight him? How can I create some kind of fight? I can't go to sleep; somebody is wrong on the Internet." It's very very hard. A couple of years ago I got into a flamewar somewhere on Reddit. I've learned that there's no point to this. I can't even remember what it was about.
Atwood: Wow, a few years ago, that's shocking. I thought you would have learned that much earlier. Even Joel gets sucked in every now and then.
Spolsky: I wonder if anybody remembers this. I got into a fight with somebody on Reddit over something - I don't even remember what it was. I'm sure it was something that I wrote, and I don't remember. Obviously he was wrong. [laughs] But it didn't matter, I was like, "I cannot go to sleep, because I have to see how he responds to my last thing so I can respond to that."
[39:40]
?
Atwood: Yes.
Spolsky: Okay, so what's the philosophy? The practical result we've had from this FogBugz algorithm of making the person see their things but it disappears for everybody else has been very successful because 9 out of 10 people don't know this is happening and, all else being equal, that means you only have 10% as many disruptive users that you actually have to deal with.
Atwood: Right, so let me distill this down to a recommendation. This is all very interesting conversation and I think very useful but how do we turn this into actionable stuff we can do on the site? Because we still do have every now and then - it's not a major problem at the moment - but we do see users who create accounts for the explicit purpose of messing around. ?And one thing, you talked about not engaging with them and maybe I'm not doing this correctly, let me give you an example one thing a user did. A user created an account and registered an OpenID and actually posted a post which was all giant images. This image of this 18th century French painter. ?This very very funny image of this painter - it's a painting - he's gesturing at the viewer and pointing and laughing. It's a very funny image. And I actually went and looked this image up because I was so intrigued by it because it had sort of a name on it. So I looked this guy up on Wikipedia, I'll link it in the show notes. So I actually went in - it's awkward at the moment for us to delete users because there's a lot of cascading deletes that we have to do, and a lot of key relationships that have to be there, and we haven't honestly implemented this very well at the the moment, so I couldn't actually delete his account. ?So I went in and changed his account name to this French guy's name because he posted that image and then he went in later and actually populated the profile with all this guy's information and created a Gravatar for him and everything. [laughs] It was actually kind of funny, but maybe I was engaging with the troll at that point like I was encouraging the behavior when I didn't really mean to. ?So with these posts, these giant posts that he created, we of course went in and A: Edited them so they weren't giant anymore, and then B: Deleted them. But what would you would do in that case to this user?
?
Spolsky: There's two ways we can look at it. Number one, even the deleting of posts may be unnecessary. ?With our current data model, the posts are voted up and voted down and they can also be deleted. In fact the deleting is almost an extreme case of voting down. ?If something had -124 points it should be as good as deleted. ?for all intents and purposes, it doesn't come up in searches, maybe if there's only zero other things that might come up. In fact, in a lot of these systems that work on voting, the only reason they even have a delete capability that is given to moderators, is if somebody posts something that is actionable. Like it's a copyright violation and you get a DMCA notice, you have to actually take it down, you can't just bury it. So the first possibility is maybe you'll find that the system just works well enough. This is something, Jeff, I mentioned to you when we were chatting last night. If you look at the new submissions coming through on Reddit and Digg, it's 99.999% spam. I would not be surprised if it was that high because a lot of people set up automatic scripts. There are online PR agencies that have automatic scripts that submit every single press release about every single one of their clients to Reddit and Digg. And it's hopeless...?
Atwood: Wait, brief detour there. ?They don't have a CAPTCHA around new item submission? Really?
Spolsky: You know what? It's worth it to these PR agencies. They're getting paid to do this. But it doesn't matter, it's still spam. Just because it costs a penny - and CAPTCHA is a myth anyway. CAPTCHA is easily broken especially now that there are these Mechanical Turk ways of breaking these - not that I've ever found one of these - but there are these porno websites that will give you a free account if you type in a CAPTCHA. There are mechanical ways to get people to do CAPTCHAs at very very low cost. Getting CAPTCHAs solved is so cheap that it's almost worth it for spammers. And it is in some cases.
Atwood: I don't agree with that, but I don't want to go on a tangent, so keep going.
Spolsky: Let's put it this way: CAPTCHA is not waterproof, but it does help. It's not waterproof and it probably won't be that helpful for long, but go look at the new page on Reddit or on Digg and you'll see an awful lot of crap coming through and an awful lot of people writing scripts that resubmit things, or just submitting a lot of garbage, CAPTCHA or no CAPTCHA. And I think you could try to moderate that, but it's almost not worth it; the stuff just gets voted into oblivion very very quickly. And so the system itself does work. I don't think they need any kind of special protection on a website where they're only showing you things that have been voted up in most cases. The protection you need, then, is for people who have created fake shill accounts in order to get votes that they can use to vote things up. It's a little bit too complicated but the whole point of that is it may not be necessary to use this delete feature or the offensive feature because maybe the voting is good enough.
Atwood: Well, hold on, though. Because we have posts that, even though they are downvoted, are giant posts. They have images that are 9999x9999 times 100.
Spolsky: Yeah, okay. But it doesn't matter, you can vote them down. Oh, you have to go into them and then vote them down.
Atwood: But the alignment of the page is completely messed up. I think this is where the Digg comparison breaks down a little bit because Digg is just links. How are you going to grief somebody in 100 characters of descriptive text? We're more like Wikipedia in that you can grief somebody by creating a whole giant article, right?
Spolsky: Yeah.
Atwood: Now, the advantage for us is it's very easy to undo. ?And this is something that's in the Clay Shirky book 'Here Comes Everybody' is that it's so easy to undo vandalism, that the effort required to undo it is an order of magnitude lower than it takes to do it, and that's how you win that particular battle. Because there's lots and lots of people willing to click Rollback or Edit and very very few people willing to build it.
Spolsky: So wait, I have an even better answer, though. That was almost an aside which is that I think that voting may get everything you want from deleting. But even if that wasn't true, let's take it as a given that we have abusive users, and we can maybe detect they're abusive because the number of things they've posted which have been called offensive is very high, or some other reason. Let's say that we knew that somebody was offensive. Well, you have two possibilities. One is you can ban them and the next time they try to log on you can say, "You, buddy, are banned!" Well, what are they going to do? They're going to go piss on you every way they can. They're going to make a new account, they're going to tell all their friends that you suck, they're going to go to the Crap Overflow site where they have their - what's the word? Support group?
Atwood: Community of outcasts.
Spolsky: Yeah. No, they're gonna get back in and just going to try to delete everything because they hate you now. You got in their face and you've caused an adrenaline rush, you've given them an adrenaline rush which is a fight or flight reaction, and they're gonna fight. Some of them will flight, but most of them will fight because this is on the Internet, right? What can they do, nobody's gonna come to my house. Although that helps. [laughs] You could go to their house. Second possibility, let them keep posting and silently sort down everything that they ever post. You make a new field in the database called "user quality" and everybody starts with a zero, and they get a -1. ?Every time you're displaying something, the sort order is "user quality", "rank". ?So now they're still there, they can see their post, there's nothing visible from the user interface that lets them even know in any way that they've been bad, it's just that they keep posting questions and nothing happens and they keep posting answers and they wind up at the bottom of the page for some reason, and nothing that they do really matters.
Atwood: It's essentially the same basic system, but don't make it visible that you're interfering with them in any way.? Kinda the solution you were talking about earlier.
Spolsky: Hey, I heard a trick that I've never seen used.? If you've ever been on a plane where a passenger has had about 18 drinks and is getting rowdy and the flight attendant refuses to give them another drink, or in a bar where the bartender says "I think you've had too many.? I'm cutting you off!", that aways turns into a fight.? There's always a guy with a lot of bravado, totally embarrassing his date, being like "I give so much money to this airline!? I can't believe you would be blah, blah, blah...".? And the guy's obviously drunk. There's a trick that good bartenders know.? The guy orders a drink, and you bring him a ginger ale or a water if he's drinking vodka, something that makes him look like he's still drinking so he doesn't lose face in front of his friends.? Then you very quietly say, so nobody else can hear, "Let me give you water for this one drink.? If you want another drink later, you can have one, but finish the water first because I don't want you to get a hangover."? You basically say something nice.? You're not even announcing that you're not giving him a drink.? You're letting him save face. You're not announcing to the world in a way he feels he needs to stand up for himself, and you're not even telling him he's cut off.? You're just saying "Let's do water for this one drink. Next drink you can have a regular drink."? And ? hope that he will have forgotten by then.
[49:08]
Atwood: Right. There certainly are aspects of that I think are very true, like not being confrontational, and just sort of being more zen about the whole situation of, like, you're not going to escalate into anything weird
Spolsky: It's also called passive-aggressive [laughs] that's another way of putting it.
Atwood: Right.? Also, like, I kind of disagree a little bit that you're supposed to disengage completely from people that are attacking. like I think, I guess it depends on the attacker. But I found that a lot of the people that are attacking are really just playing.
Spolsky: Hello, OK so the technology is working now, and the bamboo for our lobby has arrived.
Atwood: Ooo neat.
Spolsky: We're in the new office and it's going to be really noisy:? There's a guy doing some drilling to install the shelf for the AV gear where we're going to install all the electronics that we need to play Rock Band in the new office so there'll be some noise from that.? None of the walls are here or the doors to any of the offices - there was this plan was that the front of every office would be a glass wall with a sliding glass door.? But those are nowhere to be seen and apparently they'll be coming in mid to late october.
Atwood: Do you guys have the computer setup so you can actually work? Do you have the internet and stuff like that?
Spolsky: Yeah, and in fact, our systems administrators did just a a fantastic, heroic effort - came in on the weekend while everything was being moved and pretty much had everything up and running for us for us by the morning.? Uh oh!? There's a guy that's bringing - this is not good...
Atwood: Is a one man band approaching?
Spolsky: There's a guy delivering a shelf.? 
Hey Liz? ...? Looks like they are delivering this couch here and it needs to go where the dumpster is... the dumpster is? ...? Although actually, I guess they're gonna set it up tomorrow so it doesn't matter. ... Alright. Probably safe.? They're moving the dumpster. 
Oh, [someone] just glided by on a scooter.? We've got people bringing in bicycles and scooters since the office is much bigger than it used to be.? So it just takes longer to get all the way down to the other end, it's just a long straight shot from Rector Street to Broadway Avenue. You can check it out on Google maps.? And we basically go from one street to the next.
Atwood: Thats very cool. You guys don't have Segways yet though?
Spolsky: That would be good, I'm all for Segways.
Atwood: Yeah, that's fair. So, the big news this week, in addition to you guys getting moved in which is cool.? Is, of course we now have a public website.
Spolsky: Congratulations! We launched.
[3:47]
Atwood: So you wrote a blog post and I wrote a blog post and I think the amazing thing to me is that the site is still up because I really wasn't sure - I really didn't know.
Spolsky: Yeah
Atwood: It's just hard to do that level of load testing but the site has survived and just to give you an idea of the dramatic increase in load our CPU graph used to be at 2-3% most of the time. Minimal, even under pretty heavy beta load and now it's pretty regularly at above 50% sustained.
Spolsky: Wait a minute....? When I publish something - on my blog at least - there's always like a day or two of heavy traffic that it generates but then it ends, I mean it subsides.? I'm sure the same is true for you.? And I also send out an email to 52,000 people who subscribe to my email newsletter.? What a blast from the past that is! Email newsletter - what's that?
Atwood: Right. You'd assume this is some kind of worst-case scenario, right? This is probably more attention than we are going to get later which is good because we gotta have some room to scale.
Spolsky: There'll be a lot of attention now but that will sort of be covering up an underlying growth curve so once the noise goes away there'll be some pretty heavy growth there.
Atwood: Right. I actually got an email from Jeff. We did hook up Google Analytics and I do have some actual numbers if you want to hear them for day one.
Spolsky: Oh yeah, totally!? Totally!
[5:16]
Atwood: On day one - just random numbers here - 1,500 questions were asked and in context during the entire length of the beta I think we had 8,500 questions and that was a month and a half so in one day we generated a pretty sizable percentage of everything that was done during the beta. Almost 6,000 answers, 1,700 comments were left, 62,000 unique visitors, and almost 700,000 page views.
Spolsky: 700,000 page views.? In a day?!? Wow!
[5:55]
Atwood: Our site is kind of amenable to people looking at pages over and over, right? I mean, you want to see the new questions. It's the kind of site you hit refresh a lot.
Spolsky:? One of the things that struck me as - you know how we talked last week about how we're all stupid??So here's a stupid thing that people said.? [laughs]? You know a lot of people had been commenting saying that StackOverflow is great with this elite super-dooper beta with very few people coming in but what's going to happen when a million people come flooding in and start asking questions?
Atwood: Yes.
Spolsky: And your questions only stay on the home page for two minutes instead of 15 minutes or something.
Atwood: The lowest I saw it get during the beta was about 20 minutes. Now it gets down to two minutes so it's ten times higher.
Spolsky: But the point is that we also have ten times as many viewers - as much traffic - and so a post is still seen by about the same number of people even though it survives for less time on the home page.?I think the only problem is if the unanswered questions count starts climbing uncontrollably.? That might be a sign that somehow that we've lost the balance.? We did have a balance in the beta where things were getting answers - they really were.? Only very obscure questions weren't getting answers but the only way to fix that is just to have gigantic scale where we've got a couple of hundred thousand regular visitors so there's likely to be somebody who knows about that Quickbooks XML integration with Visual Basic 4.0 bug.? So for that you need huge scale, you need Google and that's something were never going to get good answers to those questions until we had much more critical mass.? But in terms of a person asking how to do X with some technology getting answers then their question is going to appear to about the same number of people as it would have before the beta - even if it doesn't live as long on the home page. ?
[8:00]
Atwood: Right.
Spolsky:? Assuming that the mix of people looking to answer and looking to question is roughly the same and the demographic mix of the people looking to come into our real site are the same mix of demographics as those that came into our beta - and I really think they are, I think they are pretty close.
[8:17]
Atwood: Well I do think, as we've said, many times before one thing that works in our favor is that it's kind of a selective audience. I mean, it should really be programmers. I can't imagine any sort of random internet user coming to our page and ...
Spolsky:? Caring.
Atwood: ... wanting to stay there for any length of time. Because it's just much of technical jibba-jabba about really arcane things ...
Spolsky:? Jibber Jabber.
Atwood: ... but that's the strength. That's why we think it's going to work. And yeah, we were lacking a long tail of programmers in the private beta. I did get one email from Jason Cohen of Smart Bear Software and I guess he works with Justin Standard. And Justin was the person that asked you at the Business of Software Conference about the community-owned questions.?That was actually Justin. 
[Correction: Jason Cohen and Justin Standard do not work together, though they were both at the Business of Software conference.? Justin is the one who approached Joel at the conference.? It was Jason, not Justin, who sent Jeff the email. Whew.]
Spolsky:? Mm hmm.
Atwood: So they're heavily involved with the site and I got some passioned email from him (Jason and Justin) urging us not to take the site public. They were really deeply, deeply concerned about the eternal September thing of just, you know, bunches and hordes or random users coming in and really diluting the quality of the site. But I don't actually think it works that way. I don't agree that's really a risk. I think the bigger risk is having an insular community where you don't have the long tail so these really obscure questions can never really get answered. So I think there's a bigger downside to being a closed community than an open one in our case. Now, if we were something like Yahoo! Answers maybe. And actually this brings up a good point and a transition to something I want to talk about. We're going to have a special guest in this call. So MetaFilter - there was a nice topic on StackOverflow on MetaFilter and it got quite a bit of discussion and that was really a big honor because I've been a big fan of MetaFilter. But MetaFilter is a closed community. It costs $5 to sign up for MetaFilter. I'm looking at Wikipedia - that's something institutied in late 2004 - but it's really kind of a selective community. You can read it of course but you can't really do anything unless you pay the $5 lifetime membership fee. It's really just a little barrier to get people in there, and the quality of the community is, in fact, very high.
[8:47]
 
Spolsky:? We have our own five dollar barrier.
Atwood: What's that?
Spolsky:? It's called OpenID. [laughs]
Atwood: That's a pretty minimal barrier.
Spolsky:? It's about five dollars. It's about five dollars of headache.
Atwood: I disagree. One of my favorite threads and I think I had to close this one because it was beta stuff was somebody was complaining about OpenID and then the highest voted answer was - I don't remember who this was so I?apologize - I think I'm going to make up a name. "My name is Jim. I was a VB programmer for 16 years. I was able to sign up for this site." Even if you're a Visual Basic programmer you can figure it out and make it work. I think there's some complains about it, but the people that are complaining about it - I don't get it. I think the status quo is so... evil. Having just thousands of logins across thousands of sites.
Spolsky:? I think if we can do something to promote OpenID then it's worth it.? Speaking of VisualBasic programmers:? Another frequent gripe that we've been hearing is - there's the vacuum cleaner, I was telling Jeff earlier that they're vacuuming in the office and he said:? "Can we not just do the podcast after they've finished vacuuming?" and I said:? "Yeah, that will be in November sometime." [laughs]? There's sort of an asymmetric long tail to construction projects, they just go slower and slower and slower as they get to the end of the project.
Atwood: Right.
Spolsky:? Can you hear the vacuuming or is my excellent microphone...
Atwood: A little tiny bit, it's not in any way obnoxious.
Spolsky:? Well, yay Seinheiser.? But the real point was:? You mentioned VB and another - I don't want to say criticism - observation that we got from a few people was that the site seems heavily .Net oriented:? C# and .Net are the biggest categories of questions.? I actually didn't think that we were disproportionately .NET oriented.? I don't have statistics for this but I actually believe that our distribution of tags is probably pretty close to the actual distribution of working programmers in the world.? I don't think people realize just how common it is to be a C# .Net programmer because it's mostly the internal and the enterprisey applications that do that.?? The people that make a lot of noise are the bloggers with their web [me-]too-point-oh startups using the Ruby on the Rails but I just think that actually our distribution of tags feels to me to be pretty close to the actual distribution of programmers working today - the actual technologies people are using.? I don't know that that's true, maybe a listener can suggest something we could compare ourselves to - maybe books or job listings or something.
Atwood: Right, I was actually surprised and pleased. ?This is one of the major goals when we launched the site, right, was to be agnostic.?Right we are not saying this is a place to discuss Windows programming, this is just a place to discuss programming, period.?
Spolsky: Mm
Atwood:?I think really the challenge for us is there's still lots of people even though like I've tried to make it really obvious like a little sidebar that says, OK, this is what a question should be and actually made it bright yellow for new users now, by the way-- it really pops off the page.? It's, like, ask programming questions.? And we still get questions that are just not remotely programming questions.? I mean, they're computer related, they're not programming questions.? And I feel bad, like, voting them down and stuff, but I think we have to, and that's more the risk than not having...? There was a huge question about bash tricks the other day, which I thought was very cool.? So we're actually getting... There Python questions, I've seen a handful of Ruby questions.? There's quite a bit of activity around non-Microsofty technology, which was an explicit goal.? And I've been pleased with that.? I think the bigger risk is people not asking programming questions-- It's frankly a bigger problem to me than "Are we Windows-centric?"? I don't think we are.
Spolsky: Well what do you mean by...? If it's a question that's just "What's the best programming chair?" - that's kind of a programming question.? Or...
Atwood: That's to me is fine.? It's questions like "I'm having this problem in Windows XP." 
Spolsky: Oh.? Yeah.? If there was a real way to tag those out of view...? You know what I mean?...? If they came in appropriately tagged and I never saw them I wouldn't care personally.? And that goes back to the question of tags which I want to bring up.? The first time I tried to do a Q&A site it was really just discussion groups, and there's still one of them which is the .NET questions on my home page - if you click on .NET Questions there's a discussion group there (which I'll probably close down now we have Stack Overflow) where people ask questions and answer them about .Net.? Of course for some reason in the past I used to think that the right way to go about building something like Stack Overflow would be to start small with something that you can easily accomplish and to go narrow so that you at least have a chance - I would generally tell people to pick a narrow niche because it's easier to reach the people that are in your niche.? Maybe I would have said:? "You know what?? Let's just make a site for Ruby programmers trying to learn Python."? And if that's really successful then you can expand it.? You see all those Q&A sites out there for individual technologies - there's a lot of Microsoft SQL sites, four or five of them - in fact those are notorious for being behind paywalls.? Obviously there are great sites for other technologies, Ruby - what was the one I keep forgetting - Delphi; there are great Delphi sites - but the idea of tags allows you to make one site, make it super broad and not worry about it and not have to reach anybody, just tag it and it's really kind of working in a way.? I mean think of the original UseNet which had - I'm sorry, I'm being distracted because they are rearranging the couch that was just delivered.
Atwood: There was a hierarchy of newsgroups early on.? I don't know the history of it.? But that's effectively like tagging when you have, you know, this explicit hierarchy.? Although we do not have a hierarchy.? We just have random tags that are applied to questions.? And some people actually want that rigid hierarchy, but I don't know of a way to do it that's not, like, a giant pain in the butt.?  
Spolsky: It's so much better not to have to find the right place in the hierarchy to randomly tag things, to make a new tag on the fly even though yesterday I was the first person to use the tag for the DHTML edit control - an obsolete piece of technology I'm still working with, to my chagrin - but that tag is correct, and in fact it's also tagged VB6 because that's VB6 code.? And you know what?? I got a great answer to that question - I asked how to implement smart quotes using VB6 and the DHTML edit controller and I got code that did it!
[17:57]
Atwood:  Wow.? That's impressive.
Spolsky: Can you believe it?
Atwood: I think it's the ultimate measure.? Is it actually working in practice?? In other words, if you ask a question-- a real question, not a BS question-- with some problem that you're having, do you in fact get an answer?? And I've repeatedly got email-- I would say at least ten-- from people who are like, "Wow!? That's what I did.? I asked that was hard and obscure and I got a really good answer."
Spolsky:? Another thing that I think is funny - I guess this is a third point of criticism that we're getting which is:? "Well, look at this question!? It has two bad answers and one even worse answer and the even worse answer has more votes!"? So:? OK, go vote it up!? [laughs]? That's why there's a little vote button right there!? You can provide a new answer.? In other words, a lot of the problems are reminding me very much of the way the mainstream media responded to Wikipedia, which is when Wikipedia was first coming out you would see all these mainstream media articles saying:? "Well, I went to Wikipedia and I looked up this, that and the other thing and this was wrong and that was incorrect and the other thing didn't even have an article at all, and literally by the time this thing made it into print and was in people's hands, in the black and white newspaper printed on newsprint paper and delivered to somebody's front lawn with a rubber band around it for the birds to poop on [huh, huh - he said "poop"] by the time this had arrived there the Wikipedia entries had all been fixed.? 
I think that's where people miss the point about the editing and the answering that you can say:? "Here's an example of something that's not right."? But when you have a malleable site, it just gets better and better and better.? Which ever argument you try to use, it's just going to get weaker and weaker and weaker.
[19:37]
Atwood: Right.? Yeah, that's totally fair.? Well let's go ahead and add Josh to the  call.? OK?? This is one of the MetaFilter, one of the core staff there-- there's one, two, three, four, five people total, so he's one of the main team.? He's on standby so I'm gonna go ahead and attempt to add him.? Let us see how this goes.? ...to our call, add caller...Josh.? OK.
Spolsky:? Oh!? It's working!
Atwood: It's ringing.? It's ringing.? Let's see what happens here.
Spolsky:? You dingy?
[20:00]
Spolsky:? Uh you know? It just ended the call recording and started a new one.? Thats ok, because I can merge them if its really...
Atwood: Merge them.? OK, that's good. Hi, Josh.? Welcome to the call.? 
Josh Millard: Thanks, am I coming in OK here?
Atwood: Yeah!
Millard: I've got kind of a fiddly setup, OK.
Atwood: Yeah, you sound great, you sound wonderful.  
Spolsky: Josh, are you on an airplane using the WIFI on American Airlines with a laptop?
Millard: Actually I using the built in mic on my Macbook Air was my main concern, I didn't know how good it was gonna sound, but if its coming out OK, then we're in good shape.? I'm actually going over a Spring EVO[?] card which has been rock solid since I got it, so... so yeah!
Atwood: Very cool!
Millard: Sure
Atwood: Thank you for taking the time to do this.? Let's open... Let's talk about MetaFilter for people who may not know what MetaFilter is, and who you are, and what that' all about.? Could you maybe just talk about that for a little bit?
Millard: Yeah! What is MetaFilter is one of those weird unanswerable questions, but the stock line at this point is that it's a community weblog and its essentially a collaborative blogging site on the front page MetaFilter.com where anyone in the user base can make a post on whatever subject, its a generalist sort of anything-goes place.? Kind of in the same circles of what you think of as like BoingBoing or like Reddit if you took only the 20 or 30 top posts and didn't make it quite so tech centric. 
Atwood: Right.  
Millard: But everyone in the community has a right to post, everybody in the community has a right to comment in threads, so somebody makes a post, everybody kind of jumps in and talks about it, some get a whole lot of discussion, some not so much.? Thats sort of the classic MetaFilter function.? A few years ago we started "ask MetaFilter" which is probably the most heavily visited part of the site where folks can go to ask questions to get answers.? You had mentioned that you saw the thread yesterday on MetaFilter where from MetaFilter users side you could see some of the discussion in terms of StackOverflow vs ask MetaFilter.? Which I thought was kind of interesting seeing those two going against each other, but you can see kind of the identification people have on the site with that function as well.? So thats basically the two big things the site does, it also has some other subsites that are less well trafficked.? I'm one of the three main moderators there. Matt Howie of course started the site back in I think July of 99 and he's been running it since day one, Jessamyn West has been moderating on the site since I think the beginning of 2005, and I came on officially as moderator early last year, so I've been there about a year and a half now.
[23:00]
Atwood: But I've been looking at your profile on MetaFilter, and it says...
Millard: Oh, yeah:? Been there forever.
Atwood: Yeah.
Millard:? I think April 2001 is when I joined - spare time in college and memepool didn't have enough posts on any given day so I've been hanging around there forever and grown up a little bit in the mean time.? I definitely wouldn't want 2001 me moderating the site.
Atwood: Yeah, 2001 feels like so many years ago.? It really wasn't that long ago.
Millard:? Yeah, it's strange - the time dilation, especially with the Internet.
Atwood: Yeah, that's very true. I think a lot of people on the Internet view MetaFilter as really a huge success story in terms of-- and when I say success story I want to qualify.? So before you were on the call we were talking about how do you measure if things are working on StackOverflow.
Millard: Sure.
Atwood: And what I said was, "Well, are people asking programming questions and getting good answers?"? Right?? That's the ultimate measure of any site.? Does the unit of work actually produce anything useful?
Millard: Yeah.
Atwood: That's what's amazing about MetaFilter-- that people ask questions that are actually very interesting questions, that are very well researched on just any topic you can really think of and get this really amazing, really, like useful discussion on it.? Not like your usual, "how is Babby formed?" type of discussion that tends to occur.? And in that sense I looked at MetaFilter as a site that we sort of wanted to emulate in some ways when building StackOverflow.?? I was very, very gratified to see all the discussion.? And it was quite an extended discussion.? I really enjoyed reading it on, you know, what MetaFilterites thought of StackOverflow and what we're doing there.
So, yeah, that was very exciting for me and just having you on is very helpful.? So I think the first question I have for you almost immediately is, How does one become a moderator?? It's a pretty select club.? We have the same issue at StackOverflow, although
Millard: Yeah.
Atwood: There's not a lot that moderators do that's unique, but one of the things that moderators can do is sort of force things over the delete threshold.? And some other sort of high-level tasks that I wouldn't feel comfortable giving out probably ever to anyone, no matter how...? How did that occur?? How does someone get blessed into being a moderator?
Millard:? On Metafilter it's only happened twice - or I should say two and a half times - but Jessamyn coming on, that was a big move for Matt because he'd been doing it by himself and just plain hadn't gone there previously(?) and it became, as much as anything, a workload issue.? But she had also displayed really good sensibility towards Ask MetaFilter since it launched and he saw that she was someone who really got what was going on with the site, which was obviously important, but that she was also someone with a pretty even temperament, someone who did not so much wear her proclivities on her sleeve, she was able to disagree with someone without flipping out in classic Internet fashion. I think it was really that was what he ended up identifying in her was here was someone who was cheerful, someone with a good demeanor, who was good talking to people, someone who can actually state fairly why she made a decision and who really, really gets the site.? I think having just glowingly described her and saying - gosh - the same thing for me feels a little self-serving.? But, you know, that's how I got into - I was around, I spent a lot of time on the site, probably since about 2006 I became really involved and interested.? I spent a lot of time in MetaTalk which is the back channel part of the site where people can actually talk about site policy, and moderation, and what should fly, and whether someone is misbehaving, etc., etc.
[27:00]
Atwood: Let me pause there because that's interesting to me.? One of the issues we have on StackOverflow is it's sort of become like Fight Club where I don't really want people to talk about StackOverflow on StackOverflow.? It's hard for us because we have aspects of wiki which is like community ownership.? But we also have aspects of individual ownership - strong aspects of individual ownership. You have a reputation system, you can vote on stuff.? These are kind of contradictory goals at some level.? You can't service one without taking away from the other in some regard. I think one way this comes to a head is, like on Wikpedia for example, there's always the talk page.? To me, the talk page on Wikipedia was just like a jumble.? I would go there and be, like, I can't even follow this.? I couldn't event follow what was on the page.? So I ignored it for the longest time.? But I see the need for it now because you have a topic and then you have metadiscussion about the topic.? And those two are really very different audiences.? But they're kind of demanding.? So maybe you could talk a little bit about how you guys do that at MetaFilter.? It sounds like there's a special place and it's somewhere off the site.
Millard: Yeah, it's not off the site, it's actually right there if you know to look for it.? But a lot of people don't necessarily know to look for it.? Matt set up MetaTalk sometime like 8 months after he started the site, it's right about the beginning of 2000 like March or so, because people were talking about MetaFilter on the front page.? It's natural enough.? People would say, hey what's with this, hey look at the post, hey this guy's a jerk.? So he started up MetaTalk and started directing stuff that was metacommentary to that part of the site.? Delete something and say, hey take it over there.? If people wanted to have an extended argument that was derailing a thread, etc.? And a lot of people when we talk about what make MetaFilter work, MetaTalk is one of the things they mention if you talk to a regular from the site as being key to the success of the site because it creates a sort of release valve.? It's the same thing with talk pages on Wikipedia because I had the same experience the first time I checked those out.? It's not necessarily comprehensible to the casual user, like, what is going on here?? But for the people who are regulars, the people who develop a certain amount of passionate attachment to the sites, or really, really need to make their voice heard out of day one beyond just normal participation, you have this safe place you can let people ... let their free play fly, as it were, without damaging the core function of the site.? You don't have big messes on the front page.
So there's a pretty strong culture of regulars who hang out on MetaTalk.? Insofar as you have the big contributors and the serious regulars at any given site that makes up the core of the community, there's a strong correlation between that and who actually spends time on MetaTalk dealing with policy stuff and talking about user issues.
Atwood: Right.? I totally get that.? Because this is one of the things about designing social software - that you don't really understand the stuff until you've lived it.? And I totally get that now.? Because for the longest time I was like, just don't discuss this stuff here. 
[30:07]
Spolsky:? Hey, Jeff?
Atwood: Go ahead Joel.
Spolsky:? I'm kind of with you.? I still sort of really hate when discussion groups become about the discussion group and one of the reasons - I think my reason - I just want to hear, Jeff, why you were so viscerally against talking about StackOverflow on StackOverflow, because my reason was always that the questions were always newbie questions - "Why does this work this way?" - and they were very very very repetitive.? What would happen is people would wander into the site for the first time and immediately start asking all the same questions about it.? So discussion of the site, or of the discussion group, on the discussion group was inevitably extremely boring to the people that had been there for more than 25 minutes.? And they could have read the FAQ but people wouldn't, and people on StackOverflow every single day from now until the end of the Universe you're going to have a person wandering on saying:? "What is this OpenID?? Can't we do this without OpenID?"? And that's going to be the first question they ask.? And you're gonna have one of those until the end of the Universe - officially.? Guaranteed.? And they'll be like:? "Why are you down modding me to negative 364?? I'm a newbie here!? You guys are mean!"? [laughs]? Jeff:? Did you have any other reasons why you don't like the site becoming a site about the site?? Other than the sheer arrogance... [laughs] of the site that is about itself?? [laughs]
Atwood: Well I think ultimately you're leaving bread crumbs for the next programmers who come along.? And I do not feel that leaving bread crumbs about StackOverflow is ultimately helpful to programmers.? You know, the average programmer doesn't really care exactly how StackOverflow works.? They care about "If I ask a question will it be answered?" and that's kind of a solved problem at this point.? I mean, that part actually works.? So then it's just noise, I think, to the average programmer.
Spolsky:? Yeah.
Atwood: But I do feel that for people who are highly engaged with the system, these are your star users.? And I feel like if you alienate these users, you're kind of hurting yourself in the long run.? And that's where I'm a little freaked out about it.
Spolsky:? The question is...
Atwood: Go ahead.
Spolsky:? Can you make a place for them to socialize?
Atwood: That's what I'm looking at now.? I think what we need to...? The thing that sucks is that we've almost made a system that's too good, at the risk of sounding incredibly arrogant.? Because it's really easy, it's really easy to have a discussion there-- it's so easy.
Spolsky:? Yeah.
Atwood: Right? It's completely frictionless.? And that was a goal-- that was an explicit goal of the system.? There's no login, right?? You just go in and start typin', man, and it works!? And people love that aspect of it.? And I think if we've... We've got to reduce the friction.? If we have a discussion forum, there has to be as low friction, almost as low friction as the site.? I think there will slight intolerance for logins.
Millard: It's interesting 'cause the whole format of the site really presents itself as, "Hey, go crazy with the questions here."? And there's nothing, glancing at the front page, that really-- I just set up an account all of 30 minutes ago, I think, so I'm sort of exploring it while we're talking-- but there's nothing that really shouts "Don't talk about this site here" even though my way of thinking would be, OK, there probably somewhere to talk about it.? I found the uservoice.com subsite poking around which seems like sort of a place where people can more talk about the site in a metafashion.? I don't know if that's...
Atwood: More in a bug/feature crust[?] way.? How should we be moderating?? Like that's one of the big threads that happened.? And it's sort of catch-22 because I don't really think people should be moderating unless something really bad happens.? Joel and I felt for a long time-- Joel more strongly than I, but I'm starting to come around to Joel's way of thinking on this-- that you don't really control the site, just let the voting do what it's supposed to do.? If people don't like content that's on there, they will vote it down.? And then below a certain threshold it just sort of stops appearing in any major area of the site.? So someone asks sort of a dumb question, or something that's "Why can't I log into Windows XP?"-- it's not really a programming question-- it just gets voted down.? Nobody has to step in and really do anything other than vote.? And then for the things that do require moderation are really obvious, like really evil things.? And we have, even in that case, you don't actually have to be a moderator-- we have that "Really Offensive" link.? Maybe that's a good question for you guys.? So you guys have a pretty closed community.? It costs now five dollars to register which is just sort of like an arbitrary barrier that was instituted? 
Millard: Yeah, it's a speed bump.
Atwood: Right.? But I'm sure that helps tremendously.? That's gotta help a lot. 
Millard: Oh yeah. 
Atwood: But what kind of [?] do you have with spam?? How much moderation do you do on a regular basis?? Let me put it to you that way.   
Millard: At this point I would characterize my work at MetaFilter as being basically a part-time job.? But it's spread out across a given day the way just Min, Matt, and I all sort of do bits and pieces as we go along to be kind of a full-time job nonetheless because there is sort of a lot of trust built into being a MetaFilter user.? We mostly let people do  their own thing.? Mostly people are pretty good.? There's a fair amount of community policing-- if someone does something stupid, people will tell them so.? They'll call them out in the MetaTalk area of the site, for example.
But with spam we don't deal with too much.? The biggest kind of spam we get is people dropping linkspam into AskMetaFilter questions, especially old ones.? We'll see people google for something and they'll find a AskMetaFilter article in the first page results and then they'll sign up because they have a business selling widgets in that, and they'll say, "Oh, I found a really great site called widgets.com.? They're great.? You should check it out."? You know, just linkspam because they know it's gonna get some traffic.? So we probably see something like that every day or two.? Some days we see a lot of it.
Every once in a while we'll get a honeypot question where a whole bunch of people show up.? There's a World of Warcraft account management question months ago that we went back and looked at random and found that like five or six different wild gold[?] farmers had signed up over a period of a couple of months and pitched their own various sites.? And there's this whole spammer subcommunity hiding in that one thread which actually inspired us to build a new tool to look for answers coming in very late to threads that are otherwise dormant.
So that's kind of how we've dealt with it.? That's the sort of thing we deal with.? It's mostly people coming in and try to take advantage of the pretty good page rank that AskMetaFilter threads get.? Or people who sign up explicitly to spam on the front page.? You know, they sign up, you have to wait a week, you have to make a few comments.? It seems like a fair amount of people have figured out that this is the system because we'll see someone who waits a week, makes exactly the right number of comments to allow them to post, and then posts within hours of when they're first able to post.? So at this point we get an email every time someone makes their first post.? It tells us about it, we check it out.? Sometimes it's a spit-take and we dam it immediately.? Sometimes it's someone who's a legit new user.? You know, to a degree there's a kind of that technologically-assisted profile on how someone behaves on a new site.? It's a big assist for us in keeping the spam pretty much annihilated.? Which is one of the things that I find very weird when I look at a site like Reddit or Digg or a pretty vast amount of the blogosphere, really, when you get down to it that is much less tenacious, much more friendly to linkspam and blogspam and astroturfing.? And I realize to some extent it's a matter whether or not it's worth their time and energy to stop that, because you know, we're paying attention to the site every day, all day long, to make sure the stuff doesn't get out of hand.? But some of the sites just seem to not care.? You know, Digg and Reddit... 
[38:21]
Spolsky:? Josh - I disagree with you there.? I have not seen spam on the home page of Digg or Reddit for years.
Millard: Oh, and that's...? This is one of those things where I'm annoyed enough at enough of this stuff that I'm gonna probably be harsher in calling stuff spam.? You know, I see people PR blogging, people hosting their own stuff, and really using Digg and Reddit as an attempt, and maybe a less successful attempt as time goes on here, to more self-promote than to actually do anything like actually organic link sharing.? That sort of stuff.? Maybe that's not spam but as far as I'm concerned, if the function of your site is to put interesting content out there, and what people are doing is using it as a platform to jam their stuff out there and hope that other people, or...
Spolsky:? Well, if it's not good stuff it gets voted down early on.? In the early days of Reddit there was some discussion and questioning about whether it was OK to post a link to something you had just written on your blog and they decided it was OK - that you can post your own thing and there was no reason to down vote it; just go read it and if it's good, vote it up and if it's bad, vote it down.? In fact...
Atwood: Joel, you should explain your involvement with Reddit so he has some context.
Millard: [laughs]
Spolsky:? Yeah.? My involvement with Reddit is nothing really, I guess.? I just met those guys really early on...
Atwood: You have your own sub-Reddit.? Come on.? You have the Joel Reddit.
Spolsky:? That's true.
Atwood: I don't have a Jeff Reddit.
Spolsky:? You could make one now.
Atwood: I could.? You can now.? They actually added that feature.? I'm not saying you're biased.? I'm just saying you have a certain amount of domain knowledge.? I'm not in any way calling you [?].
Millard: That's fair.? All three of you acknowledge that I coming obviously partly from the culture and annoyances on the MetaFilter that's very much-- there's very specific ways in specific parts of the site where you can do that sort of thing and otherwise it's really just verboten.
Spolsky:? It seems to me - and I maybe missing something that's going on here - but it seems to me that just having the idea of a community vote is extremely effective at getting rid of spam very, very quickly...
Millard: Yeah, it's...
Spolsky:? Because the only way to fight it is to make a bunch of fake accounts and have them all vote.? You know spammers do do this so you need algorithmic ways to check for the people making a bunch of fake accounts and voting things up, but it's just been forever since I've ever seen something on the home page that I thought the community didn't want there.? Now, what the community wants is a whole 'nother story - because Reddit, for example, changed very much from kind of a hacker startup site with a bit of a libertarian bent, into...
Atwood: Ron Paul!
Spolsky:?? Exactly!? It just became, and for some reason, there was a particular political community that just really fed on that and drove out everybody else amid a certain amount of conspiracy theory and a certain amount of the Ron Paul business, and everything the mass media does is against us.? Their favorite kind of article would be some injustice that was done to a ninth grader somewhere by their librarian - and that was the ideal Reddit article that would immediately zoom to the top of the home page.? OK, that was fine and that's the reason they created a Joel Reddit because I told them:? "Listen - one of the things that..."? I mean, my suggestion to them when this site was barely even up yet, there was nobody outside of Y-combinator using it, that I thought that at some point that it would become a self fulfilling prophesy where a small clique of people started voting up a particular type of article driving away people that didn't agree with that type of politics, or just disagreed, and eventually you would wind up with a particular niche and you could never become a horizontal application everyone wants to use - you could never become a huge mass success in the way that Facebook is - because no matter what, you're eventually going to get very very like minded people...
Millard: Yeah, absolutely.
Spolsky:? And so I said:? "You gotta make it possible to make multiple Reddits."? As long as you have these niches you want to have a lot of them.? It's fine.? You want to be the atheist conspiracy theorist site, that's terrific but let me also make one for people that are interested in the business of software and so that was what the Joel Reddit was.? And I think that idea... The history it that they've then used that idea to build a site for Conde Nast called "Lipstick" - I think, I don't really know what the name of the site is, it has Lipstick in it - and it's just a version of Reddit that Conde Nast sponsors and that introduced them to Conde Nast who bought the company.
Atwood: They have rolled out that feature.? You can make a custom sub-Reddit.
Spolsky:?? You can make as many as you want and there are a whole bunch of sub-Reddits.? You can do this really nice thing on Reddit, which I wish you could do on StackOverflow, where you can say:? "I'm interested in programming AND business and... UFOs" and you'll get a home page that shows you a bunch of all that stuff.
[43:05]
Atwood: Right.? We're still working on that in terms of customization.? We have some of the infrastructure but, yeah, I agree.? So Josh, just to give you some of the background, Joel was pretty heavily... Joel knew Reddit really well.? For example, not to be an elitist or anything, I don't really go to Reddit or Digg.? I really don't.? Like, I sort of have my blogs that I follow.? And actually one of the things I follow is "The Best of MetaFilter" feed.? And one of the things I like about MetaFilter is that it's truly all over the map.? Like, I don't know if there's any one type of community on MetaFilter.? I've viewed it as people who are really good at the Internet.? If I had to characterize MetaFilter, that's my really rough characterization.
[garbled phrases and laughs from all three]
Millard: Yeah, that's probably my favorite part of what happens at MetaFilter.? You know, it's a mix.? There's also a fair amount of news that show up.? We're trying to not be a news site.? Not everybody gets that.? It's sort of an ongoing challenge with different perceptions of what the front page is all about.? But, yeah, you do see the same stuff that going to show up on Boing Boing, Digg, or Hot Key[?].? Yeah, but you also see wonderful posts about something.? It's not just "Hey, here's this link," it's "Hey, here's this subject.? Let me put together a nicely crafted collection of Internet resources about something that not everybody knows about."? It's a great way to kill some time.? If you got a rainy day, just go to MetaFilter and look at one of those posts.
Atwood:? Right.? And to clarify, when I talked about using MetaFilter as a reference for StackOverflow, that's exactly what I'm talking about.? Or if somebody comes in on some really narrow programming topic, but they really know their craft, and they can write at some reasonably good level.? So they write up the problem in a way that's like telling a story.? Like, here's this problem and here's all the things I did to try to fix it.? And then people are having this conversation about this problem and it ends up being this fairly definitive resource about this problem in a way that an average person can actually understand if you have some programming background.
Millard:? Sure, yeah.
Atwood:? So yeah.? So that's one use of the system.? Then there's sort of the drive-bys.? Like if you're talking about news, about some quick and dirty thing that they need to get to.? And I think that's fine too.? But I guess my perspective is a little bit skewed because I'm only seeing the best of MetaFilter.? And, actually, how is that selected?? Like, how does that work?
Millard:? What are you looking at?? I know...
Atwood:? I'm looking at the feed "The Best of MetaFilter" on Bloglines.? I don't remember where I got it from actually.
Millard:? This is maybe an embarrassing thing to say in my position, but I pretty much never touch RSS readers.? Not because I don't like them, just because long ago I developed the habit of going to the place that I'm interested in when I have the time to go there.? And I find a feed reader still a little bit weird because it can be too much or too little at any given time.? We have a lot of RSS feeds built into the site but I don't really remember which ones are which.? The "Best" may be driven by the popular favorites, which is something I think we created a feed for relatively recently, like in the last year or so.? It basically takes sort of the equivalent to upvoting on the site.? There's a "favorite" function where every post and every comment can be favorited by a user.? So doing that same sort of thing...? We don't really use it as an internal metric.? It's just sort of a way for people to both say, "Hey, this is neat" or keep track of it because that can go back to it and check through their favorites-- sort of a bookmark function-- that's how it was born.
Atwood:? Say I post a question which is really a bad question for a variety of reasons.? So how does this get flagged?? First of all, there's this discussion.? Essentially the model is very much like collaborative blogging, right?? So that's the model.? And obviously I have a hugely successful blog and Joel doesn't like to call his thing a blog, but it is in fact a blog.? So we know this model, right?? And I allow comments on my blog, Joel doesn't.? So I know how that works intimately and I believe it works really, really well.? But so you're saying it would be sort of discussion in the commenting: "this post sucks."
Millard:? Yes, there will be.? We've got a flagging system built in.? We don't really have up and down votes.? We've got favorites which can be sort of taken as up votes but they don't do anything automatically except for stock like the popular favorites feed.? But the flag system is kind of like a down vote if you wanna think of it that way, but it functions differently-- they're not visible, it sends a flag behind the scenes we can see from the admin site.
Atwood: Just to interrupt you real briefly.? One mistake we made.? We have a flag like that called "Offensive" and we made it visible, and that was a huge mistake.? Huge.? Do not make that flag visible, because people would get, like, for whatever reason people would tag things "Offensive".? Who knows why people find things offensive.? Like one thing I did want to do is have a drop-down, like, "Here's thirty reasons-- pick one of these thirty reasons that you're marking this."? No, that's way too much thinking.? It's like the evil...
Spolsky:? 15 dollars for a piece of checked baggage.? Which is that?! [laughs]? Is it spam?? Or whatever?? I mean, it's obviously offensive! [laughs]
Atwood: Yeah, it's offensive.? It's offensive to pay 15 dollars for checked bags.? But who knows?? And people would see this and, like, freak out and get kind of pissed that somebody found their thing offensive.? So one of the earliest changes we made was like, OK, you can't see that anymore, only moderators can see that count.
Millard:? Yeah, and I think that's really smart.? Yeah, you have the problem where the person who is being flagged is going to be upset, you have the problem where you're going to end up with a metadiscussion in the thread by other people who agree with or disagree with that flagging-- you get this sort of, what we call the "king of the shitpile" function-- something we've tried to avoid on MetaFilter by not making the bad stuff visible.? Yeah, so making that moderation-view-only is smart because that way if someone has a weird objection, you know, it's only going to be this one-off thing.? It's not going to stack up.? You're not really going to see much of it.? You can ignore it.? No one needs to know that it's being ignored.? And then, yeah, if you get that real volume then you know, OK, we've got a problem.? That's exactly how we tend to deal with things on the site as well.? You know, we'll see something will get an odd flag here and there.? We check out each flagged message to make sure there's nothing wrong.? But if it's only one flag-- it's probably not a big deal.? Whereas we'll see stuff that has five flags-- OK, there's something up.? Every once in a while we'll see something that's got thirty flags because we're all at lunch and, you know, it's been a half-an-hour and it hasn't been deleted and it's something that really needs to go.
Atwood: That's still pretty low.? Because you guys have a pretty active community.? So you would say that thirty is like a colossally large number.? And five would be enough to trigger, like serious attention.
Millard:? Well, yeah.? It's an opt-in system.? You know, if you're a brand new user you may not even know about the flag system.? We don't try to sell it particularly hard.? We cover in the FAQ, but who reads the manual, right?  
Atwood: Exactly.
Millard:? So the people who actually do flag-- the nice thing about that is that you don't? have people just punching a shiny widget as soon as they join the site.? They're probably going to learn about flagging in the process of becoming familiar with how the site works and becoming a more active member of the community.? So when they start flagging they? kind of know what's up and they aren't just flagging friviously.
Atwood: Right.? We have severe warnings around this.? In fact there's a Javascript dialog that's like, "Is this hate speech, abuse, or spam?"? Because we had people who were just like exploring the site early on and just like clicking for fun, for whatever reason.? So between the flags you guys have and the favorites system, so those are the only real, sort of, numbers that are associated with community policing that you have.  
Millard:  And beyond that it's pretty much OK on the site to have some sort of civil statement of objection if someone's doing something problematic.? It's definitely OK and sort of classic that people can have a conversation in a thread briefly on why something's not a good idea.? Works pretty well if nobody freaks out.? We've got that MetaTalk section that people are explicitly expected to take serious discussions about this stuff to.? And then, in theory, nobody starts a big fight in the thread.? In Ask MetaFilter, in theory, if there's a problem with the question people flag it and move on.? In practice of course some people are going to be annoyed enough that they're gonna jump in with a comment, they're gonna say something nasty in the thread or just say, "Hey, this sucks," "You're a bad person for posting this."
Atwood: But some of that, you said, is expected, though. 
Millard: To a degree it's gonna happen.? And if it happens in small doses and it's done with a relatively civil tone, it's kind of OK.? It really kind of depends.
Atwood: So what do you do in the case that-- we haven't gotten to this point yet, flirted with it, and it's obviously a very slippery slope-- but in terms of dealing with users who are just need to be excommunicated for some reason.? Like, what do you do?
Millard: We do it very rarely, actually.? As far as actually banning someone, it's really not common.? Setting aside spammers, you know, anybody who's going to come up and just, like, abuse outright the whole fundamental idea of the site, yeah, they're going to go.
Atwood: This would cost them five dollars at some level, right?
Millard: Yeah.
Atwood: So that's already kind of a barrier.
Millard: Yeah, that's a kind of up-front disincentive to come up and act like a jerk. 
Atwood: It costs you five dollars.? Normally it's free, it's free to be a jerk.? You can just be a jerk for nothing.
Millard: Yeah, so there there's many other places where they can get a bigger bang for their buck, if that's all they want to do.? So, yeah, we'll give people time outs-- give them 24 hours that they can't log into the site.? Or a week if they're really seeming like they're unhinged or need a break.? And we do that occasionally.? But it's really not common.? Mostly what we do is deal with...? Matt, and Jess, and I all write a fair amount of email every single day, including, you know, we'll drop someone a line and say, "Hey, this is kind of a problem.? You need to cut it out.? Talk to me about this if this is going to be an issue."? And that works most of the time.? We don't get a whole lot of crazy, raging cases, I think because of the paid signup as a barrier to keep a lot of really nutso, random drive-by people out.? Yeah and beyond that, yeah, we try and work with people.? As much as anything we may talk them to death in email if they really just want to fight.? Once they've wasted our time and spent themselves, they go  away on their own right.? We don't usually have to just nuke someone very often, because most people will either chill out or just go away of their own accord.
Atwood: Well there's obviously some scaling issues there.? Because you started with Matt, then Jessamyn, and you.? So it looks like the staff has been growing over time, I assume to keep up with this administrative overhead.
Millard: That's definitely a big part of it.? That's what brought Jessamyn on in the first place is when Matt realized the job was too big for him to keep doing as a one-man affair.? And same thing bringing me on when it continued to grow.
Atwood: One thing we flirted with is having users sort of rate each other.? But Joel quickly headed me off at the pass there and felt that would lead to what he called "bad high school days flashbacks."
[54:41]
Spolsky:? Hey, hey, hey - we can have them rate each other's pictures!
Millard: You should have a Best Smile badge.
Spolsky:?? I was thinking more like:? We already got Wikipedia, Reddit and Sex Exchange - why not also have Hot-or-Not?
[55:02]
Millard: It could work, you've already got the voting architecture.
Atwood: I did have one complaint about a gravatar that somebody set up that several people found offensive.? It was a religious space thing.? But I e-mailed him and he did cut it out.? So when you, say, e-mail someone and say, "Please cut it out," I like that because it sets up a connection between you and the user.? And I like that-- it's about community.? I believe deeply in the community.? But obviously there's a scale issue there, where I'm having to mail a hundred users a day, it's like, my life sort of ends.? Right?
Millard: Yeah.
Millard: The scale thing is obviously a real concern.? With MetaFilter, we've been trying to keep it from going crazy with scale - I mean the site's obviously grown continually over the last nine years, and it's going to keep growing - but it's not zooming.? We're not trying to turn this into something that's going to scale into a million users.? I can't imagine what that MetaFilter would look like.? That may be a little bit different from how people are approaching these type of things.? You see someone who want to set up a community site, they may really want it to be a hit, they want it to be big, they want it to be huge.? But to some extent, with that kind of scaling, if what you're doing is primarily social, you're kind of trying to set up Yahoo Answers, and Yahoo Answers is not what I'd consider a success as something with communities.
Atwood: I don't think anybody would gauge that as success. Although there are suprisingly -- if you Digg, it's kind of like YouTube...
Millard: Yeah, you can find that stuff.? 
Atwood: You can find comment streams on YouTube that are actually good.? I mean it's sort of a myth that there aren't any-- and I think it's the same with Yahoo Answers-- there are some questions that work.
Spolsky:?? Jeff, think about the whole scaling problem:? If you have one person who's making stupid Gravatars that are problematic, on a huge site? - even if you have ten people - you still have the same proportion of people that have this particular problem, that are anti-social in this particular way.? If that proportion is low enough, who cares?? So there's one or two people that are doing unacceptable things, the chances that anybody would even encounter them on a site are very slim.? You know what I mean?
[57:17]
Millard: If you provide something like an offensive flag or a way for people to let you know there's a problem, then even when it does come up, you can deal with it as you go [beep]
Spolsky:?? Yeah
Millard: So I don't think it's necessarily a huge issue, if you can keep on top of it.? Obviously if it's scaled past your ability to control it in that fashion you have to find another way. 
Atwood: Well I can see now that flagging content seems safer because if you're flagging a person, it does become kind of personal at that point.? You could say, "OK, this MetaFilter post that you made we really feel is not a good post."? But then if you flag the person, you feel like you're saying, "This person is not a good person."? You're separating the person from their actions, which I think is probably the right solution.
Millard: Yeah.? And that's the sort of thing: if you've got a user who's really causing problems to a point where people are flagging a lot of their content, behind the scenes are moderators you can see that easily enough.? We certainly, as far as aggregate experience go, Me an Matt and Jess can really tell if a user is a problem, we don't need anybody to be able to put a black mark on that user's record for the public to see.? If we get repeated issues, yeah, we're going to talk to that person.? Without it having to be a?spectacle.? You don't have this aspect of public shaming necessarily is how it's handled.
Which I think is a good thing, I really dislike that aspect of how things work on some sites I don't really like the idea of what you're going to do is that you're going to mock your users in public as a way to deal with them.? That's certainly not a unanimous feeling; there's a certain social value to public shaming, but it's certainly not something that I think works well on MetaFilter, and I think in any site that's trying more for community than a certain function that happens to have people driving it.? If you really want a community, you've got to have that mutual respect all around, which means you don't have the people in charge treating users - even jerky users - like crap.? You gotta take the high road - period.? Which is hard to do. 
Atwood: Yeah, I love that.? Respect.? It's really about that.? Because how can you have trust without respect.? I think you're right.? I think Joel sort of saved me from making a major mistake in that regard by implementing sort of the scarlet letter of "You have been misbehaving."? It probably would have been a huge mistake.? And that's one of the reasons we have calls like this and we have discussions like this.?? People accuse me of? trying to let the technology control the users but I actually try to think about it before I even implement anything.? I don't just assume that the software's going to do the job and head myself off from making bad decisions.
So Joel, did you have any further questions for Josh?
[59:54]
Spolsky:?? Not right now.
Atwood: OK.? I just wanted to make sure we got to them all.
Spolsky:?? I'm going to think of it as soon as we get off the call.? I'm gonna be like: "Wait a minute - what did you do about..."
[1:00:06]
Millard: [laughs]
Atwood: But I love MetaFilter.? I'm not super active.? I do have an account.? I did pay the five dollars or whatever.? I'm actually in there as Coding Horror.? And I think I was kind of afraid to post because I viewed it as such high quality, I wasn't sure I could meet the bar.? Maybe that's a good thing!
Millard: We didn't really engineer it in on purpose, but the fear that new people feel about making a post to the front page I think is actually part of what makes it stay pretty good.? A lot of people have expressed in MetaTalk that they don't post because they're not sure that they'll do a good enough job.
[1:00:38]
Spolsky:?? I've always been worried about that because actually I have the exact same problem which is that I keep discovering pockets of people that won't apply for a job as a programmer at Fog Creek because we have a reputation as being so strict about who we hire and, unfortunately the thing I'm afraid of is that a lot of the people who are really, really good don't think they're that good, and a lot of the people who are not that good think that they are that good.? And so for people to self censor themselves and say I'm not going to apply and I'm not going to post to the home page of MetaFilter, I'm not going to ask my question.? Maybe you get filtering but you don't know if it's necessarily quality based filtering.
[1:01:13]
Millard: Yeah, it's a mixed bag, I've seen the same thing and it's interesting: the front page has that fear aspect for some people who won't post, or at least are very hesitant and slow to finally post because they're worried about that.? Then you look at the AskMetaFilter side of it and it's some much more obviously "let us help you out with something" function that I don't think we see that at all!? We see people who sign up - and we make people wait a week before they can post their first question to avoid - again - a speed-bump [something] random spammy stuff, and we get email probably once a week from someone asking "Hey what do you mean I have to wait a week?" so there's a complete inversion of that, people are really enthusiastic to jump in, 'cause anybody can ask a question, it's not like writing a post about seventeenth century art
Spolsky: Or buying a handbag!
Millard: Yeah [laughing] So yeah, it's an interesting dynamic on the site itself in it's different parts.
[1:02:12]
Atwood: Right.? Well Josh, thank you so much for coming on.
Millard: No, thank you for having me.
Atwood: I enjoyed the thread and I continue to enjoy MetaFilter.? And additionally if you have any thoughts after looking at StackOverflow, anthing that you think we're doing wrong or, yeah, I would love to hear your thoughts. 
Millard: Yeah, no , I'll definitely let you know.? I'll be exploring the site some. 
Atwood: Yeah.? Alright!? Great!? We usually cut these off at an hour or two to save our listeners' ears.? So we wasted some of it in Joel's and my jibba jabba up front.? But Joel, any final things before we go?
Atwood: It's very complicated, it's StackOverflow.com
 
Atwood: I did!? No, no.? The people who are transcribing, thank you very much because I love being able to quote the things we've said here and so it's deeply, deeply appreciated.? And I think we've got to work out some sort of award system for the people doing the wiki work.
Atwood: An infinite supply of these badges that I'm pressing out here.
[1:04:55]
Atwood: That is true, but I find that it gets done a lot faster when you -
[laughter]
Spolsky:? Disagree.? If you are doing the transcript out of the goodness of your own heart transcribe things I'm saying.? If you are doing it because you believe you are going to get some kind of a badge, or Jeff is going to owe you one in some future universe, or that you'll get some coupons in the mail good to buy songs on Rock Band II - transcribe things that Jeff said and we'll see who gets more of their Jibber-Jabber transcribed.
Atwood:Okay, alright.
Spolsky: In the meantime, once again the phone number is 646-826-3879 which goes to a voicemail box.? Leave us a message and we'll play it on the next show.? Thanks very much and we'll see you all next week.
Atwood: And thanks Josh.
Millard: Yep, thank-you!
Spolsky: Thanks Josh.
[1:05:49]
Outro, advertising
[1:07:08 ends]
 
[incomplete - please help transcribe]
Intro, adversting
[1:28]
Atwood: You know there was some criticism of our previous podcasts because I think people got mixed up about who was who.
Spolsky: OK,?well I'm wearing a little... I'm wearing a blue striped shirt with thin little yellow horizontal stripes.? 
Oh my God, they're vacuuming again. I can't believe it!
Atwood: I thought things would have calmed down at the office by now.? So is it still chaos over there?
Spolsky: It is still chaos over here.? I've made it a little bit better by shouting at the furniture guy. ?What they did is: they had to move a desk about a 100 feet so that the building could polish the floor under the desk and then they had to move it back.? And they sent us a bill for $1300 for that.
Atwood: What?
Spolsky: And then I found out, after already being angry about this, that they only sent one person to move this desk and it was too big for one person to carry so he got our system administrator to help him. [laughs]
Atwood: Well that's great.
Spolsky: So they send a guy over. ?They guy isn't even equipped to do the one thing that he is supposed to do. ?He makes us do the work.
Atwood: And charges you $1300 to it...
Spolsky:?Yeah
Atwood: ...on top of all that.? Nice.
Spolsky: You know that I would say this is typical New York unions, buildings, rip-off, mafia, etc., except that its not really typical. ?This is the first time that anybody has really tried to rob us so gratuitously.
Atwood:?Right. ?So I assume you're not going to that that lying down. I assume there's?some remediation policy here.
Spolsky:?Eh, the remediation policy is that we never write that check and problem solved.[laughs]
Atwood: [chuckles] Well that's good. I have a vested interest in all this stuff being resolved before I get there because I will be there tomorrow...
Spolsky:?Its not going to...
Atwood: ...as will the rest of the StackOverflow team. ?All three of us. ?So.
Spolsky: Well here's what's working: XBox is working, projector is working, screen is working.? Trouble is you have to wait until it is dark to actually play it.
Atwood:?Right.
Spolsky: Because the area where we put up the projector is, shall we say, sun-drenched.
Atwood: Heh heh heh.
Spolsky:?And I, and I...
Atwood: I like sun-dappled personally.
Spolsky:?No I wish it were just dappled but its drenched. ?It's drenched.? You can't really see the screen and this was semi-intentional because I didn't really want people playing Rock Band because my office is right next to the sun drenched lunch area.
Atwood:?Well I like that you have your priorities straight. ?The first thing. ?We talk about having the office in order. ?The first thing you go to is, "OK how is the Rock Band set-up doing." ?I like that about you.? I like that you've identified that already as the priority for my visit.? So I think we are on the same wavelength here.
Spolsky: What else do you need?? Actually let's talk about your visit here for a second.
Atwood: Let us do that.? Can I say that I was very surprised.? So I've had some e-mails exchanged from Charles Petzold. ?I am shocked that you have not met Charles Petzold.? You both live in the same city.
Atwood: He lives two miles from you.
Spolsky: That's true.
Atwood: And I am stunned.? I for sure - I didn't even ask you because I knew, "oh surely he has met Charles Petzold. They live in the same city. You know they are both notable figures in the development community. Surely they've crossed paths at some point."? But you've never met him?
Spolsky: Well he's really a Win32 guy. ?And I... [laughs]
Atwood:?He doesn't know C?? Is that what this is about?? He doesn't know C.
Spolsky:?He knows C.? Of course he knows C.? Programming Windows was-
Atwood:? All real programmers know C of course. You know this is a good opportunity because on a lark I just mailed him and it turns out he has a thin window for us to have lunch with him and that's going to be tomorrow so I'm excited about that.
Spolsky:? OK, well that will be the first time I ever met him. We should talk about the rest of our agenda a little bit because we have this, um, what's the word, film-maker guy making movies in our office again.
Atwood:? So now the pressure is on, I have to look good because I'm going to be on film now.
Spolsky:? Mm hmm
Atwood:? I have to like bathe and shave and all those things.
Spolsky:? Vertical stripes.
Atwood:? Vertical stripes! [laughs] OK, well I arrive super super early like 'coz I'm doing the whole overnight flight thing, I leave at like 9pm tonight. So I get in at like 5:30 and I have like literally nothing to do because the other members of the Stack Overflow team, I think Jarrod gets in at like 11:30 so I'll be in like five hours before him. Probably before anyone at Fog Creek is even awake I'll be in New York City.
Spolsky:? This is why it's called the red-eye. Because you don't really sleep on the flight - do you, uh will you be able to go to your hotel at that hour or are they like, "Yeah, come back at two o'clock"...
Atwood:? Yeah, I could hang out there, I can just go to the lobby and hang out, I mean you know me, as long as I have my laptop and internet I'm pretty much done, I don't really need any other external stimuli. But yeah, I think probably what I'll do is, I guess come by the Fog Creek office 'coz I've got nothing really else to do...
Spolsky:? There's not really going to be anybody here to let you in at 5am.
Atwood:? Not at 5:30! I mean at a reasonable hour like say 9am. I'll just mill around doing whatever. [laughs] I didn't mean I was going to show up at 5, I'm not crazy you know.
[6:28]
Spolsky: I'am trying to think what to tell you to do in New-York for four hours when all the normal people are asleep.
Atwood: Ha, I will just fend for myself. That's my own fault; I thought I was experimenting with this overnight flight stuff and see how it works out. But I guess I should see how early that really is.
Spolsky: Yeah. The all overnight flight thing is just an attempt to use aircraft that otherwise would be sitting on the ground.
Atwood: Right.
Spolsky: And it sounds good but I just never do that when I have a choice.
Atwood: Well hopefully I'll be able to sleep. I'll get up actually very early today, so. Hopefully, I'll be sleepy later, and we will see how that's work out. But in term of first day stuff, so Jarrod arrives like around eleven thirty, and then Geoff arrives at like three, and we gonna have lunch at Petzold, and then what else did you wanna do ? I'm getting a copy of QuickBooks. You gonna teach me how to use QuickBooks, I know you are very excited about that.
Spolsky: Yeap. We should do that on Thursday. Well, what else do you have to do in town beside a... you are are on tourism, I guess
Atwood: I haven't heard back from the other people I emailed yet, in term of scheduling stuff. I do have... Did I tell you the whole... I haven't told you this. I have this opportunity to speak at EclipseCon, which is in March.
Spolsky: Ho, That sounds like something I did once.
Atwood: May be. But the cool thing about this is this is not just me, because that would be boring. It is actually me and Clay Shirky. You know, Clay Shirky is one of my heroes.
Spolsky: So...
Atwood: Yeah I know, it's awesome. So we get to talk about like building communities online and I get to talk about StackOverflow, you know, and all the lessons we've learned and, get to present with Clay. Obviously he's an expert so. That's one of the people that I have emailed actually, because I thought that would be good, because he is from New-York city as well. So we could?A) show him the site and?B) talk about the thing we are going to do together in March, because he needs to see the site to have some context. I mean I did meet him and talk to him about this earlier a few months ago, I think I mentioned it on the podcasts. But that was before we had sort of even going to beta, so there's really not a lot to show him. But I would love to show him in person. So we'll see if I'll hear back from him, I do not know.
Spolsky: Ok awesome.
[8:35]? 
Spolsky: Have we talked about the film on this podcast?? Have I told you about this film?
Atwood: In the Business of Software, at the tail end of that you talked a little bit about it.? You spent some time on it.? You talked about it some.? So I think if people have listened to the last, say, two or three podcast will have heard some.
Spolsky: We're going to make this movie.? We're making a movie.? There's a filmmaker running around.? Anything we do that's photogenic [laughs], in other words, conversations between people, anything but sitting at a computer and typing, they're going to want to film.? And there's actually going to be two cameramen on Thursday which makes it better if you're going to have a little meeting or hang out, play Rock Band.? That really doesn't belong in the film, it'll be a long enough film.? I wanna get Petzold, I want to interview Petzold for this movie, but I guess I'll ask him tomorrow at lunch, if that's OK.
Atwood: Well, his schedule is kind of weird.? This is pretty much all we're going to get.
Spolsky: No, I know.? But I know he lives in New York.
Atwood: Oh, that's true.? Oh, you mean later.
Spolsky: Yeah. 
Atwood: Oh, sure.? Done with that. 
Spolsky: Yeah.? I talked to him about the programming and stuff.? OK, so that's the-- I'm crossing things off of my agenda.? You know how Jon Stewart always like, crosses things off and... 
Atwood: He does that scribbling.? He scribbles on the paper. 
Spolsky: Right.? All the late night TV people always have fake pieces of paper that they pretend to be checking things off of. 
Atwood: Yeah, I never really understood that.? Because I think they have a script?? Isn't it like something they have to be saying?? It's like a teleprompter. 
Spolsky: Of course. 
Atwood: That's just a prop at that point.
Spolsky: [in a Jon Stewart voice] "It's just a prop."? Yeah, I don't know where it came from.? They've probably been doing it since-- David Letterman did it.? They've probably been doing so long it goes back to their making fun of somebody who's like the anchorman on the ABC evening news in 1959 or something, you know? 
Atwood: Right.? I was always freaked out because I would learn that the TV newscasters, stuff like they wouldn't even wearing pants-- that always freaked me out. 
Spolsky: Of course they wore pants! 
Atwood: No, they were like jeans or something.? I'm exaggerating.? They were like jeans, they would just have the top.? I don't even know if these are actually real.? Some site on line-- I have no idea if this is real-- a parody, probably a parody.? It was a suit you could put on-- it was just the front part of the suit, so you looked like you were wearing a suit.? It's like on the back there's nothing there.? It's only like you're the top half of your torso.? So if you're in a webcam, it's like, "Let me suit up for a meeting, John!"? You would just layer this thing on top of you.? It's like a classier version of a tuxedo tee shirt, which is like a timeless look.? Right?? Like that. 
{to be transcribed}
[14.58]
Spolsky: Um, OK.? Let's see, what else do I have on my list? Oh, here's another thing.? So I'm writing this article for Inc. Magazine.? I guess I should pop it up.? Where do I - where do I - store those things?? Uh, for... I don't know.? Um. If it's due on Friday, it's probably for the, you know, 2013 March issue, or something, because...
Atwood: [laughs] That is true, they have heated... [uninteligable] it's crazy
Spolsky: I actually have this listed as the November edition.? So, I'm writing about Stack Overflow, and what I wrote, I wrote this article - see, it's driving my editor crazy because I don't, I never conclude anything, I just tell a story.? I never have some big old conclusion like "If you do what I did, you'll make $768,243.00"
Atwood: But that's, that was your goal.? You explained to us that that's what you wanted to do.
Spolsky: Exactly.
Atwood: So...
Spolsky: It drives my editor crazy, and then he sends me an email saying "Yeah, but, but, what was the conclusion of this?? And if you're unwilling to write that, at least tell us what you felt about it."? So, anyway, the theme of the story, actually - I won't go into too many details - is that basically, we did seven things wrong with Stack Overflow in the development.? We made seven mistakes.? Uh, you wanna hear what they are?
Atwood: Well, uh, obviously I'm all intrigued now.
Spolsky: Yeah.? OK, so the first is, uh - that I didn't really - when I did this venture with you, I didn't really know that you could program.? Like, I never made you sit down and show me that you could code.
Atwood: Right.
Spolsky: OK, so there's one.? You know, because I'm all about, like, you can't hire programmers without knowing that they can program.? And you didn't find out that I could program.
Atwood: Well, I would argue this is not a traditional hiring relationship, either, so some of those rules don't apply.
Spolsky: OK.? Uh, number two: uh, co-location.? I mean, we had programmers - gosh, all over - in just about every mountain range in North America, we had programmers stashed away.? Basically, there's nobody on - there's no two people on Stack Overflow in one city.
Atwood: That's true.
Spolsky: And I'm a, I'm a big believer in being co-located so that people can communicate.? Uh, we never really had a spec, you know, and I'm, I'm all about the specs.? Uh, we didn't use a bug-tracking database; that's kind of embarassing to me. Um, we didn't have, we didn't have any - 
Atwood: That's because we don't have any bugs, Joel, we just don't have any.
Spolsky: [laughs]
Atwood: That's how good it is...
Spolsky: Yep.? Yep.? Yep.? Um, wait, there's one, I think.? Oh, nevermind; you fixed it.
Atwood: [laughs] That was a feature, obviously.? A feature...
Spolsky: We didn't, we never hired a tester.? We didn't have, like a QA person or a QA department.? We just let the world test for us.? And we didn't do anything in terms of creating a software schedule, um, so the software schedule was, uh, you know, like a list - at the very minimum - a list of what you're going to do and how long those things take, and, at the maximum, break it down to small features.? You know, we just sort of said "six to eight weeks" and then it took about twice that.? But that turned out to be OK.? And, uh, was that seven?? Well, that was six.? I guess the seventh, really, is that it's kind of one of these eyeball businesses.? And that was, you know what I mean, like, we'll get a lot of eyeballs, and then...
Atwood: Yes.
Spolsky: Yay, and then good things will happen. And uh, that's uh... Eyeball businesses are businesses where you don't really - it's not quite clear how you're gonna' monetize some - allthough it is sort of clear to us.? But, uh, this sort of dot-com boomy - seems like a mistake, to try to make a business based on eyeballs.? Um...? Now, needless to say, Stack Overflow is a huge success despite violating every single one of these rules.
Atwood: Right.? Well, I think there's - there's, this is a different kind of venture.? This is like something that runs in parallell to your, your regular business that you have going.? I mean even for me it's kind of parallell, like I was explaining with Coding Horror, it's really kind of a different audience to me even than Coding Horror.? There's obviously overlap, um, but this is something that runs in parallell, because if this is, turns out, had turned out to be a total failure, you know I, I love doing Coding Horror and I would continue to do that.
Spolsky: Yeah.
[19:05]
?
[35:25]
Spolsky: Here's a related question from, I think, Richard in San Diego.
Hertanto: This is Hertanto from San Diego. A few podcasts ago, Joel mentioned that he did a code review for a young programmer in his company. I was actually surprised that a CEO would do something like code review for a young programmer. I'm in a situation where I'm in a small company and I just feel that I don't get a lot of mentorship from the people in the company. Do you have any suggestion on how to get mentorship? Thank you.
Spolsky: First of all, I should say that I don't do a ton of code reviewing. That's not really my ... main thing. And I don't always have a huge amount of time to do it, although I do try to do it for people who don't have a chance. But that's actually over on the development team, it's far more common. The interns, co-ops and new hires get an awful lot of code reviewing. And we try to even like, rotate around the code reviewers and this is something that we considered to be really important. The developers do it in self defense. You know, it's not like a charitable thing on their part. It's that if they don't teach... you know it's the most efficient way to teach a new person on the team what level of code is expected of them cause otherwise you're gonna be fixing this code and you're gonna be debugging it for the rest of your life. So it's really in your interest to train the new people how to do things right. And one of the things that you really feel strongly at a company that's at a high level of software development. You know I notice this at Microsoft, when people are really good at writing code is that there's a big gap between where computer science curriculums left off or people can train themselves from books and the web and so forth and the level of code that you really need to be writing to work in one of these companies. Look at the quality of the code and the things you need to be thinking about. I remember in particular, one example where I wrote a simple loop, C programmers will recognize this, sorry, I wrote a simple loop to iterate over the characters in a string. So it was you know, for i=0; i < strlen of the string; i++. And hmm... this made sense, right? You're gonna go from the beginning of the string to the length of the string. Now, string in C, basically I just thought that was fine until one of the slightly more senior programmer came to my office and said, "What's the performance of this loop that you wrote?" I said, well you know, it does it once for every character in the string, so that's order of n. And he said, "What about the strlen thing?" And I said, "I don't know. But... wait... but..." [laughs] He said, "That's gonna calculate the length of the string in C because the C string, the only way to know where it ends is to scan it, looking for the zero... that calculation of the length of the string in C is order of n where n is length."?
Atwood: Well actually, it's null, not a zero, right?
Spolsky: Yah. You're looking for... it's the same in the original C. Null and zero. So, you're actually searching for this null terminating byte. And therefore, my algorithm was actually order of n square and not the order of n. And i thought, "Wow! you're actually thinking about the performance of strlen? Never occurred to me that you should think about the performance of functions that you're calling." It's just like... It was like he opened a little door for me that... "Look at here, you haven't cleaned up in this room; you haven't cleaned up in this room too." [Laughs]?
Atwood: Right. Right.
Spolsky: That's actually... that one piece of code reviewing took me really far and I've spent... what funny is I'll sit down with everybody that I've ever code reviewed and I'll find them doing things like, this is something that I, my personal pet peeve, literally every programmer does this until I tell them to stop. And that is they write some code that says "if x, where x is some expression, return true, else return false" And I say, "Replace that all with return x, where x is some expression. Why do you have to say if, then return true else return false. Why are you writing all those lines of code, just return the thing." And the reason this is my pet peeve is that it shows a lack of real understanding of a boolean as a first class type. When you're making that mistake, it's because you're thinking of an IF statement as a being some kind of a special thing, as opposed to just being... hmm... you know, you're thinking of a boolean as a special thing that only goes in IF statements. You're forgetting that a boolean can be passed around. So, that's why it's my pet peeve and I show that to everybody and everybody suddenly learns that. So there's a whole bunch of things like this that come out of the first round. You know it only takes a couple of months of code reviewing a new programmer who has, let's say experience from college or experience from books or experience from a not-so-good software company before they can rise to a much much higher level, and write much cleaner code, faster code and much more robust code. And so, two three years, the development team at FogCreek has finally learned that they really have to do that much more intensively, otherwise they're gonna get programmers that write crappy code that they'd have to clean up. So that's from the perspective of being a developer in terms of the value of the these code reviews. It's just two people sitting down, talking about code before somebody checks it in. If you're the person in a situation where you don't feel like you're getting the right kind of review, nobody's reviewing your code, you don't feel like you're learning, you don't really know. The first thing to do is, ask yourself, is there really anybody here I can learn from. Maybe you're in an institution where there really aren't very good programmers so they don't have so much to teach you and that's the problem. But it's probably not the case, there's probably someone fairly senior there who can probably teach you a lot. And you just have to ask for it. I think a lot of them would probably really enjoy being able to teach you and there's no shame in going to a more senior developer and say, "Listen, I wrote some code and I know you're a lot smarter, I'd really appreciate your critizism on the code and I'm sure you can find three major gasps that I made just by looking at it."
[42:02]?
?
{to be transcribed}
[57:11]
Atwood: Delicious.
Spolsky: Yes.? so, obviously you don't want to fill the place up with these, but it is sort of fun to have...Those of you with access to the Box Of Knowledge, type in Rites of intensification.? I'm typing in to make sure that works - into Wikipedia.? Oh, it's not in... 
?
Atwood: You're scaring me with your highfalutin anthropology terms
?
[57:42]
Atwood: Well can I give you another example of what you are talking about?? There was another thread on what was your first computer.
Atwood: Yes, it was fun.? I'm totally for fun. But we have to have boundaries in the system.? I do not believe it is acceptable to have no boundaries about what can be asked.? I believe that's a recipe for disaster.
Spolsky: Yeah.
Atwood: If people learn that they can ask what the heck ever, they're gonna ask what the heck ever.
Spolsky: Let the people vote.? Let the people vote.? I think what you will see will happen is for the most part it will stay on topic.? When there's a truly delightful off-topic question there will be people who are just like, "I gotta vote this up because I'm having fun with this question.? I don't care."
Atwood: OK, here's the thing.? Here's how it works, and I've told people this. You've got to win over the audience.? The thing is you have people voting that are just as clueless as the people asking the questions.? So when you're saying, "Oh just let them vote on it," you're going to have a bunch of new people voting on things that they don't realize are not really what we want.
Spolsky: Not true.? Disagree.? Disagree with you totally.? I totally disagree.
Atwood: I think its a mixture of both.? And I agree we want the fun threads.? I'm not saying go step on every little - you know - every?tiny thing that is out of line.? And I do not?think the people who have this ability have been doing that.? They've only been?turning off?things that were egregiously over the line, in my opinion.? I haven't seen a huge problem with it.
Spolsky: I tell you what.? Why don't you make it so that...? Well, I don't know what the change is here that I'm really describing, but if?you discover that there is actually a problem that newbies?are changing the community into something that we don't want it to be because they keep voting up advertisements for Ron Paul for President; then come back to me and say how the hell did this advertisement for Ron Paul for President get voted up so high?? I don't think that will happen.? 
I think that we can trust the community, and that what the community will tend to do is they will favor the programming questions, but when there is a particularly delightful and fun thread that serves as maybe a break or just the kind of thing... There is something about...? For a community to work...? 
You know what, you had a post on Coding Horror about a biological thing that occurred between you and your wife, mostly to your wife.? 
Atwood: Yes.
Spolsky: Very off topic.
Atwood: Well, yes.
Spolsky: So, I'd like you to go and delete that, please.? But you're not going to.
Atwood: (laughs)? But that's the bar mitzvah thing you're talking about.? Everybody does the first kid blog entry.? Everybody does that.
Spolsky: Exactly.? It can't be a community if you don't occasionally stop talking about the subject at hand and have a personal, fun conversation.
Atwood: But we do.? Even within the constraints of the people closing stuff, we do have those threads.? Nobody has tried to close, nor would they try to close "what was your first computer"?because it would be cruel.? No programmer would do that to another programmer.
Spolsky: There are people who have thousands and thousands of points who have expressed opinions that make me believe that they think that those kinds of threads should be closed instantly.
Atwood: But they have not closed them instantly because they know they are very popular.
Spolsky: Yes.
Atwood: At some point you have to bend to the will of the community.? I just think we have to shape it a little bit.? 
Spolsky: Yes.
Atwood: I just think it needs nudging.? You're right, its a fine line.? I don't know that we have it right yet, but I believe it does need some nudging.? You do have to have somebody in there, not smacking people down, but administering light pushes in the right direction.? I haven't seen a problem with it yet.? There could be.? I definitely keep my eye on it, and I take?those very seriously.
What I've been?telling people is if somebody closes their thing and they don't like it, vote it up.? If something gets voted up, maybe there's a mechanism where it gets unclosed.
Spolsky: Yes.
[1:01:18]
Spolsky: Some of the... One of the things that is kind of interesting...
Atwood: ...
Spolsky: ...
Atwood: ...
[1:04:43]
Atwood: [laughs] No, don't go there, don't please: don't go there.? [We] really don't want you to go there.
Spolsky: And that's it for this week, and we'll talk to you next week.? See ya.
Atwood: See you next week.
[1:04:53 ends]
Outro, advertsing
[1:06:12 ends]
[incomplete]
Intro, advertising
Atwood: Oh, you're recording already?
Spolsky: Yah.
Atwood: Oh, okay.
Spolsky: Well, we're gong to use some of this for the podcast - probably not all of it.? If there is anything we want to be secret or anything, then we won't use that.
Atwood: Check check check.
Spolsky: So hows your trip been to New York. What you guys been doing, just handing around the office
Atwood: Really Hanging round the office. We did go to the upright citizens last night. This is not a good for that. 
Spolsky:No. 
Atwood:No its not that funny. Well it was a smack down, it was a one group Vs other kind of thing and the second guy altough was good was not improptu. Whole scene with some kind of Zombie infested thing, it was?well done for what it was, but it was not improptu.?
Spolsky: Right
Atwood: he was talking to the other people and then he switched character ....... First of all its kind of scary, its about Zombies and all. It wasn't really that funny plus where was the improptu where?was the?improvisation.
Spolsky: I hate impropt they are always trying to cheat.
Atwood: Well i think that?was a massive?cheat. Cause like were some words spatuals and did he ever use it in sense
Spolsky: 
Atwood: At least the first group, they did some fuzzy dice.They did some car related stuff.?Which was , i mean resonable. They had to improvise
Dalgas/Dixon: Hard as double barrel shotgun
Atwood: 
Spolsky: 
Atwood:
Spolsky: 
Atwood:
Spolsky: 
[2:30]
{to be transcribed}
: ...
: ...
Pryor: ...
[5:40]
Spolsky: Weren't they famous for accidentally charging everybody for a year?
Atwood: Yes.? But they had a whole blog entry about it, which was nice.? I really like that - "We made this massive, it was a massive massive mistake."? It was a lose-all-your-customers type of mistake, right?? Serious.? And they had a whole blog entry about it. "This is what we did, and why it happened, and here's what we're going to fix it."
Spolsky: They charged their customers for a year instead of a month or something.
Atwood: And it was a programming bug too!? I can't remember the exact details.
Spolsky: A typo.
Atwood: They weren't checking something, there was some date that was backwards or future, they weren't ruling it out.
[6:12]
{to be transcribed}
[8:14]
Spolsky: I turned down an advertiser.? Or a sponsor for IT Conversations, which was Audible.? Which sponsors a lot of podcasts.? I didn't really turn them down, I talked to Doug about this, and we both agreed that we didn't really want Audible.? One is because - no offense, but - I don't like Audible because the DRM.? The one time I tried to buy a book from them, I had a DRM issue and lost it promptly.? Maybe that happened twice, and it was not like worth dealing with anymore.? But the real reason was that they wanted us to talk in our own voices as if we were advocating Audible.com.
Atwood: Right.
Spolsky: The wanted us to do a couple of minutes in the show, pick a book and talk about it or something like that.? And that's deeply crossing the line, I think.
[9:00]
{to be transcribed}
[11:20]
Atwood: American Idol?
[11:21]
{to be transcribed}
[14:00]
Atwood: Sure
[ringing]
Spolsky: That's kind of a StackOverflow-y type theme
Atwood: Sure. No, I think we want to explore that.? As we start getting ad income, and things start moving forward we'll have money to do that stuff.
[ringing finishes]
Spolsky: No, I was thinking people could buiy that from us for a hundred and fifty dollars, and we could get it made in China for two.
[laughter]
Pryor: What about this.? The idea of reputation is to make sure that somebody is serious about the site; they cant do certain things until they've given something to the community.? What if you don't have a lot of time, and you just want to pay for it?
Spolsky: Oh, buy reputation?? We could sell reputation?
Pryor: Yeah.
[14:38]
{to be transcribed}
[16:10]
Atwood: Bounty.? It's a bounty.
[16:11]
{to be transcribed}
[16:33]
Atwood: [...] That's the other problem, relative to the current financial crisis.? You do have to think through - it is a little bit like an economy, right?
Spolsky: Yep.
[16:40]
{to be transcribed}
[17:52]
Atwood: Oh, you rememeber your analogy of the people who throw the chess pieces?? People are playing chess, and 
Spolsky: Yes
Atwood: other people are playing "let's throw the chess pieces around the park"?? I guess you got an email pointing out "Hey there was actually a user throwing chess pieces around the park the other day."
Spolsky: That might be a metaphor for us.
Atwood: There have been a couple of malicious users come out of the woodwork, and we have made a few changes around that, but it's been pretty calm, we haven't had too many problems.
[18:13]
{to be transcribed}
[23:44]
Spolsky: What was your topic?
Pryor: It was to allow another login other than OpenID.
Spolsky: Oh.
Atwood: The eternal OpenID thing.
[23:52]
{to be transcribed}
Atwood: Well, that was good.? Before we go, did you guys have anything?? Anything?? Like, why am I such an ass?
Spolsky: What's it like to work for this - cover up his ears.
What does Joel do here?
[1:02:01]
Outro, advertising
?
[incomplete]
Intro, advertising
[01:27]
Atwood: Hey, we have Steve Yegge on the line.
Yegge: Hey gents.
Spolsky: Hey Steve.
Atwood: Joel is on, let's make sure everybody's here. Joel are you here?
Spolsky: I think so.
Atwood: Okay, and we're recording, everything is good.
Yegge: Cool.
Atwood: We had a little technological break down earlier in the call. We were experimenting with some new equipment.
Yegge: Well, I'm glad because I had to take that time to run to another room since, Googlers kinda throw a lot of parties and so like you'll book what you think is the quietest part of the room and then all of a sudden people will be like throwing some sort of party next to you and that actually happened. So we're all good now. It's quiet.
Spolsky: What was that party about, successful search results?
Yegge: I didn't bother to ask, I just fled. 
Spolsky: Uh Uh
Yegge: They throw parties like for everything, they even throw meta-parties. It's a little over the top here sometimes. You would think they'd be working, but no.
Spolsky: Like the 1024th party on a week day or something?
Yegge: [laughter] That's right. So, how do you guys do this? I was asking Jeff if there's a theme song. You know, like the Muppet show or you know something like that?
Spolsky: Oh, well I have new gear, so I could make a theme song. Do you have any requests?? I'm loading up iTunes.
Yegge: Nothing really comes to mind. ?Actually, how about the Love Boat show?? Can we swing that?
[02:49]
Atwood: I have suggestion. ?So one meme that came up recently was they want to put - I don't know if you guys know that "Transformers, the movie" for a lot of people of a certain age, that was a very significant movie. ?And there's this incredibly cheesy theme song music, it's like 80's guitar schlock, but it's very beloved. ?And they actually contacted the guy who wrote it and he wrote back to them and they want to include it in rhythm games like Guitar Hero and Rock Band. ?The reason I know this song, it was actually a song in the movie, I don't know if you guys have seen the movie, "Boogie Nights."
Spolsky: Yeah.
Atwood: It's one of the incredibly cheesy songs that he sings in the studio as part of hit "recording career," ?Dirk Diggler's recording career. ?I had no idea this song was in the Transformers, so it's like taken on a whole new meaning to me now. ?But that...
Yegge: Now when you say, "people of a certain age," you mean old people right?
Atwood: Yeah, that's what I'm fast becoming, it's a little scary. ?When you're like ten years older than a co-worker, it's the first time that happens it's a little weird. ?You're like, "wow we have almost no growing up TV shows in common anymore."
Yegge: Yeah, although there's a lot of people around here that put me to shame and I'm getting up there, but I'm kind of curious like what's the plan for programmers like us who are going to work and work and never quite make it big enough to retire and sail our yacht around? ?I mean do we just like work until we collapse on our keyboards? ?I mean I think the dynamics kind of changing a little bit isn't it?
Spolsky: I think that what will happen is that, eventually of course you'll be kicked out of Google because you won't be producing, you'll be really just to old to really crank out the code. ?So you'll end up at one of those companies that doesn't yet have TPS reports, and you'll institute the TPS reports.
Yegge: Yeah, because by then that movie will be so old that nobody will have heard of it.
Spolsky: Exactly, they won't know the old ways, and you will have had a reputation of being an organizational person, a good person to...
[04:46]
Yegge: Although I have it on good authority from an intern there - although this is admittedly?second-hand and everything but that Intel is actually the source of the TPS reports.
Spolsky:?No kidding?Yegge: Have you guys heard this?Spolsky:?This stands for something?Yegge:?Yeah, it does. ?And they actually send out a memo when the cover page changes.Spolsky:?Great.Yegge: Nice Place.
Spolsky:?No kidding?
Yegge: Have you guys heard this?
Spolsky:?This stands for something?
Yegge:?Yeah, it does. ?And they actually send out a memo when the cover page changes.
Spolsky:?Great.
Yegge: Nice Place.
Yegge: But all right, so we don't have to talk about getting old and dying yet.
Spolsky: ?Steve, my experience has been that--I don't know if you agree with this or what you think about this but my experience has been that I get slower and slower, but I still produce the same number of debugged lines of code because I get smarter and smarter about how I do things.
Yegge: Yeah. ?Yeah.? That's true, that is true.
Spolsky: And it sort of makes up for it. ?Like there's none of that reckless--
Yegge: You guys know Foo Camp, right? ?
Spolsky: Yes.
Yegge: You guys have both been there, yeah?
Spolsky: No, I don't go to things like that.
Atwood: I've heard of it.
Yegge: So like, they do these introductions ceremony, right, where all 300 people are in this tent, and they gotta stand up one at a time, and they gotta?say their name, where they're from, and three words.
Spolsky: Oh, it's a Google weekly staff meeting.
Yegge: [chuckle] ?Oh, man, I'm getting all confused.
Spolsky:?Did they stop doing that at Google? ?Yeah, I was consulting at Google when they were about 50 people. ?And everybody would get together in the cafeteria every Friday and stand up and explain who they were and where they were from because there were so many new people every week, and what they were working and what they accomplished this week and what they hoped to accomplish the next week. ?
Yegge: Yeah.
[6:19]
Spolsky: And with I don't know, in the two weeks I was working there, they went from 50 to 75 people and it was just ridiculous. ?It was just too many people.
Yegge: Yeah. ?I mean like the week that I got here, there were?probably 50 or 70 new people and that was like three and a half years ago. ?And they made us wear these colored beanie caps and sit in the special section at TGIF. ?And I mean, like it was crazy. ?Like, it was like this army of new people. ?And some of them were...I mean, you're sitting next to like Ken Thompson or something. ?I mean, there are famous people starting every week, too.
Spolsky: So when you're hiring this many new people, doesn't it happen that they get in and they never really learn the Google way of doing things. ?They just keep doing things their old way and nobody notices because there's nobody experienced to look over their shoulder and they just sort of bring their bad old habits from whatever TPS-report-company they come from?
Yegge: You'd think that but it's kind of weird. ?I've noticed this dynamic where people change to fit the company that they're at, right. ?And they really, by and large, they adapt. ?And so you might have worked at some company three companies ago where you know the management style was you were encouraged to be a jerk, right??
Spolsky: [chuckle]? I did, in fact, exactly three companies ago. ?How'd you know?
Yegge: Yeah, I mean I recognize that it's relatively rare and everything but in some places you know they kind of like a-hole managers, right? ?And so like people show up there, they'll turn into a-holes, but they never really lost that nugget of goodness they had before they started and so they'll show up at Google and literally, like, in 15 minutes of looking around, it'll be like, "Oh... this place is - I get it", right, and they'll revert back to being the good person they were before and you know, it's the same thing for whatever your work habits are. ?Also, there are a lot of peer pressure here to unit test and to document things and they've got a lot of even automated processes in place to kind of like almost force you to do it. So, it's not bad, but they have slowed their growth.
[08:20]?
Yegge:? You were at Netscape?
Spolsky:? No, No, I just know about this.
Yegge:? I was going to say, cause I was wondering if you know were at Netscape around the time you're talking about then you should have blown all your money on crack by now but maybe that was only a few of them.
Spolsky:? Not me and I have better taste than that.
Yegge:? Ya, I'd hope so.?
Spolsky:? Uhh... What were we talking about?
Yegge:? Netscape, they just went like from ..
Spolsky:? I believe they went from fifty to a thousand engineers in one year, and the net result is that everybody brought whatever bad habits they had from their previous company in Silicon Valley.? They were sort of hiring anyone who was walking in the door.? I don't think that Google has gotten that desperate yet.? Although...
Yegge: Yeah, not yet, but since you mention it, you got a résumé for me?
[9:20]
Spolsky: But when you have a whole team... sure let me hand you all the rejects from Fog Creek. But when you have a full team that arrived there... they're going to do whatever they do. They'll have a culture themselves. So you're saying this doesn't happen at Google.
Yegge:? {to be transcribed} ... where at Google very early on set up this set of processes very early on for growth ... have to follow style guide.... you? have to pass this readibility review... so it makes moving groups 
Spolsky: How do you know who wrote something?
Yegge: Most shops these days use Perforce, right?
{to be transcribed}
[12:51]
Yegge: Who wrote that article that says that Starbucks is a two-phase commit?
{to be transcribed}
Spolsky: It's Gregor Hope.
Atwood: Come on Steve, you planned that.
Yegge: I'd just say, "Gregor, I didn't know you were that smart."
{to be transcribed}
Spolsky:? Edit me!
Yegge: Edit me!
[19.49]
Spolsky: OK, here's the thing. For a startup to work, it has to be an idea that is not very convincing. It has to be a completely terrible idea.
Yegge: [laughs] Come on!
Spolsky: No guaranteed, because let's say you have an idea "Search really sucks and I know how to make it better. I'm going to..."? Let's not take that idea because it's just too unique and whatever.? Whatever your idea is, if it's obvious: it's being done.
Yegge: Yeah, that's true.
Spolsky: If you explain it, and everyone says "Oh yeah, that would work, I'm surprised that's not being done" - then it is being done.? However, if you explain it and they say "That wouldn't work, because of blah.? It could never possibly work, you could never have auctions on the Internet because people are untrustworthy and they will use it to steal your money by pretending to sell you a laptop and not sending you the laptop, so you can't have auctions on the web."? But as it turns out you can have auctions on the web.? Or whatever the idea it, it has to have a fatal flaw at first glance and it has to sound like a terrible idea and you have to believe in it for some reason which you just have trouble explaining to anyone except your brother-in-law who joins you in your startup or your college roommate who doesn't really get it, because you do need someone to join you, but the idea has to be not obvious and it has to sound bad - otherwise it's getting done.
Yegge: That sounds right, because if I look back at all the startups that I missed out on.? I recognise that if I had been pitched that idea at the time, I would have said "that won't work."? Like YouTube, I would have laughed at those guys.
Spolsky: Yeah, how are you just not going to get filled up with all kinds of copyright violations.? You're going to be a permanent lawsuit target. 
Yegge: Exactly.
Spolsky: And it's just going to be a big hosting site for pornographers.
Yegge: And you know I mean there was another one, and then every once in a while there is actually a good idea and then you're like "Oh My God how come nobody else thought of that."? It really does happen sometimes, right?? Like that company that just revolutionized uh, they just stole 13% of the market share from digital video recorders [cameras], right?
Spolsky: Flip
Yegge: The Flip, thank you.? That was a good idea, right?
Spolsky: Ummmmm.
Yegge: Yeah, come on, you can't say it wasn't, right?? It's the perfect description.? It fits in your pocket, has one button, you know, record.? It has this other tiny button play.? It has no wires, it just plugs into your computer via USB port.? It doesn't have any battery you can change.
Spolsky: So let's just say you were the guy inside Sony or Panasonic or somebody making video recorders and that was your idea.? Are you going to try to sell it?
Yegge: You right.? You're absolutely right.? Playing devil's advocate they would have said "no it's all high-end audiophiles that want this stuff.? You're describing a market that does not exist."
Spolsky: Yeah, that's really what it is.? Besides the fact that you have to make something that is totally unconvincing and therefore the most people you have convince the more unlikely it is to get made.? You know you are also in a conservative institution.? Because institutions are conservative, they try to preserve the institution.? Even an institution like a Google which tries not to be conservative and deliberately encourages people to do startup like ideas with the 20% time and whatnot.? And yet, realistically, you have a much better chance of just going out and doing it outside.? That's why these companies go out and buy some of these startups.? They're basically outsourcing the innovation.? There's too many organizational reasons that startups kind-of can't happen internally.? Google might prove, its certainly doing more than anyone else is to encourage skunk-work projects, to try and reward people disproportionally for coming up with great ideas although that to me sounds like a horrible idea.? They're doing more than anybody else.
Yegge: Well I don't know.? They reward people years after the thing has become clearly really successful to the level where they would have paid a bunch of money for them if they had been a startup. Does that make any sense?
Spolsky: It does but what about all the people, there are people working on things that are not as easily recognizable that may be worth a lot more to the company and there are people that are just good soldiers and are just doing what they are told and doing it well and it's not their fault that they did not invent Gmail.? They would have loved to invent Gmail.? They were probably telling somebody that they should do Gmail.? And for months and months and months nobody was listening to them because they were not very persuasive.? So it seems to me what winds up being partially unfair but also gives people an incentive to try kind-of stupid flashy things in hopes to get something down the road.
[24:58]
Yegge: So you know you're right, you're right about all of this sort of institutional resistance to new ideas.? I mean there are a bunch.? People they almost have a built in "naw it could never work" type of reaction, I mean they are kind-of jaded, right?? But that said, you know, that causes people to go off and do startups and you lose talent.? It's kind-of opportunity cost because it might get sold to someone else and not you.? It's in Google's best interest, I think really in every company's best interest, to try and find a way around these problems.
Spolsky: Why shouldn't Google just, and I'm just playing devil's advocate here, I can see why Google thinks this, but if I were in Google's position why wouldn't you just say not everything is going to be invented here.? We're opened to buying other companies and let's let the market test these ideas and the ones that make it to success we'll over pay for.? And instead of paying for developing 20 ideas in-house and one of them pays off you just buy one of those companies instead of 20 for 20 times as much money because that is what it is going to cost you to buy the startup once it's successful.? You're going to have to pay a multiple of 20 because it's been successful. And you might as well do that and get to pick and choose among the ones that kind of work instead of only choose among the ones that were done in house.
Yegge: Sure, well you know I like can't obviously speak for Google about policy things right.?? All I can talk about is what engineers in our position think and I haven't been in a bunch of other companies that I can say this sort of decision about whether to go do a startup or try to advance your ideas inside the company that's a common pattern, a current theme.? And I can also tell you I can look at a lot of companies that we have acquired and I can look at an equal number or greater number of internal startups that actually happened here like where somebody said like "screw you guys" I've been here for long enough, I've given enough blood to the company or I've vested or whatever you know.? Or maybe I worked at Microsoft for 15 years before I came here so I'm working for free anyway.? There's all sort of ways you can get into this situation, to get into a position where you are willing to walk if you don't get to do what you want to do.
Spolsky: Yeah.
Yegge: But every once in a while one of those people has an idea they want to pursue and they say I'm doing it here because you know you guys have good infrastructure and I don't want to have to re-invent big table and the localization system and all that other stuff.
Spolsky: Right, right.
Yegge: And you know examples, we talk about all the time like Orkut which hasn't been a huge success in the US but in some countries it's completely taken over, right?? And I mean Gmail was to an extent like that and GoogleTalk.? I mean there is a whole long list.? I mean it can be successful and people are willing to more the risk reward ration and compress it.? Right?? I mean because some of us are married and we have lives outside of work and the concept of doing a startup.? Yeah sure the potential reward is a lot higher, you know, but the risk is huge right?? You know it's not that appealing.? We want to be innovators but not entrepreneurs. 
Spolsky: Right, absolutely.? When you're an entrepreneur you're going to waste an awful lot of time.? Like I'm.? Fogcreek is 8 years old now and today Michael and I, the co-founders, are actually installing blinds.? 
Atwood: Yeah, you got blinds?? That's great.
Yegge: That's a great engineering activity Joel.? Are you going to be writing about the technical challenges there?? 
Spolsky: Naw.
Yegge: I mean that's the thing there.? I think programmers who say I'm going quit and go do a startup grossly underestimate just how much non-programming stuff they are going to wind up doing.? I mean if you're going to go do it you have to be at heart an entrepreneur.? Actually maybe even not a programmer, more of an organizer.
Spolsky: Either that or you're just bored with programming.? That's a solved problem for you and you just want to move onto the next thing.
Yegge: Yeah sure, whatever your reason.? You're reason shouldn't be I have this great idea that I want to build with my own hands and so I'm going to go and be an entrepreneur.? It ain't going to work for you.
Spolsky: It might, it can.
Atwood: What I hear missing a little bit there is for some people they want to be like Larry Page.? They want to be one of the key people in the company.? And I know I've worked at places where, not that I want to be kind of the world or anything, but it's a little frustrating because you're not one of the cabal that runs the company. You're just never going to be "the guy" that's really a part of the key decisions that take place at the company.? And I know that can be kind of frustrating.? I mean I guess if you have this sort of magical infrastructure where you never hit road blocks and you're always able to do exactly what you think needs to happen for some idea to move forward then I guess that would not be necessary but I've seen that dry bed where you just can't become part of the power structure of the company.? You're doing great work and you're helping them build whatever it is they're building.? But sometimes you just want to own the thing that you're building.? I mean really own it.? Like every aspect of it.? And I guess there are infrastructure issue there where you require like big table or thousands and thousands of servers then you're sort of in a catch-22 situation.? How can you build that kind of infrastructure without having a company to support you on some level and that's something I'm not really hearing there.
[30:33]
Spolsky:? Edit me!
Yegge: Edit me!
[36:52]
Spolsky: We have twenty four listeners.
[36:53]
Spolsky:? Edit me!
Yegge: Edit me!
[38:29]
Yegge: [...] some people man, they can't handle that [a failed project]. They're out on the ledge, you have to talk them down real slow. It's usually more junior people.
Spolsky:?I don't know about junior, but they identified with the project that they were working on. 
Yegge:Yeah, that happens.
Spolsky: And that's kind of important. Otherwise they're not going to work the 24 hour days, if they're not particularly identifying with it. 
Yegge: At Google, I got in trouble once for working 24 hour days, so I had to back off.
Spolsky: People are going to be much more devoted to a project that they identify with.
Yegge: You know, it's funny: if you're going to point to one thing in my blog that's never really been spoken but that's underlying everything that I've written is that, identifying with anything so strongly that it starts to give you emotional reactions is really bad.? Because you never know when your language is going to be obsolete or your project is going to get canceled or your favorite framework is going to be replaced.? Right?
[39:24]
Spolsky:? Edit me!
Yegge: Edit me!
[44:35]
Atwood: [...] It's about trading off computer time for human brain time.
Spolsky:? I'm not saying that you don't make improvements in programming languages, I definitely feel like you do. I feel like there are definitely better and worse languages, I don't want to deny that, and there're definitely major steps forward, and there are some kind of minor steps forward. I think the major steps forward are things like garbage collection/managed code, not having to manage your own memory actually does get you more productive because you stopped dealing with accidental complexity and can deal with only the complexity that you care about. 
Yegge: Concurrency's another big one. I wasn't able to actually use threads safely or sanely until the java.util.concurrent libraries came out, and they actually made it reasonable, at the expense of a little extra computational overhead, because the libraries may not generate as efficient locking as what you could do by hand, but it did let you throw together this multithreaded thing that would get 1000 times the throughput, so who cares if you lost 30% efficiency over a hand-tuned version, because you never would have got the hand-tuned version working
[45:44]
Spolsky:? Edit me!
Yegge: Edit me!
[46:28]
Spolsky: [...] even the ability to call functions recursively is something the average programmer uses about once a year.? It's good to have, but it's not going to necessarily make a huge difference - that one time a year it does - but it's not as big a deal as garbage collection.
Yegge: Sure.
Spolsky: So, but that said, there are definitely languages that are better and worse, but that said, there are also programmers that are better and worse.? And there's something a little bit weird about (frankly) script-kiddies obsessing over what language they will choose to be betrothed to as though they were picking...? It just sounds like sixteen year olds trying to decide what used jalopy to get.
Yegge:?I would love to see everybody learn a bunch of languages because it does make you a better programmer.? It gives you the ability to take a look at some language - like Excel macros - and sort of squint at it, and say "if I did this and this and this, it would almost look like a real language."? 
Spolsky: Yeah.
Spolsky: It sort of depends.? If you stick to the Microsoft world they interoperate nicely
Yegge: Yeah, well, Microsoft got it.? 
Spolsky: Yeah.
Yegge: They did.? With .NET, once Microsoft realized that languages matter (which the big Sun lawsuit was a big slap in the face) but they got it, to their credit they went out and got a bunch of language people and built .NET which does a whole bunch of things right, and now Sun's been playing catch-up.? I'm going to hear a whole bunch of crap from Sun people going, "oh, we support languages just as well now"
Spolsky: Let me just tell them in advance: nobody email us.? Just don't.? We're already sorry.? We're going to apologize in advance for everything that we say.
Yegge: Yeah, I mean I love them all, they're all great, really.? Please don't email me back.
[49:07]
Spolsky: You know what?? The interoperability in .NET and the way the languages work together and share a stack, and a lot of of those things and the way you can even communicate between processes and assembles (and all that kind of stuff) is really like a version of COM that assumes garbage collection.
Yegge: Yes.
Spolsky: Once you assume garbage collection (or memory management as they call it) then you can do things that in COM you used to have to do manually, and they were a nightmare.? COM had the right idea, it was just that it was impossible to ever keep your reference counts correct, and...? 
Yegge: Yeah.? Yeah.
Even so, right.? Even in the rare cases, like .NET, where you can get them to interoperate - I think they actually had to make concessions, they actually had to change VB to the chagrin of hardcore VB users.? 
Spolsky:? Yeah-yeah-yeah.
Yegge: They had to actually make semantic changes, right?? To make them all interoperate.? That has to happen to some extent.
Spolsky:? It?was sort of embarrassing.? I mean, that was a problem.? That was sort of the abandoning of the world's most popular programming language.? I hate to say this, but VB was the best selling programming language of all time, and to abandon all that code, basically say, "You know, we'll give you some tools that don't work for importing it, and we're going to make these fundamental changes in the way the language works, and then we're going to blithely change the whole forms system so that you can't really port your code reasonably." It basically made the largest single cohesive community of developers in the world all suddently decide, "OK. What's next? We can't keep using VB, what are we going to use next?". I think they scattered to the winds, really, a lot of them just started doing web, and they went to PHP.
[52:00]
Atwood:So Steve, I want you to tell us what you're working on.
Yegge: secrecy.? It's this weird trade off, right?? suddenly shock people into realizing it's a really good idea.
Spolsky:Google Brown Paper Bag.? GPaperbag.? Saying snotty things about it.? You're showing it a little too early.? 2.0, 3.0, or 4.0.? funny thing that they released.? K-N-O-L.? google.com/knol.? A lot of people look at it.? It's supposed to be a Wikipedia clone.? C-U-I-L got a lot of publicity.
[54:18]
{to be transcribed}
Atwood: Steve's doing actual work over there.
[56:05]
{to be transcribed}
Yegge:I want to port it to the...
Spolsky:Android.
[56:34]
{to be transcribed}
Yegge:So I don't know, there's a bunch of stuff I'd like to do on the side.? fiercely defending it.
[56:53]
{to be transcribed}
Atwood: When do you think it'll be canceled?
Yegge:I'm in complete control of it.? You know what I mean?? They didn't have like product managers researching it.? They were always like really happy because of that, right? 
[57:45]
{to be transcribed}
Atwood: So you're like the PM or whatever?? How many people are working on this with you?
Yegge: It's a small project, and I want to keep it small.
[58:28]
{to be transcribed}
Spolsky: Six to eight weeks.
[58:43]
{to be transcribed}
Yegge: I'm not having a lot of scrum meetings.? It's funny how we get an extra hour a day.
[59:11]
{to be transcribed}
Atwood:When I used to post on coding horror.? My mind overdrive.? actually written reasonably well.? Your writing process, how long it takes.
[59:35]
{to be transcribed}
Yegge: one sitting.? So pretty much everything.? 40% writing, 60% editing.? I throw a lot of stuff out.
[1:00:05]
[1:00:07]
{to be transcribed}
Yegge: two hours every couple days.? You can't write about anything that's interesting without making a bunch of people mad.
[1:00:48]
{to be transcribed}
Spolsky: And a villain.? I think you need a villain, make somebody out to be a villain. 
Atwood:When you actually wouldn't put comments in your code.? Then people get pissed off.? Then people accuse you of trying to be controversial when all you're trying to do is be interesting.
[1:01:55]
{to be transcribed}
[1:02:08]
{to be transcribed}
Spolsky: Um, yeah.? Of course.? That's a software program that they bought, Steve.? it sends email to a bunch of high page ranked people.
[1:02:30]
{to be transcribed}
Yegge: "I read your blog".? Now all of a sudden you're thinking.? "Steve, you're a clown fish.? Say something funny."? It's kind of crazy.? If the thing's a total flop.
[1:03:11]
{to be transcribed}
Atwood:I remember when your blogs first sort of hit the scene.? There were some really good ones.? The CTO asked me to take off.? 
Yegge: too much internal information.? So unfortunately some of the good ones got yanked.? Been there for five years.
[1:03:57]
{to be transcribed}
Spolsky:? And how did these get distributed internally? Was there some kind of...? Does Amazon have some kind of interanl blog?
Yegge: early adopter types.? word of mouth.? To like a thousand readers every time I posted.? It's like my diary.? So go away.? But that just seemed to bring more people in.? It doesn't work.? opposite of what you want.? 
[1:04:47]
{to be transcribed}
Atwood:the paradox of information when working within an organization.
[1:05:13]
{to be transcribed}
Spolsky:? it's more efficient to write notes to yourself.
Yegge: all these copies of the web, historical copies.? It's even back-dated.? It's totally changed if you think about motivation for why people do things.? immortality.? kids that look like themselves.? These days.? Everything you say quoted out of context.
[1:06:12]
{to be transcribed}
Spolsky: If you're not on the web, piece here, piece there.? Every once in a while... his brother got killed in a car crash.? He has a life and stuff.? flood.? One negative story about them. Now they're known as that Star Wars kid.? flooding the inputs, flooding Google.? 
Spolsky: In case of emergancy.
Yegge: Yep. 
[1:07:30]
{to be transcribed}
Atwood:? footprint on the web.? The average person is just not gonna blog.? Love that one.? Challenging there.? Not in their DNA.? Not gonna happen.? Facebook and MySpace.? Have a footprint.? It was a little frustrating to me.? Huge untapped market.? They're not marketing themselves.? 
[1:08:42]
{to be transcribed}
Yegge: Hallway conversations.? brilliant write down what they're thinking.? 4 billion people, you know?? 
[1:09:03]
{to be transcribed}
Atwood:? I'm noisy.? You can achieve a level of success.
[1:09:28]
{to be transcribed}
Yegge: I'm arrogant.? I'm a dumbass.? Dumbest person at Google.? Stupidest person in the company.? It sucks.
[1:10:22]
{to be transcribed}
Atwood:? don't want to be attacked.? they just want to win.? be challenged and win.? the illusion of potentially losing.? perception of danger.? 
[1:10:53]
{to be transcribed}
Yegge:I was in real danger, buddy.
Spolsky:? Edit me!
Yegge: Edit me!
[1:13:36]
Spolsky: blog.stackoverflow.com? As usual, if you would like to contribute a little bit to the community, we have a transcript wiki online and there will be a link to also at the blog?post, or you can go to stackoverflow.fogbugz.com and look for the transcript wiki, and what you'll find there is a community from around the world of people who are volunteering their time to just type out a few minutes or a few seconds or a few lines of this podcast to contribute, and very rapidly that becomes a complete transcript, which is very helpful to people and it allows it to show up in searches and it allows people who are hearing impaired, or don't feel like listening to a four hour, sixty five minute podcast with Steve Yegge just going on and on - and our boring selves.? So that would be appreciated.? Until then, see you next week.
Atwood: Yep, bye!
[1:14:32]
Outro, advertising
[1:15:51 ends]
[1:25]
Atwood: ...Joel.
Spolsky: We're back.? With another fabulous episode of: StackOverflow Podcast.? Brought to you by... 
Atwood: That's right.
Spolsky: Jeff and Joel.
Atwood: Do we have a new sponsor?? I didn't know if there was some surprise like the Gummy Bears for extra grubby children.
Spolsky: StackOverflow Podcast is brought to you by Gummy Bears for grubby children.? [Laughs] I can't say that with a straight face.? We need to get a better sponsor.
Atwood:?That's right.? We had talked about doing a lot of questions 'cause the last few shows we haven't done any at all.
Spolsky:?That's true.? We have five.
Atwood:?OK, why don't we start with that then?
Spolsky:?You just want to launch into the questions?
Atwood:?Yeah, I think so. I think we owe it to the audience.
Spolsky:?No like; "how have you been? What's new? How's your 401K doing?"
Atwood: Nope, just right into the content, man. That's how we roll.
Spolsky: Alright, well most of our questions here are about StackOverflow as a matter of fact. So let's just start throwin' them out there.
[2:21]
Christopher Leary: Hey Jeff and Joel, I've been really interested in the development of StackOverflow's Karma system since I've been trying to come up with one of my own. You guys seem to assume that there exists a mapping of actions to Karmic weights that will steer the whole userbase in the right direction in a way that's also going to scale.? I've read the transcript of Shirky's "A group is it's own worst enemy" talk, which made me wonder if this is even possible?? Do you really think that a theoretical greatest possible weighting system would be good enough to deter the pathological users and encourage everybody else?
Spolsky: Yes.
That's the whole question.? Go ahead Jeff.
Atwood: I think the system we came up with - I mean I don't pretend to have an idea of what the end state is for our system.? I actually don't know, I mean because there's going to be continued growth in reputation. 
Spolsky: Yeah.? It might have to change.
 Atwood: I think one thing we changed - one thing we did early on that I think was hugely important and we should have done it earlier - was put a cap on how much reputation you can get in any given day.? And I was just looking at a request on UserVoice that someone thinks we should also have a cap on the amount of reputation you can get from any one response.? Jon Skeet was noting that he felt it was a little unfair that he got 46 up votes on a really simple answer to, I think it was a question about whether you should do loops like "<" or "<=".? It was like a really simple little thing but he just felt like 46 up votes was a lot for sort of an ephemeral thought like that.
[3:52]
Spolsky: Was that a question that -- why did that question have so much attention on it?
Atwood:?I don't know.?
Spolsky: Why were many people liking that question and voting it up?
Spolsky: Mm-hmm, mm-hmm.
Atwood: And Jon I thought had a very nice considered opinion about this.? And he's onto something because, it's like I said; until we have the reputation cap it was sort of a huge looming problem.? So I would say that's the number one thing I would look at.? That is you have to have really strong limits in the system.?
Spolsky: Maybe they should be logarithmic or something like Richter scales?
Atwood: Ya, I thought about that but it just it gets... hairy.? It just seems complex at some level versus the one man one vote rule.? I mean there's some people who think that the more reputation you have the more your votes should count which I think is extremely bad, like I think that's totally the wrong way to do the system.
Spolsky: Wait wait don't answer that yet because that's a question we have coming up.
Atwood: Oh really?
Spolsky: We'll come back to that.
Atwood: Yes, We'll come back to that.
So I would say those would say those would be the two guidelines for anyone asking my opinion on these things.? Although I guess we have not seen the ramifications of the system that we have built yet.? But so far, so good.
Spolsky: I think it would be fair to say that it was definitely our goal that this thing - or it was our expectation - that these things would change all the time.? That we would constantly be changing things.? Adding new badges, removing badges, adding scoring rules. Right?
Atwood: But as you have noted before, once the system gets out there and people get used to the way it works there's a lot of bellyaching when you change things, there's some inertia that you start to get in the system around the way things are so it's difficult to just radically change course.? Our hope was that during the private beta we got all that stuff out of our system - all the major, crazy changes.? But we'll see.
Spolsky: Oh I got a cowbell.? [ding ding ding]
[6:54]
Atwood: Oh. [laughs]? Did the cowbell arrive?? Did the tambourine arrive?
Spolsky: Yeah, oh tambourine, I'll take that out for the next question but [ding ding ding] that's the cowbell.
Atwood: By the way, these aren't random.? These are actually Rockband accessories for the vocalist.? They're actually part of the song where you can hit the cowbell and actually have it register.
Spolsky: I was looking for the USB port and this just looks like a piece of metal.? I was not seeing... I thought this was going to be a USB cowbell.? I guess it's wireless or something?? I don't see where you put in the batteries.
Atwood: I'm excited that you are using it as a prop on our show though.? That makes it all worthwile.? It's excellent.
Spolsky: I've got all this gear here now, for those that don't pay any attention to my website, I wrote up a little article last Friday about what all the gear is here in the new studio setup.? I've actually got two mixers, and a recorder, and all kinds of USB... It's a lot of gear and the joke is that I think this entire thing could be done in software if I could just figure that stuff out.
Atwood: [laughs] Yeah, but it's fun to have knobs and dials.
Spolsky: The knobs and dials are fun and there are flashing lights here that don't mean anything.? For example, one of these mixers has a flashing light that says 152.2 and I don't know what that means.? I think that's the number of beats per minute coming from you, Jeff.
Atwood: But it looks cool.? It looks complicated and interesting.
Spolsky: It does. I personally believe that almost anything you try to come up with will over time tend to create people gaming the system a little bit and maybe non-optimal behavior that is "point optimal" but not "site optimal" like it optimizes for somebody's personal karma not for the actual outcome that you want.? And as that starts to happen you have to constantly adjust and tweak these systems, kind of endlessly.
Atwood: Right.
Spolsky: That's what happened with PageRank obviously and Google's ranking algorithm.? They pretty much had to keep continuously adding new twists. What does the knob do on the cowbell? [ding]
Atwood: But the central thing is still there.? I mean, I agree that there's been all these new--It's funny because blogs were kind of an exploit of the PageRank system in my opinion.? Blogs, just the way they are constructed, and the way people form these communities and link to each other, just naturally--they're not trying to game the system.? But it was a huge PageRank farm, effectively.? I know Google did several updates related to blogs because it got ridiculous.? I remember some bloggers had PageRank 7, which is astronomical.? It's a logarithmic scale right?? On one end you have apple.com and some really major sites like some of the Google sites are PageRank 10--Wikipedia, things like that, and then PageRank 1.? By the time you get to 4 and 5, you're a pretty serious website and I was just surprised to see bloggers at 7.? I love my fellow bloggers, but good Lord.? They're not institutions unto themselves, although some of them might think that they are.
Spolsky: Well, I for one have PageRank 7, so there!
Atwood: But you're not a blogger.
Spolsky: Oh yeah, that's right.? I'm sorry.
Atwood: You always tell people over and over again, so you don't count.? You're a writer!
Spolsky: I notice you only have 6 Jeff. [laughs]
Atwood: You're one of those fancy writers, with your words and your sentences and your paragraphs.? I just use bullet points and pictures.
Spolsky: Maybe I don't mind [not] being a blogger anymore.? I was thinking about the definition of a blog and how it's sort of changed a little bit.? And it used to be more about the fact that you were linking.? There used to be some implication that if you're a blogger that what you're doing is like, I don't know, Glen Reynolds, where everything you write is two sentences and it's just linking to other people writing longer form things.? There used to be a little bit of an implication of that in the idea of blogging, now there isn't so much.? I think now there's all kinds of different ways that blogs work, I think that's no longer--the word either has no meaning or it only means the reverse chronological order thing.? Hey, let's not talk about blogging, that's boring.? Let's talk about podcasting!
Atwood: Yeah, that's much more exciting. [laughs]
Spolsky: That's what people talk about on podcasts.? So anything else we want to tell Chris about karma systems?? I think you do have to adjust all the time, I think you have to come up with the first good guess and you just have to be ready to tweak it and watch what people are doing, what people are saying.? Part of the reason I even thought it was important to have the Stack Overflow podcast is that I really did want people--this is something the community will pay attention to.? They're going to say "Hey, I have an idea.? Maybe I should get 6 points when I do this, and only -2 points when I do that."? Having those conversations continuously is important for us to hear from the users of the site.
Atwood: It is.? It's important for them to go on User Voice and enter it, and then I'll decline it immediately.
Spolsky: Or just, even better, call into the podcast hotline.? By the way, I've mentioned the phone number a couple of times because I want to encourage more calls.? 646-826-3879.? That's 646-826-3879, and that's the number where you can leave a voice mail for us to play on the show and we need more questions.? When you do call, please tell us your name and try to keep it to under 90 seconds.? All right.? Another question?
Atwood: Sure, let's do it.
Spolsky: This was sort of mentioned--we touched upon this.
[12:05]
Unknown Caller: Hey Jeff and Joel--downvoting.? Basically not all downvotes are created equal.? People who go around just downvoting everybody, their voice shouldn't really have as much weight as somebody who is very selective.? So, what do you think about a system where the voter's reputation is a multiple?? So people who have better reputation, their votes count more.? What do you think?? Bye.
Spolsky: So I guess you were very much against this idea?
Atwood: I think it's very, for lack of a better word, undemocratic.? I mean, the idea that your vote counts for more than mine?? There was a gem of something in there that's a little bit interesting that we've thought about which is, we have had incidents of people who--they get pissed off at another user so they go in and downvote everything that user has ever done.? Right?? First of all, that's not as bad as it sounds because an upvote is worth five times as much as a downvote, so it would take five downvotes to cancel out one upvote so there's a limited amount of damage you can do.? Plus you only have 30 votes in a 24 hour period anyway, so you can only do that on 30 posts by that user.? But still, it is aggravating and I totally empathize with people that are complaining because this is annoying.? Somebody told me, it might have been you--I don't remember, Mr. Reddit fan, but on Reddit they track this and if they see a user consistently downvoting another user, they basically silently undo all those votes, like those don't even count.
Spolsky: I do not remember saying that, but it just occurred to me that we should get--you know who we should get on as a guest?? Some of those Reddit guys like Steve or Alexis.
Atwood: Your bestest pals.
Spolsky: My best friends.? Alexis--He's in a band called Breadpig.? Are you familiar with that band?
Atwood: I am not familiar with Breadpig.
Spolsky: They play the Rockband instruments without the X-Box.
Atwood: Wow, that's cool.? That's very cool.? Yeah, definitely let's get him on.? That's doubly awesome now.? I'm totally convinced.? Joel and I have been talking more about getting more guests on because I think it just livens up the show and plus we get to broaden our horizons a little bit which is always kinda nice.
Spolsky: Yeah and we get better ratings when it's just not this old couple, you and me.
Atwood: [laughs] Whiling away the hours, sipping on our Bartles & James on the porch.
Spolsky: [laughs] That's what it's going to be eventually, isn't it?
Atwood: Yes.
Spolsky: We just need to find a place where we can both move.
Atwood: Yeah.? One final thing on that question.? Another thing that has been floated, and I guess you've kinda talked about this is just sort of a logarithmic thing.? Instead of something having a bajillion votes, where another post has four, some sort of normalization you do where your deviation's above the mean--and I'm kinda open to that but again I think it's kinda complicated to figure out versus the whole "one man, one vote" thing, which people kinda get.
Spolsky: What I'm wondering is, what's it going to be like when there are people out there with 100,000 karma?? Are new people going to come in and say "Well, I can never achieve that kind of karma, so there's just no point" and just lose interest?
Atwood: Another thing that's been floated, and I think some communities do this--once you get to a certain level, you just have "Max."? That's the number--you're at "Max" and then--we could cap it that way.? So it doesn't feel like oh--because someone will eventually have 20k rep. which is just huge.? We're almost to the point where someone has 10k.? I don't know, maybe we should have a cap?
Spolsky: How about nobody can have more than Joel? [laughs]
Atwood: [laughs] Because the intent of the system is that we trust you.? Reputation doesn't mean that you're a genius or that you know everything there is to know about anything at all actually.? It just means that Stack Overflow, the system, trusts you.? Once you get to a very high level of trust, you're just infinitely trusted.
Spolsky: I don't really like the "Max" idea.? I feel like you should always have something more to strive for.
Atwood: Yeah. No, I--
Spolsky: "Max" is like the President of the United States of America.
Atwood: [laughs]? Well, we've also thought about maybe extending some moderator priviledges to other users just so that if we're not around--the four moderators that we have--although to be fair, to be clear, almost everything in the system, users can do the essential things that need to happen on the site.? But there are some unusual things that might happen.
Spolsky: I've never really used my moderator priviledges, except for once and then I messed it up because I thought I was just flagging something and I was actually banning a user for life, [laughing] I think--I don't remember.? I'm not really moderating properly.
Atwood: Yes, that user felt very chastized by that, accidentally.? He actually emailed me, that was kinda funny.? What Joel is referring to is, normally you can vote something "offensive" or flag something "offensive," and once you get to a certain threshold of offensive, it's soft automatically deleted and so on, and so forth.? What Joel didn't realize is as a moderator, your offensive vote is binding and permanent.? If you cast an offensive vote, immediately you reach the threshold--one of the very few special things about moderators.? So when Joel did that, he banished the post.? He thought he was just casting an innocent little flag, but, no, he was removing the post.
Spolsky: Yeah.? I have a question.
Atwood: Are you in the list of questioners?? Did you call the number?? Did you leave your name?? Did you--
Spolsky: No.? All right, nevermind.? Sorry, I won't ask it.
Atwood: Yeah.
Spolsky: Let's see... I kinda got a new system here so I'm--repuation, downvoting--I feel like you should be able to go on forever just earning some kind of additional points but maybe not in a way that discourages new users from--maybe there's something about--maybe your karma kind of rots if you don't keep it up to date.
Atwood: That's another thing that's been floated, but I don't know.? Gosh.? Some of this stuff--I feel like you'd just have to throw it out there and try it and see what the reaction is.? But some of it is so broad and so sweeping, it's such a major change to behavior that--gosh, I worry about that--particularly that one.? If people come in--because already people freak out if their reputation changes by any way that they don't understand.? So if there's this global thing where every week everybody's rep drops, unless they participated--let's say you go a week without doing something so your rep would drop, well that's like--
Spolsky: Well, maybe you have two kinds of rep.? You know, you've got "old" rep, which is shown in Roman numerals and you always get to keep that.? [laughs] But it's old fashioned which is why it's in Roman numerals.
Atwood: [sarcastic] Yes.? That's great, that sounds simple and very easy to understand, the system that you're describing.? I don't think anyone would be confused.? I don't think I would get any emails about that.
Spolsky: [laughs] You'd just have to explain it in the blog.? Let's go on to another question, here--this is a good one.
[19:03]
Jeff Metzner: Hi Joel and Jeff, this is Jeff Metzner from Exton, Pennsylvania.? I'm a C++ programmer and here is my Stack Overflow related question.? It's about anybody being able to edit any post on the site, reputation dependend of course--which I think is a good thing, especially for the technical questions.? However, it just occurred to me that I recently answered a question about job experiences with a personal anecdote (whether such questions should be allowed or not is a whole separate question which we could come back to some other time) but it occurred to me that I answered this question with a personal anecdote and then if anyone is allowed to edit that, then that means that I could go back some day and find something with my name next to it that actually does not reflect my experience, which with a technical question is not such a big deal because presumably they would be correcting my mistakes.? But with a subjective answer they're potentially putting words in your mouth.? So, I was wondering what your opinion was about that.? Thank you.? Bye.
Atwood: I think that's a great point.? Joel, did you want to run with that?
Spolsky: Well, you've thought about this, so--no actually, one thing is that the personal anecdote--I kind of have to see the question--but what we've really been invisioning is the Wikipedia of the long tail of programming questions.? So a good answer does not necessarily--should not--this isn't a discussion group, it's not a place to tell your life story.? It's a place to provide encylopedia like answers to questions.? You know, the best answers are the ones that are the most--what's the technical term I'm looking for--the most encylopediac.? You know, what are the qualities of an encylopedia article?
Atwood: Have you been to Stack Overflow recently?? I mean, I'm just curious because what you're describing I've got to tell you--
Spolsky: Doesn't exist.
Atwood: No, some of them are like that.
Spolsky: I don't know.? The ones you hate the most are all the subjective ones, which are like "What's everybody's favorite keyboard?"
Atwood: Wait, wait, wait.? First of all, hate is a strong word.? I don't hate anything on Stack Overflow.? I may dislike and disagree with some of the things, I don't hate anything that's on Stack Overflow.
Spolsky: Your pet peeve is the subjective ones.
Atwood:? I hate you, Joel Spolsky, but the stuff on the site I stay more apart from.
Spolsky: [sniff, sniff] Sniff.
Atwood: You're very--he's very sensitive.
Spolsky: I'm putting your volume down 20%.? [laughing] Which knob is this for Jeff's volume?? Let's see... here we go.
Atwood: I think a lot of the tension in Stack Overflow--and I think it's an interesting tension--comes from the fact that we're trying to blend these two things that essentially are like oil and water.? One is the concept of shared ownership like Wikipedia right--where nothing is signed, right?? There's no article, it's like--this is the asphalt article by Joe Schmoe.? It's just, this is the asphalt article.? So you give up identity.? There's no reputation system.? There's certainly no upvoting on Wikipedia.? And then on the other hand, we have all these things in our system.? So we're trying to serve two masters, and I think it can get sketchy, right?? I mean, there's places around the boundaries of our system where it doesn't really fit very well.? But I think again, it depends--I guess it depends what you're putting in and what you want to get out of the system.? I mean, if you put in a lot of this really subjective stuff, then yeah.? But I think there's also the risk for anything you put on Stack Overflow--somebody could change it to "I'm an idiot," right?? You go in and write a really nice response and then I can go in and change it to "You know what, I'm an idiot."
Spolsky: Yeah.
Atwood: But it's all visible, it's all public.? And when users do bad things, what I love about Stack Overflow is there's nothing "moderator secret-y" that I really do.? There's a couple queries that we have that eventually I want to expose to people.? But I would just go in and look at a user's history just like you would.? If I see a user going in and changing a bunch of people's stuff to "I'm an idiot," the first thing I'm going to do is delete everything that user ever did, right?? So that user effectively disappears from the system and that's like a one-click operation for me.? Literally.
Spolsky: Wee, I like it.
Atwood: Yeah, I know, it's awesome.? So I can undo lots of vandalism really quickly.? And this is again, if I look at the--
Spolsky: Wait, sorry, Jeff you have a one-click way to delete all the changes--like somebody's gone and edited 30 things, you can rollback all their edits in one click?
Atwood: That user and everything they did ceases to exist.
Spolsky: Wow.
Atwood: This is obviously why that's something I'm really nervous about extending that to anyone outside our little kabal.
Spolsky: And when they get 148,000 karma...? You know what we could have badges for?? We could have badges for, like, "Real Address."? Like I have proven that you live at a certain address.
Atwood: We could.
Spolsky: And then certain things could only be turned on if we can actually go to your house.? Not that we will, but we could.
Atwood: We could.
Spolsky: And then you just use one of these--there are these online services that will mail a post card to an address with a code on it and they type it in correctly, then you register that and they at least control the mail that goes to that address.
Atwood: Well, one of the ideas Michael had, I think two podcasts ago when we were in New York City, was the idea of making up Stack Overflow t-shirts and many little swag things that we would actually send to people once they get to certain rep levels, just for fun.
Spolsky: Yeah, and they would have to send a photograph of them wearing it, with a code on it, and then they could get--
Atwood: Well, once we have their address and stuff, they have sort of semi-proven--so that's along the same lines of, like, if we are going to send people stuff we would have to actually know who they are and where they live to some degree.? I'm open to that.
Spolsky: Swag.? Call in if you have any suggestions for what kind of swag we should have from Stack Overflow.? 646-826-3879, see I'm doing it like the talk radio host guys.
Atwood: Right.? I don't think I have a perfect answer for that question.? I think there's always going to be that tension in our system because on some level it can't really be resolved.? I'm really not seeing a lot of those kind of problems.? I mean, we talk about them, and this is what I like about--
Spolsky: Yeah, it's more theoretical problem than an actual problem.
Atwood: But even on my blog Coding Horror, anybody can post anything on Coding Horror, right?? I don't authenticate anything, and I have to go in manually and delete stuff.? It's just incredibly brutal 'cause my tooling sucks, it's a whole new story.? But honestly I don't have to do it that much, really.? It surprises me how little I have to do it, and you have a lot of people watching the system in Stack Overflow and if they see other people messing you up, they're going to be the good Samaritan and they're going to clean up.? It really does work.? I've seen questions come in that were just horrible questions--unbelievably bad.? And people go in and fix them, it's miraculous.? They take it, a bad question, they edit the title, they edit the body, they edit the tags and you end up with this really nice question with these great responses.? And it's all based on these little slices of effort that people are contributing, so I would hope those little slices of effort would also contribute to helping you protect yourself from malicious users.? Other people will help you in the system.
Spolsky: Mm-hmm.? Yeah, a lot of those cases, especially if it's just badly worded questions, bad English, bad grammer, written by a non-native speaker, etc.? And it's really cool that those get fixed.
Atwood: It's fun to fix other people's stuff.? It's really this collaborative thing.? One of my favorite things to do on Stack Overflow is find a user with reputation of 1 that has just asked a question that I like, and then I upvote it.? I get this little thrill.? "Wow, I just gave them their first badge."? I don't know, it's just crazy.
Spolsky: Hey, that reminds me.? One of the things that is underdone, under utilized, one of the features that is under utilized at Stack Overflow is just the voting on questions in general.? I think a lot of people don't even get why it's there, they don't vote, it's not--you know what I mean?? Voting for questions, not for answers.
Atwood: Right, no, I'm with you.? I think the more sophisticated Stack Overflow users do get voting for questions.? And there have been actually several really good topics on Stack Overflow.? They were meta-topics, but still they were good.? Like, why you would vote for questions and how you should vote for questions.? Of course, getting people to read that is another story entirely.
Spolsky: Well, I'm looking at the "Hot" list right now, the current "Hot" list, and you know there's some questions with like 13 votes, but I mean we really need to get, like, 100 votes for the good questions because I really want the "Hot" list to be--and maybe this is just because nobody comes in and the "Hot" page isn't the default, not enough people paying attention to the "Hot" list--I really think the "Hot" list should be the default, not the newest, but my feeling is that the "Hot" list is a place where you go and you find--
Atwood: The "Hot" list is the default.? It is the default, yeah it is.
Spolsky: Oh, it's just second.
Atwood: Oh, you want it to be the very first tab.? So you want it to be the first tab--
Spolsky: I just misinterpreted that it was not the default because it wasn't the first tab, and because it always remember what you stuck it on.? So I'm never going to see what the default is again in my life.? But my idea of the "Hot" list is that if you don't have any questions and you just want to learn something new about programming, that those would be things people voted up because they were just of general interest, you know?? I thought they were just interesting questions.? Somebody thought they were interesting questions, and that list would give you a whole bunch of interesting things to learn about.? Actually it is almost working, you know, there are pretty interesting questions on there right now.
Atwood: No totally.? And I encourage people, anyone listening, please vote for the questions that you like.? Again, I've talked about this on previous podcasts, but I continue to see it over and over in the system.? Some people are really good at asking questions and they should get upvoted for that, and you should pay attention to that.? Conversely, I've seen people complain that they didn't like the answers they got and a lot of the time, I don't want to blame the victim kind of thing here, but I gotta say--
Spolsky: You shouldn't have been wearing that dress. 
[29:26]
Atwood: Asking a good question is an art.? If you get really bad answers that are totally not what you wanted, you've got to really look at your question.? I know this just from writing my blog.? If I write my blog entries a certain way, I get these really bizarre responses that are not at all about what I wrote about.
Atwood: And I consider that my fault.? I didn't do a good job of communicating what the blog entry was about, and it's hard.? I'll be the first to say it's very, very hard.? It's just like writing, it's difficult, but you've gotta concentrate on asking a clear, focused question.? The first time you don't get it right, either edit the question and make it better or just say, "You know what?? I'm going to ask a whole new question, link it to the second one, and then just ask again with a better formation to get better answers."
Atwood: Have you read Eric Raymond's How to Ask Questions?? Like this epic, 100,000 word-- 
Spolsky: Yeah.? And that's the thing that he tried to encourage people to use as the answer to all Usenet questions that they don't feel like answering right now.? Like, point everybody to How to Ask Questions?
Atwood: Well, this is why I say I think the more sophisticated Stack Overflow users are the ones that actually vote for questions.? Maybe we should have some sort of promotional thing or bonus that comes with that because they appreciate how difficult it is to actually ask a good question.
Spolsky: Yeah.
Atwood: And I think a lot of people don't.? The irony of the thing that Eric Raymond wrote is that, who--the type of people that ask bad questions are not going to read this giant "Treatise on how to ask questions."? It's this total Catch-22 of a problem, so I don't know, who does this document actually serve at that point?? It's just like masterbation for someone.
Spolsky: Yeah.? It's just the way you can be one of these annoying programmers which is like [condescending tone] "I'm not going to answer your question because you did not read this entire document."
Atwood: [laughs] But on Stack Overflow the advantages, unlike Usenet, people go in and fix your question.? I won't give you my whole diatribe, but I've seen it happen again and again.? People come in and help you fix your question, and it feels good.? It feels good to help other people, I don't know why.? It's really--it's addictive.? Even I, having built the system I'm frankly a little bit sick of it at this point just because I'm doing it all day every day, but I still get totally sucked into it.? I'll spend hours, literally, just clicking around Stack Overflow, editing stuff, looking at stuff, learning stuff.? The system is incredibly addictive, even to me, so I guess that's fair since I was--we were the target audience.? So I guess it would be a failure if that was not true.? But I enjoy using the system, for what it's worth.
[32:21]
Spolsky: What was the question again? Are we still on that one? People editing your anecdote, stuff like that. That was the question, right?
Atwood: I think you have to trust the community.
Spolsky: But also, you know what? Format it as an anecdote. In your question, indent it, put quotes around it, then? put a dash dash and then your name. Make it look like a quote. Make it look like something where nobody's going to go in there and really mundle -- munjle with it. There's one other thing which I'm not sure if you're aware of, one of the more subtle features of StackOverlow. Too much editing causes a post to flip over to being a community post. You can also flag anything you want to be a community post. And that gets your name off of something. So if you're telling a personal story or doing something that you don't want your name signed on that forever as other people are editing it and God knows what they're going to do with it over the years, then you can throw it into community ownership and your name doesn't show up on it at all.
Atwood: Yes, excellent point and I should have mentioned that.
Spolsky: Where is that?
Atwood: It's a very subtle checkbox -- and this is intentional, it's very subtle -- under the actual input area where you type in your posts, there's a checkbox.
Spolsky: It says "community wiki," which may be confusing.
Atwood: There is a little bit of a mouseover that explains a little bit. 
Spolsky: "Community owned posts do not generate any reputation for the owner, and have a lower reputation barrier for collaborative editing." It should also say it will not be signed.
Atwood: True, true.
Spolsky: That may be one of the main points to the user. The main feature that they see, the main reason they may do this, to get their name off of the post.
Atwood: I'm going to make a note and add that.
Spolsky: By the time you hear this podcast, that may be fixed.
Atwood: Yes, let's do the next question.
Spolsky: Next question! Last one, and this is a really good one actually. I don't really know who this is from. Somebody called this in and did not leave their name, so. Random Anonymous Person.
Anonymous: Hey guys, just wondering why we can't ask IT questions? I know it's a programmers' site, but really you guys have such a great resource, the rest of us are sort of left to Experts Exchange. I know that Jeff has said three to six months out, but I would love something in the interim. Thanks.
Spolsky: What he's asking for, this anonymous person -- I'm guessing it's presidential candidate John McCain calling --
Atwood: It's Anon E. Moose.
Spolsky: Oh yeah, it's the moose. I think what he's asking is IT questions like "How do I get a Cisco router to blah blah to the whatever..." or "How do I get Windows to delete a DLL from the subdirectory with the..." Those kind of questions. ?
Atwood: This is a recurring question, and it's a great question to get because people like the system, so it's a compliment. And I treat it like a compliment, but I have to do my decline thing. When I decline, that doesn't mean you suck, it doesn't mean your idea sucks, it doesn't mean we're never going to do it.
Spolsky: Before you decline this one, I will agree with you that when somebody says "I would like to license this site and use it for questions that people have programming the USB port of the Fostex MR16 recording mixer device," cuz that's what I have in front of me. When people want a personal, private-label, white-label... This is different than what you say three to six weeks, no we're not doing white label versions because they won't get to scale and it's just not our priority. The reason I think this is different is that another site just like StackOverflow that was for IT questions, or maybe even our site that just allowed IT questions would be just as big as StackOverflow, have just as many people, would have just as interesting questions, they would be questions that had real answers, it would benefit just as much from the wiki editing, rating, ranking, all that stuff. So I think it's a little different than those other things which you just...
Atwood: I disagree. I think I'm saying the same thing as you. I see a total need for a sister site, for people who aren't programmers, but are in IT.
Spolsky: Maybe they are programmers, but that's not what their questions are about.
Atwood: It's probably the most obvious thing for us to do. Like you said, it would be at least as successful as StackOverflow, and StackOverflow has done really well. I'm assuming that would do really well too. But at this point it's just a question of resources and manpower. Plus, we're really not fully baked on StackOverflow. I know it seems that way...
Spolsky: Oh, we seem totally baked. We are the most baked people.
Atwood: Yes, but I feel like it's not really there yet. I'm flirting with pulling the beta tag off our site. At least, the disclaimer at the top of the page, at the end of the month. Because I feel like we've got all the major things that I wanted in at that point. Not that there's not more to do. But even then, I would like some more burn-in time. That's why I keep quoting the three-to-six month time period. I think that would be the same time period for setting up a sister site.
Spolsky: Three-to-six months just means, yeah I'm not working on it right now, but I might.
Atwood: I want to also acknowledge that I agree there's a lot of merit in the idea.
Spolsky: Let's take this from a purely selfish perspective: What's to stop somebody else from doing this and capturing all that benefit of our great idea, not that it's such a hard idea, but what's to stop somebody else from making one of these things before we do?
Atwood: That what I was getting at. I want to recruit the right people to run the site from day one, people who could be it's caretakers like we do. There needs to be a cabal.
Spolsky: Who are the Jeff Atwood and Joel Spolskys of IT?
Atwood: That's exactly what I'm getting at. That's the first thing I would want to do.
Spolsky: Is there such a person? There's gotta be.
Atwood: The code is not really the point. It's the people.
Spolsky: Would you really want it to be a separate database, or just a bit that every post has?
Atwood: I really think it should be a totally different site, not because I want to do this segregation thing, but because it's a community that deserves its own space.
Spolsky: Microsoft has MSDN, and then they have TechNet, and those have always been very separate things, but there's a lot of overlap.
Atwood: And if you've ever been to conferences where they mix those two things, you understand why that is. That's generally regarded as a good thing.
Spolsky: But there's so many things that are weird like, where does Excel macro programming belong? Is that TechNet because it's Microsoft Office, or is it MSDN because it's programming? There really is a lot of overlap. A lot of what IT people do is programming.
Atwood: I don't think it's that overlappy, personally. I would definitely put that in the TechNet bin.
Spolsky: Boy, was I pissed when they did that with my nice documentation about the Excel C API. I was like, "This is programming documentation! It should be in MSDN with all the other programming documentation."
Atwood: No, it's for all the script kiddies. That's who it's for.
Spolsky: It was C! It was the C interface.
Atwood: Oh, while we're on this topic, I need to apologize to all the C programmers.
Spolsky: Already? Just pre-emptively apologize even before you've done something wrong?
Atwood: It's a moderately long story, but first of all I've been really pleasantly surprised, we have a huge audience of C and C++ programmers. Way more than I thought we would, actually. Maybe that's the people you brought to the table, which is great.
Spolsky: Maybe it's because they're working in these horrible programming languages, they need help every moment of every day to get the most basic things done.
Atwood: There's a really vibrant community, a subsection of C programmers, and one thing we did with tagging was when we started defining what was the allowable character set for tags, I looked at what actually we were using, what actually programmer things people were using, what they were putting in the system, and from there I reverse engineered these are the characters we should allow. One side effect of that is we allow + in our tag names, which is kind of annoying in retrospect, because traditional tag systems where you're combining tags in the URL use a +. This is how Flickr does it, how a lot of places do it. The minute you do that, it's awkward for us, because it's hard to tell the difference between "GDI+" and "GDI" plus some other tag. As a result I've been playing with the algorithm and trying to hack it up to make it work. We can use spaces or pluses. The current code path is if I see that behavior in the tags, I go to the space code path, and it's space-delimited. Either one works, actually, but we require it in that case. But as a side effect of doing that, I've been breaking the C++ tag like every other day. I always forget to check the C++ tag, which is stupid because it's a really popular tag, but I don't click on it because I'm not a C++ programmer.
Spolsky: It is, it's the fifth most popular tag. 
Atwood: I know, I know. I'm telling you, it's really popular. So I want to apologize to all the C++ programmers. I feel really bad about this cuz every time I do that I see a ticket on UserVoice and I sort of smack my head and I curse myself. So, I apologize for that. Now that I've got my little apology out of the way, is that all the questions we that have?
Spolsky: Was that any of the questions? Did we even answer that question?
Atwood: Yeah, we answered it. We want to do it. We need to identify the Joel Spolsky and Jeff Atwood of the IT world and have them own it and have a relationship with them. That's how I would like to do it personally. Obviously this is subject to negotiation and things like that.
Spolsky: Makes a lot of sense. We have one more question but it's not really related to StackOverflow. It's a change of pace.
Miles Dennis: Hi Joel and Jeff. This is Miles Dennis from England. I've just formed a company with the primary goal of developing a new software product. There are two of us currently, both experienced developers, but not able to dedicate all our time to coding. Very shortly we will need to take on another developer and I'm a great believer in a philosophy of recruiting people who are both smart and get things done. My question is, for a cost-conscious startup, where do you see the balance between taking on inexperienced staff that cost less, versus experienced staff costing more? Is there a certain experience level you would see as a minimum, no matter how smart they are? Thanks and good luck with StackOverflow.
Spolsky: Well I have a couple things to say here, and then Jeff you want to talk about your experience with the StackOverflow team.
Atwood: Take it away.
Spolsky: First of all if you're recruiting for a startup, the truth is all the developers should be about the same price, and the reason I say that is that no matter what you do you're going to have trouble ... to get somebody to come join a startup that's not necessarily profitable yet, or that's not really in the clear you're looking for somebody who's willing to take more risk, and there are different categories of people that are willing to take the risk of joining a startup, and one category is young people that don't feel like they have anything to lose, they don't have to make their mortgage payments, they don't have a family to support yet, and worse comes to worst, they can always move back in with Mom, or Mum as the case may be in you're in England. Or moving in with the Queen Mum, which would be funny.
Atwood: Where did that come from?
Spolsky: I dunno, it just made sense. "My startup failed and I had to move in with the Queen Mum." Nice old lady. Now I'm concerned: is she still alive?
Atwood: I have no idea.
Spolsky: Our English listeners are agog now, that we're going on with this.
Atwood: You started this.
Spolsky: The Queen Mother. I'm looking it up on Wikipedia right now. Recent British Queen mothers... Wow, you know she died in 2002, so I guess nobody will be moving in with her. What were we talking about? Young people are willing to join startups because they have nothing to lose, and the other category, fairly experienced people are willing to join startups if they have some savings, and they're looking for an opportunity to do something more interesting. Maybe somebody who's been stuck in a big company for ten or fifteen years, maybe they've already made a bunch of money from their stock options from the first company that they worked at and now they have enough savings that they're willing to take a year or two and do something a little riskier. In both cases that's the audience you're looking for and in neither case are you going to be hiring people that are sensitive as to what the exact salary is. Startups just pay less out the door than companies that have already been successful because hopefully those people you hire will get some equity, they'll get some kind of ownership in the whole thing, and that's really what they're working for. It really shouldn't be an issue for you. You can look for experienced people or inexperienced people, and you're going to pay them mostly with equity anyway. So that's the first part. The second part is that the difference in experience between say a twenty-five year old programmer and a thirty year old programmer may be not as much as you think because programmers tend to start young and if both of them have been programming since they were ten, even the twenty-five year old programmer may actually have a lot more coding experience than a thirty or thirty-five year old programmer who maybe was in management for a while or something like that. We're in a unique profession where even the people that are coming to us, when I do interviews of people coming to me straight from campus and they're juniors applying to an internship straight from campus, they could well have six years of programming experience. That would not be that unusual. People start programming when they're young, often, and they learn a lot. A lot of hobbyist programmers and that kind of stuff.
Atwood: I guess the only observation I have is that you've got to make what you're doing fun and exciting, to attract people. Maybe this is the backwards way to think of it. If you're doing something really cool, people will want to work on it naturally. That's how programmers are, they want to work on whatever's cool and hot and interesting and neat and fun. Maybe that's the thing to think more about, rather than how much do we need to pay these people. How do we make what we're doing awesome, so that we automatically attract people to our project.
Spolsky: Right. Yep. There's a lot of things that motivate people. If you're located in a weird part of the country where it's hard to get programming jobs and you're the one programming shop in the area it'll be pretty easy to hire. If you're the only company that has a good vacation policy... Here in the U.S. a fairly typical vacation policy is two weeks a year, basically ten days off a year. At Fog Creek we have double that. There are already people that want to work at Fog Creek specifically because they really like the fact that we have a generous vacation policy.
Atwood: They want to work there because they don't have to work.
Spolsky: Kind of.
Atwood: No, I think that's awesome. I'm kidding.
Spolsky: What it is is that different people want to make different trade-offs, and there is always a class of people that are going to take less salary in exchange for more vacation. Why would all companies offer the same mixture of vacation and salary, when you can offer a different mixture and attract people who have a different sensitivity to those different issues.
Atwood: Sure, I totally believe that. And for the record, when Jeff, Jared, and I were in New York at the Fog Creek offices, I think Jeff and Jared were like "Wow, wouldn't it be cool to work for Fog Creek?"
[50:14]
Atwood: Let's do the trail-out.? You want to say the number again?
Spolsky: What's the trail out?? If you have any questions for the StackOverflow podcast, we'd love to hear them.? Why don't you give us a call?? The number is 646-826-3879.? Don't forget to mention your name and where you're calling from and try to keep it to under ninety seconds, or you can record an audio file in MP3 or Ogg Vorbis format and email that to podcast@stackoverflow.com.? We've got a transcript wiki which is getting a little bit behind so I'd like to encourage you, if you'd like to do a service for the hearing impaired it would be really nice if you could go to blog.stackoverflow.com and click on the wiki link there for every podcast episode and edit that with the transcript of what we're saying here.? And finally, I think I should have one more thing there, but I ran out of things to say.? So we'll see you next week!
Atwood: See you next week.
[51:11]
Outro, Advertising
Intro, ads
[1:06]
Spolsky:?? Ooh, I have a door, for the first time since doing this podcast, I have a door I can close. 
Atwood:?? That's impressive.? So, is everybody here?
Spolsky:?? Yeah.? Today we have on the line, the founders and co-creators of reddit.com, the fabulous social networking website: Alexis Ohanian, otherwise known as -- how do you pronounce that?? Kuh-naw-thing?? Kuh-nuh... Kuh-zero-thing?? Nothing?? No thing?? [it's kn0thing]
Ohanian:?? Sure.? It's not to be uttered by humans, only read on the screens.
Spolsky:? And spez, or Steve Huffman, the other co-creator.? And, so how does this work?? Steve does the coding, and Alexis draws the alien, right?
Ohanian:? Yes.? Steve does all the work...
Huffman:? ...Alexis does all the play.
Spolsky: Hey, we sort of have that with StackOverflow, except I don't even draw the alien.
Ohanian: Yeah, I was going to mention something about that mascot... not impressed.
Spolsky: We don't have a mascot yet!
Ohanian:? Well, the overflowing stack logo.
Spolsky: That's a pretty good logo, actually, for... But it's kind of square.? It's not cool.
Ohanian:? No, I don't mean to hate on the logo itself, it's just devoid of kiwi, for instance.
Spolsky: Right.? Right.? It has no emotional...
Atwood:?? Significance?
Spolsky: It doesn't have eyes!? Maybe we could put two little googly eyes on top of it and people would like it.
Ohanian: You'd be surprised at how far you can go with some...
Atwood:? That or...
Huffman: Somebody once said reddit was cute like a baby.
Spolsky: Yeah.? That was me.? At least.? At least I said that, I'm sure lots of other people said that, because it's just obvious.? People want to protect their babies.? Right?? Babies are bald, they have big eyes, and you're biologically programmed to care about them and to try to cherish them and protect them.
Huffman: I just had a baby.? It is defenseless and malleable.
Ohanian: Although if you do have a baby that looks like our alien mascot...
Spolsky: See a doctor.
Atwood:??? So can I open with one or two business things before we get into the actual talk with these guys?
Spolsky: Yeah.? Although, we are actually-- this is all being recorded, this is the podcast.
Atwood:??? Right, I know that.? I'm clear... I've done a few of these before, so I know how it works...
Atwood:? So I'm at the PDC, the "professional" quote unquote developer's conference in Los Angeles, and something really interesting happened to me.? Well, two interesting things happened to me.? First, I gave a session with Phil Haack.? Phil Haack is the PM of Microsoft for ASP.NET MVC, which is the framework that we use on StackOverflow.
Spolsky: We're probably the most famous users of the ASP.NET MVC framework.
Atwood:??? Probably, and definitely for reasons I'll explain in about a minute.? But that session went really well, I was really pleased with that.? Phil did a great, outstanding job and people seemed to really respond.? I showed... I remoted in to our server, showed them some of the load statistics, and showed them the source code and gave them a little walkthrough of how we do things.? That went over well.
Spolsky: Cool.
Atwood:??? And the other interesting thing that happened was, we had this weird little sit-down meeting with Ray Ozzie and Bob Muglia.
Spolsky: No way!
Atwood:??? Yeah, heh.? And it was us and just, like, bloggers and stuff, and I think they were just trying to keep it real, and talk to the real people and stuff.? And as we went around the room introducing ourselves, I introduced myself, "You know, of course I'm Jeff Atwood of Coding Horror and I have this venture StackOverflow with Joel Spolsky--" And Ray stops me, and interjects how impressed he is with StackOverflow.? He gets really enthusiastic about it.? He's visibly animated --
Spolsky:? No kidding!
Atwood:??? "Wow, it's great, we should be building more sites like this, you should see the email I sent out to all the people internally..."? So that was my little thrill of yesterday, was to hear Ray Ozzie talk about how great our site is.? That was pretty exciting.
Spolsky:? He's like a legend, he's beyond a legend.
Atwood:??? Yeah, you know, I have mixed feelings about Ray because of the whole Lotus Notes things.
Spolsky:?? Lotus Notes was incredible!? Are you kidding me?? You just have to remember that it was built in like 1985, you know?? And it did all that stuff.
Atwood:?? True.? But Ray Ozzie is truly legend.? I gotta say, based on the conversations we had in that room, he's pretty engaged.? He actually talked about reddit, too, guys, like he mentions, "yeah, I've seen some things on reddit," and he seemed really engaged, like he's actually looking at this stuff.? He actually looked at StackOverflow, and all that stuff.
Spolsky:? Bill used to do that kind of stuff, in his day.? Bill Gates [unintelligible]
Atwood:?? Yeah, so, I guess he's carrying on the tradition.? He also seemed like kind of a nice guy, from what I can tell.? Of course, I'm biased because he said very flattering things about our project.? Anyway, that's all the PDC talk.? I want to open up the floor to the reddit guys.
Spolsky:?? You guys know who this is, right?? Ray Ozzie?
Huffman:? Mm-hmm.
Ohanian:?? Oh yeah.? I want to know what his username is.
Spolsky:? On StackOverflow?
Atwood:?? Heh, I don't know.? And then the guy sitting next to me goes and opens up his browser on his MacBook Pro, he's a StackOverflow user named Doctor Pizza, and I was watching him like check his rep, and go and look at responses to his questions.
Spolsky: Did he know he was sitting next to you?
Atwood:?? Very surreal, it was all very surreal.? He never talks to me, not even once.? He opens up my site, goes into his profile, starts doing a bunch of stuff
Spolsky:?? I've definitely had people on the Joel on Software discussion groups while they're sitting next to me, not knowing it's me they're sitting next to.? It's pretty cool.
Atwood:??? So, Joel, why don't you open up?? You've had a relationship with these guys for a while, like, you have your own reddit, right?
Spolsky:?? That's true.? Actually, we have a bunch of stuff to talk about.? So, first I should tell the listeners... Where did I meet you guys?? In Boston, probably, and some Y-combinator event.? They came up to me, and were like "oh, we have this website, and it's reddit."? And I'm like, "Yeah, I've heard of reddit."? For whatever reason, a couple programmers at Fog Creek had started hanging out there and reading, because it had interesting articles about lisp and startups and lisp and Ron Paul...
Ohanian:? Memories...
Huffman:? No, Ron Paul replaced lisp.? Definitely.? I don't know which one I like more.
Spolsky:?? I can't remember what I told you, but I'm pretty sure I said this sounds like a great idea, but you're going to get-- whatever your early adopter audience is, whatever they're interested in, that's going to be the site.? It's just going to lock in to what they like, and it's going to push away people who aren't interested in that and it's never going to attract people.? Somebody comes in, and doesn't have kind of an atheist, startup, lisp hacker kind of approach to life is going to rapidly find they're in the wrong place.? That was my first reaction.? I said you have to make it possible to have lots of different reddits for different communities.
Ohanian:?? Yes, you were truly visionary there, Joel.? And in fact, I think that joel.reddit was one of the first spin-off custom reddits we ever made, is that right?
Huffman:? Not THE first.
Spolsky:?? Yeah, surely the first one was that pink lipstick, um, what the heck was that thing?
Huffman: Lipstick.com.? What's new in celebrity gossip.
Spolsky:?? Right, right.? Is that still around?
Ohanian:?? It was the first with a custom alien avatar in the logo.
Spolsky:?? That's true, I had a little -- I had Joel... I didn't even know that was possible, but I was speaking to Jennifer [lastname?], who I guess is your friend, Alexis?? I dunno.
Ohanian:? Yeah, she's a good friend of reddit.
Spolsky:?? She said she got her own avatar, and then I realized this was possible so I insisted on getting mine.? Like a collect them all kind of thing.
Ohanian:?? You see the behind the scenes shady dealings going on in Web 2.0?
[everyone laughs]
[8:55]

Spolsky:??? Edit me!
Atwood:??? Edit me!
Huffman:?? Edit me!
Ohanian:??? Edit me!
?
Voice Mail:? Hello, the person you're trying to reach is not here at the moment
Spolksy:? Not here?
Voice Mail: please leave your message after the tone.
Spolsky:? Voicemail?? [tone] Mwahhh... umm hi Jeff this is Joel calling, and... ummm sooo like ahhh what's up?? Ahh Ok, bye.? How how do you get voi voicemail with with skype?
Atwood:? Hey Joel
Spolsky:? HELLO
Atwood:? Wow
Spolsky:? It is stack overflowed episode stack over overflow flowed - let's start again.
Atwood:? 28.? Why uh ahh you're you're very excited today about the podcast, I think a little too excited frankly.? 
Spolsky:? Ahh I just had some coffee, coffee!? Yeah!
Atwood:? Yes, this is this is episode 28 I do actually know the number this time, I looked it up.
Spolsky:? Welcome to stackoverflow episode 28.
Atwood:? That's right, me and Joel Spolosky.? I just wanted to get my mispronunciation out of the way immediately.
Spolsky:? Ok, Mr. Jeee Jeee Jeeeep? Jeep?
Atwood:? I got an email from somebody on one of the stackoverflow aliases umm challenging me to pronounce his name.? I was like, I'm not even going to try because I will fail.
?
[1:00:00]
Spolsky:? Here's my feeling about project managers:One of the things that is interesting is that project managers, traditionally, are brought on because you have a team of yahoos - and this is just as true in construction, or in building an oil rig, or in any kind of project as it is in the making of anything - making a new car at general motors, or designing the new Boeing 787 dream liner - as it is in the software industry.? Project managers are brought in because management says:? "Hey, you yahoos! You're just working and working and working and never get the thing done and nobody knows how long it's going to take."? If you don't know how long something's going to take and you can't control that a little bit then this really sucks from a business perspective.? I mean; if you think of a typical business project - you invest some money and then you make some money back.? The money you make back - the return on investment - might be double the amount of money you invest and then it's a good investment.? But if the investment doubles because it took you twice as long to do this thing as you thought it would then you've lost all your profit on the thing.? So this is bad for businesses to make decisions in the face of poor information about how long the project is going to take and so keeping a project on track and on schedule is really important.? 
It's so important that they started hiring people to do this and they said:? "OK, you're the project manager - make sure that we're on track."? These project managers were just bright college kids with spreadsheets and Microsoft project and clipboards. They pretty much had to go around with no authority what so ever and walk around the project and talk to the people and find out where things were up to and they spent all their time creating and maintaining these gigantic gantt charts - which everybody else ignored. So the gantt charts, and the Microsoft project, and all those project schedules, and all that kind of stuff, was an artifact created by a kind of low level person.? Although it might be accurate depending on how good that low level person was, but it was still an output only thing from the current project:? Where are we up to?? What have we done?? How much time have we spent?? What's left?? Who is working on what?? 
Then, for some reason, these relatively low level people, who were not actually domain experts, (if they were at Boeing they don't know anything about designing planes, if they were on the software team they're not programmers - they're project managers, and they don't know anything about writing code) they start getting blame when things went wrong and they started clamoring for more responsibility, more authority to actually make changes and to actually influence things and say:? "Hey, Joe's taking too long here - we should get Mary to do this task, she's not busy."? The truth is that they started getting frustrated because they were low level secretarial-like members of their teams and they wanted to move their profession up the scale so they created the project management institute - or whatever it's called - and they created this thing called...? ah, I don't even know!? But they created a whole professional way to learn to be a professional project manager and they decided to try to make it something a little bit fancier than just the kid with the clipboard that has to maintain these gantt charts all day long.? You can tell this is what happened because the first thing project managers will tell you about their profession is that the most important thing is that they have the authority to actually change things and that they are the ones that actually have all the skills that can get a project back on track, or to keep a project on track, and therefore they need to have the authority to exercise these skills otherwise they'll never get anything done, they'll never be able to keep the project on track, they don't just want to be stenographers writing things down.? 
The trouble is, they don't actually have the domain skills - that's why they are project managers.? If you are working on a software project you know how to bring it in on time and you've got to cut features, and you know which features to cut, becuase you understand software intrinsically and you know what things are slow and what things are fast and where you might be able to combine two features into one feature, where you might be able to take a shortcut.? That's the stuff a good developer knows, that's not the stuff a project manager knows.? In a construction project it's the architects and the head contractors who know where shortcuts can be taken and how to bring a project in on time not the project manager.? The project managers don't have any of the right skills to affect the project and so they inevitably get really frustrated and everybody treats them like secretaries, or treats them like 'annoying boy with clipboard', when they really don't have a leadership role in the project - and they're not going to be able to because they don't have the domain expertise.? No matter how much they learn about project management, no matter how many books they read, or how many certificates they get, no matter how long they've been doing project management: if they don't know about software, and software development, if they don't have that experience, they are always going to be second class citizens and they're never going to be able to fix a broken project.Atwood:? That's a great summary!? Certainly I've had that experience and I think that, as a programmer, we value technical skills and it really is hard to take people seriously who don't even know enough to know if you are telling them complete BS.? That's the danger.? If you want somebody in that role, that's fine, it has to be someone who has a programming background or can tell when you are telling them crap, or lying to them, or not being straight with them.? You just have to have some technical expertise is the key.Spolsky:? That's the most important thing:? Every developer figures this out on day number five.? All you've got to do if there's a feature that you don't want to do is you have to say that's going to take six years.? And if there's a feature you really want to do you have to tell everybody it's going to take two weeks.
Atwood: No no no. Joel, you say it's gonna take six to eight weeks.
Spolsky: Six to eight. Six to eight! You know, we had - I'm almost embarrassed, because I sort of laughed at him, but?we had a programmer here at Fog Creek who wanted to rewrite everything in the new programming language. Long story. Basically, he had a sort of plan to reimplement the complete underpinning of Fogbugz, which was basically a complete rewrite of Wasabi to be a .NET language, and porting a bunch of stuff, and I said: "Okay, how long is it gonna take?" And he said, with a straight face: "Two weeks." And I said: "HA!"
Atwood: That's ridiciluous.
Spolsky: "You probably think I was born yesterday!" Ha ha ha.
Atwood: Wow. 
Spolsky: We did do it. It took six months. It took the whole team six months.
[1:07:17]
Go on, just type in a minute's worth. It'll only take 60 of us. Edit link in top right.
Atwood: Hi Joel!
Spolsky: Hey Jeff!
Atwood: It's time for another glorious edition of our podcast.
Atwood: Yes, I think for next episode we'll do the guest thing again. Joel and I were talking about bringing other people in but we wanna not do it too often. We don't wanna turn it into like a comedy skit show.
Atwood: Well I think you were excited about- I thought about that, I'm guessing you were excited about the election. I dunno.
Atwood: That was my guess. Oh well, that's true.
Atwood: It was just- it was just a theory. I'm like Quincy. I have theories. I dunno how, y'know, good any of them are. That was my theory. But no, excited Joel was good. Enthusiasm is always welcome. I'm not going to frown on enthusiasm. That's kind of uncool.
Atwood: *laughs* Are you really depressed?
Atwood: Good. Just, I was a little worried.
Atwood: Yeah, so we're going to do some questions this episode. You've got some questions lined up. I feel bad because we haven't gotten any questions in like weeks.
Atwood: No, it's been really slow. I want to talk to about that.
Atwood: So, it's been really slow because, well, a couple of reasons.
Atwood: No no no the website is doing great. In terms of people coming to the website and the traffic it's actually higher now than launch. Significantly higher. So the website's doing great and I keep encountering people referencing the website. Like I'll just click through someone's blog and they'll have a new trick about Stack Overflow, or- it's actually a little eerie. Like wherever I go, like there's Stack Overflow. So-
Atwood: Yeah, exactly, it's really catching on which is obviously great. That's the whole point of it. The more people that use it, the better it gets kind of thing. So I'm very much for that. But in terms of actual development on the website there's a couple of things that have happened. One is that Jeff Daugas is moving into a new house about to have a baby, like, any day now. So he's pretty much not able to do much. And then as for me, I actually just posted about this on my blog. It's- the difficulty for me is that this is game season. I'm a long-time PC gamer and-
Atwood: Well, the new video cards came out-
Atwood: Well that's been out for a while actually but the big titles came out, particularly Fallout 3, which was really huge and also, it turned out to be, like, incredibly addictive, like, I could not stop-
Atwood: It's available on all major platforms, well, by major I mean, like, Play Station 3, and XBox, and all modern platforms, so-
Atwood: No, I played it on PC.
Atwood: Cos I'm more of a PC gamer, umm, but a little bit of trivi there and I actually linked to this in my blog post where I talked about my, my video card addiction umm, cos it's a sort of, you know, synergy between the games and the video cards that sort of makes is so addictive. It's not, like, I just like having a video card. It's like, I like having a video card and playing these really amazing, awesome new games on it. But our wedding pre-invitations, not our actual invitations, actually used some Fallout art. [chuckles]. And that's a measure of how cool my wife is, that she actually signed off on that.-
Spolsky: Truck Nuts?
White: Truck Nuts.? Uhh...You're not familiar with Truck Nuts, Joel?? They don't have many of those in New York, I imagine.? Um...
(laughter)
Spolsky: Ok, I'm so out of it.? I only just found out about that puppy cam last night.? That's how behind I am.? What is a...what are truck nuts?
White: Uhh...they are die-cast brass...balls for your truck.
Jeff: Oh, I've seen those.
Spolsky: We don't even have trucks in New York City, so...
(38:00)
Jeff: ... people really objected to the post that I made to the statement that "nobody really knows what an NP-Complete problem is". And that is technically, the way I said it is kind of wrong. But let me be clear about what my thinking is here. What I was referring to was the NP=P problem, which is. So a little bit of background on this. So NP-Complete basically means nobody has a good algorithm for solving this problem.
Spolsky: Other then an exhaustive search and its gonna grow geometrically.
Jeff: Yeah it takes forever. Like the only good solution, the smartest people in computer science can come up with is to try every possible solution.
Spolsky: ...
Jeff: right. right. And the thing I was trying to say poorly is that the reason that we call them NP-Complete is that nobody has proven that they can solve it in polynomial time. In other words nobody has, our brighest minds in computer science, nobody can come up with a better algorithmn then like n factorial or even n cubed, for a lot of times is pretty bad. If n cubed is the best (laugh) solution we can come up with
Spolsky: but that's not NP-Complete, that's still not
Jeff: yeah, yeah.
Spolsky: n cubed is still polynomial.
Jeff: yeah, yeah. So what I was really trying to say is that its this weird definition where you just throw a bunch of smart people at it and they will agree yeap this is NP-Complete. And there is nothing saying that another super smart person will not come up and say "you know what I can solve this in n squared"
(41:00)
Spolsky: OK, I see why you got in trouble here. First of all they are amenable - there are often shortcuts that get you what may not be the best answer but you get something that is pretty darn good.
Jeff: Right, right, but again, with the computer you're typically used to getting the best possible answer. The computer gives you -- there's nothing in Excel which gives me a formula which is kind of correct - it's always correct, right? You're doing math so computers are math made circuitry. So I think that's the intriguing thing to me about them.
Spolsky: OK.
?
(1:14)
Spolsky:??? Hey Jeff.
Turkey:? gobble gobble gobble.
Spolsky:? I got, guess what that is.
Atwood:? It sounds like a chicken.
Spolsky:? Close.? I'll play it again.
Turkey:? gobble gobble gobble.
(pause)
Atwood:? I have no idea.
Spolsky:? Oh man, you really are off of the whole like work, calendar, schedule with everybody else.
Atwood:? Oh, turkey, OK.? Alright.
Spolsky:? It's a turkey.
(laughter)
Spolsky:? I'm going to play that a few times during the episode.
Atwood:? That's great.
Spolsky:? The special thanksgiving edition of Stackoverflow, Stackoverflow episode 31.? Can you hear me OK?
Atwood:? I can hear you OK.? Why, did you change something?
Spolsky:? Yeah, I had to change everything, you know why?
Atwood:? Why?
Spolsky:? Well, I've got 2, I needed to upgrade my hard drive and I've got two of these audio pre-amp thingamajiggys plugged into USB ports and so I unplugged all of my USB cables, upgraded the hard drive, and plugged them all back in, but I guess I plugged them into different plugs than they were plugged into before.
Atwood:? Oh, yeah, I love that "feature" of USB.? Maybe that's a Windows implementation.? I don't know.? I don't know if the Mac does that or not, but if you plug something into a different USB port, it has to discover it again.? It's like "Ooo, new device."? You're like, "Nooo, not really a new device." (chuckles)
Spolsky: No. I'm pretty sure it's a part of the USB spec that every port is...or maybe if it can't identify every device uniquely for some reason it just hopes that, you know if you have two of the same thing?
Atwood: Yeah.
Spolsky:?A serial number you?can get over the USB? ?
Atwood: Oh, I see. It can't tell.
Spolsky: It just goes by the position. So anyways, so they were all wrongly configured?and I had to tear everything apart in this whole gigantic configuration with all these mixers and stuff like that.
Atwood:?Right.
Spolsky: And I looked it up and for some reason you know how usually when you take apart an engine and you put it back together there's a kind of critical-looking bolt (laughs) that you're left with? [Is Joel a Tim Allen fan?]
Atwood:?(chuckles) I've never actually taken anything of that complexity apart but I know the feeling.
Spolsky: (laughing) Well I have the opposite problem. I had to use an extra preamp to get it to work.
Atwood:?You had to add parts.
Spolsky: With four premixer preamp thingamajiggies.
Atwood:?Yes.
Spolsky: And to get it to work again I now have five.
Atwood:?Wow.
Spolsky: And the recording is different. It records you on a different track than it records me which is the way it was intended to work.
Atwood:?Yes.
Spolsky: Then I can either cut you out or I can take everything you say and move it like a half a second forward in time.
Atwood:?You can move it up an octave though, it'd be funny.
Spolsky: (laughs)
Atwood:?So you're talking to Mickey Mouse. That'd be great.
Spolsky: (excited) I'm gonna...I have a button here to do that! I just don't know how to use it. What if I could do that right now?
Atwood: I think the Mickey Mouse tone would be appropriate. People were very unhappy with last week's discussion of NP-Complete. And I blame me, mostly.
Spolsky: Oh, it's my fault too.
Atwood: Well, you're not totally blameless but I think that I am very unsophisticated, so I think I owe people an apology for that. But I want to clarify too because some comments came up in the podcast notes that were actually A) funny and B) correct, and one that I particularly enjoyed was, "Learning about NP-Completeness from Jeff is like learning about Irony from Alanis Morissette". 
And I saw that you responded to that with a video which I then watched, about some Irish comedian doing a whole bit about Alanis Morissette and irony.
Spolsky: Yah.
Atwood: In whatever year that was. God that was a long time ago now.
Spolsky: Who is that? Who is that guy?
Atwood: Ah, I don't know. I'll have to look it up. But it was a funny bit. I'll link it in the show notes for sure. 
There's some truth to that. 
And somebody else had a comment of, "It's like wow, Jeff doesn't really know math," and that really is true. And I've been very open about that. Because I don't know if you remember this meme that went around, I'm sure you didn't do it but a lot of people did, it was like Five Things You Didn't Know About Me. Do you remember that?
Spolsky: [Still thinking about the Alanis Morissette comedy critique...] It's Ed Byrne!?
I do remember Five Things You Didn't Know About Me. That was like years ago, it was one of those early...back when they actually had bloggers.
Atwood: (laughs)
[5:14]
Atwood: It wasn't that long ago. It's like maybe two years ago. But eventually I got roped into it and one of the things I put in the Five Things You Didn't Know About Me was that I'm really bad at math. Like, historically. And this shows up on standardized testing.
There was a time I was thinking about going to graduate school. So I took the GRE and this was the first time I'd taken a standardized test. It's one of those things you show scores and people decide if they want you to come to their school or not. And it's like, "Oh, I'd better study for this thing," right? I want to look good, I want to do as good as I can. So it's one of the very few tests I studied for not because I'm trying to show off but because normally I'm very lazy and I don't even bother really studying. (laughs)
Spolsky: So can they take a hundred points off your standardized scores if you don't study at all?
Atwood: Yeah, I don't think I studied for like the SAT or...I don't know. But I really studied for this one. I got the little practice book and everything. And so, even with studying, the weird thing about my score was that verbally, it was like off the charts. I mean, I'm not trying to exaggerate, but like I think I missed like three on the entire test. So it was like 99.999, it was like ridiculous. But on the math side it was like 77th percentile, which I think is kind of mediocre. (laughs)
[6:24]
...
(16:41)
Mike Ackers: Hi, Jeff and Joel?
...?
(17:56)
Spolsky:?Yeah yeah, ok - um - you know how that sounded like? Have you ever seen that?video on YouTube - "You suck at Photoshop"??
Atwood: I have
Spolsky: That guy Donny
[18:07]
[22:10?]Spolsky: Here's another real short question.David: "Hello, I'm David from the UK. I was wondering if you could talk about how you handle status reports at Fog Creek to stay up to date with what your development teams are doing. Thanks."Spolsky: Um. Status. Stat-US reports.Atwood: Yes, Yes.Spolsky: We have a variety of stateful status, status reports. The main thing is a thing we call the weekly Kiwi, which is just a wiki page where on Friday, before everybody goes home, they write up a summary of what they did that week that they want everybody else to know about. And, there's no requirement that you do anything, and sometimes people just put a little a little funny cartoon there, and sometimes people actually talk about what they did that week and what they hope to do the next week and so on. And that's the main thing. The only requirement I have is that people that are in charge of a project have to tell me where that project stands and whether - when it's going to ship. I mean, I've never gotten anybody to do this exactly but what I really want to see is "Fogbugz 7 was scheduled to ship on such-and-such a date at the beginning of the week, and at the end of the week we think it's going to ship on such-and-such a date and therefore that is a slip of 5 days" which is pretty much what it always is every week. That's kind of what I want to see, but there's a little bit more detail in there.Atwood: Joel, ask me for my report. Go ahead, just ask me.Spolsky: When is Stack-Overflow's--Atwood: Six to eight weeks. Six to eight weeks.Spolsky: Six to eight weeks (laughs).Atwood: Six to eight weeks, that's the rough... yeah.Spolsky: No, because then I would come back every week and I'd be like "Five to seven?" "Four to six?"(Atwood laughs)Spolsky: "Three to five?"Atwood: You'd realize that the number always stays the same. You don't get it.Spolsky: No, I was shortening it. I was shortening it on you and at one? point it was "0 to two weeks".? And you're like "No, six to eight. Six to eight."(24:00)
? 
(28:03)Spolsky: ...so that's another kind of a status report, and the third thing we have is like a company chat room kind of twitter-thing. It's not twitter, it's something called...Laconica? Is that what it's called? It's like a...yeah, Laconica. It's like an open source version of twitter that you can download and install on your own internal server so it's all secret. And then we have people run something like twirl on their desktops and it's sort of like this company chat room where you can just sort of put some status in there, but bizarrely enough there was kind of a splitting... The original goal of that is it was a neat place to announce anything new that you didn't want to forget in your weekly kiwi. If there's something you wanted to tell the company you didn't have to send email to 30 people and interrupt them and give them a useless email just to say, you know, "there's some new soybeans in the fridge." It was also a way to say, "hey, I just got this thing working" that you might forget on your weekly kiwi status report on the weekly kiwi. But it sort of also turned into kind of a chat room where random people post sort of random links to humorous websites showing pictures of cats doing things--dreaming about cheeseburgers, and so on. That's a little bit less useful.
Atwood: Wait, there's pictures of cats somewhere?
Spolsky: On the internet? (laughs)
Atwood: On the internet??
Spolsky: Yeah there are cats. (laughs)
Atwood: It's like words...that make it funny?
Spolsky: Yeah, yeah, yeah...yeah, exactly.
Atwood: Oh, ok. I'm going to look into that.
Spolsky: Check out...uh...you gotta...you have to...*bah* you have to spell everything wrong, or you'll never find it.
Atwood: (laughs) Does every team do daily stand-up meetings?
Spolsky: No. That's just a Copilot thing.
Atwood: Ok. And then this Laconica, this internal twitter thing, that's interesting. That makes sense because you know normally I'm a fan of, you know, doing things in as public a way as possible. Obviously you are too; I mean, you're a master of it. But I agree that sometimes for internal stuff that doesn't really work. Like you can't really make some things public that (laughs) would just be a) too much detail and b) weird, right? So I can understand. And the other thing that might be interesting there is with twitter there's a little bit of a desire to perform. Like, because you're performing for a public audience, you feel like you have to actually perform a little bit--(laughs) maybe that's just me!--but you have to be careful what you put up there, whereas on an internal one, the bar is not quite as high. Like, you can just put up some mundane thing that happened and you wouldn't worry about it too much. You wouldn't say "oh, is this really interesting to everybody?" It doesn't have to be, it just has to be interesting within Fog Creek. So, I tihnk that makes sense. Are you seeing lots of use of the Laconica?
Spolsky: I'll tell ya what's going on there...I mean, there's about 18 things in just the last 3 hours. Like, there's a bunch of people talking about that thing that you just mentioned, with the halting problem that somebody posted to the rentacoder's site. So there was a bunch of people pointing to that. Gillian is announcing that there will be no "Waffle Wednesday" tomorrow, which I'm really disappointed about.
Atwood: What? No waffles? That ain't right.
Spolsky: Yeah, we usually have waffle Wednesday as the last Wednesday of the month. Maybe it's some kind of a Thanksgiving issue. And then there's a...
Atwood: Wait! No, no, no...I blame the economy, Joel. Let's blame the economy. That's what we do here.
Spolsky: (laughs) We're cutting back!
Atwood: It's all about the economy.
Spolsky: Cutting back! Cutting back on waffles!
Atwood: The economy is so bad that you can't have waffles now. Oh my god!
Spolsky: Remind me to take a question about the economy next, that'll be a good segue. There's somebody asking for a mini-USB cable. There's somebody answering that person. There's somebody bragging about a new feature they just finished implemented. And that kind of stuff.
?
Atwood: well that's interesting, I've never really thought about the idea of running an internal Twitter. You know I'm a huge Twitter fan, I use it for all kinds of things, and it's been very useful. I think that it could scale down to a company, I think that makes sense, it's very smart and coolSpolsky: in some ways it feels like a company chatroom, except that you don't really reply that often. it's not like back and forth, and back and forth, and back and forth. It's sort of a way to ask a question you know it won't interrupt people, you know it won't sit in people's inboxes forever, demanding a reply.Atwood: yes, that makes sense. and then the funny thing is that if you become internet famous, like if you're Guy Kawasaki, you can do stuff like post on Twitter: "I need a USB cable." And someone will come, wherever you are in the world, and give you the thing that you wanted, which is hilarious.Spolsky: The thing is that people like Guy Kawasaki or I don't know who it is, that are promoting Twitter. And you, actually, that are saying "oh, Twitter's great" ...Atwood: What? I like it..Spolsky: ...I know, I know, let me finish the sentence - I think that you guys are using Twitter differently than 99.999% of Twitter users, because you're celebrities, and most people are not. I don't know how many people are following you on Twitter, but you're probably in the top 20...Atwood: No, no, no. I'm not in the top 20. Spolsky: top 25. Top 1%.Atwood: You're right, that's true of a broad set of things that you do on the web. If you're on Facebook, for example, and you're Joel Spolsky, so your use of Facebook is going to be different than anonymous programmer guy, that uses Facebook too. So I think that's a normal progression. I think you're right, I have to be careful when I talk about why Twitter works for me. I can post a question and get an answer, but if nobody's following you and you're a new Twitter user, you can't ask these questions.Spolsky: So all the Kevin Roses of the world and Leo Laportes all bragging about how Twitter is great - you're seeing it from a very, very different perspective than regular users.Atwood: I do think there's spillover... For example, if someone asks me a question on Twitter as a direct response, it doesn't really matter if they're famous, if they ask a good question or they say something interesting, I will respond to it. A long time ago I brought up this analogy, and I think it still holds: It's like being at a dinner party.? You're at a? dinner with Guy Kawasaki, there's going to be a crowd of people around Guy Kawasaki. But that doesn't mean that you couldn't strike up a conversation with either Guy Kawasaki, or someone who's talking to Guy Kawasaki...Spolsky: about Guy Kawasaki! You could be like: "Hey! So, enough about me, what do *you* think about Guy Kawasaki?"Atwood: yeah... I think it does have advantages for anyone if you start becoming a part of the conversation, it's kind of cool. But you're right, I think both are correct.[34:18]
?(45:25)Atwood: Okay, so one that I put in my favorites recently is... and this comesup every now and then, it's about parameterization of SQL and SQL injectionSpolsky: Okay, oh, yeah.Atwood: So, just a brief background for people who don't know, so, the naiveway to build SQL is to just plop it in a string and start concatenating stringstogether, right, "SELECT * FROM WHERE NAME = 'Joe'".Spolsky: Yeah.Atwood:? And one problem with this, and it's fairly widely known now, I would sayby most competent programmers is like, you shouldn't really do that, because,the problem with that is, that name field is probably coming from a user inputfield, where users say, oh, I want to search for users named Joe, they type'Joe' and they press ENTER.? Well, the problem is when the user types, "-- DROP TABLE Users", right? Andxkcd has that very famous cartoon with "Little Bobby Tables:" she named herson, "-- DROP TABLE..."? Little Bobby Tables, yeah, so, it's fairly well understood, but one subtletythat comes up is, so the answer to this is usually parameterization, which isbasically a layer that most database libraries have that lets you say, okay,"WHERE name = <parameter>" and parameter's a string, and then the databaselibrary level actually handles the escaping of that string for you to make surethat nothing, you know, no command goes in where it should be just a string.Spolsky: There's actually an... yeah, and sometimes actually, like in thecase of Microsoft SQL Server at least, you get some real benefits,performance benefits from doing that, because instead of executing differentqueries every time, the parameter, the presence of the parameter in the queryallows the optimizer to say, oh wait a minute, this is the same query, justwith different parameters.? And so it'll use a previously-made queryoptimization plan.Atwood: Right, and let me tell you this is really, really true.? I mean Iintuitively knew this, but I was kinda, I'm kind of a skeptic when it comes toa lot of stuff.? It's like, oh how much difference can it make?? But on StackOverflow, because we have such a high volume of queries, it makes a huge, I wasreally shocked at how big the difference is.? So yeah, if you have ahigh-volume site, you want to parameterize the crap-- Forget SQL injection, youwant to do it for performance reasons alone, because it makes the query cachemuch more efficient when it doesn't have to put all these thousands of copiesof the same exact query.? Now, I sometimes get in trouble with this, but I kind of feel like--that'strue--but I kind of feel like the database should be smarter about this.? Like,if the only thing that's changing is that string, I don't know, I just feellike the query cache should be able to figure that out, and say these thousandqueries that I'm getting over and over, the only thing that's different is thestring, so I'm just gonna internally, any time I see that, I'm just gonna treatit as the same exact thing.? Spolsky:? Well, it can't really do that without parsing, and that's what it'strying to save time doing, lexing and parsing of the query, and then building aquery plan, because right now what it looks like is it just does a very faststring compare on the entire query as-is, to see if it's in the cache, andthat's just comparing two strings, whereas, to compare two strings, but youknow, but you know if things are within a quote, would actually require lexingand parsing, and that could be, that could take on the order of a hundred timesmore time. So it would be prohibitive to check if something was in the cacheeven, if you had to do that lexing and parsing every time.Atwood:? That's true.? At the very least, it ends up being a performanceoptimization, and on Stack Overflow, again, we have such volume, that we reallyneed to do that stuff.? Every little bit helps.? Whereas if you have a sitethat only ten people are ever going to, I don't think it would really mattertoo much which way you went.? But yeah, I agree with that totally.Spolsky:? What really used to frustrate the heck out of me was that almost anybeginning programming for the web book that you took off the shelf, you know,like Beginning PHP, Beginning Whatever, every single example in that book would just be concatenating up SQL strings like wild.? It would just be everysingle example was a security bug.? And even the better books would just belike, "don't actually do this, because this is a security bug, but I'm justdoing it to show you the 'clean' way to do it."? Really.Atwood:? Right.? Yeah, I totally, there's tons of examples, you're absolutelyright.Spolsky: ...programmers were taught the wrong way to program.Atwood:? Yeah.? Another subtlety that comes up here, is even after you're fullyparameterized, I kept getting people that would tell me, y'know I felt likeonce you've parameterized, you don't have to worry too much about injection.? Imean, maybe there's some weird edge condition, but, people kept coming up on thecomments, because I've talked about this a couple of times historicallythrougout the years, and they would say, "you know what? parameterization's notenough, there can still be injection on parameterization."? And I really couldn't figure this out, I was like well, how could they reallydo that?? How could you get injection on parameterized SQL?? And finally, I dida bunch of research, and what I figured out is it's called "latent SQLinjection," and it's a little weird in that you end up writing what youconsider to be some "safe" fragment of SQL to the database somehow... again,it's kind of an oddball condition, I think they may be one of those things youtalk about where programmers are super-anal and they're like "oh, well you canstill inject." I'm like well, really?? But somehow it gets written to the database as-is, and then later theapplication picks up that "safe" SQL string...Spolsky:? And it's "safe" because it's from the database.Atwood:? Yeah--and it's not.Spolsky:? And it's not safe because there's a bug somewhere where somebody else...Atwood:? Yeah.? Well, it was parameterized, but it got inserted as-is, y'know.? Istill am not totally 100% convinced this is a realistic scenario that couldactually happen.? But thats, when you read about it, it's latent SQL injection,so when people say that, that's what they're saying.? But in general, once youparameterize, you've conquered, I mean gosh, 95% of...Spolsky:? What's kind of frustrating is just how hard it is to parameterize,especially in some languages, like, y'know, go back to, I'll use an examplethat I know, VB script, to create a SQL string, I guess you gotta create a newcommand, and then to put in the parameters, what you do is put little questionmarks in your SQL source code, you know in your SQL statement you put littlequestion marks.? And then you have to run this ghastly function which is like,command.parameters.add(), command.parameters.new(), something.? Somecomplicated way where you actually construct a parameter, and then add it tothe command, and it gets put in.? And you just get this really, really bulkyand messy code.? And partially, that's a limitation the language which doesn't give you a niceway to do that, like for example variable parameters would even solve thatproblem.? Y'know variable length parameter lists to a function, and then youcould just call a function and give it a whole bunch of parameters and it wouldstuff them all in.? Sorta like printf().? But like there's a limitation in thelanguage.? For some reason, the class library designers never really kind of imagined,never really think very, very hard about what the most common things are thatyou're doing and try to really make them optimal.? It's like, it took me tenminutes to come up with a couple of utility functions you could use in VBscript that would construct SQL statements and then stuff parameters into themin a nice, clean, elegant, and simple way.? And it's just a, yeah.? It's never, y'know what's weird?? Whatever programming language combinationslash database access library you're using, whether it's y'know C# with ADO.NETor just plain old-fashioned VB script, or VB, or PHP with whatever it is theyuse, or Ruby and ActiveRecord or whatever, there's always four things thatyou're trying to do, right?? It's this classic CRUD things.? And you almostwanna, you read these gigantic books explaining all the eight million thingsyou can do, and almost wanna make yourself a cheat sheet:? Okay, here's how Ido a SELECT where I just need one value, like a scalar SELECT, and I just needone value back.? Here's how I do a SELECT where I need a single row back.Here's how I do a SELECT where I need a bunch of rows.? Here's how I do anINSERT, and here's how I do a DELETE.? That's it.? Here's how I do an update.And if you just know how to do those four things with your class library,that's pretty much all you're going to have to do 95% of the time.? Andsometimes it's kind of shocking how developers, sorry, the designers of theseframeworks give you this beautiful framework for accessing the database, andthose four things, the simplest way you can possible get to code, is stillverbose and ugly and requires a lot of typing.? Rant over.Atwood:? Right.? No, that's a completely valid point.? The other thing that comes up, and I don't know why people do this, but theywrite stored procs that actually execute SQL internally.? Like, basically, I'mjust not a proc fan, I haven't been historically, and really never will be.? Tome, it's database assembly language.? Like when you need it, you know when youneed it, and most of the time you don't.? But if you write a proc that takes aparameter and just y'know, concatenates up a string, that's really no differentthan doing it in code.Spolsky:? There's a couple of little cases, and I'll give you some examples, whereyou wanna parameterize something, and they just don't let you because oflimitations in SQL.? Like SQL Server 2005, you can't parameterize the numberafter the TOP, so "SELECT TOP 100", "SELECT TOP 20", and you...Atwood:? Oh, you can't parameterize that?Spolsky:? I think you can in 2008, but not in 2005.Atwood:? Also the IN clause.? There's a place in Stack Overflow where we use theIN clause, and I can't figure out a way to parameterize that at all.Spolsky:? Oh, I'll show you how to do that.? You do it by making a string, andthen you parameterize based on is this found in this string.? You put littlebars around, you use little bars to separate each of the elements and make astring, yeah.Atwood:? Oh cool, send that to me, I would like to parameterize that one.Spolsky:? Let's say you wanna parameterize the sort order, like different users,you wanna sort by different columns based on the user's sort preference.That's one of those things that's really, it's not really possible.? Andthere's no reason that shouldn't be possible, why couldn't a parameter be acolumn name?Atwood:? Wait, wait, oh I see what you're saying, the field that you're sortingby could be technically a parameter.Spolsky:? Like I might wanna sort by date, now I wanna sort by relevance, and thenI wanna remember that and store that.? And then later when I do that query, Iwanna see if that user's sorting by date or by relevance and if they're sortingup or down, and I wanna change the ORDER BY.? You can parameterize a lot of the WHERE clauses, because you can always havea WHERE clause that includes every possible thing you might ever filter on,guarded, based on some other parameters.? So it is actually possible tocompletely parameterize everything about the WHERE operation, if you know yourBoolean logic.Atwood:? Right, yeah, there's definitely edge conditions where parameterizationbecomes awkward and/or impossible.Spolsky:? Right.(56:24)
Atwood:?Hey Joel.
Spolsky: Hey Jeff. Welcome to Stack Overflow Podcast number 32.
Atwood:?32; it's a good number.
Spolsky: I know, it's the number of ice cream flavors plus one.
Atwood: Actually, there was a SO thread about how being a programmer changed how you view the world.
Spolsky: If you don't know that's 25, you're not a programmer.
Atwood: You view that as a round number. It's like 10.
Spolsky: 10, what's 10? Oh, I know, it's hexadecimal for... Oh, nevermind.
Atwood: Exactly... So today is exciting for a couple of reasons, not just because we have the podcast.
Spolsky: Really?
Atwood: I finally took the plunge, and now all my tech friends will stop making fun of me, I finally own a high definition television.
Spolsky: Oh, you saw those advertisements about the whole analog to digital conversion, and you... gave in?
Atwood: I saw a really funny one, it's linked in the show notes, it's kind of hard to explain. Also I want to do my part for the economy, you gotta buy things, it's part of being an American, you gotta go out and consume... product.
Spolsky: But it's all made in China, is it not?
Atwood: I don't know where this one was made, it's a Panasonic model that I got.
Spolsky: It's a Panasonic, and how big is it, 42"?
Atwood: It's a 46" inch, I did a slight size upgrade. It took some wife approval, but that's okay.
[2:30]
Vincent Tan: Hi Jeff and Joel.? I am Vincent and I'm from Singapore.? My question is, what are your top three costs in running a software business and what do you do to reduce them?Spolsky:? Ok, that’s easy because I happen to be looking at this the other day… do I still have that PowerPoint slide?? Number one cost when running a software business is, this should be easy, is people of course, paying salaries.? Number two for us is the office space, although even a number two is a very distant second.? I mean its still on the order of, in a normal company, it should be like 5-6 percent of your revenues towards office space and that’s about what we’ve historically averaged.? Its a little bit high now cause we just moved into a big space and we haven’t filled it up yet. 
[01:07]
Spolsky: Let's see if Jeff's in today...
Atwood: Hi Joel.
Spolsky: Hey Jeff.
Atwood: Another exciting episode of our podcast.
Spolsky: That's right. Only this one's not going to be so exciting.
Atwood: Boring. You're going to make this one boring?
Spolsky: You might as well. If you're a listener at home, just turn it off now.
Atwood: Save yourself!
Spolsky: Oh, I have something which we should talk about on today's podcast. We should have a section where we recommend gifts for geeks.
Atwood: You know, I've done that for the last 2 years on my blog, and I was kind of debating not doing it this year.
Spolsky: Well you can do it on the podcast and then you won't have to do it on the blog. Then that will solve that debate, if you were on the fence.
Atwood: OK. Did you want to start, since it's your topic?
Spolsky: We want people to listen to this show, and it's going to be awful, so let's do it towards the end.
Atwood: OK
Spolsky: It'll just be like a 'teaser'.
Atwood: A penalty for listening. (laughs)
Spolsky: (laughing) A penalty for listening to the whole thing! I swear to god I was listening to Twit, and they said HDMI cables are always a good gift.
Atwood: Are you serious?
Spolsky: If you know somebody, you know, it's a good gift if you know somebody that has their DVD player or their game, X-Box or something, plugged into the TV with one of those composite cables, like just a single...
Atwood: Right.
Spolsky: ...the one with the yellow RCA jack and nothing else, you might want to get them an HDMI cable. 
Atwood: That's pretty exciting. You could also get them like an Ethernet cable.
Spolsky: Yeah. Cause they might not have that.
Atwood: Yeah, they might not have that. Cables, I think, make a great gift particularly for women in your life, I think.
Spolsky: (laughing) Forget jewelry and purses...
Atwood: (as if from experience) Oh they love cables, let me tell ya. 
Spolsky: ...and handbags. 
Atwood: Yeah, just get 'em like, pink cables, cause then it's for the ladies. That's the guideline I used for buying consumer products. If it's pink it's for women. That's how I know.
Spolsky: Yeah.
Atwood: Otherwise I have no idea. 
[3:00]
Spolsky: You know what I like to do?? I go to Macys on the ground floor and you just look around at what people are looking at.? You find somebody in the demographic you want to buy a gift for and you follow them around and you see what they're ..
Atwood:Oh thats a good technique. Sort of like following people around.
Spolsky: Ya and if there's a particular handbag that they really like, you'd be like hmmm, ok I know nothing about handbags but this one caught your eye so I'm getting for my girlfriend.
Atwood:Thats a good technique.
Spolsky: What are we supposed to talk about today actually?
Atwood: Well I can mention something thats actually stack overflow news. So I wrote a blogpost about deciding to rent versus buy. It is essentially now decided we are going to buy.? Because I actually bought some stuff 
Spolsky: Its like.? Well if you buy you get a new server delivered to your house that you can play with.
Atwood: Right.? So I'm actually really really excited about the server like probably a little too excited actually.? Cos its the first time I've ever built up like a real enterprise class RAID array, with the hardware and its going to be really fun I have all the drives sitting here, just waiting for the server to arrive.? So thats my christmas gift to myself. The gift of building your own server.
Spolsky: Wait, when you say build enterprise class RAID array. Exactly what are you talking about there? 
Atwood: Well, this is going to be raid 10.
Spolsky: WOW
Atwood: Which is beyond RAID 5.
Spolsky: WOW.? Its like double RAID 5!
Atwood: Its like double RAID 5!? Actually I want to do a blog post about RAID because I'm kindof interested in all the differnt levels and when you would choose one above the other, but RAID 10 doesn't have some of the limitations of RAID 5. The disadvantage is it uses more drives and we're using 6 drives.? But drives are so cheap cos you just use you know commodity SATA drives.? I did buy the enterprise SATA drives the ones that are supposed to last longer
Spolsky: I thought with RAID 10 you have to have a power of four? No?
Atwood: No, I think its three.? I think it can be either three or six? I'm doing six.
Spolsky: Ok.
Atwood: There is a storage penalty.? If you only use three drives they have to be really big drives.
Spolsky: I thought RAID 10 was just mirroring plus.? Mirroring plus striping?
Atwood: I believe it is.? Its a combination of one and zero.? Thats why its 10.
Spolsky: Right
Atwood: Sometimes they call it Oh One. You know what I mean?
Spolsky: Ya.
Atwood: I don't what to get too into the details right now because honestly I need to read up on it more.? I know its better than RAID 5 for sure.? Everything I've read indicates that RAID 10 is the way to go, it's the prefered solution.? And we can do it on the Lenova Think servers that we're getting.
Spolsky: OK, go RAID.? There's 0 which is where you just have two copies of everything, that gives you some protection and then there's 1 where you have striping which puts the first 4 bits of every byte on one drive and the next 4 bits on the other drive so you get better performance you get double the performance but at the risk that if one of them dies you lose everything. 10 is sort of a combination of both.? Where you get the performance and the striping benefits.
Atwood: Well that is true, from the little that I've read about it, what you've said is accurate?? 
Spolsky: Ok, good, cos that's all I know.
Atwood: Yes.
Spolsky: Ask me anything else and I just shut down. <Makes Robot-noise.> Like a little robot.
Atwood: We also, we found a provider that we think we like.? The advantage of this provider; I dont want to give any names yet because we're not 100% sure yet. There in Corvalis Oregan which is where Geoff Dalgas lives another member of the stackoverflow team.? See the advantage is if something horribly wrong happens, and I'm going to buy extra parts. One this that came out of the comments on that blog post was people say you've got to buy hot spares.
Spolsky: They can be cold.
Atwood: Well I'll have multiple hard drives.?? Hard drives are cheap that's a no brainer to get those.? I think we're going to buy one extra, we're going to get two, one 2 U, like one really beefly server for the database.? I'm going to get another 1U, cos those are really cheap they're like 6 - 700 bucks, I mean for bare bones.? You add more memory.? Those are super cheap.? I'll get another 1U just to have around if we want to have like two web tiers or something like that or it can just be a hot spare, I'm not entirely sure yet.Spolsky: It's fun to buy. Boxes.Atwood:? Well you and I had talk about this and I think what really attracts me to this and you and I think alike on this is having control.Spolsky:? It really is. Its all about the control.Atwood: You really need control. Full control over the hardware.? Our host has done a great job.? I feel kind of mean doing this to crystaltech because they've been so nice to us and we get such a great rate with them, but I think as this business concern moves forward I need a fine level of control.? Just like I have a fine level of control over the code, right, that was the whole point of doing this versus just using some cms system. Spolsky: uhmmmAtwood: Same thing applies to the hardware .? i want a really find level of control, and I'm willing to accept the risk of something going wrong.Spolsky: We could have used phpBB.Atwood: [Laughs] Its just a bulliten Board with a skin.? A Stackoverflow skin. Its revolutionary.Spolsk: [Laughs]Atwood: So thats the one bit of Stack overflow news.Spolsky:? Its all about the control.? You know I've just reread this week because I havent read it in so long?? George Orwells 1984.Atwood: You reread 1984?? What prompted you to do this?Spolsky: Its been a long time and its a classic.? The kind of book if you havent read it since, and I was thinking about when I read it 1984 was pretty far off, in fact I definitely remember being in the junior high school library reading that book. Sitting in the library in junior high.Atwood:? Well my school career was such that we read 1984 in 1984.? Right.Spolsky: OhhAtwood: Well it was the obvious thing to do.? The year was 1984 what do we do for english class?? Well you read George orwells 1984.Spolsky:? But that doesn't follow, but OK.Atwood: [Laughs]. What do you mean? Its the year that's on the book.Spolsky: [Laughs] Ok.
[9:00]
...
[12:47]
Chris: Hi Jeff and Joel, my name is Chris and I've been a software developer for about 16 years. I've often said that the main job of a development manager is to insulate the developers from customers, users, managers, etc. However, I found that when I get to talk to customers and users, I learn a lot more about what applications are supposed to do, what problems I have, and what the real requirements are that I can't get from specs, etc. How important do you think it is for developers to actually have interactions with the customers, the users, and other stakeholders? Thanks.
Spolsky: This is the classic... there's a dillema. Because on the one hand people say, and on the other hand... and now we have a simple rhetorical task in front of us - to somehow coalesce these two ideas to somehow find a middle ground - to say, "You know, it's neither one or the other: there's a middle ground in there".
Atwood: [Laughs] No, I think it's always one or the other. You have to stop programming and just be fulltime customer-support. Programming is a waste of time.
Spolsky: Wait, ok, wait a minute, you were being ironic...
?
?
Atwood: Hi, Joel.
Spolsky: Hey, Jeff.
Atwood: Hey sorry I was a little slow to answer the phone there.
Atwood: Yeah, I see that.
Atwood: Yeah, are you actually at the office now?
Atwood: It's pretty dead there, I would hope.
Atwood: Yeah, well my boss is kind of a jerk. He doesn't always give me time off, and often I have to come into the office at odd hours.
Atwood: I know.? That's the joke.? It's really hilarious.
Atwood:
Atwood: 
Atwood: 
Atwood:? Let's go a little bit... Let's go like ten minutes long this time because I do want to do a Stackoverflow question because I have a really good one.? So we'll be a little bit long, but I think it's OK because we didn't have a show last week.? Um.? So the one I want to talk about is "Array's, What's the Point".
Atwood: 392397 is the number.? I'll obviously link in the show notes.? The funny thing about his one is that I actually read about it through a third party.? Like I didn't even actually find it on the Stackoverflow site.
Atwood: It might have been on Reddit.? I saw it because Damian Katz blogged about it and, uh,? I was just surprised to see him reference a Stackoverflow question.? And and his point was, and I tend to agree, is that, arrays, it's interesting, but arrays really have kind of lost a lot of their significance in , sort of, modern programming languages.? That, uh, you know, a lot of time we use data structures that kind of abstract away the fact that underneath they might be using arrays, or they might not be, it doesn't really matter.? But very little of the time are you going, you know like, a sub one or a sub two.? It's just not a very super-common activity.? And, that was his initial reaction was "how could people not understand arrays, that's incredible, that's ridiculous, we're not teaching our students" and then his second reaction was "wait a minute, there's something to this.? Like, maybe arrays.. We've kind of moved away from arrays as, like, a fundamental data structure because, you know, they're too low level ultimately."? Like pointers.? Like the whole argument would be for pointers.
Atwood: 
 
0:01:30
Spolsky: It's like you're standing in my ear. Let's tell our listeners what this show is all about. today we have a special guest/host, see it's not like a guest, it's like a guest/host. And our guest/host today is Eric Sink of Sourcegear
Atwood: That's right. And you know, what I have directly in front of me, which is awesome is I have this book "Eric Sink on the busines of software"
Spolsky: Oh, yeah, yeah, Jeff you should read that.
Atwood: And it has, it is signed, which is nice, very nice, thank you Eric, and it also has a foreword by this guy Jewel Spolllssskyyy, I don't know who that is, some guy wrote a foreword, but it's a good book, and you know what? It's funny as I actually read this book, actually cover to cover recently, occasinally, when I go on trips I take books like this with me and Eric, I have read a bunch of your stuff obviously as you'h posted it, but i have all these dgo-eared pages from questions that I had when I was reading the book, so we can get into that at some point, but this is a great book and I really enjoyed it. Now, this is mostly a compilation, though, right? This is a compilation of stuff you'd posted on your blog is that true?
Sink: Yeah, that's right. Most of the stuff was on the blog first and we cleaned it up a little bit during the editing process for the book but mostly it's blog stuff.
Atwood: But I enjoy compilations like this, because with the blogs you always, with the blogs I mean obviously you can read it online, but sometimes it's nice to get a continual stream. It's kinda like, say you're watching the Sopranos, you can watch one episode every Sunday for a month, or you could just watch all of it on DVD, all at once. 
Spolsky: that works well for the "Arrested Development" I found.
Atwood: Yeah, sometimes it's just nice to cosume a lot, like you know it's good,like Sopranos is good, so like if one episode is good, so fifteen episodes in a row is awesome. (something about going to the bathroom)
Spolsky: That way it's just a very, very long movie.
Atwood: So, anyway, it's exellent, I enjoyed it, so
Sposky: Eric, by way of introduction, you're the founder of Sourcegear, but not the CEO, is that right?
Sink: um, I sometimes use the CEO title but that's... I would say I am not actually. Typically, right now the management of the company is being actually done by somebody else, my business partner, Corey. 
Spolsky: So, what's your day like? What do you do every day?
Sink: My day is basically, I do still have my hand in marketing stuff pretty actively, so I'm involved with the people that are doing marketing more than I am and talking with them and meeting with them and brainstorming ideas and stuff and for the last year or so I've actually been hands down mostly as a coder and a writer working on some things I'm not ready to talk about publicly and then doing my writing and blogging, which, from the complaints I get about how seldom I write on my blog you'd think I never write but? the fact is I do do some writing
Spolsky: yeah, it's just all in invisible ink, so there, mister smartypants.
Atwood: I have another complaint actually. So, Eric, occasionally you write, that's very exciting when I see it popup in my feed items, it'like: uh, Eric wrote something, and you wrote something about the whole C controversy that we occasinally bring up, it's like this recurring theme on our podcast, it's like "should coders now C", and I loved your post because I totally, I read it and I was like "oh, he's gonna agree with me, it is awesome, I can use this against Joel", and I read it and I was "oh, he's gonna aree with me" and then you switched me at the last minute, and I was like "doh, Eric Sink, you agree with Joel!!"
Sink: I am so happy I was able to annoy you.
Atwood: I wa so convinced you are going to agree with me
Spolsky: So you were telling us that you do a lot of coding and a lot of writing, mostly writing
Sink: Yeah, I've continued to do some writing, although a lot of the writing I'm doing lately is working on a, I have this thing on my blog called the Source Control Howto, which is not at all related to the business of software stuff that you and I often talk about, it's actually very popular, it's like the number two thing on my blog after the story about how to find the wii, which really sucks, cause the number one traffic source on my blog is people looking for a wii. So, source control howto is really popular, and I've been saying for ages that I was gonna get it in book form, so that's something I am working on right now. 
Spolsky: Is there a lot of, now the hot new source control systems are mercurial and git, which, if you thought that source control was confusing, wait until you have source control where everybody has their own repository with their own branches and they're all sending each other changes one at a time like randomly across the hall: "oh, here;s that fix you wanted".
Atwood: Actually one of the things I loved about that series was that I feel that so few developers really understand source control, and I really feel like the reason you understood it is that you guys wrote it, like literally you wrote a source control system, which I love, because I think that the best way to understand something is to sit down and just write it. Then you really understand it, then you can teach people how it works. And you did a great job of that. But with that in mind, if you assume -- and this is a big assumption -- that most developers have kinda sorta mastered fundamental source control -- which I find not to be true, frankly...
Spolsky:? No.? Most of them, even if they have, it's the check-in, check-out that they understand, but branching and merging -- that confuses the heck out of them.
Atwood:? Right.? Did we lose Eric?
Sink:? I muted for a second just to try something.? Go ahead.
Atwood:? Okay.? So, with that in mind, do you feel like...? these new source control systems...? The big hook -- and this is what you brought up, Joel -- is that they theoretically make branching and merging much easier, which, if true, is a big deal, because that is by far one of the most complicated things to master in Subversion or...
Spolsky:? To me, the fact that they make branching and merging easier just means that your coworkers are more likely to branch and merge, and you're more likely to be confused.
Sink:? That's very true.
Atwood:? True, but...? I don't know.? Eric, I'd like to hear your opinion on this.
Sink:? Well, Joel asked me to select some questions, and all the questions I was looking at on Stack Overflow were about DVCS, Git, Subversion, and why they're better.? We can go and dive into that now, but it's something I think about a lot.
Atwood:? Let's do it.? I would love to hear about it.
Sink:? Okay.? The thing about DVCS... the first thing I usually want to say is...
Spolsky:? DVCS is Distributed...
Sink:? Distributed Version Control System -- or Decentralized sometimes.
Spolsky:? So that's what Mercurial and Git are -- the first generation...
Sink:? That's right.? Although I guess Larry McVoy of BitKeeper would probably want us to say that his was the first generation, which is probably pretty close to true, because he's had this basic technology shipping for years and years, but of course his system costs a ton.? The thing is, it's really intriguing, but all of the evangelism about it is really, really awful.? People ask, "Why should I use DVCS?" and the usual answer is, "Go see Linus's video on YouTube," and the second answer is, "I can code on an airplane."? The problem is, first of all, we hardly ever code on airplanes, and Linus's video is so rabidly pro-DVCS and really inflammatory...? He's done more damage to DVCS's going mainstream than anyone else.
Spolsky:? Really?
Sink:? Oh yeah.? If you look at his video, he basically says, if you're a Subversion user, you're an idiot. 
Spolsky:? So that makes people want to be Subversion users, because they want to be idiots...? No!
Sink:? I don't know what it makes people want to do, but it doesn't make people want to use Git...
Spolsky: I reallly feel there's something about, if you take a progression along the autism scale from a normal civilian to and IT-style in-house programmer, to a pretty good microsoft-style programmer, to a a deep, dark, operating system lisp hacker programmer, and then the kernel programmers all the way to the right hand side the people that actually write lisp compilers, along a math scale, I sorta feel like what's happening is that you're getting people that have a better and better aptitude for keeping compicated hierarchies in their head all at once, or like multiple relations between multiple things. So there's some point at which they can understand pointers, there's that level of indirections and then there's some point at which they can understand recursion, where they're having to think about something at several levels of abstaction at the same time, and then there's a point at which they can undestand source code control and then sort of to the right of that scale is actually understanding branching and merging and multiple repositories and decentralization. It's actually kinda high up there in the level of complexity that it takes to really really grok it. And you can explain it to people and they might understand it once, and I think many people if they had it explained to them well would be able to just learn the four commands that they're gonna need to use, and kinda get these working.

?
[Intro]
[1:13]
Spolsky: It's your Skype buddy
Atwood: Yeah, we're Skype buddies. That's awesome.? Someone on Twitter told me to say hello to you.
Spolsky: Oh, hello Twitter.
Atwood: Hello. [laughing]? I just do what people, you know, on Twitter tell me to do. 
Spolsky: I posted a question on Twitter asking the people what I should get, because I dropped my DVD player on the ground yesterday and it...
Atwood: Wait, wait, wait... You have a DVD player?
Spolsky:? You know, yeah—
Atwood: Is that sort like an 8-track player or like a VHS? 
Spolsky: Well, it's from the past.
Atwood: Do you have a reel-to-reel tape machine by any chance? Do you have any machines with all those flashing lights on the front that you see at the movies? 
Spolsky: Waaaa.? [laughing] You think I'm old. 
Atwood: Just kidding. Just giving you a hard time.
Spolsky: I had an idea for my StackOverflow question this week is going to be all about computing in the 1980's, so we can talk about being old later. That's foreshadowing. 
Atwood: Okay. Well, let's get... Well, we had a... I don't know if you saw, but Alan Kay was on, and we think it's the real Alan Kay too, not, you know, a fake doppelgänger. And he actually answered... I think at first he was doing and ego surf, which is fine, cause I think everyone does that... you just have a search term setup for your name and it alerts you. Which I'm sure, if you are Alan Kay, must have like lots of results everyday.
Spolsky: Keep checking everyday to see if anyone invents anything called the Dynabook.
Spolsky: You are star-struck.
Atwood: Yeah, he posted a question on StackOverflow, which was awesome, which is about significant computing innovations since like 1980, like what would be a significant— 
Spolsky: Yeah, that was the question that was going to be my favorite question.
Atwood: Oh, I'm sorry. 
Spolsky: Should we talk about it now? We've been foreshadowing the heck out of this thing. That was posted by Alan Kay, really?
Atwood: Oh, yeah, totally.Spolsky: In a community wiki, how do you know?Atwood: Well, that's another thing I'm working on. [laugh] We can talk about that too, but let's come back to that. It is Alan Kay, if you clickthrough the revision history, the first revision was posted by AlanKay and, like I said, we believe it is the real Alan Kay, which isawesome.Spolsky: Scientists have reason to believe... This is not an impersonator, because who'd want to impersonate Alan Kay, because you know, if you'reimpersonating somebody at least impersonate, like, Jay-Z or, if it'sgoing to be in computing world, maybe Steve Ballmer or Steve Jobsor... but not Alan Kay.Atwood: Yeah, I know. The pathologies of the people who impersonate other people are very unclear to me. But it's obviously some sort ofattention mechanism.Spolsky: It's like, "Oh, I'm Grace Hopper!" Really?Atwood: Yeah, that can happen. So, did you want to talk about that question?Spolsky: Well, we can come back to that, cause that's like... This podcast is like—Atwood: We have a certain order we do things and I don't want to... You know I have something else I can talk about, which is—and you mocked me for this, and I would like to point that you're wrong—that wedid actually reverse engineer the WMD, the Javascript control that weused.? To the Herculian effort of a number of people but primarilyone, Dana Robinson.Spolsky: Thanks Dana.Atwood: Yeah, he's a graduate chemistry student at the University of Illinois, Champaign, I think? [UIUC –ed.] But, that's amazing amount ofeffort. I mean, I'm just stunned by the amount of progress he made,and the cool thing us we deployed it, and it also had the top three bugfixes that were just pending for months, because we didn't reallyhave editable source code for this Javascript, all we had wasthe obfuscated version.Spolsky: Was it obfuscated, or just minimized?Atwood: Well, they're kind of the same thing—Spolsky: I know minimizing obfuscates, but there are ways to obfuscate that go much beyond minimizing.Atwood: I guess that's true, I guess you're right. It's not really fair tocall that obfuscated, it's typically minimized, but minimized ispretty bad, because you don't have variable names. It's still prettypainful, right?—Spolsky: Different amounts of white space—Atwood: Yeah, so I guess it's unfair to call it obfuscated, it's justminimized, but we have a version that is editable now, it's in GitHub.I'll link it in the podcast notes, so anyone that is interested in that can pull it down.Spolsky: And they can send you patches, and you'll—sorry, change sets, and you can accept—Atwood: Exactly. This is the whole distributed source control thing we talked about with Eric last week, which, I agree, you and I are still gettingmy head around it. But the cool thing is, I guess one way to look atit is if you have one contributor that's really outpacing everybodyelse, contributing just massive amounts to the project, that sort ofcomes the de facto branch you're going to follow. You know what Imean, like this guy is so far ahead that these branches don't evenmatter anymore, I'm just going to pick up Dana's branch, cause you know... And no one really limits him, he just works at his own pace...
[6:34]
[...]

[53:56]
Spolsky: My question was, I didn't even realize this was Alan Kays... His question is "What are some of the significant new inventions in computing since 1980?" This must be Alan Kay, because if he thinks 1980 was 50 years ago... [laughs]
Atwood: That's awesome that you were able to identify this, not knowing it was Alan Kay, but the number is 432922.
Spolsky: I'll just list some. The number one answer was the World Wide Web. Number two was the Free Software Foundation. Desktop publishing, color, package management... Wait, how come there's somebody here quoting me? Oh, I see, that's from the transcript. Just-in-time compilation.?
First of all, I don't really like this list. If I had to say the significant new inventions in computing, maybe it's not an invention, I would say probably the most significant thing in programming, specifically, is garbage collection, which clearly was invented before 1980, but really didn't start appearing until Java, did not get mainstreamed until Java, 1995.
Atwood: That's one of the lessons of this question, is how much of this stuff we think of as new now isn't really new at all, it's just becoming somewhat mainstream. This is how long it takes.
Spolsky: It takes forever.
Atwood: It takes forever. And we're in an industry where things happens so fast. We're like, "Oh, that's a year old, that's ancient," and yet there are these truly ancient concepts from 20+ years ago. So you forget. You literally forget how long it takes and how old some of this stuff is.
Spolsky: There's still people... Like, Ruby and Python still don't have type inference, do they? This is a technology from the 90's which would make those languages much, much faster.
Atwood: Right.
Spolsky: So, anyway, yeah. They're about 20 years behind academia, usually. It can vary. 
What I thought I would do for my answer to this question is tell you what computing was like in 1980...
[56:02]
Spolsky: Because this was a theme about how I'm extremely...
Atwood: You're old.
Spolsky: Yes.
Atwood: You're not that old.? But go ahead.
Spolsky: And crotchety.? So 1980, let's see, I was in tenth grade.? Well, Ok...in 1979...
Both: (laughing)
Spolsky: OK, you could buy home computers.? But the home computers that you could buy were like the Radio Shack TRS-80.? I don't think the Apple II had come out yet.? Or, maybe...just, 1980?? Maybe that was when it just came out.
Atwood: Well, remember that there was the Apple I, which not many people had; Apple II was really the big one.
Spolsky: The Apple I was a kit that you bought; there were only like 600 made. 
Atwood: And this came out of the club scene in Silicon Valley 
Spolsky: I really with I knew when the Apple II came out...Let's look this up...I'll use the Box Of Knowledge. The Apple II...1977.? So the Apple II had sort of come out; It wasn't really starting to show up in people's homes that much.? There was the TRS-80.? These computers had 16 K.? Kilobytes, of memory. And you turned it on, and you were looking at a BASIC interpreter, and you could type a BASIC program and run it.? That was just about it.? Eventually...when did VisiCalc come out?? That's a good question.? Because VisiCalc was probably the first program that actually got people buying desktop computers. 
Atwood: Oh, it was definitely a killer app.? There's not that many killer apps.? That's one thing you learn is that there--the killer app is relatively rare.? But they're huge events when they happen.  
Spolsky: So, VisiCalc, it looks like, 1979? According to Wikipedia here.? So that wasn't mainstream; it wasn't yet starting to show up.? Mostly, though, home computers were these funny things that you programmed the very simplest BASIC games on.? You would go to the bookstore, and you would get a copy of Creative Computing Magazine, and it would give you these games written by David Ahl.? And you would type them in, and then the games would be like, "You are on a rocket ship, landing on the Moon.? How many pounds of thrust do you wish to use?"? And then you would crash into the Moon... 
Atwood: I loved those games! 
Spolsky: That was the thrill of that thing, and the the TRS-80 came with a big fat spiral bound book with all sorts of games that you could type in.? And a typical game would be like, displaying a Robert Frost poem on the screen.? That was like, a typical program.? And you would spend a lot of type typing in, PRINT... quote... OK, now, was that 8 spaces or 9 spaces? To make it formatted nicely.? 
And, so, my access to computers was that the schools were starting to get them, and trying to figure out how to use them for educational purposes.? And in Albuquerque, there was a single, the whole Albuquerque public school system had a minicomputer, which was a Digital, Model 10?? System 10? I'm not really sure; it was a minicomputer.? It looked like a mainframe, because it filled up a whole room.? It was not a real minicomputer.? It was smaller than a mainframe, but, there was a big dedicated room, with air conditioning and stuff, with about eight gigantic racks of equipment, and one of the big super large hard drives, that looks like a washing machine.? That was the System 10 and it had an operating system, and the way you accessed it was on these dot-matrix terminals that were Teletypes.? So, you had a keyboard, and a print head, and it printed everything you typed.? A dot matrix, on fan fold paper.? And you typed commands and you hit enter, and it would execute the commands and print back the results to you.? I think the operating system was called SOS?? Maybe that was the editor that we used, SOS?? The operating system was, R S T something, Rasta-something?? Someone will have to write in.? And these things could support about 20 or 30 kids, all sitting at different terminals, typing in their BASIC programs, which is all you could really do, is type in those same BASIC programs. 
Atwood: There's a whole generation of programmers that grew up--I was certainly one of them--with these books, where you literally learned to program, because you wanted to have something to do with the computer.? It was like, "Here's a computer! Do...something!"? And that something was like, "Let's have fun".? Let's try something fun that will entertain me, like a game.? You would type in your own games.
Spolsky: And when you turned them off, they were lost. 
Atwood: 
Spolsky:  
Atwood: 



[42:28]
Spolsky: There's a debate over Test Driven Development... should you have unit tests for everything, that kind of stuff... a lot of people write to me, after reading The Joel Test, to say, "You should have a 13th thing on here: Unit Testing, 100% unit tests of all your code."
And that strikes me as being just a little bit too doctrinaire about something that you may not need. Like, the whole idea of agile programming is not to do things before you need them, but to page-fault them in as needed. I feel like automated testing of everything, a lot of times, is just not going to help you. In other words, you're going to write an awful lot of unit tests to ensure that code that, really, is going to work, and you're definitely going to find out if it doesn't work [if you don't write the tests] does, actually still work, ... I don't know, I'm going to get such flame mail for this because I'm not expressing it that well. But, I feel like if a team really did have 100% code coverage of their unit tests, there'd be a couple of problems. One, they would have spent an awful lot of time writing unit tests, and they wouldn't necessarily be able to pay for that time in improved quality. I mean, they'd have some improved quality, and they'd have the ability to change things in their code with the confidence that they don't break anything, but that's it.
But the real problem with unit tests as I've discovered is that the type of changes that you tend to make as code evolves tend to break a constant percentage of your unit tests. Sometimes you will make a change to your code that, somehow, breaks 10% of your unit tests. Intentionally. Because you've changed the design of something... you've moved a menu, and now everything that relied on that menu being there... the menu is now elsewhere. And so all those tests now break. And you have to be able to go in and recreate those tests to reflect the new reality of the code.
So the end result is that, as your project gets bigger and bigger, if you really have a lot of unit tests, the amount of investment you'll have to make in maintaining those unit tests, keeping them up-to-date and keeping them passing, starts to become disproportional to the amount of benefit that you get out of them.
Atwood: I think that's a great point. Although, I do think if you're working on older code bases that don't have a lot of churn, ...
Spolsky: Yeah.
Atwood: To me it's about churn. If you're working on an old code base that isn't going to have that much churn, and you want to change it where you can't break anything, where if you break anything it's really really bad, then it's probably worth your time to go in and develop a bunch of unit tests. You're building scaffolding around this grand old building, this classic old building that's not going to change for another 200 years, so sure, build a bunch of scaffolding around the building.
Spolsky: Yeah. They work really for things like a compiler, where the design is not going to change because the language is fixed. 
Atwood: That's right.
Spolsky: I might do more black-box tests, sort of like unit tests but more from the perspective of "does this compile all code correctly," with enormous numbers of tests, than just the internal, "does this particular function work in this particular way at all times."
Last week I was listening to a podcast on Hanselminutes, with Robert Martin talking about the SOLID principles. (That's a real easy-to-Google term!) It's object-oriented design, and they're calling it agile design, which it really, really isn't. It's principles for how to design your classes, and how they should work. And, when I was listening to them, they all sounded to me like extremely bureaucratic programming that came from the mind of somebody that has not written a lot of code, frankly. 
And here I am ranting against somebody that doesn't have a chance to respond. But just to give you one example, a part of the SOLID principles was that if you write a class, that class has contracts with all the other classes that it interacts with, and those contracts should be expressed in interfaces [PDF]. So you shouldn't just interact with the class, because that class may change. If you have a particular class that you need to use, you should make a custom interface just for what you're going to use in that class. That interface, then, never has to change. And the interface is the only thing that you have to #include. 
Does that make sense? So, you've got some class, with 40 different little methods on it, and I'm only going to use six of them, so I should make an interface with those six things that I can use, and the class will implement that interface, and that's my contract with the class, that those are the only six things I'm going to use.
People that say things like this have just never written a heck of a lot of code. Because what they're doing is spending an enormous amount of time writing a lot of extra code, a lot of verbiage, a lot of files, and a million little classes that don't do anything and thousands of little interface classes and a lot of robustness to make each of these classes individually armed to go out into the world alone and do things, and you're not going to need it. You're spending a lot of time in advance writing code that is just not going to be relevant, it's not going to be important. It could, theoretically, protect you against things, but, how about waiting until those things happen before you protect yourself against them?
This seems to be where a lot of the Object Oriented Design community went, and if anybody has any strong feelings about this, call in and tell me what you think--tell me if I'm totally off track here--but it seems to me like a lot of the Object Oriented Design principles you're hearing lately from people like Robert Martin and Kent Beck and so forth have gone off the deep end into architecture for architecture's sake. It doesn't seem like you could actually get any code written if you're spending all your time writing 8,000,000 unit tests, and every single dinky little class that you need to split a URL into four parts becomes an engineering project worthy of making a bridge, where you spend six months defining 1000 little interfaces. They've just gone off the deep end, and I don't think these people write very much code if they're coming up with these principles, to be honest, it doesn't even make sense.
Atwood: Well, there are places where that level of testing makes sense. If you're working at Microsoft and you're working on the .NET Framework...
Spolsky: Yeah.
Atwood: ... you have a totally different set of obligations to your public ...
Spolsky: Correct.
Atwood: ... Your code's going to be used millions and millions of times.
Spolsky:?Yeah. In fact, if you're making any kind of API, a plug in API, it is very important to separate things into interfaces and be very very contractual, and tightly engineered. Just like you want to put a lot of effort into your user interface, you also want to put a lot of effort into your API that people are calling... it's just an interface, and you want it to be good and solid and robust. And that's fine.?
But this idea that every single class in your code, all these classes interacting with each other, should be so tightly defined ...
Listening to this interview on Hanselminutes, there seemed to be an intense obsession with creating lots and lots of little classes that all did one particular thing...
One of the SOLID principles, and I'm totally butchering this, but, one of the principles was that you shouldn't have two things in the same class that would be changed for a different reason [PDF]. Like, you don't want to have an Employee class, because it's got his name which might get changed if he gets married, and it has his salary, which might get changed if he gets a raise. Those have to be two separate classes, because they get changed under different circumstances. And you wind up with millions of tiny little classes, like the EmployeeSalary class, and it's just... (laughs) idiotic! You can't build software that way! The way real software works is that you create these very imperfect things, and they work great. They really do. And then you have a little problem, and you go and you fix the little problem, because it's code, and you have an editor, and you edit it. These classes are not going to go wander off flying in the universe all by themselves and need to work perfectly and unchanged until the end of time. 
Atwood: Right. The longer I think about this, the less I care about code hygiene issues (laughs). Because the unit of measure that really matters to me is, how quickly you can respond to real business needs with your code. And by that I mean, how well are you serving the people that are using your code. To me that's what it's all about. Anything that gets in the way of you fixing your code or improving your code in a way that your customers can appreciate, is a negative. If that means using Ruby, or having lots of unit tests: whatever's working for you: do that. But if it's getting in the way, if it becomes friction, like, "I'd love to have this great new feature but I'd have to have 1000 unit tests," that's a negative.
Spolsky: Yeah. And the worst thing that happens is that you get people that just stop thinking about what they're doing. "This is the principle, to always write unit tests, so I'm always going to write unit tests," and then they're just not thinking about how they're spending their time, and they wind up wasting a lot of it. 
Atwood: Yeah, it's a balancing act. And I don't want to come out and say I'm against [unit] testing, because I'm really not. Anything that improves quality is good. But there's multiple axes you're working on here; quality is just one axis. And I find, sadly, to be completely honest with everybody listening, quality really doesn't matter that much, in the big scheme of things... There was this quote from Frank Zappa: "Nobody gives a crap if we're great musicians." And it really is true. The people that appreciate Frank Zappa's music aren't going, "that guitar was really off." They're hearing the whole song; they're hearing the music, they're not really worried whether your code has the correct object interfaces, or if it's developed in a pure way, or written in Ruby or PHP... they don't really care about that stuff. We do internally, but it's important to balance that, I think, and I think that gets missed a lot, which is, maybe, the point you're getting at.
Spolsky: Yeah. 
Atwood: I think over time, more and more, I've become really lax on my thinking about this, because what matters is what you deliver to the customer, and how happy the customer is with what you've delivered. There's many, many ways to get there.
[53:09]
[54:24]
Spolsky: Let's take a couple of questions from the StackOverflow.
Atwood: I've got one.
Spolsky: Yeah, do it.
Atwood: One that came up just randomly that I really enjoyed, huh. It was a guy asking about the marquee tag in a non-ironic way, like, he really wanted to do something where marquee was like the solution he had picked.
Spolsky: Okay.
Atwood: He was totally... This is not meant as a joke! As far as I can tell, this is a totally serious question. And he actually asked it in a reasonable way, like he get code samples, it wasn't like "How do I blah-blah-click", you know.
Spolsky: Yeah.
Atwood: It was a reasonable question formatted in a reasonable way. And of course the first answer is, you know, "Please don't do that! Don't use the marquee tag!" (laughs) But I love that we're reaching out to programmers who really don't know, like, they truly...
Spolsky: What's wrong with the marquee tag?
Atwood: Where in the world this guy is?
Spolsky: Wait, hold on a sec.
Atwood: The number is 456815.
Spolsky: Yeah, okay, I'm looking at that one. It says: "I try to move some box alternatively within a..." Huh, okay. "Hi friends. Actually I am trying to move some box alternatively within a box, I have done it. But both the blocks do not interrupt each other. What should I do?" I don't even understand the question. "How to make the blocks cross each other? I try with style:position, but it is not working. I am using this code, please check this and assist me, thanks." It's a legit question.
Atwood: Still, it's a good question, and anybody searching for marquee would see this and go "Oh, I probably shouldn't use marquee."
Spolsky: No, wait, stop, that's not answering his question! Just answer his friggin' question!
Atwood: This is the very essense of questions that shouldn't be asked, like, he needed to ask his question to find out that it's the wrong question.
Spolsky: Okay, so go tell him how to do the thing that he wants. He wants some box alternate within a box, go tell him some code to do that without the marquee.
Atwood: Well, I mean, we gave him jQuery...
Spolsky: No, this is not your chance, linking to jQuery is not getting him the jQuery stuff. Give him the jQuery stuff, showing him how to write the code.
Atwood: If you're asking a question, you've got to do some of the work, and he did some of the work with marquee, right? He played around with the marquee tag and he got certain results, now he needs to go play with jQuery and get some more results. And then, if he has a problem with that, he'll ask another question.
Spolsky: Yeah, I'm voting up the question and I'm voting down this snooty answer. I hate the answer which is like, "Don't do what you're doing! That's the solution, use Linux and you won't have any of these problems."
Atwood: Well, not necessarily.
Spolsky: Maybe he's got a good reason to using marquee tags!
Atwood: Okay, like, Alex, the guy that runs The Daily WTF, Alex had a great blog entry called "Old Shoe or Glass Bottle". And he characterized the problem where people go into web forums and ask programming questions. And they're like "I need to bang this nail into a wall. Should I use this old shoe or should I use a glass bottle? I tried the glass bottle, but it kind of breaks the bottle, and the shoe doesn't seem very efficient."
Spolsky: And the people always like, "You shouldn't be putting nails in your walls." That's their answer!
Atwood: That's terrific! "Oh, you're using nails, there's your problem, it's the wrong type of nail you idiot!" And there's the whole argument about nails.
Spolsky: Just say "Get a hammer!" It's fine to say you need a hammer, but you can't just say "You shouldn't be putting nails in your walls." That's what's annoying.
Atwood: But that's not what really what was said! Nobody said "Don't try to animate boxes", that would be "Don't try to put nails in your wall." They said, "If you're going to animate boxes, why don't you use jQuery?"
Spolsky: But the answer is "Please don't use the marquee tag, it's non-standard." Which is just not true, it's in all the browsers, it works fine, I saw a marquee tag site in Firefox yesterday.
[1:15]
Atwood: Oh yes, I love QuickBooks!
Spolsky: He he.
Atwood: Very exciting bit of software, very fun to use.
Spolsky: Yeah, uhh Michael and I were having a little laugh about it today
Atwood: Yeah, it's necessary, I appreciate the necessity of it.? But, I gotta tell ya, I really feel that QuickBooks is a good example of software that just doesn't sort of .. hasn't adapted to sort of the new paradigm that we have for software
Spolsky: Well, neither has accounting so he he he get used to it.? You know what I mean?? Like its .. the thing about QuickBooks is that it has evolved over many years to be the perfect accounting application.? Or I should say bookkeeping -- bookkeeping and accounting.
Atwood:? Really?? Perfect?? There's nothing?
Spolsky:? It's perfect, yes, it, yes, you'll see, it's perfect, it doesn't gather any data that you don't - yes, it takes you a long time to learn that it's doing things the way they are because you know - you have to have gone through about 5 or 6 years of filling out every possible tax form before you finally appreciate the craziness that's in there?
Atwood:? Right, well no, I appreciate the wisdom you guys are bestowing upon me because you've done this stuff and I do I do understand that it's necessary and I appologize for being very balky about it umm I know it's necessary but I do want to put this to our listeners, I'm kind of curious because Joel maintained and I can see your point on this Joel, to be fair I totally see your point on this that some of the emerging online stuff like I think, uh gosh, I can't really remember the names but there's a couple of really popular web based sort of accounting solutions.
Spolsky: Yeah, like Net Ledger is that one of them? 
Atwood: uhhh, Wesabe I think is one of them.. 
Spolsky: Oh, those are .. Net Suite that was the one I was thinking of Net Suite, there was something called Net Ledger I'm pretty sure and uhh I don't know what Wesabe is but I think those are umm those are like personal accounting systems not suitable for business accounting.. 
Atwood: But, you can't use those for small business at all?
Spolsky: No, you have issues when you're a small business of of that that are different from .. yeah.. 
Atwood: Ok, that's fair, but one thing that you had warned about was the tendency for these guys to hold your data hostage which I think particularly as a business would be really dangerous right 
Spolsky: Oh yeah yeah yeah, the web based ones definately did that and I don't even think I'm giving away the pooch if I can say that I think it was Net Suite, ahhhh, you know I should check ahhh definitely some of them, some of them ran for a few years and then raised their price a few times.
Atwood:? Yeah, no, I hear where you're coming from and I think as a small business that's a serious concern, I mean from a personal level it's kind of a concern but .. I mean, I don't know
Spolsky: Even QuickBooks every once in a while requires you to upgrade, um, you know because something changes in tax laws or something and they just - I don't know why - and they get - people get furious because they're forced to buy the upgrade after you know every three years or something but it's a lot more reasonable than the online ones usually and the other real reason to use QuickBooks is every accountant in the world knows how to use it because it's just become such a standard in the way that word is. 
Atwood: Right, I still think, you know that said, I still think there's an opportunity for someone to be QuickBooks compatible but be a little less painful to use. Because I post it on Twitter to voice out my dissatisfaction and you know who, uh, concurred Richard White of User Voice saying "I challenge anyone to find out a software with a worse start-up experience than QuickBooks and he was using the Mac version." So apparently it's...
Spolsky: It's sort of hard to disentangle the start-up experience of QuickBooks with the fact you are doing business-level bookkeeping for the first time.
Atwood: Um-hmm.
Spolsky: Like if, it's really... once you know business-level bookkeeping, you know, the, the, the trouble is that, that the way you bookkeeping for a business is.. kind of hard, that double-entry bookkeeping and stuff. Uh, it isn't for all our listeners.
Atwood: Uh, OK. That's enough of that.
Spolsky: We are going to leave all that. 
Atwood: It is reality, though. I mean, you are to be an entrepreneur, then this is something that you have to do unfortunately, believe me. 
Spolsky: You do. 
Atwood: I'm not happy about it but you have to do it
Spolsky: It's not that hard. ... You see, usually what they recommend and this is still what I'd recommend to a random person: um, get, wait, when you start your business, hire your accountant, the guy who is going to do your taxes at the end of the year, go to his office, have him to spend an hour to setting up QuickBook for you and showing you how to enter all the things that happens and how to enter them. And just have him, you know, check over every, you know, check over every once in a while. Uh, because you, you, you'll be presented with -- it doesn't add up to that much time and true to the history of Fog Creek, you know, I do not know ANYTHING about double-entry bookkeeping or anything like that, and I read one book about how double-entry bookkeeping should work, uh, which is very helpful. And I read the manual -- does QuickBook still comes with a printed manual?
Atwood: Uh... I bought it online, so... no. 
Spolsky: Oooh. See now the printed book that used to come with QuickBooks was quite good in that it wasn't just teaching you how to use the application, it was actually teaching you how to track money for your small company. Which is, um, above and beyond what you'd expect from a user manual that was pretty well written in the sense that it tell you what you need to know and doesn't confuse you with the things that you don't need to know.
[6:15] 
Atwood: Right. The good news is that, from the business viability standpoint, I mean, one of my goals is to make enough from advertising that I could, you know, pay other programmers each.. and ideally myself would be nice as well. 
Spolsky: Yeah. 
Atwood: And that's doing really well. I haven't given you guys the latest data but that's looking pretty good. So..
Spolsky: Awesome. 
Atwood: ..that's encouraging..
Spolsky: Woo-hoo.
Atwood: 'cos I want this thing to be sustaining. And, the reason I want this to be sustaining, I'm going to {to be filled} into my next topic, is we are continuing to builing out new parts of the site and we wanted to continue to make it better.. and, you know, more complete.
Spolsky: Yeah.
Atwood: And to that end, now that Jarrod is full-time and I brought Jeff on as well, we are able to complete two major features last week. 
Spolsky: I saw them. 
Atwood: Yeah, so it's pretty exciting. So one is question bounty, that is actually live and working now. Although we did {to be filled} first, something has to happen after seven days because there's a timeout for the bounty, we haven't actually done that seven day part yet [laughs] 'cause it, we figure out that we have seven days to get this working.
Spolsky: [laughs] I don't know how many times I, I have pull that stunt in my time.
Atwood: Oh, that's funny. But yeah, Jarrod is going to finish obviously before the seven day timeline we are going to finish the end state. But the, the actual core part of it is working. If you put up a bounty on a question, you put up some of your own reputation, it has to be at least two days of old... and we've seen it work. I have actually, we have a little admin page that shows, uh, closed bounties. 
Spolsky: Jarrod, I would say Jarrod is pratically the definition of get things done. 
Atwood: Oh, Jarrod is great. 
Spolsky: Like there's no risk whatsoever of it isn't going to get it done.
Atwood: Oh, no no no. These guys are great, you know, these are, I have talked about this before, but these are hand-picked people I have worked with before so, you know, I have total confidence in their abilities. But bounty is working. 
Spolsky: Bounty's working? 
Atwood: We've actually seen people get really good answers from it. I mean, nothing works at everytime. It's a bit of?a gamble, I think people are upset a little bit because like they'll go "How can you GUARANTEE we are going to get an answer?" or "How can you GUARANTEE...", I mean, there's no guarantee, when you're born there's not like a form that says "OK, we will guarantee x". I mean this is an illusion, I mean, you don't know what you're going to get. But the good news is...
Spolsky: Yeah.
Atwood: It definitely increases the interest in your question, and... I see many of them work. Like, really work.
Spolsky: Someone placed a bounty and they get a good answer 
Atwood: Yes!
{Incomplete - 8:20 }
 
[18:42]
Atwood: Another thing I can actually talk about is we have a bit of a {garbled}, because the way we chose to store what we call "posts", which is questions and answers, and then revisions-- so we have two tables, we have posts and revisions.? For viewing a post, the revisions we usually care about are the first revision and the current revision.? So, there's basically pointers in the post table to records in the revision table.? And this sounds fine on paper.? It has a few downsides, in that for example if you retag something, due to the way we're storing the data, we have to store duplicates of the post and everything else, so it wasn't optimal from that perspective.? What turns out to be the big killer with this approach is just the fact that we're joining, all the time.? Like, in order to talk about a question, I need to go get the current revision, right?? In any case.? 'Cause I need to figure out who the author is, and stuff like that, and that's all stored in the revision, because there could be ten revisions to a question.? You could have a revision, I could have a revision, Jon Skeet could have a revision.? So, it doesn't sound like much, this is like relational databases in a nutshell, right?? Just go do a join.? But it turns out these joins are unbelievably expensive.? I mean, if you want to do things --
Spolsky: Really?? Is it just not indexed right?
Atwood: No, believe me, it's indexed --
Spolsky: Oh, it's those memo fields, that's why.
Atwood: Uh, well, that's right.? There's some large strings attached to revisions.
Spolsky: Yeah.? Those always take longer, because they're not in line with the rest of the table, they're in some big blob storage place, and even the APIs never get them out directly, they always read them out like 64kb at a time.
Atwood: Yeah.? Right.? No, there's definately some semi-large fields there, depending on the size of the post.? They're variable-sized fields, of course, by definition.? But we find that even when you're dealing with just regular tables, joins are not free, by any stretch of the imagination.? Every time that you're doing a join, that's a very real cost to the query.? So, we're going to have to do a massive refactoring to fix this.? We're going to move a lot of data up into the post table, so that like 99% of the time when we're talking about the current revision of a question or answer, we'll just have to look at that one record in posts.
Spolsky: This brings up sort of a more general problem, that probably a lot of people have been thinking about.? Because if you look at those...? What am I talking about here?? A lot of people have developed these libraries that are less than relational databases for use on very very large, highly-scalable websites.? So, for example, I think Google's thing is called BigTable.? A lot of times they just have some big, gigantic, ultra-super-duper scalable name-value pair storage.? Think of something like berkley db, where, I can store things for you, I can do it pretty fast, but I'm not going to give you full relational capabilities, and in particular you don't get joins.
Atwood: Right.? I can appreciate why they do that, because I've worked with databases for a long long time, going all the way back to db4 or whatever it was called, dbase4, and then Fox Pro... I've done this for a long time, so I really understand how databases work -- not that I don't make mistakes, believe me, I do -- but it's just interesting to me that we built up the new database server, which is now ready to go, by the way, all this stuff is ready to ship finally, and I was doing some just basic benchmarking, so I loaded the stackoverflow database on our new database server.? So this thing is basically 50% faster than our old server, roughly.? It has 50% faster CPU, a lot more memory, faster bus, more level 2 cache, all that good stuff, so you'd expect it to do about 50% better, and--
Spolsky: Well, not if it was already maxing out, sort of.
Atwood: But it's not.? I already noticed that it's not even close to maxing out.
Spolsky: Well, wait, that's not what I meant.? What I meant was, you wouldn't expect it to be any faster.? For example, if you had more memory, it would be faster, but only if that means you could keep more things in memory, whereas if you weren't already using up all your memory in the first place, then that additional memory isn't going to help.
Atwood: Right.? You're always playing a game of "where's the bottleneck."? This is, hopefully, as a programmer, this is why I like programmers to mess with hardware, because you learn to play this shell game of like "oh, now the bottleneck's the disk, now the bottleneck's the memory, now the bottleneck's the CPU."? And you're really just trading off bottlenecks, at some level, right?? You can do compression, for example, compression's a classic example of trading CPU bottleneck for memory, which is usually a good deal, based on CPU speed.? But anyway, when I loaded up the stackoverflow database, and was running some comparison queries, I'd run them on my local machine, I'd run them on the new database server, and I'd run them on our current, live database server.? It's not really a fair comparison, because the live database server is live, although, in all honestly, our load is really -- our CPU graph is almost null.? We've gotten to the point where we're not using CPU at all.? We're running out of memory a little tiny bit, but it shouldn't have a dramatic hit on our results.
[23:32]
[incomplete]
Intro, advertising
Spolsky: It's just like you're playing with your AM radio and you just tuned in on a station and it was in the middle of something
Lopp: That's awesome.
Spolsky: That's the illusion we're trying to create. We had an anemone die today.
Lopp: An anemone ?
Spolsky:Yep 
Lopp: What color was it, are they all brown or green or what's the deal ?
Spolsky: I don't know it was like multi-colored, they're like brown green, they've got little tentacles
Lopp: Does an anemone float when it dies, or is it just sad and on the bottom ?
Spolsky: I don't know, I found out about it via email. I havent yet. But yesterday it was looking really sick. Our aquarium is a source of much sadness and stress. People that visit our office, they only get the "Oh cool, its like, pretty fish", they don't have to live with...they don't have to stay up with the sea horses when they get a cold.[01:50][17.20]Atwood: The only thought I had there was that a lot of the times my concept of leadership as a developer is a) it's hard to scale it to a really large group and I'm kind of curious how big are the groups you're managing, it sounds like they're pretty sizable ?Lopp: I moved into the senior management role which is a managing managers which is a whole other ball of wax, so yeah that what's the next book is going to be calledSpolsky: Managing documentsAtwood: It's going to be called: "I'm screwed"Lopp: But it's fascinating because its totally, it's more like management than engineering is like management but it's a very different role, whereas, anyway we won't go there. So the teams are anywhere from, I actually have a magic number of about 7 where I feel like that's sort of the point that you can get it all done and over that, you know, given that the team is sort of normal. Over 7 or so it just turns into, it's just too many people and people aren't getting the attention that they need to kind of grow and do that so.Spolsky: I used to wish that you could have larger teams than that where people sort of self-manage in a way. I think I might have been being naive.Lopp:?I don't know, in this 7 there are all those personalities you were just describing in terms of all those chapters and whatnot some of them need a lot of attention and some are self managing, but again at that 7 number around there, it gets to be too many. And whenever I inherit a team that's like, "How many people do you have?", "I have 10." I am like, "How is it not working?" and the answer is almost always, "I'm not talking to so-and-so, or this person is about to quit and you can go back to, it's this weeding thing again, people need daily attention, not that their needy, but it's just that's part of who they are as humans, that they want to be touched, that's getting a little weird there, but they need to have that constant, not constant, they need to have consistant attention. I think is the right word.[19:10]
?
[1:04:27]
Atwood: I think the people who come to you and they say "Here's are all the ways that I've screwed up" are gonna be your best people, because A) they are reflective...
Lopp: Yes.
Atwood: they actually think that they've screwed up.? And B) they understand the value of going in and taking this and preventing it from happening again.? That's the nature of software development, it's very iterative.? It's all about failing and then saying "How can I not fail the next time."? If you're not doing that, then you are kind of doomed.
Spolsky: Alright, I was gonna wrap it up, but go ahead, give us something to make people cry as the music plays on the way out.
Atwood: Oh Crap.
Lopp: I think that what I look for when I hire engineers, it's a balance of two things.? First off, I look for a little ego.? "Do you know what you are talking about?? Can you really explain it to me really well?"? But, I also look for that humility thing which we were talking about here which is "Boy did I screw up, and these are the lessons that I have."? Those are the two things I am looking for.? And they are sort of contradictory because the big ego person -?I am not interested in hiring the big ego person who isn't able to tell me why he screwed up.
Atwood: Oh yeah.? That's awesome.? That's a great balancing, a perfect way to phrase that.? They balance each other, and you've got to have that.
[1:05:41]
[Spolsky closes the show]
[incomplete]
Intro, advertising
Spolsky: I've had dreams where I'm debugging and then I have to like, dream the bug itself, in order make, then I have to invent the bug, to make the dream work out.
Atwood: Yeah, [laughs]
Spolsky: I guess I should bring our listeners up to speed because at some point they will have turned us on. This weeks' guest host is Robert Martin, better known as Uncle Bob, he's a consultant and author in the field of Agile Programming and Object-Oriented Design. Thanks for being with us Bob
Episode 38 clip, Spolsky: Yeah. 
Episode 38 clip, Atwood: I think over time, more and more, I've become really lax on my thinking about this, because what matters is what you deliver to the customer, and how happy the customer is with what you've delivered. There's many, many ways to get there.
Martin: I am constantly amazed at the unfortunate level of expertise of the people working in large software groups. And, there are exceptions to that, there are some groups, some teams, that are just terrific. But, the vast majority of the code out there is really really bad.  
Atwood: And I think one thing that would help that, even in terms...
Spolsky: But, wait. Although that is true, it's also the case that, in the year 2009 we have this gigantic software infrastructure that makes our lives better and 95% of that is running on 'bad code'.
Martin: Yes!
Spolsky: And, it's doing something. It's in some way making our lives better and allowing us to send Tweets from the subway, and contact our loved ones more reliably, and track our customers and provide better customer service, and count our money without hiring book-keepers to sit and type things into those adding machines with the paper tape.
Atwood: Well, actually. Let me tell you this. Bob the first time I saw you was at SD West  in 2006, that was when I met Steve McConnell so that was an exciting time for me. I saw you talking and one thing I remember you saying, and I remember this very clearly, “why is open-source software so much better?”
Martin: Yeah, I say that quite a bit.
Atwood: Yes, and the reason it's better is kind-of what I'm getting at and is because it's living in the real world where real people have to work with it. It's Not isolated in these islands, so it has to be good.
Spolsky: Would you actually say that the code quality is better, or just that the functionality of the products that you get is better?
Martin: I've seen both. I've seen open-source products where the code quality is not terrific, although most of the time the quality of the code in living open-source projects is not bad, compared to what you see in other places. The reason I think open-source software is better is that the people who write it care about it. They're not writing it for any kind of gain other than the satisfaction of writing something good. So there are many many products for example that do live in the real world but are just bad. And people pay money for them and they're still bad, I won't name any names.  
Atwood: I don't think those will survive forever though. Eventually that'll get corrected.  
Martin: They've survived a very very long time, but I won't name any names.  
Atwood: [laughs] Right.
Spolsky: I want to talk a little bit about test-driven development. Because that was a long issue that we we're talking about. And, also one part of the record that I do want to correct, what triggered me on that rant – I couldn't find this, I tried, Ï went back and listened to the whole show and I couldn't find it – when you were on Scott Hanselman's  show he just sort of had a half-moment in which he mentioned that once some programmer that was working for him tried to accomplish 100% test-driven development - use test-driven development and have tests for all new code, like literally 100% - and that's really actually what set me off because my experience everywhere, and I've done loads and loads of test-driven development, has been that there's a point at which getting from 0% coverage to 50% coverage is pretty easy, getting to 75% (I don't know what the real numbers are) is hard but worth it, but getting from 80% to 90% to 95% to even 100% is extremely hard especially if you have graphical user interfaces, if you have any kind of real-time networking, at some point the costs go up dramatically to get those last few percents. Am I completely off-the-wall there?
Martin: No, I actually don't think you are. I was reading through the transcript today and I was reading again how you were talking about 100% coverage and that's something I agree with. I don't want people to have 100% coverage, although I think it's a good goal to shoot for. I don't want people... I don't think people will ever get to 100%.
Spolsky: The thing that worried me about that is the idea that if I had a programmer working for me who had ten things they could do, let's say they had (this is a real hypothetical) 99% code coverage, and there were ten things they could do, and one of them is to get from 99% to 100% and the second on is to deliver a whole other feature to a customer and the third would be to improve the usability dramatically by doing a few usability tests and so forth. And, they chose to go to 100% instead of considering the whole panoply of other things that they could be doing with that time. That would worry me as a sort of compulsive-obsessive order, basically.  
Martin: [laughs] I think I agree with you, on that, as well. There comes a breakpoint where you think 'well alright, there's just no point in trying to test this one thing'. And usually you're right, it happens around user interfaces or some other snake-y part of the code. Personally, I keep the number around 90-something, 90-ish.  
Spolsky: 90% of methods or 90% of lines of code, or...
Martin: Lines. 90% of lines.  
Spolsky: Let me play a question by Andrew Davis because that's going to lead into this...
Davis: Hi guys this is Andrew from Infinity Software in western Australia. I've a rule of thumb with unit tests that you should only write them for non-trivial pieces of software that have really well defined inputs and outputs – basically numbers going in and numbers coming out. For Stack Overflow it probably means the only area I can think of where you should have units tests is maybe the stuff that calculates reputation. Aside from that, no. Jeff I hope that makes you feel a little bit better. Don't bother trying to write it for GUI code, that is a black-hole of time, hours will go in and nothing productive will ever come out. See you guys.
Martin: OK, so I completely disagree with that!
Atwood: Let me take that in a slightly related direction real quickly because I actually had dinner last night with Jon Galloway and Kevin Dente who are in the Herding Code podcast. We talked about this briefly. I like to look at coding as reducing pain, whenever I have pain coding I try to fix it. I figure 'what can I do to reduce the pain from this pain that I'm experiencing?' Because, when I'm not experiencing pain I feel like OK we're doing good. There's no pain points. One of the pain points that we have in the system on Stack Overflow now, specifically, is that our rule set is getting really complicated in terms of the way we allocate reputation, the rules for how you can turn a post into a community wiki post. There's a lot of rules in the system about how the way things happen and we've started to actually forget them ourselves, which I view as a pain point. We've started to actually forget the way the system's supposed to work because it's getting complicated. So, one use for testing in this situation wouldn't necessarily be to validate the behaviors, although obviously and hopefully it would, but as a form of documentation. We could go i and say here's the unit test that define all the rules around how you get reputation, and how you get badges, and all that stuff. So if we forget we could... The code is the documentation, right? The tests document the way the application is supposed to work. That's just one aside of one area I've thought about where it actually would help us to have unit tests. Anyway, go ahead Bob, take it away.
[41:08]
Martin: Well, yes. That's an extremely important point, that unit tests are usually very simple bits of code, they describe in excruciating detail and unerring accuracy how the code they are testing work, there is nothing ambiguous about them and they're written in a language that the programmer understands so they are almost the perfect spec. If you want to know how a module works you look at the unit tests that describe that module. Hopefully those unit tests exist. If there are a set of unit tests that don't exist, for example the writer of the unit tests followed the advice of the caller, then you won't have that spec, what you'll have is a couple of statements of the spec but you won't have the spec itself. So, my guidelines for unit tests are very simple, if you've got a function like a getter or a setter you don't have to test it, it's just too stupid to test. Everything else you're going to test.
Spolsky: Should you even have setters and getters, can we finally get rid of those? [laughs] Sorry. I thought getters and setters were just an artifact of C++ really.
Martin: Or Java, or languages in which people decided that they wanted to make their variables private. OK, fine. Any little function like that that has no possibility that it can fail, OK don't write a test for that. But if you've got an if-statement you should write a test around that if-statement. You should make sure that you've made the decision correctly. It doesn't take you much time to do that.
Spolsky: I think we're all kind of agreed that there's a trivial ground, let's call it the getters and the setters, that's not worth testing, there's a middle ground of logic, business rules, functions that do functional things and can get a little bit complicated, where it's enormously beneficial. But then there's this other world, let's take GUIs for example, my experience with GUIs is that the first big problem is if you're a believer in test-first development specifically that it's kind of unpredictable what the GUIs going to do in the small. So the classic example is I'm going to display the following sentence in the following dialog box and I can write a test which goes to the dialog box and sends a message to the window's control that has the label in it and checks the text of that label. And, that will pretty much always pass, this is essentially a getter at this point, sorry a setter. I set the label and then I check that the label has that text. And what's really interesting is, what are the things that are going to fail, well, the label wasn't big enough it got chopped off on the screen, maybe it wrapped around in some funny way, or it just wound up being in an illogical place or it didn't line-up with something.
Atwood: Just as an aside, that's actually a really important case because people who have high DPI settings. This is really a common failure mode for GUIs where they didn't think about the fact that this is going to be used under different DPIs. So that's a real problem.
Spolsky: So, my problem is how can I develop this test so that it tests what's showing up on the screen as opposed to what's the underlying logic, which I know is right. I could try to create, in a bitmap editing program, a bitmap of what I thought the dialog box should look like but I am going to be off by one. I'm going to be off by a pixel because Windows is going to decide to word-wrap on that word and not on the word that I thought it would. So, I think I'm probably precluded, I think it's probably an impossibility to do test first. But maybe I can do test afterwards, so I run it once and I look at it and I say “that's OK” and I store that bitmap somewhere because it really is...
Martin: And there are tools that do exactly this! I don't happen to like them, but they are there.  
Spolsky: Oh, yeah. There are a lot of tools for this. And this is what I think I was getting to when I said that a large percentage of things will fail because I have done this on large projects and then discovered that you take it to another machine with a different DPI setting, for example, and all the tests, basically everything that has a bitmap in it, the bitmap has now changed.
Martin: Or the point you raised in one of the other podcasts was that you move a menu and all the tests you've done broke. And I actually have clients who have thousands upon thousands of tests that run through the GUI and everytime anybody changes anything trivial on the GUI thousands of tests brake. And they have adopted the only approach they can, at this point, nobody changes the GUI!
Spolsky: [laughs]
Atwood: And that seems harmful to the consumer, ultimately, right?
Martin: Yeah. Well, that company actually went out of business.
Spolsky: [laughs]
Atwood: [laughs]
Spolsky: So what do I do, what do I do, Uncle Bob? Tell me what to do.
Martin: So, obviously you can't do that. The goal here is to test as much as you possible can without getting into the trap of testing everything through the GUI. The mistakes that these people made was that they tested the whole system through the GUI. What do you want to test through the GUI? You want to test the GUI through the GUI. And that's it. So I wouldn't mind getting one of these tools that does all automatic bitmapping and checking whatever, as long as the only tests that went through it were tests of the GUI, not a single business rule, no validation, nothing else, just is the wiring of the GUI correct.
[46:42]
[incomplete]
Intro, advertising
Spolsky: No that doesn't strike me, also remind me that [laughs], you're right that makes no sense.
Atwood: [laughs]?sorry
Spolsky:?You know, is there a date between April 15th and April 16th I can use?
Atwood:?Oh that's bad. It's amateur, it's amateur
Spolsky:?Also, we should remind our listeners we need an underwriter for this show. This is sort of like NPR. All these bandwidth costs and stuff are just being absorbed by The Conversations Network. If you are interested in underwriting this show, you get a little announcement in the beginning. It's really really appreciated; so contact, you know, us. Go ahead and email podcast at stackoverflow dot com and I'll forward it to the appropriate people who are of course Doug Kaye.
Atwood:?Yeah, The Conversations Network has to be clear. People need to get this straight: it truly is a non-profit organization. They are doing this for the greater good of the world. It brings you this content for free.
Spolsky:?And it's not really an advertisement either. It's sort of a public announcement in the beginning, like they have on public radio.
Atwood:?That's right
Spolsky:?Anyway there we did that in the beginning, so now on to the news of StackOverflow.?
Atwood:?Yes. So some StackOverflow happenings. We did roll out some email support in a very basic rudimentary way. It's working now. So the way it's working now... I am going to make some changes to this today actually. If you haven't been to the site in 7 days, we can see that. And if there has been activity on your stuff... in other words if people have responded to your questions or commented on your posts, we will email that information to you every 7 days. So that's in fact, in part, default behavior. But I do want to offer people, like at they are signing up for the first time that checkbox "notify me by email if any updates to this question" I want to give people way to opt in because I something unorthodox, I guess you'd?say, with the email in that in order to test it and in order to sort of rekindle a relationship with people who haven't been to the site in like multiple months, I kinda turned it on for people who hadn't been to the site in a long time.
Spolsky:?That sounds like you'd get the death penalty if you did something like that.
Atwood:?Yeah. I realize it was morally ambiguous. For that I apologize. But the thing ?the people who have been gone in a long time, I don't think they realized they had the option, right. Plus, we are sending them stuff direct responses to them. This is in no way a marketing email from us. It is just that your activity, stuff.?
Spolsky:?If there has been no activity, you would not get an email.
Atwood:?You would only get an email if there is activity in your stuff since the last time you had been to the site. And I do want to make it more visible so you can opt in. And we do have a one-click unsubscribe. Like literally it's one click: you click and BAM! you are done. No take a survey and... you know, have you ever got one of those emails for those unsubscribe things. Like you click on unsubscribe and it's like the form... it's like the voting ballot in Florida in 2000. ?
Spolsky:?They want you to log on, and your like, log on??
Atwood:?Do you not want to not get email ever again? You're like "what?"
Spolsky:?Choices are "Cancel" and "Maybe"
[05:18]
Atwood: "Okay" or "Cancel" and what does this mean? I went through and I unsubscribed for a bunch of stuff on one of my other email addresses. Which does work, by the way. A lot of people say, for spam email, that if you go in and unsubscribe than that just means they send you more mail, but for most reputable companies, that is not, in fact, true. So, in order to reduce the volume, I went through and I clicked ten different companies, unsubscribe, and only one, or maybe two, had the true one-click unsubscribe. Which I thought was unconscionable, how can you not have a one-click unsubscribe? Why even make me take a survey, or figure anything out, just do it!
[05:54]
Spolsky: I'll tell you what happens, is that first of all there are just slime balls. But the other thing that happens, if you just have a one-click unsubscribe is you better have a re-subscribe right there, because people will just click that link by mistake, then they'll say "Oh no, unsubscribed!" And then they'll call you, because they'll panic.
Atwood: You've actually had this happen?
Spolsky: Sure. Because every Joelonsoftware email has two links, a link to the article, and a link to unsubscribe. Because people are like "yeah, Joelonsoftware" and they're just so giddy, their hands are shaking, and they click on that unsubscribe link, and they're like "uh-oh". So we do unsubscribe you on the spot, and then below that it says, if you've unsubscribed by mistake you can resubscribe right now, don't worry. And a lot of people do resubscribe right there, because they've unsubscribed by mistake.
Atwood: This begs the question, why not just include the article, why make them click through, at all?
Spolsky: What do you mean?
Atwood: It's not like you guys sell advertising.
Spolsky: Why isn't the article in the email?
Atwood: Yeah.
Spolsky: I don't know, it's always sort of... You know, the article might have pictures... I guess I could send HTML mail.
Atwood: You can do that, that works works. You would just have an extra click to enable HTML images. It totally works. That's what I would recommend, just send them the article. Particularly because you guys aren't really selling advertising, so you don't really need them to go back to the site.
[07:04]
Spolsky: If they go to the site, they might hang around, click on some of the other links.
Atwood: Oh I see, now you've become one of the scamming! It's a very fine line.
Spolsky: You're the one who's force subscribing all kinds of innocent people.
Atwood: I did do that, and I apologize. But, you know the funny thing is, I didn't get a single complaint, which was good. It was a one-time thing, to be clear, I'm not going to go through and turn anybody else on. It was just these people who hadn't been in a long time. And plus, to be honest, I wanted to test.
Spolsky: They did sign up with their email address. You could have tested it with me.
Atwood: Well we did, obviously, we tested it with ourselves.
Spolsky: I think that if you have provided your email to a website, in order to sign up for an account, that getting an email from that site is not really spam. You did sign up, you gave us your email, and you're getting something about the website that's not spam.
Atwood: Well I think it's like so many things. Like advertising, if you do it in a tasteful way, I don't think people mind. It's just that so many people screw up, and they do it in the most obscene, horrible way possible.
Spolsky: Yeah, but there are general principals of what constitutes spam. And I think having a relationship with the organization, having provided address to them. Getting a notification about something about the organization, not trying to sell you something else, are all mitigating factors, so that's why you didn't get complaints. Plus it didn't matter, because it went right in their spam folders.
Atwood: Well, speaking of that, we did have to enable - Jeff Daleges taught me about this - the reverse PTR record, which is something at the ISP level. You have to actually call your ISP, or email them.
Spolsky: You shouldn't have to, it's a DNS thing, it's just in DNS isn't it?
Atwood: It's at the ISP level, though, you don't have access to their console.
Spolsky: The ISP has to do work to DNS. So your IP address has to be reverse-lookup0able into some thing the DNS says is indeed yours. Most ISP's, our ISP certainly has a console where you can just plug in that information.
Atwood: Oh cool, but I didn't know that. And it sounds like that's the number one thing that sets you apart from the average spam mail. So you actually have a valid reverse-PTR record that can be looked up and validated. To say that, okay, you actually did send this email.
Spolsky: There's a lot of people, there's a whole industry called the "deliverability" industry that specials in all the tricks you have to do to get your email through spam filters.
Atwood: Right, and it's not easy, the whole spam war, and there's a lot of collateral damage, to put it mildly.
Spolsky: One thing which I do, especially when you're emailing programmers, to get through filters, put a keyword in the subject that's unlikely to be a keyword in spam. So, in my case, it's joelonsoftware, in square brackets. Something that people can write regex, so they can white-list you, or so that they can train their Bayesian filter.
Atwood: Right, so that's why we title our's Viagra.
[09:55]
Spolsky: That's the title, with a back-tick, instead of an 'i'.
Atwood: Yeah, with a back-tick and a bunch of l337 words.
Spolsky: Use the Spanish initial, exclamation point, upside down exclamation point, as an 'i'.
Atwood: Viagra! From Stack Overflow! Why isn't our mail going through? I just don't understand it. You know who I pity? I pity the people who have to work for a company, say you work for a company where you have to talk to people about Viagra via email. How would you even do it? You can't send email...yeah.
Spolsky: I have a lot of trouble getting a mortgage, actually.
Atwood: Email, yeah, so that's email. I'm going to hopefully enhance that a little bit. I did improve the logon page experience a little bit, try to make it more seamless with the OpenID stuff, it's coming along. You know who's doing OpenID really well now, is, ah Google.
Spolsky: Yeah, because it's just a URL, you don't have to have your URL, it's just a URL.
Atwood: That's right. That seems to be the emerging standard, is you use the URL of the provider. Is Yahoo! is doing this, you just type yahoo.com, press Enter, and you get taken to the Yahoo! login.?? Or, if you have the right cookies in place, literally, it's like totally seamless.
Spolsky: Wait, but Google's is like, google slash, the number 8, slash.
Atwood: Yeah, Google's is kinda crappy.
Spolsky: So Yahoo!'s is just yahoo.com?
Atwood: Yes. And eventually, for Google, it will just be gmail.com. That will be the valid Open ID address for any user.
[11:16]
[58:20]
Atwood: People can help each other; on a one to one basis. Let me give you a crappy example from high school, but I think it totally emphasizes the human factor here. We were sitting in this high school English class and this girls says: does anyone have any gum?
Spolsky:Yep
Atwood: Right, she is just asking the room. She is not asking a person. And of course, nobody steps up and gives here any gum. 
Spolsky: right
Atwood: Then she turns to the person next? to her and says: Joe, do you have any gum? And he's like: here is some gum. This is what I am talking about. Like?you have to have that personal relationship cause people don't ignore each other. They ignore...
Spolsky: That's?a principle. That is a psychological principal called the "diffusion of responsibility". Because she was asking the whole room, the responsibility to answer was diffused.
Atwood: Yes, exactly. And I think that's what: If you give them a couple of copies of "Code Complete" and it's like "read it whenever". You know - maybe I read it, maybe I won't . But if you sit down and actually go through the code, the principles. You take your code and you say here in the book: we talk about "don't repeat yourself" and here in the code we have the same code in two places. It is a much more interactive and much more helpful on a one to one basis. I think that is really the only way to help programmers like that.
Spolsky: You know, this is sort of an interesting question. Because it sounds to me like the problem is that this person is not really motivated.
[58:56]
[incomplete]
Intro, advertising
Atwood: You're on the road, where are you again ?
Spolsky: Oh, in Miami Beach, and it sounds like it should be lovely right, it should be beautiful and sunny and warm, and...
Atwood: It's not ?
Spolsky: No, I just had a string of bad luck.
Atwood: You sound terrible, you have a cold ? 
Spolsky: I'm sorry, you know I had a cold until about 2 o'clock, and just as I got over the cold I got hay fever. 
Atwood: Wow. 
Spolsky: I can tell those of us with have hay fever know the difference between a cold and hay fever.
[01:42] 
....
[23:09]Spolsky: But they don't... people are too nice.? The people that are in power... the people that are really in power are too high... you know, the people that... they're too high above... they're high up there in the org chart.? They don't really know what's going on.? They have to rely on the people that are the middle-level managers to actually say, “this guy is not really pulling his weight.”? And those middle level managers are just nice guys, they don't want to be responsible for somebody losing their job.Atwood: That's right.? No, they're, that's totally true, totally true.Spolsky: You know, and so they sort of [?] things over and they try to be nice about it.Atwood: Well, it's almost like this whole recession thing like you keep bringing up.? Which I think is true, it's a lot of... it's an excuse for a lot of companies to sort of cut some deadwood without looking like the bad guy.Spolsky: Yeah, yeah.? And that's going to be... there's going to be a lot of that happening.Atwood: Right.? So, in short, it's a really, really tough problem, because you don't want to be a jerk.Spolsky: Yeah.Atwood:? And, you know, people need to make a living, but on the other hand... I don't know, on some business level it doesn't really make sense, so...Spolsky: Well, what can you do to help them find a career that they'll enjoy more?? I mean, I've known... you sort of have to address the specific issue about why they're not being such a good developer.? You know, maybe their skills lie more in the humanities than in the sciences, and maybe that means they should move into sales, or, you know, user experience, or marketing, or...Atwood:? That's a good point.? And I think we kind of touched on this in a previous podcast.? Whereas there's like a whole, sort of, ecosystem of stuff that goes on around the programming.? And maybe—at a large organization which is where I personally saw this—one of the advantages of having a large organization: there's tons of different jobs for everybody to try.? So maybe go through a rotation thing, say “hey, you know, instead of, just, you know, sitting down and programming all day, why don't you try one of these other things that we have in our organization that's kind of related in the same group even, or maybe in a different group.”Spolsky: It is very important...Atwood: Maybe this would be more of an IT... maybe this guy could be, like, a system administrator.? Maybe he'd be really good at that for example, you know, 'cause there's a lot of crossover there.Spolsky: There's a... it's true.? And you really have to look at the person's personality and figure out why they're not good.? There's one particular case that, I've known a lot of people like this, they find it hard to be developers because they're a little bit too obsessive-compulsive, they're just too... you know, they need to get everything exactly perfectly right every single time, and they never just give up and turn it in.? You know, they're just so... and they become too immersed in the details.? And, I've known some... I knew a developer who was like this and eventually they told him, “you know what?? You're going to be a tester.”? And he was the best tester on the team, and he was much happier.? And it just fit his personality a lot better.Atwood: Yeah.? Yeah, and I think maybe that's the best piece of advice here for this question, is just, you know, really encourage people to look strongly at related positions that aren't necessarily coding but, you know, in the same ecosystem, where they can actually help you and not feel like, okay, they're not really contributing, because that's not really helping the business.Spolsky: Exactly.Atwood: So that's good leadership basically, is figuring out what works for that person and, you know, what you have available and how to, you know gently sort of nudge them towards it.Spolsky: You could also probably make a good living as the house drug dealer for one of the clubs in this hotel I'm staying at... an allegedly five-star hotel!Atwood: Well, hopefully you'll survive this hotel experience.[26:26]
....
[48:51]
Atwood: Well, actually...
Spolsky: But to imagine what the ideal puppet would say in this situation and then make the puppet say that thing.
Atwood: Wow, thats very difficult though, cause people get very emotional. I think you almost have to be like Spock. You have to be, like, above emotion and
Spolsky: Right
Atwood: To me it's...You don't have to be really above emotion, but I think having a sense of humor goes like, 90% of the way towards fixing the entire problem. If you're a very passionate person, you'll still say things, and you know to be fair a lot of times when I interact with people, like I got chastised in an email for closing some, er declining some uservoice items in a way that the user felt was not really respectful. I disagreed a little bit, I don't think it was disrespectful, but it was curt because I have a lot of things that I have to look at.
Spolsky: Yeah, it's hard to get the tone to come across right on an email
Atwood: Yeah. Brevity isn't always the right way to do that, and I apologize for that but, you know, I don't always do it perfectly either is what I'm trying to say. And I think you had a blog entry about this deli owner who was arguing with the woman.
Spolsky: Right
Atwood: She had a bad service, and she was telling the owner of the deli, hey I had this really bad service, I come here all the time, and this waiter was really rude to me. And the guy actually argued.
Spolsky: Exactly [Italian accent] Oh, he's my best water. He's not a-rude to you, you must have done something wrong.
Atwood: Right. This is my point. Don't make it worse. I don't think I make it worse. I may not do a perfect job of handling it, but I do not think that I make it worse, um, hopefully. That's my strategy for dealing with some of that stuff.
[50:25]
.... 
[70:23 ends]
Outro, advertising
[71:33]
[incomplete]
Intro, advertising
Atwood: Are we on President number 44 now ? 
Spolsky: Maybe? There's a question as to whether you count that guy that was President twice.
Atwood: <laughs>
Spolsky: { Not sure, please check } And wasn't there somebody who had been president for five minutes?
Atwood: Oh gosh I don't know, my American history isn't good enough to cover that.
Spolsky: Do we have a podcast guest?
Atwood: No, no, I had to { Fill this in }
Spolsky: Oh, next week maybe.
Atwood: Do you wanna play that song, there was a song.
Spolsky: Nobody like us.
Atwood: <laughs> That's not true.
Spolsky: We had a guest song, I don't know, let me look up onto YouTube and see whether I can find it.
Atwood: Yeah.
Spolsky: What was it?
Atwood: It was a parody of Let It Be, is it what it is called?
Spolsky: Right, it was about the C programming language.
Atwood: Yeah, I actually contacted that guy. I had a link here, I'll send it to you.
Spolsky: Here it is.
Atwood: I contacted that guy on YouTube but everytime I done that...
[Spolsky plays Write in C song at the background until the beginning of the chorus]
Spolsky: Write in C. Alright, enough of that word.
 Atwood: That was really funny, though, I enjoyed that.
Spolsky: It was a good one, it's a nice, hardcore... so you actually contacted this kid?
Atwood: Well, I have. In the past I wanted to contact people on YouTube [and] you can use a contact form, because I have a YouTube account. And I contact him, explain { Fill this in }, who you were, who I was and of course there was no response at all. <laughs> Which is pretty typical, I mean YouTube is just not a good messaging... uh, mechanism.
Spolsky: The first thing I'd do if I post a video to YouTube would be to install some kind of, like, email electrification, zapper and nukifier to prevent everybody contacted by anyone.
Atwood: Yeah... so we are { Fill this in }
Spolsky: Yeah, it's not paying the proper royalties to the Beatles anyway. <laughs> We'll link to that from the shownotes. Awesome song, Write in C.
Atwood: That's right, Joel's favourite song. Write everything in C, because Joel does in fact write everything in C, don't you, Joel?
Spolsky: I started using a little bit of C99, the latest version of C, which let you declare variables after you written some statements.
Atwood: Isn't there like a... well no, there's is another version of C++ coming out, like, 0x something?
Spolsky: Yea, C++0x. { Fill this in } they just haven't decided what year it's going to ship yet.
Atwood: I see.
Spolsky: I guess it's either C++09 or nothing, they are kind of running out of 0's.
Atwood: Mmm, yea, as I'm not a C programmer, I don't really keep up with that stuff, but occasionally...
Spolsky: Do you know that I had lunch with Brain Kernighan?
Atwood: Oh right! That's awesome. How did that go?
Spolsky: You know, he told me what he thought was the one mistake of C programming language. Now he wrote the book The C Programming Language but he did not invent C. He work with the folks that did, he invented the language is called Awk... umm, among other things, probably. But it's an awesome book, and he said that probably the only mistake in C was the operator precedence of the bitwise logical operators as compared to the equality operator. He thought that the bitwise logical operators should be higher priority than the equality operator. And other than that he thought there wasn't really a mistake in the language, [and] I tend to agree with that. I'd say that's kind of true.
Atwood: Certainly it's been wildly popular. I mean, C has been the backbone of a lot of programming [languages], so, by that measure, it's wildly successful.
Spolsky: Yeah.
Atwood: I don't think that the criticism that it is a low-level or medium-level language, that was by design, that was the intent of C.
Spolsky: And don't forget the context, it was 78 or something, right?
Atwood: That was a long time ago.
Spolsky: So, you have to put things in context. The stuff in the C that I consider as accidental complexity like stuff you have to manage yourself, like memory management, things like malloc() things for yourself you don't have to do anymore because we have figured out ways to let the compiler and the runtime do it for you with garbage collection... or even with the reference counting like they had in Visual Basic. So the stuff in C that just doesn't have to be in a programming language anymore, but that doesn't mean that it wasn't a good programming language for its time.
Atwood: Absolutely. Now it was hugely influential -- C#, Javascript... and the other languages that looks like C, which... I was kind of bitter about, actually. I was never a big fan of sort of the way select...
Spolsky: That wasn't C, that's Algol, right? C was looking like Algol, I mean, those are all the strutural programming languages that was meant to look like Algol68.
Atwood: Right, but I blame C. Because it was just so much popular. I don't know how popular Algol was, but certainly, as long I've been a programmer, C was like, the touchstone/cornerstone language and it seemed a lot of language decisions like in Java and C# were made so that people wouldn't look at the code and freak out "I don't recognize this! This doesn't look like code I could understand." So they made it look similar to C to reduce the learning pain. I'm a little bitter about that because I always felt that I really dislike the look of C.
Spolsky: Really?
Atwood: Yeah.
Spolsky: So clean and... mechanical?
Atwood: For one thing, the curlies... like when you are ending curly braces, you never know what you are really ending. Just another curly brace -- I guess it's kind of like the Lisp problem, you have paren(thesis), you never really know the parens are closing. This is just a preference, but I'd like a little more verbosity in the ending of blocks, that I know exactly the block that was ended versus just....
Spolsky: That was a weird thing... You know there were programming languages where the end matchs the opening of the block, so like Basic: If... End If. But then again, what if you have nested if's? You still don't exactly know which one it goes to.
Atwood: Yeah, that's true. But it's really just a tradeoff, it's just a preference. It's not written in stone obviously.
Spolsky: I come to like the fact that Python that you just don't write an end: you just unindent, and so the indenting actually reflect the structure.
Atwood: That was actually a cool aspect of Python. I never really work in Python actually at all, but I always respected the choice that it was a brave choice to make the whitespace to carry the meaning and actually enforce the whitespace, and thought that was very cool. And one thing I do agree with -- and coming from a Basic background, which is the language I knew for a long time, I eventually grudging agreed that having carraige return be your line terminator.
Spolsky: That's Unix, that's not really...
Atwood: No, no, what I mean like, so in C# or C, until you put a semicolon in, it's one line.
Spolsky: Oh, I'm sorry. I thought you meant the line separator was the carraige return and? linefeed. You are talking about the semicolon versus just the line end.
Atwood: Right. At first I was bitter about that, because I was like "I have to type the stupid semicolon at the end of every line", but then I realize that it gives you so much flexibility because there's a lot of situations that you get into in Basic where you want to continue the line you have to use some crazy, like, line continuation marker like underscore.
Spolsky: It's not crazy, it's awkward.
Atwood: It's just awkward because the semicolon way, I think, is much better. And I think any language you have to have an explicit line terminator, I don't think it's a good idea to use carraige returns as a line terminator.
Spolsky: Hey do you know what Kernighan's second favourite language is?
Atwood: What's that?
Spolsky: Basic.
Atwood: <laughs> Really? Did he tell you that, today?
Spolsky: Yeah.
Atwood: That's crazy.
Spolsky: No, it's true, he said that's sort of a secondary language. He told me that "Are they really coming up with another version of VB6? 'Cos I really don't like VB.NET."
Atwood: Wow.
Spolsky: Yeah, he has done a bunch of stuff like, for example, he had some kind of a big complicated library that did all kinds of interesting optimizations and it didn't really have a very good UI like input/output thing. So they did the input/output UI through Excel, or you'd just type things into a spreadsheet and then he had this VBA code that basically linked these COM objects that were written in C to interface with them.
Atwood: Cool.
Spolsky: But in his class, I think, he teaches little bit of Visual Basic, a little of COM programming, a little bit of.. . he teaches a lot of other things, a little bit of Awk, a little bit of command line... this, that and the other things. I think it's important for programmers, especially the college levels, to learn a lot of little languages and to use the right tools for the job. There's some stuff that I think like, if you give me a problem that most people would solve it in Perl or Awk, I might solve it with Excel, like in kind of a one time way. Like's it's a problem as you get a big old file and you need to separate the first name from the last name, put the phone numbers, capitals, multiply this by that... Some kind of like column-wise kind of problem, I'd often do it in Excel I know how to do that really fast really easily.
Atwood: I agree with that. I actually talked about that in a blog post before, I see the future of languages as a lot of small languages that are good in specific things. And you'd switch between them in a fluid way, to when you are like "Oh, this is a set-based problem" or "Oh, this is a database problem" or "Oh, this is a text manipulation problem" and you sort of drop in a language that is good in that thing. I'm a big fan of that, I never really liked the idea that, and I think a lot of developers... let me give a specific example, they hate SQL for some reason, like they really don't like using SQL as a language or manipulating it, so they come up with this huge layer of abstraction just to get rid of SQL.
Spolsky: Yeah, it's stuff that they should just probably be doing...
Atwood: Yeah! And to me it's contorted!
Spolsky: { Check this line; probably wrong } As they learn more about SELECT statements, they'd realize that there's a better way to do it.
Atwood: Yeah, I mean SQL has its faults, to be sure, but it's really good: basic set-based data manipulation, I think. I actually like SQL a lot, and I realize that it's not perfect.
Spolsky: Yeah. The biggest weakness, especially for SQL Server, is any kind of interesting string manipulation you tried to do...
Atwood: It's painful.
Spolsky: ... it just falls all over the place. So if you just try and do something where its like splitting of word, ... I don't know, just anything that's inside the columns, there's not enough functions there, like they don't even have the proper, like Left, Mid, IntStr... like the most basic string functions.
Atwood: We actually created a user-defined function to bring .NET regular expressions into SQL Server. You can actually use managed code, it's not super-super fast, obviously, because it has to call to .NET.
Spolsky: How many years has SQL Server been out that they can't put regular expressions into T-SQL?
Atwood: Yeah, I was really shocked, because...
Spolsky: { Fill me in }?... this is such an obvious thing, just go friggin' put regular expression in this there! I know they are not fast, but everybody have to write COM objects now if you want use a regular expression in a SQL SELECT statement? What year it is?
Atwood: Well, it's not a COM object, it's a .NET managed code object. So it's not quite as bad as COM, but there's definitely a huge speed penalty because you are transitioning between those two worlds. Right?
Spolsky: If you do it in COM, then I'd say fast. But yeah, and your SQL queries can crash the whole machine. <laughs>
Atwood: Right.
Spolsky: ... caused by memory or god knows what. Sometimes it's just surprises me like what on earth they could have added in SQL:2008 if it wasn't that?
Atwood: Well, one thing: remember we talked about the Oslow, the modelling language, the DSL... thing we are talking about?
Spolsky: Yeah, I know, and I'm { Fill me in } about it and taped three episodes in which we get all kinds of Oslow modelling archives.
Atwood: Well, maybe what it's partly about, like sometimes, as a programmer you realize that you are trying to solve a problem and sometimes the language itself is sort of getting in your way at some fundamental level. It's not good at X, where X is... like in the case of SQL, it's not good at string manipulation. So the language is getting in your way. So what do you do? You could sort of roll up your sleeve and say "What if we could change the language itself?" And this is sort of going down the rabbit hole and to like Lisp and like Ruby and those languages that you can redefine the language and write constructs that perform the same as the language.
Spolsky: Be careful as somebody's getting out there got an email from... { Fill me in } <laughs>
Atwood: You don't agree with that?
Spolsky: Well, OK. Let's carry on that thought then.
Atwood: OK, that's as far as I'm going to go with this. I think sometimes you want to fix the problems, like, in the language, like you don't want to shell out to another executable or, you know, come up with some other of Rube Goldberg type solution. You wanna...
Spolsky: That's the trouble. The trouble is with the exception of Lisp, languages that are powerful enough to fix the problem in the language don't have these problem. They don't really have to. The exception of Lisp, where you start with language that had nothing and a really good macro capability so that you can extend the language to make it into whatever kind of language you want, so long you like parenthesis, and that's all very cool. But, I mean, the truth is, most of the language I use, either don't have the problems, or that they just aren't extensible enough to fix the problems. To give you a great example, C# is not quite extensible enough... let's say that the problem that I have is I don't like to declare types of variable, the arguments and stuff like that, and I want a dynamic version of the language... maybe that's my problem. Well, C# can't fix that. They are getting closer and closer, they got that bar thing now but it's not really a dynamic language. There's all kinds of places that where you can't... but the language is not powerful enough to fix that part of the language.
Atwood: Well, let me give you a more basic example. In C#, one thing that I find to this day very, very annoying, is when you do String::Format, so you are doing substitution within a string, there's all these cool parameters you can use to figure out, like, what type of date you are going to substitute, what it's going to look like and things like that. All the actual subtitutions themselves are numbered, so you know, {0}, {1}, {2}... which is based on the order of the paramters. Why can't I do named parameters? Why can't I give this a name, like ... you know ... LastName? That'd read so much better than, you know, {0}: it just say {LastName}. And you really can't do that. You can come up with extensions .. and .. and? some sort of workaround-dy kind of stuff, but you can't fundamentally go in and .. and .. you know ... add your own native function that does it that just mysteriously appears ... uh ... in the runtime. Whereas, in a language like Ruby, I think that's pretty common when you see something...
Spolsky: <interrupts> You can do that.? If you wanted to write your own little templating string formatting thing, you could do that in C [sic], couldn't you?
Atwood: In C#? You can, you can write an extension method. But it's not really the same as making it part of the language, it's sort of just exists only in your code.
Spolsky: So it won't work for other people's libraries that are gonna call the built-in format and stuff?
Atwood: No, I mean it does work. You can write your own function and you can call it. But at some level you just want to make a global fix to some of the stuff, because you realize that there are some essential wrongs in the world that you want to right, ... humm ... or at least for some version of it you want to right those wrongs. But it's not really possible in these [languages]... C# mostly being a static language. One cool thing that they are doing actually, they are doing named parameters to functions now. I don't know if you see all of those in C# 4.0?
Spolsky: Uh-oh.
Atwood: You don't like named parameters? So you have to say seven parameters, you can call them in any order as long you specify the name of the parameter that you want.
Spolsky: That's a little bit useful because it makes the code that's calling the function have the ability at least to be a little more self-documenting.
Atwood: That's right, so if you have seven parameters to a call [and] you are using only the last one, you don't have to put in "null, null, null, null, null, null, 3".
Spolsky: Why do you want a function that take seven parameters and you only need to use one of them? Like, why not make it a class that has seven properties and you only have to set the ones that you want to set?
Atwood: Well, this is about flexibility. This is about naming things versus order, this is the same as the string problem, isn't it? For some situations you just want to give things names and call them...
Spolsky: <interrupts> You know what, I liked the named paramters because I actually personally made them put into in VBA because we had a lot of functions in Excel that took a lot of arguments and sometimes you really only wanted to use the third and the seventh, depending what the function did. And usually when you look at the documentation for those functions, it's because the functions were defined in a bizzare way, like the documention would say: "If you provide the first argument and the third argument, this prints a piece of paper. If you provide the second argument and the seventh argument, this emails a letter to the email address in the seventh argument using the formatting of the template of the second argument. Unless you also provide a seventh argument, in which case, it rolls the dice and decides whether to turn off your screen or blow up your Macintosh.
Atwood: <laughs> I agree. I mean a parameter...
Spolsky: <interrupts> At some level you're like "Boy...! If these arguments were names, it'd be so much easier." <laughs>
Atwood: On some level I agree, you'd be asking like if you have a function with seven parameters, the question you should be asking is not "How can I call the seventh parameter very easily?" but like "Why the hell do we have a function with seven parameters?"...
Spolsky: <interrupts> Right.? Shouldn't there be another function that just takes the seventh parameter? Maybe that's just a different ... yeah ...
Atwood: But to me it's a different discussion ... but I do agree with it.? Like when you see stuff like that you should question it of course.
Spolsky: <interrupts> Right. So I didn't ... humm... mea culpa I did not question this and I just knew that we had a lot of long functions that took alot of arguments ... and I insisted on these named parameters being added to VBA, which they did.? And they had to use the colon equals syntax because the equals syntax would do a boolean expression and ... you know ... either pass true or false.? So in order to name the parameters you had to use ... I think ... colon-equals because colon did something else and that's the only way they could do it in VBA.? So ... they did that and lo-and-behold when the converted all the old Excel macro functions into the more object-oriented model for Visual Basic for Applications where instead of having a function called "MoveWindow" which takes like 18 arguments and they all do different things, we now had a Window class and it had a bunch of parameters [sic] and if you wanted to move it, you changed the Left and the Top ... and then it moved.? Humm... and lo-and-behold when we were done making this object-oriented thing, we didn't have any functions left that took alot of arguments, with a couple of tiny exceptions. Humm... and so ... the named arguments feature turned out not to be as important anymore, whereas if you look at the previous versions, like if you look at Word Basic 1.0, every dialog box had a function corresponding to it.? So if it was like the Format Paragraph dialog box and Format Paragraph has 83 little edits in their that do all kinds of things like the line-spacing and the indent .. .and those little things, there would be a FormatParagraph function that would have 83 arguments and the only way that you could specify which ones you actually wanted to change is using the named arguments.
Atwood: Right.
Spolsky: Wow.? We went into that a little too deep ... I feel like we've got everybody now turning us off.
Atwood. <laughs>. Well let's switch gears.? I have something else...
[Spolsky interrupts Atwood with some more write in C]
Spolsky: Oh sorry.? What?
Atwood: <laughs>.? That's a great song.? So we did have one milestone on StackOverflow that I am sorta remiss in talking about the day it happened.? We actually ... had our 100-thousandth question that was posted ... and no, I don't know what the actual question was <laughs> ... keeps coming up ... uh ... it's hard to tell because deletions affect the order.
Spolsky: Well what's the one that has 100000 as it's ID in the database?
Atwood: That happened a long time ago because we share ID's for a bunch of stuff ... for like ... questions and answers share ID's ... so ....
Spolsky: Oh.
Atwood: Yeah.? Those are both records in the same table.? We don't really distinguish a question and answer in that way.
Spolsky: Is that a good thing?? Are you gonna like ... revamp?
Atwood: No.? No, that parts not really changing ... humm ... because the difference between a question and answer is pretty minimal.? I mean questions have a title and questions have tags but other than that, they're pretty darn similar ... so we just have those two fields.? Well, there's actually more than that ... there's a bunch of fields there and all ... but ... it's just easier to have 'em in one table ... we think.? So we don't know which was the exact 100000'th, but that happened sometime on Wednesday February 25th.? That was an important milestone, so congratulations to all the StackOverflow users who got us there, that was nice.? The other thing I talked about in the blog post was that Jeff Dalgas set up this thing called Cacti for us ... have you heard of this?? Cacti is a graphing aggregation tool.? It's an open source tool that will take a bunch of inputs from typically networking and servers and just graph it for you .. automatically.? You can just give it all these inputs and it'll do weekly, monthly, daily ... all this really cool graphing stuff.
Spolsky: Just like to make pretty pictures to put up on the wall in your bedroom?
Atwood. Uh... no ... we wanna keep track of ... what we have it set up to do now is look at our bandwidth.? Because we're a little concerned about bandwidth.? Because we changed hosts and we negotiated a certain amount of bandwidth.? We were concerned that we were exceeding that and it turns out we are actually substantially exceeding what we thought we were using ... 'cause we changed from the old billing method that we had which was purely based on how much bandwidth gets used in a given time period.? I think we had 1250 gigabytes per month which we didn't even really get close to.? But the new billing model's what's called the 95th [percentile] ... burstable ... it's burstable billing.? At the 95th percentile.
Spolsky: That's what almost everybody does.
Atwood: Yeah, and it's a little bit harder to calculate, but it's based on your highest burst period for a certain amount of time.? 95th percentile ends up being like 30 minutes.? So if you spend 30 minutes...
Spolsky: <interrupts> If you sample your bandwidth usage ... like every minute over the course of a month and throw away the five percent of the highest ... you know, the highest.
Atwood: I see.? Right.? Yeah, it's kinda weird but Cacti does this like by default, so....
Spolsky: <interrupts> Doesn't your ISP give you like... our ISP gives us things where we can look at these reports on their side on their port, they can tell us all this how much they are throwing at us? { Check this part }
Atwood: They might, but I think Jeff was familiar with this Cacti tool, it's easy to setup. It didn't take him... [it] take him maybe one day for that. And now we can see ourselves. So the answer is we are using the 95 percentile level, about 6Mbits, which ends up being 750KB/s? That was actually quite high.
Spolsky: 750KB/s?
Atwood: KB/s, at our peak.
Spolsky: So that's like a massively saturated DSL line.
Atwood: Err... no, it'd be more than that. That's almost 1MB/s, Joel. I mean think about we're close to get to 1MB/s. Anyway, for what it's worth.
Spolsky: So, 10Mbits. They usually do these in bits for some reason.
Atwood: Yeah, I don't like bits. Like to me I...
Spolsky: <interrupts> And { Fill me in } too, it's not fair.
Atwood: Yeah, bits versus bytes is annoying. I sort of convert to bytes because I think bits are ridiculous bit of measurement. I mean unless they do...
Spolsky: <interrupts> That's what they do. It's standard.
Atwood: I know, that doesn't mean I have to like it. So I put both notations.
Spolsky: Is that just like you the stop bit and the start bit and just a extra bit for the...?
Atwood: I research this a while ago and I don't remember the rationale. I don't remember, you know, the kilobits versus kilobytes. So we actually went through and since we are using more bandwidth than we thought we realize text over... text overflow <laughs>...
Spolsky: What does our site call anyway? <laughs>
Atwood: It's Stack Overflow. But what I'm trying to get to is that most of our site is text, so in a way it is a text overflow. If you look at our site, what images are we serving up? The logo, the vote buttons... I mean these are tiny, tiny images, really. We hardly... we don't do any image hosting locally. So any images you see on the site is from a third party site almost by definition. So the fact that we're going through almost 750KB/s peak of pure text, and compressed text at that, because for a long time we had the gzip religion, which is that everything that you serve should be compressed because it's just an utter no-brainer to compress 'cos you just have ridulous amount of CPU time and, like, tiny trickle of bandwidth. Plus it's just a better experience, right? You get the page faster, it's just better anyway you slice it. The only time not to do it is for some reason every CPU you have is pegged at 100%, then you don't want to be doing compression, but that's such a rare case. So we revisited it: there were a few edge cases we weren't compressing. I found out that in IIS, I think 6 and 7, it will not compress anything that's sent to a proxy, like if it sees "PROXY"...
Spolsky: <interrupts> Oh, IIS6 won't even compress anything that comes from a program.
Atwood: Yeah, 6 has some issues. 7 doesn't - finally, acceptably. But there are some caveats which is that if it sees it's a proxy or if it's HTTP 1.0, it won't compress. Now the weird thing is that a lot of proxies, for some reason, will say "Hey, I'm a HTTP 1.0 proxy."
Spolsky: How it was HTTP 1.0?
Atwood: I know, this is the thing: HTTP is like the oldest standard in the world, almost. It's 10 years old! It's been like 7 years. It's like, can we move on to 1.1? What's the problem here?
Spolsky: Longer than that, I think.
Atwood: Yea, we were really surprised. There was a lot of (a) proxies; and (b) proxies that report themselves "Ay! I'm HTTP 1.0".
Spolsky: With HTTP 1.0, maybe I'm getting this wrong here. I'm pretty sure HTTP 1.0 doesn't have like GET where you give it the URL including the full URL.
Atwood: I'd looked it up when I wrote this blog post and I couldn't really tell what's the difference between 1.0 and 1.1. I know it was somewhat significant but I can't remember the details. I couldn't find a good article. Probably because the world moved on to 1.1. Nobody gives a crap about 1.0.
Spolsky: No, I don't think you could even host two sites on one machine with two different top level URLs with the same IP address. I don't think you could do that in 1.0, I think you need 1.1. Because in 1.1 they finally realize you specify the entire URL in the GET line instead of the... because originally there was an assumption that once you get to a webserver there's only one webserver living there for one top-level domain in DNS. You see what I'm saying? So if you have A.com and B.com running on the same IP address, with HTTP 1.0 you would just connect and say "GET /" and wouldn't know what to send you, so you couldn't do that. And so HTTP 1.1 corrected that and said "Now you have to say "GET http://A.com/"".
Atwood: I know what you mean.
Spolsky: The idea of multi-hosting it goes back to, like, 1995, pretty much. Like HTTP 1.0 literally did not work. I'm probably getting this all wrong.
Atwood: <laughs> Well, the point is that HTTP 1.0 is ancient and yet there's a lot of proxies out there that were just happily telling the world "Hey! I'm HTTP 1.0! Look at me!" <laughs> And IIS sees that, and like "guess what, you aren't getting compression", and we see quite a bit of traffic from proxies.
Spolsky: And can you... what if you send them the compressed version then what would they do? The proxies...?
Atwood: That was the other thing. Well, the other ironic thing is while these proxies will report themselves as 1.0, and at the same time, in this very same request they'd say give me compressed content. <chuckles> I'm not entirely sure compressed content was invalid in 1.0, I couldn't quite tell. So, anyway, we resolved the proxy issue.
We also had an issue that feeds, RSS feeds, weren't being compressed due to some of the vagaries of ASP.NET MVC, the version we are running which is still not the latest version, unfortunately. We resolved that, so every bit of text you see or can retrieve from Stack Overflow should be compressed.
Now, the question you sort of inferring there is can you force compression for clients that didn't even ask for it. That's sort of the nuclear option, where you are technically only supposed to serve a compressed content if the client says "hey! I want compressed content if you can give it to me." So it's a little sketchy to take a client that didn't ask for it and sort of force it down their throats.
Spolsky: Maybe some guy's command line web browser thing that they wrote. Not that they deserve it.
Atwood: It is irritating, 'cos I would going to this sniffer and watch the traffic. And you do sort of wonder why are this... and you know, the worst thing is crawlers that aren't smart enough, like Alexa's crawler is so dumb it won't even request compressed content. Now Googlebot does, and I think other well-written bots do but there's no reason in this day and age to ever send anything except for compressed content... HTTP content over the wire.
Spolsky: Is there anybody alive anymore in Alexa? You get that feeling that they wrote that in 1997 and then they fire all the people but they forget to turn off their servers. <laughs>
Atwood: <laughs> They are still out there. I read their little...
Spolsky: <interrupts> Yea, I know... huh?
Atwood: They have a little blog, and I read their little blog and... yeah.
Spolsky: Is it still an IE only toolbar?
Atwood: Well yeah. So... I guess let's give some background for the listener who aren't familiar with Alexa. So Alexa's claim to fame was that they could tell for any website how much traffic they were getting, theoretically.
Spolsky: From IE.
Atwood: From... well, that's the question, how could they do this? And the answer is, they had a browser toolbar, the Alexa toolbar, that was install in lots and lots of versions of IE. I don't think it's true anymore, but in the battle days, it's in lots of lots of version of IE.
Spolsky: No, I mean, you have to install it. People would download it and install it allegedly. I don't think it came with IE.
Atwood: Really? I thought it was bundled into it in some scenarios.
Spolsky: Maybe on some, like, I bought a laptop from, you know, Walmart and it had 48,000 things that were in the list. But mostly they just tell people to download it and a small percentage of people did and they decided that was a good enough [toolbar].
Atwood: Right. They were reliant on essentially sampling, which is the sample is people on the Internet who happen to have Alexa installed would go to, say, Walmart.com, that information would be transmitted to Alexa. And Alexa would make an assumption, "well, if one user went, that's representative of N-thousand real users.
Spolsky: The data is absolutely meaningless. No reasonable people have the Alexa toolbar installed. So they always under-report if it's an interesting website. I mean, how many programmers need one of these crappy toolbars that lets you.... It's like, do you remember? When there were the websites that let's you change the cursor to be like a little Dilbert. Comet Cursor, remember that? You got those website that'd be like "Would you like to install Comet Cursor ActiveX control?" You'll be able... if you go to the Dilbert website, your cursor will turn into like Dilbert and his tie will be the pointer.
Atwood: <laughs> You know a lot about this. You know a lot about this, I gonna to say.
Spolsky: A lot of people installed that damn thing. It's like it's just a 10KB download or whatever.
Atwood: Yeah, I guess. I always had the association of Comet Cursor with like... spyware and malware and stuff like that.
Spolsky: Right, I don't think it was any... [it was] neccessarily malware. Or maybe there was.
Atwood: Maybe early on there wasn't. But I think quickly, there was one of the things when their business model devovles so rapidly.
Spolsky: Imaginely, they're like "we could take over half of your screen and show you Viagra ad, ... ad { << Check + Fill me in } as is, from now until the end of time and prevent you from ever installing it, then at least then we could make a buck".
Atwood: Yeah. That's a whole unfortunate part of computing history.
[34:50]
....
 
[47:03]

Atwood: You've illustrated an important principal here, which is that "architecture" implies divorcing the people that are doing the work from the people that are making the decisions. This is always in my experience, super, super dangerous. So to the extent that the architecture group or the architect is not really with you in the trenches, helping you do the work, they're not going to make the right decisions.?

Spolsky: They just don't have any of the information.?

Atwood: They don't have any of the context, any of the information.? i think that is the root problem that I was trying to get at.

[47:31]

.....
[68:10 ends]
Outro, advertising
[69:20]
 
[incomplete]Intro, advertising[01:15]Atwood: I saw you wrote another, well we don't call it a blog because you get angry when you call your writing a blog.Spolsky: <laughs>, it's not a blog !Atwood: <laughs>, it's not a blog !Spolsky: It was an extended tweet.[01:26]....[72:13 ends]Outro, advertising[73:23]
